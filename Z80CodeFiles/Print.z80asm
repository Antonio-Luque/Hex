; ----------------------------------------------------------------------------------------------------------------------
; Print.z80asm
; Coded by Antonio Luque
; ----------------------------------------------------------------------------------------------------------------------

CHAR_SET                EQU     FONT-256                    ; address of character set data, adjusted for ASCII codes

; ----------------------------------------------------------------------------------------------------------------------
; Print_Players: print "Player" and "Speccy" strings in the corresponding positions
;
; Input:    A = player color (CYAN_COLOR or RED_COLOR)
;
; Output:   -
;
; Destroys: A, BC, DE, HL
; ----------------------------------------------------------------------------------------------------------------------
Print_Players:
                        ld      de, STR_PLAYER              ; DE points to "Player" string address
                        ld      bc, STR_SPECCY              ; BC points to "Speccy" string address
                        ld      hl, $5002                   ; HL points to red string screen address
                        cp      RED_COLOR                   ; is player color red?
                        jr      z, Print_Players_Strings    ; yes, print players strings
                        ld      de, STR_SPECCY              ; DE points to "Speccy" string address
                        ld      bc, STR_PLAYER              ; BC points to "Player" string address
Print_Players_Strings
                        call    Print_String                ; print "Player" or "Speccy"
                        ld      d, b                        ; DE points to "Player" or "Speccy" string address
                        ld      e, c
                        ld      hl, $4098                   ; HL points to cyan string screen address
                        jp      Print_String                ; print "Player" or "Speccy"

; ----------------------------------------------------------------------------------------------------------------------
; Print_Clear_Alert: clear a printed alert message below the current player input move
;
; Input:    -
; Output:   -
; Destroys: A, BC, DE, HL, IX
; ----------------------------------------------------------------------------------------------------------------------
Print_Clear_Alert:
                        ld      de, STR_EMPTY6              ; DE points to a 6 blanks string address
                        ld      c, WHITE_FLASH0             ; set (clear) alert message color
                        jp      Print_Alert_XY              ; print (clear) alert string

; ----------------------------------------------------------------------------------------------------------------------
; Print_Alert: print an alert message below the current player input move
;
; Input:    DE = alert message string address
;
; Output:   -
;
; Uses:     TOKEN_COLOR (current token color)
;
; Destroys: A, BC, DE, HL, IX
; ----------------------------------------------------------------------------------------------------------------------
Print_Alert:
                        ld      c, WHITE_FLASH1             ; set alert message color
Print_Alert_XY
                        ld      ix, $5AA2                   ; IX points to red alert string attribute address
                        ld      hl, $50A2                   ; HL points to red alert string screen address
                        ld      a, (TOKEN_COLOR)            ; check current token color
                        cp      RED_COLOR                   ; is token color red?
                        jr      z, Print_String_Color       ; yes, print alert string with color
                        ld      ix, $5938                   ; IX points to cyan alert string attribute address
                        ld      hl, $4838                   ; HL points to cyan alert string screen address
                        jp      Print_String_Color          ; print alert string with color

; ----------------------------------------------------------------------------------------------------------------------
; Print_Wait: print "WAIT" message at current player input move location 
;
; Input:    -
;
; Output:   -
;
; Destroys: A, BC, DE, HL, IX
; ----------------------------------------------------------------------------------------------------------------------
Print_Wait:
                        ld      de, STR_WAIT                ; DE points to "WAIT" string address
                        ld      c, WHITE_FLASH1             ; set wait message color
                        jp      Print_Move_XY               ; print wait string

; ----------------------------------------------------------------------------------------------------------------------
; Clear_Move: clear a printed player move at current player input move location 
;
; Input:    -
;
; Output:   -
;
; Destroys: A, BC, DE, HL, IX
; ----------------------------------------------------------------------------------------------------------------------
Print_Clear_Move:
                        ld      de, STR_EMPTY4              ; DE points to a 4 blanks string address
                        ld      c, WHITE_FLASH0             ; set (clear) move string color
                        jp      Print_Move_XY               ; print (clear) move string

; ----------------------------------------------------------------------------------------------------------------------
; Print_Move: print a formatted move at current player input move location 
;
; Input:    -
;
; Output:   -
;
; Uses:     TOKEN_COLOR (current token color)
;
; Destroys: A, BC, DE, HL, IX
; ----------------------------------------------------------------------------------------------------------------------
Print_Move:
                        ld      de, STR_MOVE                ; DE points to formatted move string address
                        ld      c, WHITE_FLASH0             ; set string color
Print_Move_XY
                        ld      ix, $5A82                   ; IX points to red move attribute address
                        ld      hl, $5083                   ; HL points to red move screen address
                        ld      a, (TOKEN_COLOR)            ; check current token color
                        cp      RED_COLOR                   ; is token color red?
                        jr      z, Print_String_Color       ; yes, print move string with color
                        ld      ix, $5918                   ; IX points to cyan move attribute address
                        ld      hl, $4819                   ; HL points to cyan move screen address
Print_String_Color
                        call    Screen_Apply_Color_6        ; apply color to string area
; ----------------------------------------------------------------------------------------------------------------------
; Print_String: print a string on the screen
; Based on assembler course by sromero: https://wiki.speccy.org/cursos/ensamblador/gfx4_fuentes
;
; Input:    DE = string address (ending with 0)
;           HL = string screen address
;
; Output:   -
;
; Destroys: A, DE, HL
; ----------------------------------------------------------------------------------------------------------------------
Print_String:
                        ld      a, (de)                     ; get string character
                        or      a                           ; is it 0? (end of string)
                        ret     z                           ; yes, return
                        push    de                          ; store pointer to string address
                        call    Print_Char                  ; print character
                        pop     de                          ; restore pointer to string address
                        inc     de                          ; move DE to next string character
                        inc     l                           ; move HL to next screen column
                        jp      Print_String                ; repeat until end of string

; ----------------------------------------------------------------------------------------------------------------------
; Print_Char: print a character on the screen
;
; Input:    A  = character to print (ASCII)
;           HL = character screen address
;
; Output:   -
;
; Destroys: A, DE
; ----------------------------------------------------------------------------------------------------------------------
Print_Char:
                        ld      de, CHAR_SET                ; DE points to charset address
Print_Tile:
                        push    hl                          ; store pointer to character/tile screen address
                        ld      h, 0                        ; set character/tile index in HL
                        ld      l, a
                        add     hl, hl                      ; a character/tile is 8 bytes long
                        add     hl, hl
                        add     hl, hl
                        add     hl, de                      ; move HL to character/tile address
                        ex      de, hl                      ; DE points to character/tile address
                        pop     hl                          ; restore pointer to character/tile screen address
                        push    bc                          ; store BC register
                        ld      c, h                        ; save high byte of character/tile screen address
                        ld      b, 8                        ; number of character/tile bytes (loop counter)
Print_Tile_Pixels
                        ld      a, (de)                     ; get character/tile byte
                        ld      (hl), a                     ; put character/tile byte on screen
                        inc     de                          ; move DE to next character/tile byte
                        inc     h                           ; move HL down one pixel-line
                        djnz    Print_Tile_Pixels           ; repeat for each character/tile bytes
                        ld      h, c                        ; restore high byte of character/tile screen address
                        pop     bc                          ; restore BC register
                        ret
