; ----------------------------------------------------------------------------------------------------------------------
; Draw.z80asm
; Coded by Antonio Luque
; ----------------------------------------------------------------------------------------------------------------------

; ----------------------------------------------------------------------------------------------------------------------
; Draw_Board: draw an empty 7x7 hexagons board on the screen
;
; Input:    -
;
; Output:   -
;
; Uses:     TOKEN_COLOR (current token color)
;
; Destroys: A, BC, DE, HL, IXL
; ----------------------------------------------------------------------------------------------------------------------
Draw_Board:
                        ld      a, WHITE                    ; set empty hexagon color
                        ld      (TOKEN_COLOR), a            ; store hexagon color
                        ld      c, 7                        ; 7 rows
Draw_Board_Row
                        ld      b, 7                        ; 7 columns
Draw_Board_Column
                        call    Draw_GetHEX_Screen          ; get hexagon screen address
                        call    Draw_Hexagon_Color          ; apply color to hexagon area
                        ld      de, HEXAGON_EMPTY           ; DE points to hexagon sprite address
                        call    Draw_Sprite_Hexagon         ; draw an empty hexagon at screen address
                        djnz    Draw_Board_Column           ; repeat for each column
                        dec     c                           ; decrement row
                        jr      nz, Draw_Board_Row          ; repeat for each row
                        ret

; ----------------------------------------------------------------------------------------------------------------------
; Draw_Token: animate an hexagon sprite on the screen
;
; Input:    BC = hexagon board indexes (B:column, C:row)
;
; Output:   -
;
; Destroys: A, BC, DE, HL, IXL
; ----------------------------------------------------------------------------------------------------------------------
Draw_Token:
                        call    Draw_GetHEX_Screen          ; get hexagon screen address
                        ld      bc, $0604                   ; B = number of sprites, C = sprite number to change color
                        ld      de, HEXAGON_SPRITE          ; DE points to hexagon sprite address
Draw_Token_Loop
                        push    hl                          ; store hexagon screen address
                        call    Draw_Sprite_Hexagon         ; draw hexagon sprite
                        pop     hl                          ; restore hexagon screen address
                        ld      a, b                        ; check loop counter
                        cp      c                           ; is it 4?
                        call    z, Draw_Hexagon_Color       ; yes, apply color to hexagon area
@Token_Delay
                        ld      a, 0                        ; set delay duration (changed before calling this routine)
                        call    Main_Delay                  ; execute delay
                        djnz    Draw_Token_Loop             ; repeat for each hexagon sprite
                        ret

; ----------------------------------------------------------------------------------------------------------------------
; Draw_GetHEX_Screen: get the screen address of an hexagon on board
;
; Input:    BC = hexagon board indexes (B:column, C:row)
;
; Output:   HL = hexagon screen address 
;
; Destroys: A, DE
; ----------------------------------------------------------------------------------------------------------------------
Draw_GetHEX_Screen:
                        ld      de, BOARD_MAP-8             ; DE points to board hexagons screen addresses table (-8)
                        call    Main_Search_Table           ; search the screen address of the hexagon in table
                        ld      l, (hl)                     ; set the low byte of the screen address in L
                        ld      a, (de)                     ; set the high byte of the screen address in H
                        ld      h, a
                        ret

; ----------------------------------------------------------------------------------------------------------------------
; Draw_Sprite_Hexagon: draw an hexagon sprite on the screen
;
; Input:    DE = hexagon sprite address
;           HL = hexagon screen address
;
; Output:   DE = next hexagon sprite address
;
; Destroys: A, HL, IXL
; ----------------------------------------------------------------------------------------------------------------------
Draw_Sprite_Hexagon:
                        ld      ixl, 16                     ; hexagon sprite height in bytes (loop counter)
Draw_Sprite_HexLoop
                        ld      a, (de)                     ; get sprite byte
                        ld      (hl), a                     ; put sprite byte on screen
                        inc     de                          ; move DE to next sprite byte address
                        inc     l                           ; move HL to next screen column
                        ld      a, (de)                     ; get sprite byte
                        ld      (hl), a                     ; put sprite byte on screen
                        inc     de                          ; move DE to next sprite byte
                        dec     l                           ; move HL to previous screen column
                        call    Draw_Down_PixelLine         ; move HL down one pixel-line
                        dec     ixl                         ; decrement sprite height
                        jr      nz, Draw_Sprite_HexLoop     ; repeat for each byte in sprite
                        ret

; ----------------------------------------------------------------------------------------------------------------------
; Draw_Sprite_LetterNum: draw a letter/number sprite at screen address
;
; Input:    DE = letter/number sprite address
;           HL = letter/number screen address
;
; Output:   DE = next letter/number sprite address
;
; Destroys: A, C, HL
; ----------------------------------------------------------------------------------------------------------------------
Draw_Sprite_LetterNum:
                        ld      c, 10                       ; letter/number sprite height in bytes (loop counter)
Draw_Sprite_Loop
                        ld      a, (de)                     ; get sprite byte
                        ld      (hl), a                     ; put sprite byte on screen
                        inc     de                          ; move DE to next sprite byte address
                        call    Draw_Down_PixelLine         ; move HL down one pixel-line
                        dec     c                           ; decrement sprite height
                        jr      nz, Draw_Sprite_Loop        ; repeat for each byte in sprite
                        ret

; ----------------------------------------------------------------------------------------------------------------------
; Draw_Down_PixelLine: move HL down one pixel-line
; Source: https://spectrumcomputing.co.uk/forums/viewtopic.php?p=35272#p35272
;
; The screen address of a pixel-line is encoded as follows:
;
;             H           |           L
;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
;  07|06|05|04|03|02|01|00|07|06|05|04|03|02|01|00
;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
;   0| 1| 0|Y7|Y6|Y2|Y1|Y0|Y5|Y4|Y3|X4|X3|X2|X1|X0
;
; where:
;   Y = pixel position: Y7,Y6,Y5,Y4,Y3,Y2,Y1,Y0 (0-191)
;   X = byte  position:  0, 0, 0,X4,X3,X2,X1,X0 (0-31)
;
; Input:    HL = pixel-line address
;
; Output:   HL = next (down) pixel-line address
;
; Destroys: A
; ----------------------------------------------------------------------------------------------------------------------
Draw_Down_PixelLine:
                        inc     h                           ; move HL down one pixel-line
                        ld      a, h                        ; get high byte of pixel-line address
                        and     %00000111                   ; is pixel-line address inside a character line?
                        ret     nz                          ; yes, return
                        ld      a, l                        ; get low byte of pixel-line address (at this point Y6 = 1)
                        add     a, 32                       ; add size of char line (add extra bit into Y3-Y5)
                        ld      l, a                        ; move HL down one character line
                        ret     c                           ; a third was crossed? yes, return
                        ld      a, h                        ; get high byte of pixel-line address
                        sub     8                           ; clean up the bit from Y6
                        ld      h, a                        ; HL points to next (down) pixel-line address
                        ret

; ----------------------------------------------------------------------------------------------------------------------
; Draw_Hexagon_Color: color an hexagon sprite on the screen
; Source: https://spectrumcomputing.co.uk/forums/viewtopic.php?p=42285#p42285
;
; This routine converts a screen address (HL) into an attribute address (IX):
;
;             H           |           L
;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
;  07|06|05|04|03|02|01|00|07|06|05|04|03|02|01|00
;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
;   0| 1| 0|Y7|Y6|Y2|Y1|Y0|Y5|Y4|Y3|X4|X3|X2|X1|X0      screen address
;
;            IXH          |          IXL
;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
;  07|06|05|04|03|02|01|00|07|06|05|04|03|02|01|00
;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
;   0| 1| 0| 1| 1| 0|Y7|Y6|Y5|Y4|Y3|X4|X3|X2|X1|X0      attribute address
;
; where:
;   Y = pixel position: Y7,Y6,Y5,Y4,Y3,Y2,Y1,Y0 (0-191)
;   X = byte  position:  0, 0, 0,X4,X3,X2,X1,X0 (0-31)
;
; Input:    HL = screen address of the hexagon
;
; Output:   IX = attribute address of the hexagon
;
; Uses:     TOKEN_COLOR (current token color)
;
; Destroys: A
; ----------------------------------------------------------------------------------------------------------------------
Draw_Hexagon_Color:
                        ld      a, h                        ; get high byte of screen address
                        or      %10000111                   ; mask Y0-Y2 and set bit 7 on
                        rra                                 ; shift Y7-Y6 two positions
                        rra
                        srl     a                           ; shift Y7-Y6 to last positions and set bit 7 off
                        ld      ixh, a                      ; set high byte of attribute address in IXH
                        ld      a, l                        ; (the low byte for attribute address doesn't change)
                        ld      ixl, a                      ; set low byte of attribute address in IXL
                        ld      a, (TOKEN_COLOR)            ; get current token color
                        ld      (ix+0), a                   ; set hexagon color (4 bytes)
                        ld      (ix+1), a
                        ld      (ix+32), a
                        ld      (ix+33), a
                        ret
