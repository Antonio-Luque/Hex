; -----------------------------------------------------------------------------
; Draw.z80asm
; Coded by Antonio Luque
; -----------------------------------------------------------------------------

WHITE_BLACK         equ     %00111000               ; Attributes: bright 0, flash 0, paper 7, ink 0

; -----------------------------------------------------------------------------
; Draw_Board: draw an empty 7x7 hexagons board in the screen
;
; Input:     -
; Output:    -
; Destroys:  A, BC, HL, DE
; -----------------------------------------------------------------------------
Draw_Board:
                    ld      a, WHITE_BLACK          ; set empty hexagon color in A
                    ld      (TOKEN_COLOR), a        ; store hexagon color

                    ld      c, 7                    ; 7 rows
NextCol
                    ld      b, 7                    ; 7 columns
NextRow
                    call    Draw_Hexagon            ; draw an hexagon in the screen
                    djnz    NextRow                 ; process next column
                    dec     c                       ; decrement row
                    jr      nz, NextCol             ; process next row

                    ret

; -----------------------------------------------------------------------------
; Draw_Hexagon: draw an empty hexagon on the screen
;
; Input:     BC - hexagon board indexes: B = column, C = row
; Output:    -
; Destroys:  A, DE
; -----------------------------------------------------------------------------
Draw_Hexagon:
                    ld      hl, HEXAGON             ; HL points to the hexagon address
                    jr      DrawProcess             ; continue to draw process

; -----------------------------------------------------------------------------
; Draw_Token: entry point to draw a token instead of an hexagon
; -----------------------------------------------------------------------------
Draw_Token:
                    ld      hl, TOKEN               ; HL points to the token address
DrawProcess
                    push    bc                      ; store BC register
                    call    GetHEX_Color            ; get the attr memory address of an hexagon in screen
                    call    SetHEX_Color            ; set the color of the hexagon
                    call    GetHEX_Screen           ; get the screen memory address of an hexagon in screen
                    call    Draw_Graphic            ; draw the hexagon/token in screen
                    pop     bc                      ; restore BC register

                    ret

; -----------------------------------------------------------------------------
; GetHEX_Color: return the attribute memory address of an hexagon/token in the screeen
;
; Input:    BC - hexagon board indexes: B = column, C = row
; Output:   DE - attribute memory address of the hexagon
; Destroys: A
; -----------------------------------------------------------------------------
GetHEX_Color:
                    push    hl

                    ld      de, BOARD_MAP           ; DE points to the look-up attr/screen table
                    ld      h, 0                    ; first, get the C row
                    ld      l, c
                    add     hl, hl                  ; a row is 8 bytes long
                    add     hl, hl
                    add     hl, hl
                    add     hl, de                  ; HL points to the address of C row
                    ex      de, hl                  ; DE points to the address of C row 
                    ld      a, (de)                 ; set the attr Hi-byte memory address (row C, col 0) in A
                    ld      h, 0                    ; go for the B column
                    ld      l, b
                    add     hl, de                  ; HL points to the address of B col
                    ld      e, (hl)                 ; set the Low-byte memory address in E 
                    ld      d, a                    ; set the Attr Hi-byte memory address in D

                    pop     hl

                    ret

; -----------------------------------------------------------------------------
; SetHEX_Color: set the color of an hexagon/token in the screen
; Code from ChibiAkumas lessons: https://www.chibiakumas.com/z80/simplesamples.php#LessonS2
;
; Input:    DE - attribute memory address of the hexagon
;           TOKEN_COLOR - color which be set to the hexagon
; Output:   -
; Destroys: A
; -----------------------------------------------------------------------------
SetHEX_Color:
                    push    de
                    push    bc

                    ld      c, 2                    ; height of the hexagon (in bytes)
ColorLine
                    ld      b, 2                    ; width of the hexagon (in bytes)
                    ld      a, (TOKEN_COLOR)        ; get color

                    push    de
ColorByte
                    ld      (de), a                 ; color a byte
                    inc     de                      ; next byte
                    djnz    ColorByte               ; repeat until hexagon width is colored

                    pop     de

                    ld      a, e                    ; move down a ColorMem line
                    add     a, 32                   ; add 32 to line DE (height in pixels)
                    ld      e, a
                    jr      nc ,EndOfLine           ; check EOL
                    inc     d                       ; add any carry to DE
EndOfLine
                    dec     c
                    jr      nz, ColorLine           ; procces next line

                    pop     bc
                    pop     de

                    ret

; -----------------------------------------------------------------------------
; GetHEX_Screen: return the screen memory address of an hexagon/token
;
; Input:    BC - hexagon board indexes: B = column (not used), C = row
;           DE - attribute memory address of an hexagon
; Output:   DE - screen memory address of the row index hexagon
; Destroys: -
; -----------------------------------------------------------------------------
GetHEX_Screen:
                    push    hl

                    push    de                      ; store attribute memory address
                    ld      hl, BOARD_MAP           ; get the screen Hi-Byte mem location (row 0, col C)
                    ld      d, 0
                    ld      e, c
                    add     hl, de                  ; HL points to the address of C col
                    pop     de                      ; restore attribute memory address
                    ld      d, (hl)                 ; change Hi-byte to the screen mem location of the hexagon 
    
                    pop     hl

                    ret

; -----------------------------------------------------------------------------
; Draw_Graphic: draw an hexagon or token on the screen
; Code from ChibiAkumas lessons: https://www.chibiakumas.com/z80/simplesamples.php#LessonS2
;
; Input:    DE - screen memory adress of the hexagon/token
;           HL - hexagon or token address
; Output:   -
; Destroys: DE, HL, IXH, A
; -----------------------------------------------------------------------------
Draw_Graphic:
                    push    bc

                    ld      ixh, 16                 ; number of lines 
NextHexLine
                    push    de
                    ldi                             ; copy 2 bytes from HL to DE
                    ldi
                    pop     de
                    call    GetNext_Line            ; screen next line 
                    dec     ixh                     ; decrement # of lines
                    jr      nz, NextHexLine         ; repeat for next line

                    pop     bc

                    ret

; -----------------------------------------------------------------------------
; GetNext_Line: also an entry point for drawing frame tiles and print characters
; Code from ChibiAkumas lessons: https://www.chibiakumas.com/z80/simplesamples.php#LessonS2
; -----------------------------------------------------------------------------
GetNext_Line:                                       ; move DE down one line
                    inc     d
                    ld      a, d
                    and     %00000111               ; see if we're over the first 3rd
                    ret     nz
                    ld      a, e
                    add     a, %00100000
                    ld      e, a
                    ret     c                       ; see if we're over the 2'nd 3rd
                    ld      a, d
                    sub     %00001000
                    ld      d, a

                    ret

; -----------------------------------------------------------------------------
; GetXY_ATTR: return attributes memory address of XY screen location
; Code from ChibiAkumas lessons: https://www.chibiakumas.com/z80/simplesamples.php#LessonS2
;
; Input:    BC - XY screen location (X in bytes, Y in pixels)
; Output:   DE - pointer to X,Y attribute memory address
; Destroys: A
; -----------------------------------------------------------------------------
GetXY_ATTR:
                    ; YYYYYyyy - color ram is in 8x8 tiles

                    ld      a, c                    ; low three Y bits are ignored
                    and     %11000000               ; YY------
                    rlca
                    rlca                            ; ------YY
                    add     a, $58
                    ld      d, a                    ; $5800 start of attr memory address
                    ld      a, c
                    and     %00111000               ; --YYY---
                    rlca
                    rlca                            ; YYY-----
                    add     a, b                    ; add X location
                    ld      e, a

                    ret

; -----------------------------------------------------------------------------
; GetXY_Screen: return screen memory address of XY screen location
; Code from ChibiAkumas lessons: https://www.chibiakumas.com/z80/simplesamples.php#LessonS2
;
; _0 _1 _0 Y7 Y6 Y2 Y1 Y0   Y5 Y4 Y3 X4 X3 X2 X1 X0
;
; Input:    BC - XY screen location (X in bytes, Y in pixels)
; Output:   DE - pointer to screen memory address
; Destroys: A
; -----------------------------------------------------------------------------
GetXY_Screen:
                    ld      a, c                    ; Ypos (Y5-Y3)
                    and     %00111000               ; --YYY---
                    rlca
                    rlca                            ; YYY-----
                    or      b                       ; add Xpos (X4-X0)
                    ld      e, a
                    ld      a, c                    ; Ypos (Y2-Y0)
                    and     %00000111               ; -----YYY
                    ld      d, a
                    ld      a, c                    ; Ypos (Y7-Y6)
                    and     %11000000               ; YY------
                    rrca
                    rrca
                    rrca                            ; ---YY---
                    or      d                       ; add Ypos (Y2-Y0)
                    or      $40
                    ld      d, a                    ; $4000 start of screen memory address 

                    ret
