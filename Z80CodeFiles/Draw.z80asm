; ----------------------------------------------------------------------------------------------------------------------
; Draw.z80asm
; Coded by Antonio Luque
; ----------------------------------------------------------------------------------------------------------------------

EMPTY_COLOR             equ     %00000111                   ; Attributes: flash 0, bright 0, paper 0, ink 7

; ----------------------------------------------------------------------------------------------------------------------
; Draw_Board: draw an empty 7x7 hexagons board in the screen
;
; Input:     -
; Output:    -
; Destroys:  A, BC, HL, DE, IXL
; ----------------------------------------------------------------------------------------------------------------------
Draw_Board:
                        ld      a, EMPTY_COLOR              ; set empty hexagon color in A
                        ld      (TOKEN_COLOR), a            ; store hexagon color

                        ld      c, 7                        ; 7 rows
Draw_Board_NextCol
                        ld      b, 7                        ; 7 columns
Draw_Board_NextRow
                        call    Draw_GetHEX_Screen          ; get hexagon screen address in HL
                        call    Draw_Hexagon_Color          ; color token
                        ld      de, HEXAGON_EMPTY           ; DE points to the hexagon sprite address
                        call    Draw_Sprite_Hexagon         ; draw empty hexagon
                        djnz    Draw_Board_NextRow          ; process next column
                        dec     c                           ; decrement row
                        jr      nz, Draw_Board_NextCol      ; process next row
                        ret

; ----------------------------------------------------------------------------------------------------------------------
; Draw_Token: animate an hexagon sprite on the screen
;
; Input:     BC - hexagon board indexes: B = column, C = row
; Output:    -
; Destroys:  A, BC, HL, DE, IX
; ----------------------------------------------------------------------------------------------------------------------
Draw_Token:
                        ld      hl, TIMER_FLAG              ; HL points to timer flag address
                        ld      a, (hl)                     ; save current status in A
                        ld      (hl), 0                     ; stop timer
                        push    af                          ; store previous timer status
                        call    Draw_GetHex_Screen          ; get hexagon screen address in HL
                        ld      bc, $0604                   ; B = number of sprites, C = sprite number to change color
                        ld      de, HEXAGON_SPRITE          ; DE points to the 1st hexagon sprite
Draw_Token_Loop
                        push    hl                          ; store sprite screen address
                        call    Draw_Sprite_Hexagon         ; draw hexagon sprite
                        pop     hl                          ; restore sprite screen address
                        ld      a, b                        ; set loop counter in A
                        cp      c                           ; is it 4?
                        call    z, Draw_Hexagon_Color       ; yes, set sprite color
Draw_Token_Delay
                        ld      a, 0                        ; set delay duration (changed before calling this routine)
                        call    Main_Delay
                        djnz    Draw_Token_Loop             ; repeat for each hexagon sprite
                        ld      ix, TOKEN_FX                ; HL points to the sound fx for move
                        call    Sound_FX                    ; play sound fx
                        pop     af                          ; restore previous timer status
                        ld      (TIMER_FLAG), a             ; restart timer
                        ret

; ----------------------------------------------------------------------------------------------------------------------
; Draw_GetHEX_Screen: return the screen address of an hexagon in the screeen
;
; Input:    BC - hexagon board indexes: B = column, C = row
; Output:   HL - screen address of the hexagon
; Destroys: DE, A
; ----------------------------------------------------------------------------------------------------------------------
Draw_GetHEX_Screen:
                        ld      h, 0                        ; first, get the C row in table
                        ld      l, c                        ; set index in HL
                        add     hl, hl                      ; each row is 8 bytes long
                        add     hl, hl
                        add     hl, hl
                        ld      de, BOARD_MAP-8             ; DE points to the look-up screen table (-8 adjusted)
                        add     hl, de                      ; HL points to the Hi-Byte of the screen address
                        ex      de, hl                      ; save pointer in DE
                        ld      a, (de)                     ; set Hi-byte screen address in A
                        ld      h, 0                        ; second, go for the B column in table
                        ld      l, b                        ; set index in HL
                        add     hl, de                      ; HL points to the Lo-Byte of the screen address
                        ld      l, (hl)                     ; set the Low-byte of the screen address in L
                        ld      h, a                        ; set the Hi-byte of the screen address in H
                        ret

; ----------------------------------------------------------------------------------------------------------------------
; Draw_Sprite_Hexagon: draw an hexagon sprite on screen
;
; Input:    HL - screen address of the hexagon
;           DE - hexagon sprite address
; Output:   DE - next hexagon sprite address
; Destroys: HL, IXL, A
; ----------------------------------------------------------------------------------------------------------------------
Draw_Sprite_Hexagon:
                        ld      ixl, 16                     ; IXL = hexagon sprite height (pixels)
Draw_Sprite_HeXLoop
                        ld      a, (de)                     ; set sprite tile on screen
                        ld      (hl), a
                        inc     de                          ; next sprite tile
                        inc     l                           ; move to the next screen column
                        ld      a, (de)                     ; set sprite tile on screen
                        ld      (hl), a
                        inc     de                          ; next sprite tile
                        dec     l                           ; restore pixel-byte screen address
                        call    Draw_Next_Line              ; move HL to the next pixel-line address
                        dec     ixl                         ; decrement sprite height
                        jr      nz, Draw_Sprite_HexLoop     ; repeat until full height
                        ret

; ----------------------------------------------------------------------------------------------------------------------
; Draw_Sprite_LetterNum: draw a letter/number sprite on screen
;
; Input:    HL - screen address of the letter/number
;           DE - letter/number sprite address
; Output:   -
; Destroys: DE, C, A
; ----------------------------------------------------------------------------------------------------------------------
Draw_Sprite_LetterNum:
                        ld      c, 10                       ; letter/number sprite height (pixels)
Draw_Sprite_Loop
                        ld      a, (de)                     ; set sprite tile on screen
                        ld      (hl), a
                        inc     de                          ; next sprite tile
                        call    Draw_Next_Line              ; move HL to the next pixel-line address
                        dec     c                           ; decrement sprite height
                        jr      nz, Draw_Sprite_Loop        ; repeat until full height
                        ret

; ----------------------------------------------------------------------------------------------------------------------
; Draw_Next_Line: move HL to the next pixel-line address
;
; Input:    HL - current screen address
; Output:   HL - next pixel-line address
; Destroys: A
; ----------------------------------------------------------------------------------------------------------------------
Draw_Next_Line:
                        inc     h                           ; move to the next line
                        ld      a, h                        ; check EOL 1st third
                        and     %00000111
                        ret     nz                          ; return if not reached
                        ld      a, l                        ; check EOL 2nd third
                        add     a, 32
                        ld      l, a
                        ret     c                           ; return if not reached
                        ld      a, h                        ; restore pixel-line
                        sub     8
                        ld      h, a
                        ret

; ----------------------------------------------------------------------------------------------------------------------
; Draw_Hexagon_Color: color an hexagon sprite on the screen.
; This routine converts a screen address (HL) into an attribute address (IX):
;
;             H           |           L
;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
;  15|14|13|12|11|10|09|08|07|06|05|04|03|02|01|00
;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
;   0| 1| 0|Y7|Y6|Y2|Y1|Y0|Y5|Y4|Y3|X4|X3|X2|X1|X0      screen address
;
;  where:
;       Y = pixel position: Y7,Y6,Y5,Y4,Y3,Y2,Y1,Y0 (0-191)
;       X = byte  position:  0, 0, 0,X4,X3,X2,X1,X0 (0-31)
;
;            IXH          |          IXL
;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
;  15|14|13|12|11|10|09|08|07|06|05|04|03|02|01|00
;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
;   0| 1| 0| 1| 1| 0|Y7|Y6|Y5|Y4|Y3|X4|X3|X2|X1|X0      attr address
;
; Input:    HL - screen address of the hexagon
; Output:   IX - attribute address of the hexagon
; Destroys: A
; ----------------------------------------------------------------------------------------------------------------------
Draw_Hexagon_Color:
                        ld      a, h                        ; calculate Hi-byte of attribute address
                        or      %10000111
                        rra                                 ; shift to position and convert
                        rra
                        srl     a
                        ld      ixh, a                      ; store Hi-byte in IXH
                        ld      a, l                        ; the Lo-Byte for attr address doesn't change
                        ld      ixl, a                      ; store Lo-Byte in IXL
                        ld      a, (TOKEN_COLOR)            ; get hexagon color
                        ld      (ix+0), a                   ; set hexagon color
                        ld      (ix+1), a
                        ld      (ix+32), a
                        ld      (ix+33), a
                        ret
