; ----------------------------------------------------------------------------------------------------------------------
; Timer.z80asm
; Coded by Antonio Luque
;
; Based on disassembly of "Chess" (c) 1982 Psion
; ----------------------------------------------------------------------------------------------------------------------

CYAN_TIMER_ON           EQU     1                           ; cyan timer flag on
RED_TIMER_ON            EQU     2                           ; red timer flag on

; ----------------------------------------------------------------------------------------------------------------------
; Timer_Interrupt: interrupt routine to manage players' timers
;
; Input:    -
;
; Output:   -
;
; Uses:     TIMER_FLAG (0 = timer stopped, 1 = cyan timer on, 2 = red timer on)
;
; Destroys: BC', DE', HL'
; ----------------------------------------------------------------------------------------------------------------------
Timer_Interrupt:
                        push    af                          ; store AF register
                        exx                                 ; store BC, DE and HL registers

                        ld      a, (TIMER_FLAG)             ; check timer flag
                        or      a                           ; is timer stopped?
                        jp      z, Timer_Exit               ; yes, exit routine

                        ld      hl, RED_TIMER               ; HL points to red's interrupt counter address
                        dec     a                           ; is red timer on?
                        jp      nz, Timer_Counters          ; yes, check interrupt counter 
                        ld      hl, CYAN_TIMER              ; HL points to cyan's interrupt counter address
Timer_Counters
                        dec     (hl)                        ; decrement interrupt counter
                        jp      nz, Timer_Exit              ; if not 0, exit routine

                        ld      (hl), 50                    ; restart interrupt counter
                        inc     hl                          ; move HL to seconds counter address
                        ld      a, 1                        ; increment seconds counter
                        add     a, (hl)
                        daa                                 ; convert to BCD (Binary-Coded-Decimal)
                        ld      (hl), a                     ; store seconds
                        cp      $60                         ; 60 seconds reached?
                        jp      nz, Timer_Show              ; no, show timer
                        ld      (hl), 0                     ; restart seconds counter
                        inc     hl                          ; move HL to minutes counter address
                        ld      a, 1                        ; increment minutes counter
                        add     a, (hl)
                        daa                                 ; convert to BCD (Binary-Coded-Decimal)
                        ld      (hl), a                     ; store minutes
Timer_Show
                        call    Timer_Display               ; display timer on the screen
Timer_Exit
                        exx                                 ; restore BC, DE and HL registers
                        pop     af                          ; restore AF register

                        ei                                  ; enable interrupts
                        ret

; ----------------------------------------------------------------------------------------------------------------------
; Timer_Reset: initialize and display cyan and red timers
;
; Input:    -
;
; Output:   -
;
; Uses:     TIMER_FLAG (0 = timer stopped, 1 = cyan timer on, 2 = red timer on)
;
; Destroys: A, BC, DE, HL
; ----------------------------------------------------------------------------------------------------------------------
Timer_Reset:
                        ld      hl, RED_TIMER+2             ; HL points to red's minutes counter address
                        xor     a                           ; reset minutes counter
                        ld      (hl), a
                        dec     hl                          ; move HL to red's seconds counter address
                        ld      (hl), a                     ; reset seconds counter
                        dec     hl                          ; move HL to red's interrupt counter
                        ld      (hl), 50                    ; set interrupt counter (1/50 seconds)

                        dec     hl                          ; move HL to cyan's minutes counter address
                        ld      (hl), a                     ; reset minutes counter
                        dec     hl                          ; move HL to cyan's seconds counter address
                        ld      (hl), a                     ; reset seconds counter
                        dec     hl                          ; move HL to cyan's interrupt counter
                        ld      (hl), 50                    ; set interrupt counter (1/50 seconds)

                        dec     hl                          ; move HL to timer flag address
                        ld      (hl), CYAN_TIMER_ON         ; set cyan timer on
                        call    Timer_Display               ; display cyan timer

                        ld      a, RED_TIMER_ON             ; set red timer on
                        ld      (TIMER_FLAG), a

; ----------------------------------------------------------------------------------------------------------------------
; Timer_Display: display a timer on the screen
;
; Input:    -
;
; Output:   -
;
; Uses:     TIMER_FLAG (0 = timer stopped, 1 = cyan timer on, 2 = red timer on)
;
; Destroys: A, BC, DE, HL
; ----------------------------------------------------------------------------------------------------------------------
Timer_Display:
                        ld      bc, RED_TIMER+2             ; BC points to red's minutes counter address
                        ld      de, $48E2                   ; DE points to red's minutes screen address
                        ld      a, (TIMER_FLAG)             ; check timer flag
                        dec     a                           ; is cyan timer on?
                        jp      nz, Timer_Display_Min       ; no, jump to display minutes counter
                        ld      bc, CYAN_TIMER+2            ; BC points to cyan's minutes counter address
                        ld      de, $4078                   ; DE points to cyan's minutes screen address
Timer_Display_Min
                        call    Timer_Display_MinSec        ; display minutes counter on screen
                        dec     bc                          ; BC points to seconds counter address
                        inc     e                           ; DE points to seconds screen address
Timer_Display_MinSec:
                        ld      a, (bc)                     ; set min/sec counter in A
                        rra                                 ; move tens digit to the first 4th bits of A
                        rra
                        rra
                        rra
                        call    Timer_Display_Digit         ; display tens digit on screen
                        ld      a, (bc)                     ; set min/sec counter in A 
Timer_Display_Digit:
                        and     %00001111                   ; discard the last 4th bits of the digit
                        push    de                          ; store digit screen address

                        ld      hl, TIMER_DIGITS            ; HL points to timer digits (graphics) address
                        add     a, a                        ; a digit is 8 bytes long
                        add     a, a
                        add     a, a
                        add     a, l                        ; set digit index in HL
                        ld      l, a

                        ld      a, (hl)                     ; get digit tile
                        ld      (de), a                     ; put it on screen address
                        inc     d                           ; move DE to next pixel-line address
                        inc     l                           ; move HL to next digit tile address
                        ld      a, (hl)                     ; (repeat 7 more times)
                        ld      (de), a
                        inc     d
                        inc     l
                        ld      a, (hl)
                        ld      (de), a
                        inc     d
                        inc     l
                        ld      a, (hl)
                        ld      (de), a
                        inc     d
                        inc     l
                        ld      a, (hl)
                        ld      (de), a
                        inc     d
                        inc     l
                        ld      a, (hl)
                        ld      (de), a
                        inc     d
                        inc     l
                        ld      a, (hl)
                        ld      (de), a
                        inc     d
                        inc     l
                        ld      a, (hl)
                        ld      (de), a

                        pop     de                          ; restore digit screen address
                        inc     e                           ; move screen address to next column
                        ret
