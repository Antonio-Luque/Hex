; -----------------------------------------------------------------------------
; PathFinder.z80asm
; Coded by Einar Saukas
;
; Based on PATHFINDER - https://spectrumcomputing.co.uk/entry/28178/ZX-Spectrum/PATHFINDER
; Adapted by Einar Saukas to be used as heuristic in Antonio Luque's Hex game.
; -----------------------------------------------------------------------------

WIDTH               equ     9                       ; distance to up-left/down-right neighbour
ORIGIN              equ     0                       ; origin positions on the board
EMPTY               equ     1                       ; empty positions on the board
FRIEND              equ     2                       ; positions occupied by friendly hexagons on the board
ENEMY               equ     253                     ; positions occupied by opponent hexagons on the board
VICTORY             equ     4                       ; return value if victory
DEFEAT              equ     255                     ; return value if defeat
Queue_Area_Blue     equ     $7e00                   ; A 256-aligned memory area reserved for blue's circular queue
Queue_Area_Red      equ     $7f00                   ; A 256-aligned memory area reserved for red's circular queue

; -----------------------------------------------------------------------------
; Return if current player is FRIEND or ENEMY from the perspective of the blue player
;
; Input:    TOKEN_COLOR (BLUE_TOKEN or RED_TOKEN)
; Output:   A - FRIEND if current player color is blue, ENEMY if current player color is red
; Destroys: -
; -----------------------------------------------------------------------------
Friend_Or_Foe:
                    ld      a, (TOKEN_COLOR)        ; set current player color in A
                    rra                             ; is current player color BLUE?
                    ld      a, FRIEND               ; set FRIEND in A
                    ret     c                       ; yes, return FRIEND 
                    cpl                             ; no, return ENEMY
                    ret

; -----------------------------------------------------------------------------
; Put an hexagon on both blue and red boards
;
; Input:    HL = address of hexagon position on blue board
;           A  = either FRIEND or ENEMY from the perspective of blue player
; Output:   HL = address of hexagon position on red board
;           A  = either ENEMY or FRIEND from the perspective of red player
; -----------------------------------------------------------------------------
Put_Hexagon:
                    ld      (hl), a
                    inc     h                       ; go to red board
                    cpl                             ; invert side
                    ld      (hl), a
                    ret

; -----------------------------------------------------------------------------
; Erase an hexagon from both blue and red boards
;
; Input:    HL = address of hexagon position on blue board
; Output:   HL = address of hexagon position on red board
; -----------------------------------------------------------------------------
Erase_Hexagon:
                    ld      (hl), EMPTY
                    inc     h
                    ld      (hl), EMPTY
                    ret

; -----------------------------------------------------------------------------
; Copy from 'hex_board_(color)' to its corresponding 'Board_(Color)'
;
; Input:    HL = address of 'hex_board_(color)' + 7
;           DE = address of 'Board_(Color)' + 7
; Output:   -
; Destroys: BC, HL, DE
; -----------------------------------------------------------------------------
Copy_Board:
                    ld      bc, 49                  ; number of positions to be copied (7x7)
Copy_Board_Loop:
                    inc     l                       ; skip borders
                    inc     e
                    inc     l
                    inc     e
                    ldi                             ; copy a row of 7 positions
                    ldi
                    ldi
                    ldi
                    ldi
                    ldi
                    ldi
                    jp      pe, Copy_Board_Loop     ; repeat for each row

                    ret

; -----------------------------------------------------------------------------
; Calculate player score depending on player color
;
; Input:    -
; Output:   player heuristic result, see Path_Finder_(Color) routines below
; Destroys: B, DE, HL, AF
; -----------------------------------------------------------------------------
Player_Score:
                    ld      a, (AI_PLAYER)          ; set speccy side in A
                    rra                             ; is speccy ENEMY?
                    jr      nc, RedScore            ; no, calculate red score
; -----------------------------------------------------------------------------
; Calculate score for blue
;
BlueScore:
                    ld      hl, hex_board_blue+7
                    ld      de, Board_Blue+7
                    call    Copy_Board              ; copy 'hex_board_blue' board to 'Board_Blue' board

; -----------------------------------------------------------------------------
; Calculate heuristic function for Blue. The heuristic function is defined as
; the distance between blue's board sides, i.e the minimum number of blue
; hexagons to finish connecting both sides.
;
; The algorithm is implemented running PATHFINDER, starting at the bottom side
; of the board. The execution is interrupted as soon as the top side is
; reached, so it doesn't spend any more time than strictly needed.
;
; Input:    -
; Output:   C = VICTORY if blue already won,
;           C = VICTORY+N if blue needs N steps to win
;           C = DEFEAT if blue already lost
; Destroys: B, DE, HL, AF
; -----------------------------------------------------------------------------
Path_Finder_Blue:
                    ld      de, Queue_Area_Blue     ; Queue Head
                    ld      ix, Queue_Area_Blue     ; Queue Tail
                    ld      c, VICTORY
                    ld      a, FRIEND
                    ld      hl, Board_Blue+69
                    cp      (hl)                    ; 1st goal position not blocked?
                    call    nc, Path_Finder_Update_Pos
                    dec     l
                    cp      (hl)                    ; 2nd goal position not blocked?
                    call    nc, Path_Finder_Update_Pos
                    dec     l
                    cp      (hl)                    ; 3rd goal position not blocked?
                    call    nc, Path_Finder_Update_Pos
                    dec     l
                    cp      (hl)                    ; 4th goal position not blocked?
                    call    nc, Path_Finder_Update_Pos
                    dec     l
                    cp      (hl)                    ; 5th goal position not blocked?
                    call    nc, Path_Finder_Update_Pos
                    dec     l
                    jp      Path_Finder_Begin_Blue
Path_Finder_Loop:
                    dec     e                       ; move Queue Head
                    ld      a, (de)                 ; retrieve next position to be checked
                    ld      l, a
                    ld      c, (hl)                 ; retrieve distance from this position to start
                    res     7, c                    ; clean highest bit that indicates occupied position
                    ld      a, FRIEND
                    dec     l
                    cp      (hl)                    ; left neighbour not visited yet?
                    call    nc, Path_Finder_Update_Pos
                    inc     l
                    inc     l
                    cp      (hl)                    ; right neighbour not visited yet?
                    call    nc, Path_Finder_Update_Pos
                    ld      a, l
                    sub     WIDTH
                    ld      l, a
                    ld      a, FRIEND
                    cp      (hl)                    ; upper-right neighbour not visited yet?
                    call    nc, Path_Finder_Update_Pos
                    dec     l
                    cp      (hl)                    ; upper-left neighbour not visited yet?
                    call    nc, Path_Finder_Update_Pos
                    ld      a, l
                    add     a, WIDTH*2
                    ld      l, a
                    ld      a, FRIEND
Path_Finder_Begin_Blue:
                    cp      (hl)                    ; lower-right neighbour not visited yet?
                    call    nc, Path_Finder_Update_Pos
                    dec     l
Path_Finder_Begin_Red:
                    cp      (hl)                    ; lower-left neighbour not visited yet?
                    call    nc, Path_Finder_Update_Pos
                    ld      a, ixl
                    cp      e                       ; empty queue?
                    jp      nz, Path_Finder_Loop
                    ld      c, DEFEAT               ; no path to origin means we lost!
                    ret

; -----------------------------------------------------------------------------
; Calculate speccy score depending on speccy color
;
; Input:    -
; Output:   speccy heuristic result, see Path_Finder_(Color) routines above and below
; Destroys: B, DE, HL, AF
; -----------------------------------------------------------------------------
Speccy_Score:
                    ld      a, (AI_PLAYER)          ; set speccy side in A
                    rra                             ; is speccy ENEMY?
                    jr      nc, BlueScore           ; no, calculate blue score
; -----------------------------------------------------------------------------
; Calculate score for red
;
RedScore:
                    ld      hl, hex_board_red+7
                    ld      de, Board_Red+7
                    call    Copy_Board              ; copy 'hex_board_red' board to 'Board_Red' board

; -----------------------------------------------------------------------------
; Calculate heuristic function for Red. The heuristic function is defined as
; the distance between red's board sides, i.e the minimum number of red
; hexagons to finish connecting both sides.
;
; The algorithm is implemented running PATHFINDER, starting at the right side
; of the board. The execution is interrupted as soon as the left side is
; reached, so it doesn't spend any more time than strictly needed.
;
; Input:    -
; Output:   C = VICTORY if red already won,
;           C = VICTORY+N if red needs N steps to win
;           C = DEFEAT if red already lost
; Destroys: B, DE, HL, AF
; -----------------------------------------------------------------------------
Path_Finder_Red:
                    ld      de, Queue_Area_Red      ; Queue Head
                    ld      ix, Queue_Area_Red      ; Queue Tail
                    ld      c, VICTORY
                    ld      a, FRIEND
                    ld      hl, Board_Red+69
                    cp      (hl)                    ; 1st goal position not blocked?
                    call    nc, Path_Finder_Update_Pos
                    ld      l, (Board_Red+60)%256
                    cp      (hl)                    ; 2nd goal position not blocked?
                    call    nc, Path_Finder_Update_Pos
                    ld      l, (Board_Red+51)%256
                    cp      (hl)                    ; 3rd goal position not blocked?
                    call    nc, Path_Finder_Update_Pos
                    ld      l, (Board_Red+42)%256
                    cp      (hl)                    ; 4th goal position not blocked?
                    call    nc, Path_Finder_Update_Pos
                    ld      l, (Board_Red+33)%256
                    cp      (hl)                    ; 5th goal position not blocked?
                    call    nc, Path_Finder_Update_Pos
                    ld      l, (Board_Red+24)%256
                    cp      (hl)                    ; 6th goal position not blocked?
                    call    nc, Path_Finder_Update_Pos
                    ld      l, (Board_Red+15)%256
                    jp      Path_Finder_Begin_Red

; -----------------------------------------------------------------------------
; Update current board position during heuristic function evaluation.
;
; This position will be updated with a number that indicates distance from
; goal (stored in lowest 7 bits), and a flag that indicates a position
; occupied by a friendly hexagon (stored in highest bit). Therefore this
; position is updated as follows, depending on current content:
;
; * EMPTY:  1 + distance of neighbour closest to goal
; * FRIEND: 128 + distance of neighbour closest to goal
; * ORIGIN: done!
;
; Input:    HL = points to current position (on either Board_Blue or Board_Red)
;           DE = Queue Head
;           IX = Queue Tail
;           C  = current distance
;           Z  = flag set when (HL) = FRIEND
; Output:   -
; Destroys: B
; -----------------------------------------------------------------------------
Path_Finder_Update_Pos:
                    jr      z, Path_Finder_Friendly
                    ld      b, (hl)
                    djnz    Path_Finder_Victory
; if (HL) = EMPTY, then set (HL) = C+1 and insert HL at Queue Tail
                    ld      (hl), c
                    inc     (hl)                    ; set (HL) = C+1
                    dec     ixl
                    ld      (ix+0), l               ; insert HL at Queue Tail
                    ret
Path_Finder_Friendly:
; if (HL) = FRIEND, then set (HL) = C+128 and insert HL at Queue Head
                    ld      (hl), c
                    set     7, (hl)                 ; set highest bit to indicate occupied position
                    ex      de, hl
                    ld      (hl), e                 ; insert HL at Queue Head
                    ex      de, hl
                    inc     e
                    ret
Path_Finder_Victory:
; if (HL) = ORIGIN, then abort execution and return C = VICTORY+steps
                    dec     ixl
                    ld      (ix+0), (Board_Blue+70)%256  ; insert end marker at Queue Tail
                    ld      l, Board_Blue_Final%256
                    ld      (hl), e                 ; store Queue Head
                    inc     l
                    ld      (hl), c                 ; store final distance
                    pop     hl                      ; discard caller address
                    ret                             ; exit Path_Finder

; -----------------------------------------------------------------------------
; Finish processing PATHFINDER for all positions at exactly C distance from
; goal.
;
; Normally the heuristic function Path_Finder_Blue or Path_Finder_Red
; abruptly interrupts PATHFINDER as soon as it finds the heuristic value, so it
; will finish as quickly as possible when called from the leaf nodes of the
; MiniMax decision tree (when we are only interested in obtaining the heuristic
; value). However in the remaining nodes of the MiniMax decision tree, it's
; necessary to continue processing PATHFINDER a little more, to finish marking
; all positions with the same distance from goal, to ensure it will always find 
; all possible shortest paths.
;
; Input:    H  = MSB address of either Board_Blue or Board_Red
;           DE = Queue Head obtained from Path_Finder_Blue or Path_Finder_Red
;           C  = distance obtained from Path_Finder_Blue or Path_Finder_Red
;           B  = $7f
; Output:   -
; Destroys: HL, AF
; -----------------------------------------------------------------------------
Path_Filler_Loop:
                    ld      a, 2
                    dec     l
                    cp      (hl)                    ; left neighbour not visited yet?
                    call    z, Path_Finder_Friendly
                    inc     l
                    inc     l
                    cp      (hl)                    ; right neighbour not visited yet?
                    call    z, Path_Finder_Friendly
                    ld      a, l
                    sub     WIDTH
                    ld      l, a
                    ld      a, 2
                    cp      (hl)                    ; upper-right neighbour not visited yet?
                    call    z, Path_Finder_Friendly
                    dec     l
                    cp      (hl)                    ; upper-left neighbour not visited yet?
                    call    z, Path_Finder_Friendly
                    ld      a, l
                    add     a, WIDTH*2
                    ld      l, a
                    ld      a, 2
                    cp      (hl)                    ; lower-right neighbour not visited yet?
                    call    z, Path_Finder_Friendly
                    dec     l
                    cp      (hl)                    ; lower-left neighbour not visited yet?
                    call    z, Path_Finder_Friendly
Path_Filler_Begin:
                    dec     e
                    ld      a, (de)
                    ld      l, a
                    ld      a, (hl)
                    and     b
                    cp      c
                    jp      z, Path_Filler_Loop
                    ret

; -----------------------------------------------------------------------------
; Identify all empty positions in blue's and red's shortest paths. It must be
; called after Path_Finder_Blue updated Board_Blue, and Path_Finder_Red updated
; Board_Red.
;
; All empty positions that belong to both blue's and red's shortest paths will
; be added to IY queue
;
; Input:    IY = Intercept Queue
;            A = if 0 then return sort candidates
; Output:    -
; Destroys: BC, DE, HL, AF
;
; IMPORTANT: This routine must be executed with interrupts disabled.
; -----------------------------------------------------------------------------
Path_Tracker:
; fill "Board_Intersect" with zeroes
                    ld      (Path_Tracker_Stack+1), sp
                    ld      sp, Board_Intersect_Final
                    ld      hl, 0
                    push    hl                      ; modify 31*2 = 62 bytes
                    push    hl
                    push    hl
                    push    hl
                    push    hl
                    push    hl
                    push    hl
                    push    hl
                    push    hl
                    push    hl
                    push    hl
                    push    hl
                    push    hl
                    push    hl
                    push    hl
                    push    hl
                    push    hl
                    push    hl
                    push    hl
                    push    hl
                    push    hl
                    push    hl
                    push    hl
                    push    hl
                    push    hl
                    push    hl
                    push    hl
                    push    hl
                    push    hl
                    push    hl
                    push    hl
Path_Tracker_Stack:
                    ld      sp, 0

                    ex      af, af'                 ; save A and flags
; execute both Path_Tracker_Blue and Path_Tracker_Red
                    call    Path_Tracker_Blue
                    call    Path_Tracker_Red

; promote empty positions on just one color's shortest path, if they are neighbour to a position on both blue's and red's shortest paths
                    call    Path_Promote

                    ex      af, af'                 ; restore A and flags
                    jr      z, Sort_Candidates      ; if (A = 0) then sort candidates

; collect all empty positions on both blue's and red's shortest paths into IY queue
                    ld      a, 1
                    ld      hl, Board_Intersect+8
                    ld      (iy+0), 0               ; queue endmarker
                    ld      c,iyl
Path_Tracker_Row:
                    inc     iy
Path_Tracker_Col:
                    inc     l
                    cp      (hl)
                    jp      nc, Path_Tracker_Col
                    bit     7, (hl)
                    jr      nz, Exit_Path_Tracker
                    ld      (iy+0), l
                    jp      Path_Tracker_Row

; -----------------------------------------------------------------------------
; Collect all empty positions on both blue's and red's shortest paths into IY 
; queue, following a pre-established ordering
;
; Input:    IY = Intercept Queue
;            A = 0
; Output:    -
; Destroys:  B, DE, HL, AF
; -----------------------------------------------------------------------------
Sort_Candidates:
                    inc     a                       ; A = 1

; DE = board order table (a sequence of 7x7=49 coordinates  between 9 and 69, lower priority positions first)
                    ld      de, Board_Order_Table
                    ld      hl, Board_Intersect+8
                    ld      b, 49
                    ld      (iy+0), 0               ; queue endmarker
                    inc     iy
Path_Tracker_Ordered_Next:
                    ex      de, hl
                    ld      e, (hl)
                    inc     hl
                    ex      de, hl
                    cp      (hl)
                    jp      nc, Path_Tracker_Ordered_Skip
                    ld      (iy+0), l
                    inc     iy
Path_Tracker_Ordered_Skip:
                    djnz    Path_Tracker_Ordered_Next

Exit_Path_Tracker:
                    dec     iy                      ; adjust start position
                    ret

; -----------------------------------------------------------------------------
; Promote empty positions that belong to only one color's shortest path, but
; have a neighbour that belongs to both colors shortest paths.
;
; Input:    -
; Output:   -
; Destroys: C, HL, AF
; -----------------------------------------------------------------------------
Path_Promote:
                    ld      a, 1
                    ld      c, 5
                    ld      hl, Board_Intersect+8
Path_Promote_Loop:
                    inc     l
                    bit     1, (hl)
                    jr      z, Path_Promote_Loop
                    bit     7, (hl)
                    ret     nz
                    push    hl
                    dec     l
                    cp      (hl)                    ; check left neighbour
                    jp      nz, Path_Promote_Left
                    ld      (hl), c
Path_Promote_Left:
                    inc     l
                    inc     l
                    cp      (hl)                    ; check right neighbour
                    jp      nz, Path_Promote_Right
                    ld      (hl), c
Path_Promote_Right:
                    ld      a, l
                    sub     WIDTH
                    ld      l, a
                    ld      a, 1
                    cp      (hl)                    ; check upper-right neighbour?
                    jp      nz, Path_Promote_Up_Right
                    ld      (hl), c
Path_Promote_Up_Right:
                    dec     l
                    cp      (hl)                    ; check upper-left neighbour
                    jp      nz, Path_Promote_Up_Left
                    ld      (hl), c
Path_Promote_Up_Left:
                    ld      a, l
                    add     a, WIDTH*2
                    ld      l, a
                    ld      a, 1
                    cp      (hl)                    ; check lower-right neighbour
                    jp      nz, Path_Promote_Down_Right
                    ld      (hl), c
Path_Promote_Down_Right:
                    dec     l
                    cp      (hl)                    ; check lower-left neighbour
                    jp      nz, Path_Promote_Down_Left
                    ld      (hl), c
Path_Promote_Down_Left:
                    pop     hl
                    jp      Path_Promote_Loop

; -----------------------------------------------------------------------------
; Identify all empty positions in blue's shortest paths. It must be called
; after Path_Finder_Blue has updated Board_Blue.
;
; Input:    -
; Output:   -
; Destroys: BC, DE, HL, AF
; -----------------------------------------------------------------------------
Path_Tracker_Blue:
                    ld      d, Queue_Area_Blue/256
                    ld      hl, Board_Blue_Final
                    ld      e, (hl)
                    inc     l
                    ld      c, (hl)
                    ld      b, $7f
                    call    Path_Filler_Begin
                    ld      e, (Queue_Area_Blue+1)%256  ; Queue Head
                    ld      l, (Board_Blue+9)%256
                    ld      a, (hl)
                    and     b
                    cp      c                       ; 1st goal position in shortest path?
                    call    z, Path_Tracker_Update_Pos
                    inc     l
                    ld      a, (hl)
                    and     b
                    cp      c                       ; 2nd goal position in shortest path?
                    call    z, Path_Tracker_Update_Pos
                    inc     l
                    ld      a, (hl)
                    and     b
                    cp      c                       ; 3rd goal position in shortest path?
                    call    z, Path_Tracker_Update_Pos
                    inc     l
                    ld      a, (hl)
                    and     b
                    cp      c                       ; 4th goal position in shortest path?
                    call    z, Path_Tracker_Update_Pos
                    inc     l
                    ld      a, (hl)
                    and     b
                    cp      c                       ; 5th goal position in shortest path?
                    call    z, Path_Tracker_Update_Pos
                    inc     l
                    jp      Path_Tracker_Begin_Blue
Path_Tracker_Loop:
                    ld      a, (de)                 ; retrieve next position to be checked
                    ld      l, a
                    ld      a, (hl)                 ; retrieve distance from this position to start
                    sub     $80                     ; are we looking at a previously EMPTY or FRIEND position?
                    sbc     a, $40                  ; if it was FRIEND, we will be looking for neighbours with same distance
                                                    ; if it was EMPTY, we will be looking for neighbours with shorter distance
                    and     b                       ; clean highest bit that indicates occupied position
                    ld      c, a
                    inc     l
                    ld      a, (hl)
                    and     b
                    cp      c                       ; left neighbour not visited yet?
                    call    z, Path_Tracker_Update_Pos
                    dec     l
                    dec     l
                    ld      a, (hl)
                    and     b
                    cp      c                       ; right neighbour not visited yet?
                    call    z, Path_Tracker_Update_Pos
                    ld      a, l
                    sub     WIDTH-1
                    ld      l, a
                    ld      a, (hl)
                    and     b
                    cp      c                       ; upper-right neighbour not visited yet?
                    call    z, Path_Tracker_Update_Pos
                    inc     l
                    ld      a, (hl)
                    and     b
                    cp      c                       ; upper-left neighbour not visited yet?
                    call    z, Path_Tracker_Update_Pos
                    ld      a, l
                    add     a, WIDTH*2-2
                    ld      l, a
Path_Tracker_Begin_Blue:
                    ld      a, (hl)
                    and     b
                    cp      c                       ; lower-right neighbour not visited yet?
                    call    z, Path_Tracker_Update_Pos
                    inc     l
Path_Tracker_Begin_Red:
                    ld      a, (hl)
                    and     b
                    cp      c                       ; lower-left neighbour not visited yet?
                    call    z, Path_Tracker_Update_Pos
                    dec     e                       ; empty queue?
                    jp      nz, Path_Tracker_Loop
                    ret

; -----------------------------------------------------------------------------
; Identify all empty positions in red's shortest paths. It must be called
; after Path_Finder_Red has updated Board_Red.
;
; Input:    -
; Output:   -
; Destroys: BC, DE, HL, AF
; -----------------------------------------------------------------------------
Path_Tracker_Red:
                    ld      d, Queue_Area_Red/256
                    ld      hl, Board_Red_Final
                    ld      e, (hl)
                    inc     l
                    ld      c, (hl)
                    ld      b, $7f
                    call    Path_Filler_Begin
                    ld      e, (Queue_Area_Red+1)%256  ; Queue Head
                    ld      l, (Board_Red+9)%256
                    ld      a, (hl)
                    and     b
                    cp      c                       ; 1st goal position in shortest path?
                    call    z, Path_Tracker_Update_Pos
                    ld      l, (Board_Red+18)%256
                    ld      a, (hl)
                    and     b
                    cp      c                       ; 2nd goal position in shortest path?
                    call    z, Path_Tracker_Update_Pos
                    ld      l, (Board_Red+27)%256
                    ld      a, (hl)
                    and     b
                    cp      c                       ; 3rd goal position in shortest path?
                    call    z, Path_Tracker_Update_Pos
                    ld      l, (Board_Red+36)%256
                    ld      a, (hl)
                    and     b
                    cp      c                       ; 4th goal position in shortest path?
                    call    z, Path_Tracker_Update_Pos
                    ld      l, (Board_Red+45)%256
                    ld      a, (hl)
                    and     b
                    cp      c                       ; 5th goal position in shortest path?
                    call    z, Path_Tracker_Update_Pos
                    ld      l, (Board_Red+54)%256
                    ld      a, (hl)
                    and     b
                    cp      c                       ; 6th goal position in shortest path?
                    call    z, Path_Tracker_Update_Pos
                    ld      l, (Board_Red+63)%256
                    jp      Path_Tracker_Begin_Red

; -----------------------------------------------------------------------------
; During shortest path tracking, this routine is called for each position
; that belongs to a shortest path. It updates current board position (setting
; bit 6 to prevent visiting same position again), adds current board position
; to queue, and updates intersection board.
;
; Input:    HL = points to current position (on either Board_Blue or Board_Red)
;           A  = current position content, except with bit 7 reset
;           DE = Queue Head
; Output:   -
; Destroys: A
; -----------------------------------------------------------------------------
Path_Tracker_Update_Pos:
                    cp      (hl)
                    jr      nz, Path_Tracker_Friendly
                    ld      a, h                    ; empty position in shortest path?
                    ld      h, Board_Intersect/256
                    inc     (hl)                    ; increment intersection counter
                    ld      h, a
Path_Tracker_Friendly:
                    set     6, (hl)                 ; set bit 6 to avoid visiting this position again
                    ld      a, l
                    ld      (de), a                 ; add this position to queue
                    inc     e
                    ret

; -----------------------------------------------------------------------------
Board_Order_Table:
                    defb    $45, $09, $12, $3C, $0A, $44, $13
                    defb    $3B, $43, $0B, $1B, $33, $14, $3A
                    defb    $1C, $32, $42, $0C, $24, $2A, $2D
                    defb    $21, $41, $0D, $0E, $40, $36, $18
                    defb    $3F, $0F, $31, $1D, $25, $29, $15
                    defb    $39, $16, $38, $20, $2E, $17, $37
                    defb    $30, $26, $28, $1E, $2F, $1F, $27 

; -----------------------------------------------------------------------------
                    org $7100
hex_board_blue:
                    defb    0, 0, 0, 0, 0, 0, 0,     0, 0   ; (ignore this row)
                    defb    1, 1, 1, 1, 1, 1, 1,     0, 0   ; 1st row (ignore last 2 values)
                    defb    1, 1, 1, 1, 1, 1, 1,     0, 0   ; 2nd row (ignore last 2 values)
                    defb    1, 1, 1, 1, 1, 1, 1,     0, 0   ; 3rd row (ignore last 2 values)
                    defb    1, 1, 1, 1, 1, 1, 1,     0, 0   ; 4th row (ignore last 2 values)
                    defb    1, 1, 1, 1, 1, 1, 1,     0, 0   ; 5th row (ignore last 2 values)
                    defb    1, 1, 1, 1, 1, 1, 1,     0, 0   ; 6th row (ignore last 2 values)
                    defb    1, 1, 1, 1, 1, 1, 1             ; 7th row

; -----------------------------------------------------------------------------
                    org $7200
hex_board_red:
                    defb    0, 0, 0, 0, 0, 0, 0,     0, 0   ; (ignore this row)
                    defb    1, 1, 1, 1, 1, 1, 1,     0, 0   ; 1st row (ignore last 2 values)
                    defb    1, 1, 1, 1, 1, 1, 1,     0, 0   ; 2nd row (ignore last 2 values)
                    defb    1, 1, 1, 1, 1, 1, 1,     0, 0   ; 3rd row (ignore last 2 values)
                    defb    1, 1, 1, 1, 1, 1, 1,     0, 0   ; 4th row (ignore last 2 values)
                    defb    1, 1, 1, 1, 1, 1, 1,     0, 0   ; 5th row (ignore last 2 values)
                    defb    1, 1, 1, 1, 1, 1, 1,     0, 0   ; 6th row (ignore last 2 values)
                    defb    1, 1, 1, 1, 1, 1, 1             ; 7th row

; -----------------------------------------------------------------------------
; Blue's PATHFINDER board. It contains a special surrounding border that helps
; identifying when the heuristic algorithm reached the top border, so it can
; interrupt processing earlier. WARNING: The border should never be changed!
;
; Before executing Path_Finder_Blue, the internal 7x7 positions (currently
; marked with 1) must be updated to reflect the current board, as follows:
;
; * EMPTY:  when this board position is empty
; * FRIEND: when this board position is occupied by blue
; * ENEMY:  when this board position is occupied by red
;
; IMPORTANT: This board must be located at a 256-aligned address.
; -----------------------------------------------------------------------------
                    org $7300
Board_Blue:
                    defb        0,  0,  0,  0,  0,  0,  0,  0
                    defb    255,  1,  1,  1,  1,  1,  1,  1, 255
                    defb      255,  1,  1,  1,  1,  1,  1,  1, 255
                    defb        255,  1,  1,  1,  1,  1,  1,  1, 255
                    defb          255,  1,  1,  1,  1,  1,  1,  1, 255
                    defb           255,  1,  1,  1,  1,  1,  1,  1, 255
                    defb             255,  1,  1,  1,  1,  1,  1,  1, 255
                    defb               255,  1,  1,  1,  1,  1,  1,  1, 255
                    defb                 255,255,255,255,255,255,255,255
Board_Blue_Final:
                    defb    255
                    defb    255

; -----------------------------------------------------------------------------
; Red's PATHFINDER board. It contains a special surrounding border that helps
; identifying when the heuristic algorithm reached the left border, so it can
; interrupt processing earlier. WARNING: The border should never be changed!
;
; Before executing Path_Finder_Red, the internal 7x7 positions (currently
; marked with 1) must be updated to reflect the current board, as follows:
;
; * EMPTY:  when this board position is empty
; * FRIEND: when this board position is occupied by red
; * ENEMY:  when this board position is occupied by blue
;
; IMPORTANT: This board must be located at a 256-aligned address.
; -----------------------------------------------------------------------------
                    org $7400
Board_Red:
                    defb     255,255,255,255,255,255,255,255
                    defb    0,  1,  1,  1,  1,  1,  1,  1, 255
                    defb      0,  1,  1,  1,  1,  1,  1,  1, 255
                    defb        0,  1,  1,  1,  1,  1,  1,  1, 255
                    defb          0,  1,  1,  1,  1,  1,  1,  1, 255
                    defb            0,  1,  1,  1,  1,  1,  1,  1, 255
                    defb              0,  1,  1,  1,  1,  1,  1,  1, 255
                    defb                0,  1,  1,  1,  1,  1,  1,  1, 255
                    defb                  0, 255,255,255,255,255,255,255
Board_Red_Final:
                    defb    255
                    defb    255

; -----------------------------------------------------------------------------
; Intersection board. Before running "Path_Tracker", this area must be filled
; with zeroes (except for final endmarker). After running "Path_Tracker", the
; positions in this board will have the following values:
;
; * 2: Empty positions that belong to a shortest path for both players.
; * 1: Empty positions that belong to a shortest path for one player only.
; * 0: Everything else.
;
; IMPORTANT: This board must be located at a 256-aligned address.
; -----------------------------------------------------------------------------
                    org $7500
Board_Intersect:
                    defb    0, 0, 0, 0, 0, 0, 0,     0, 0   ; (ignore this row)
Board_Intersect_Begin:
                    defb    0, 0, 0, 0, 0, 0, 0,     0, 0   ; 1st row (ignore last 2 values)
                    defb    0, 0, 0, 0, 0, 0, 0,     0, 0   ; 2nd row (ignore last 2 values)
                    defb    0, 0, 0, 0, 0, 0, 0,     0, 0   ; 3rd row (ignore last 2 values)
                    defb    0, 0, 0, 0, 0, 0, 0,     0, 0   ; 4th row (ignore last 2 values)
                    defb    0, 0, 0, 0, 0, 0, 0,     0, 0   ; 5th row (ignore last 2 values)
                    defb    0, 0, 0, 0, 0, 0, 0,     0, 0   ; 6th row (ignore last 2 values)
                    defb    0, 0, 0, 0, 0, 0, 0             ; 7th row
Board_Intersect_Final:
                    defb    255                             ; endmarker
