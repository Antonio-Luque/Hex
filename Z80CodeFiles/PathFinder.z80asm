; -----------------------------------------------------------------------------
; Based on PATHFINDER - https://spectrumcomputing.co.uk/entry/28178/ZX-Spectrum/PATHFINDER
; Adapted by Einar Saukas to be used as heuristic in Antonio Luque's Hex game.
; -----------------------------------------------------------------------------
WIDTH           EQU     9               ; distance to up-left/down-right neighbor
ORIGIN          EQU     0               ; origin positions on the board
EMPTY           EQU     1               ; empty positions on the board
FRIEND          EQU     2               ; friendly hexagons on the board
VICTORY         EQU     3               ; return value if victory
ENEMY           EQU     253
DEFEAT          EQU     255             ; return value if defeat

hex_board_blue  EQU     $6E00
hex_board_red   EQU     $6F00
hex_board_diff  EQU     $7000

; -----------------------------------------------------------------------------
; 256-aligned block reserved for circular queue
Queue_Area:
                defs    256

; These boards must be located immediately after Queue Area!
Board_Blue:
; Before executing Path_Finder_Blue, replace the 7x7 positions (currently marked with 1) as follows:
;   1 when your corresponding board position is empty
;   2 when your corresponding board position is occupied by blue
;   >2 when your corresponding board position is occupied by red
; WARNING: do not modify the borders!
                defb       0,  0,  0,  0,  0,  0,  0,  0
                defb    255, 1,  1,  1,  1,  1,  1,  1, 255
                defb      255, 1,  1,  1,  1,  1,  1,  1, 255
                defb        255, 1,  1,  1,  1,  1,  1,  1, 255
                defb          255, 1,  1,  1,  1,  1,  1,  1, 255
                defb            255, 1,  1,  1,  1,  1,  1,  1, 255
                defb              255, 1,  1,  1,  1,  1,  1,  1, 255
                defb                255, 1,  1,  1,  1,  1,  1,  1, 255
Board_Red:
; Before executing Path_Finder_Red, replace the 7x7 positions (currently marked with 1) as follows:
;   1 when your corresponding board position is empty
;   2 when your corresponding board position is occupied by red
;   >2 when your corresponding board position is occupied by blue
; WARNING: do not modify the borders!
                defb                  255,255,255,255,255,255,255,255
                defb                 0,  1,  1,  1,  1,  1,  1,  1, 255
                defb                   0,  1,  1,  1,  1,  1,  1,  1, 255
                defb                     0,  1,  1,  1,  1,  1,  1,  1, 255
                defb                       0,  1,  1,  1,  1,  1,  1,  1, 255
                defb                         0,  1,  1,  1,  1,  1,  1,  1, 255
                defb                           0,  1,  1,  1,  1,  1,  1,  1, 255
                defb                             0,  1,  1,  1,  1,  1,  1,  1, 255
                defb                               0, 255,255,255,255,255,255,255

; -----------------------------------------------------------------------------
; Return if current player is FRIEND or ENEMY from the perspective of the blue player
;
; Input:    TOKEN_COLOR (BLUE_TOKEN or RED_TOKEN)
; Output:   A - FRIEND if current player color is blue, ENEMY if current player color is red
; Destroys: -
; -----------------------------------------------------------------------------
Friend_Or_Foe:
                ld a,(TOKEN_COLOR)      ; set current player color in A
                rra                     ; is current player color BLUE?
                ld a,FRIEND             ; set FRIEND in A
                ret c                   ; yes, return FRIEND 
                cpl                     ; no, return ENEMY
                ret

; -----------------------------------------------------------------------------
; Put an hexagon on 'hex_board_blue' and 'hex_board_red' boards
;
; Input:    HL - pointer to the hexagon position on blue board
;            A - FRIEND or ENEMY from the perspective of blue player
; Output:    A - ENEMY if input was FRIEND, FRIEND if input was ENEMY
; -----------------------------------------------------------------------------
Put_Hexagon:
                ld (hl),a
                inc h
                cpl
                ld (hl),a
                ret

; -----------------------------------------------------------------------------
; Erase an hexagon on 'hex_board_blue' and 'hex_board_red' boards
;
; Input:    HL - pointer to the hexagon position on blue board
; Output:    -
; Destroys  HL
; -----------------------------------------------------------------------------
Erase_Hexagon:
                ld (hl),EMPTY
                inc h
                ld (hl),EMPTY
                ret

; -----------------------------------------------------------------------------
; Calculate current board score
;
; Input:    AI_PLAYER (FRIEND or ENEMY from the perspective of blue player)
; Output:   A  - ((player steps to win) minus (speccy steps to win)) * (-1)
;                or MAX_VALUE if speccy is the winner
;                or MIN_VALUE if player is the winner
; Destroys: BC, DE, HL, IXL
; -----------------------------------------------------------------------------
Board_Score:
                ld a,(AI_PLAYER)        ; get speccy side (FRIEND or ENEMY) in A

                call Speccy_Score       ; get speccy score and speccy side in A'
                ld a,VICTORY
                cp c                    ; is Speccy the winner?
                ld a,$FF
                ret z                   ; yes, return MAX value

                ld ixl,c                ; save speccy score in IXL

                ex af,af'               ; get Speccy side
                cpl                     ; convert to Player side

                call Player_Score       ; get player score
                ld a,VICTORY
                cp c                    ; is Player the winner?
                xor a
                ret z                   ; yes, return MIN value

                ld a,c                  ; set player score in A

                sub ixl                 ; A = (player steps to win) - (speccy steps to win)
                xor $80                 ; A = A * (-1) inverts sign for easier further comparative

                ret

; -----------------------------------------------------------------------------
; Copy an 'hex_board_(color)' to its corresponding 'Board_(Color)'
;
; Input:    HL - pointer to the 'hex_board_(color)' source
;           DE - pointer to the 'Board_(Color)' destination
; Output:   -
; Destroys: BC, HL, DE
; -----------------------------------------------------------------------------
Copy_Hex2Board:
                ld bc,49                ; number of positions to be copied (7x7)

Hex2Board
                inc e                   ; skip borders
                inc e

                ldi                     ; copy a row of 7 positions
                ldi
                ldi
                ldi
                ldi
                ldi
                ldi
                jp pe,Hex2Board         ; repeat for each row

                ret

; -----------------------------------------------------------------------------
; Calculate player score depending on player color
;
; Input:    A - FRIEND or ENEMY
; Output:   player heuristic result, see Path_Finder_(Color) routines below
; Destroys: B, DE, HL, AF
; -----------------------------------------------------------------------------
Player_Score:
                cp ENEMY                ; is player color red?
                jr z,RedScore           ; yes, calculate red score
; -----------------------------------------------------------------------------
; Calculate score for blue
;
BlueScore
                ex af,af'
                ld hl,hex_board_blue    ; HL points to hex_board_blue
                ld de,Board_Blue+7      ; DE points to Board_Blue+7 (skipping the firsts 7 bytes of the upper border)
                call Copy_Hex2Board     ; copy 'hex_board_blue' board to 'Board_Blue' board
; -----------------------------------------------------------------------------
; Calculate heuristic function for Blue
;
; Input:    -
; Output:   C = VICTORY if blue already won,
;           C = VICTORY+N if blue needs N steps to win
;           C = DEFEAT if blue already lost
; Destroys: B, DE, HL, AF
; -----------------------------------------------------------------------------
Path_Finder_Blue:
                ld      hl, (Path_Finder_Queue_Tail+1)
                push    hl
                ld      c, VICTORY
                ld      a, FRIEND
                ld      hl, Board_Blue+69
                cp      (hl)            ; 1st goal position not blocked?
                call    nc, Path_Finder_Update_Pos
                dec     l
                cp      (hl)            ; 2nd goal position not blocked?
                call    nc, Path_Finder_Update_Pos
                dec     l
                cp      (hl)            ; 3rd goal position not blocked?
                call    nc, Path_Finder_Update_Pos
                dec     l
                cp      (hl)            ; 4th goal position not blocked?
                call    nc, Path_Finder_Update_Pos
                dec     l
                cp      (hl)            ; 5th goal position not blocked?
                call    nc, Path_Finder_Update_Pos
                dec     l
                jr      Path_Finder_Begin_Blue
Path_Finder_Loop:
                inc     l               ; move Queue Head
                push    hl              ; preserve Queue Head
                ld      l,(hl)          ; retrieve next position to be checked
                inc     h
                ld      c, (hl)         ; retrieve distance from this position to start
                res     7, c            ; clean highest bit that indicates occupied position
                ld      a, FRIEND
                dec     l
                cp      (hl)            ; left neighbor not visited yet?
                call    nc, Path_Finder_Update_Pos
                inc     l
                inc     l
                cp      (hl)            ; right neighbor not visited yet?
                call    nc, Path_Finder_Update_Pos
                ld      a, l
                sub     WIDTH
                ld      l, a
                ld      a, FRIEND
                cp      (hl)            ; upper-right neighbor not visited yet?
                call    nc, Path_Finder_Update_Pos
                dec     l
                cp      (hl)            ; upper-left neighbor not visited yet?
                call    nc, Path_Finder_Update_Pos
                ld      de, WIDTH*2
                add     hl, de
Path_Finder_Begin_Blue:
                cp      (hl)            ; lower-right neighbor not visited yet?
                call    nc, Path_Finder_Update_Pos
                dec     l
Path_Finder_Begin_Red:
                cp      (hl)            ; lower-left neighbor not visited yet?
                call    nc, Path_Finder_Update_Pos
                pop     hl
                ld      a, (Path_Finder_Queue_Tail+1)
                cp      l               ; empty queue?
                jp      nz, Path_Finder_Loop
                ld      c, DEFEAT       ; no path to origin means we lost!
                ret

; -----------------------------------------------------------------------------
; Calculate speccy score depending on speccy color
;
; Input:    A - FRIEND or ENEMY
; Output:   speccy heuristic result, see Path_Finder_(Color) routines above and below
; Destroys: B, DE, HL, AF
; -----------------------------------------------------------------------------
Speccy_Score:
                cp FRIEND               ; is speccy color blue?
                jr z,BlueScore          ; yes, calculate blue score
; -----------------------------------------------------------------------------
; Calculate score for red
;
RedScore
                ex af,af'
                ld hl,hex_board_red     ; HL points to hex_board_red
                ld de,Board_Red+7       ; DE points to Board_Red+7 (skipping the firsts 7 bytes of the upper border)
                call Copy_Hex2Board         ; copy 'hex_board_red' board to 'Board_Red' board
; -----------------------------------------------------------------------------
; Calculate heuristic function for Red
;
; Input:    -
; Output:   C = VICTORY if red won,
;           C = VICTORY+N if red needs N steps to win
;           C = DEFEAT if red lost
; Destroys: B, DE, HL, AF
; -----------------------------------------------------------------------------
Path_Finder_Red:
                ld      hl, (Path_Finder_Queue_Tail+1)
                push    hl
                ld      c, VICTORY
                ld      a, FRIEND
                ld      hl, Board_Red+69
                cp      (hl)            ; 1st goal position not blocked?
                call    nc, Path_Finder_Update_Pos
                ld      l, (Board_Red+60)%256
                cp      (hl)            ; 2nd goal position not blocked?
                call    nc, Path_Finder_Update_Pos
                ld      l, (Board_Red+51)%256
                cp      (hl)            ; 3rd goal position not blocked?
                call    nc, Path_Finder_Update_Pos
                ld      l, (Board_Red+42)%256
                cp      (hl)            ; 4th goal position not blocked?
                call    nc, Path_Finder_Update_Pos
                ld      l, (Board_Red+33)%256
                cp      (hl)            ; 5th goal position not blocked?
                call    nc, Path_Finder_Update_Pos
                ld      l, (Board_Red+24)%256
                cp      (hl)            ; 6th goal position not blocked?
                call    nc, Path_Finder_Update_Pos
                ld      l, (Board_Red+15)%256
                jr      Path_Finder_Begin_Red

; -----------------------------------------------------------------------------
; Update current board position during heuristic function evaluation.
;
; This position will be updated with a number that indicates distance from
; goal, depending on current content:
;
; * EMPTY:  1 + distance of closest neighbour
; * FRIEND: distance of closest neighbour
; * ORIGIN: done!
;
; Input:    HL = points to current position (on either Board_Blue or Board_Red)
;           Z = flag set when (HL) = FRIEND
; Output:   -
; Destroys: B, DE
; -----------------------------------------------------------------------------
Path_Finder_Update_Pos:
                jr      z, Path_Finder_Friendly
                ld      b, (hl)
                djnz    Path_Finder_Victory
; if (HL) = EMPTY, then set (HL) = C+1 and insert HL at Queue Tail
                ld      (hl), c
                inc     (hl)
                ex      de, hl
Path_Finder_Queue_Tail:
                ld      hl, Queue_Area
                inc     l
                ld      (hl), e
                ld      (Path_Finder_Queue_Tail+1), hl
                ex      de, hl
                ret
; if (HL) = FRIEND, then set (HL) = C+128 and insert HL at Queue Head
Path_Finder_Friendly:
                ld      (hl), c
                set     7, (hl)         ; set highest bit to indicate occupied position
                ld      b, l
                pop     de              ; preserve RET address
                ex      (sp), hl        ; retrieve Queue Head
                ld      (hl), b         ; push this position into Queue Head
                dec     l
                ex      (sp), hl        ; update Queue Head
                push    de              ; restore RET address
                ret
; if (HL) = ORIGIN, then abort execution and return C = VICTORY+steps
Path_Finder_Victory:
                pop     hl
                pop     hl

                ret

; -----------------------------------------------------------------------------
;
; REVIEW!!
;
;
; -----------------------------------------------------------------------------
Bright_Path:
                ld a,(TOKEN_COLOR)
                ld hl,Board_Red+7
                rra                     ; is RED the current token color? 
                jr nc,CopyBoard
                ld hl,Board_Blue+7

CopyBoard
                ld de,hex_board_blue
;                call Copy_Board2Hex

                ld hl,hex_board_blue

BrightLoop
                ld a,(hl)
                cp VICTORY
                jr nz,NextHexagon

                ld a,l                  ; set node index in A
                call Node2_Indexes      ; convert node index into a pair of board indexes
                call GetHEX_Color       ; get the attributes memory address of an hexagon in screen

                ld a,(de)               ; get hexagon color
                set 6,a                 ; bright it
                ld (TOKEN_COLOR),a      ; store new color
                call SetHEX_Color       ; set the color of an hexagon in screen

NextHexagon
                inc l
                ld a,l
                cp 50
                jr nz,BrightLoop

                ret

; -----------------------------------------------------------------------------
;
; 
;
;
; -----------------------------------------------------------------------------
GetPlayer_Nodes:
                push de
                push af

                ld de,$7100             ; set address of nodes vector in BC
                ld a,(AI_DEPTH)         ; get recursion depth level
                rla                     ; calculate low address of nodes vector pointer
                rla
                rla
                rla                     ; A = AI_DEPTH * 16
                ld e,a                  ; set low address of nodes vector pointer in C

                push de

                ld b,49
                ld hl,hex_board_blue

NextNode
                ld a,(hl)
                ld c,l
                cp EMPTY
                jr nz,SkipNode

                ; do something to select node as candidate

                ld a,c
                ld (de),a
                inc e

SkipNode
                inc l
                djnz NextNode

                pop hl

                pop af
                pop de

                ret
