; -----------------------------------------------------------------------------
; Play.z80asm
; Coded by Antonio Luque
; -----------------------------------------------------------------------------

SEED                EQU     $5C76                   ; RAM address of seed system variable

; -----------------------------------------------------------------------------
; Speccy_Move: return the Speccy best move
;
; Input:    MOVE_NUMBER - current move number
;           GAME_LEVEL  - number of game level selected (1-5)
;           TOKEN_COLOR - current token color (BLUE_TOKEN or RED_TOKEN)
; Output:   A - board position of move in HEX_BOARD_BLUE or HEX_BOARD_RED
; Destroys: BC, HL, DE, IX
; -----------------------------------------------------------------------------
Speccy_Move:
                    ; check for the first move (openning book)

                    ld      a, (MOVE_NUMBER)        ; get move number
                    dec     a                       ; is it BLUE first move?
                    jr      z, FirstBlue_Move       ; yes, do first move as BLUE player

                    ; initialize BRAINIAC

                    ld      ix, CANDIDATES          ; candidates list 
                    ld      a, (GAME_LEVEL)         ; get game level
                    ld      (AI_DEPTH), a           ; save recursion depth level
                    call    Friend_Or_Foe           ; get speccy side
                    call    BRAINIAC_best_move      ; get speccy best move

                    ; return BRAINIAC move

                    ld      l, e                    ; set node index in L
                    jp      UpdateBoardPos          ; continue updating board position

                    ; get move from opening book
FirstBlue_Move
                    call    Random                  ; get a random number (0..255)
                    and     %00011111               ; number is in range (0..31)
                    cp      27                      ; is it >= 27?
                    jr      nc, FirstBlue_Move      ; yes, repeat until range is (0..26)
                    ld      hl, OPENINGS            ; HL points to opening book
                    ld      d, 0
                    ld      e, a
                    add     hl, de                  ; HL points to move index
                    ld      l, (hl)                 ; get move from opening book

                    ; update board position
UpdateBoardPos
                    ld      h, BLUE_BOARD/256       ; HL points to board position       
                    call    Friend_Or_Foe
                    call    Put_Token               ; update board position
                    ld      a, l                    ; return position in A
                    ret

; -----------------------------------------------------------------------------
; Return a random number
;
; Xor-shift random number generator by Patrik Rak:
; https://worldofspectrum.org/forums/discussion/23070/redirect/p1
;
; Input:    SEED - memory address of SEED system variable
; Output:   A - random number (0..255)
; Destroys: HL, DE
; -----------------------------------------------------------------------------
Random
                    ld      de, (SEED)              ; xz -> yw
                    ld      hl, (SEED+2)            ; yw -> zt
                    ld      (SEED), hl              ; x = y, z = w
                    ld      a, l                    ; w = w ^ ( w << 3 )
                    add     a, a
                    add     a, a
                    add     a, a
                    xor     l
                    ld      l, a
                    ld      a, d                    ; t = x ^ (x << 1)
                    add     a, a
                    xor     d
                    ld      h, a
                    rra                             ; t = t ^ (t >> 1) ^ w
                    xor     h
                    xor     l
                    ld      h, e                    ; y = z
                    ld      l, a                    ; w = t
                    ld      (SEED+2), hl
                    ret
