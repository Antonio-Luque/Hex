; ----------------------------------------------------------------------------------------------------------------------
; Data.z80asm
; Coded by Antonio Luque
;
; Definition of data, variables and tables
; ----------------------------------------------------------------------------------------------------------------------

STACK                   org     $6000

; ----------------------------------------------------------------------------------------------------------------------
; Circular queue
; ----------------------------------------------------------------------------------------------------------------------
CYAN_QUEUE_AREA         defs    256                         ; 256-aligned block reserved for circular queue

; ----------------------------------------------------------------------------------------------------------------------
; CYAN BOARDS: these boards must be located immediately after cyan queue area!
; 
; These boards hold a determined position of the board from cyan perspective. They are used to calculate CYAN "two-
; distance" (Jack van Rijswijck) from UP to DOWN edges and CYAN two-distance from DOWN to UP edges. The cyan UP-DOWN
; board is also used to store CYAN potentials and TOTAL potentials.
; 
; The values of $7F form the border of the board. The UP and DOWN edges are identified with 7th bit set and the lowest 3
; bits are the edge number. The rest of bytes indicates "two-distance" from goal (stored in lowest 6 bits), and a flag
; that indicates a position occupied by a friendly token (stored in 6th bit).
; ----------------------------------------------------------------------------------------------------------------------
CYAN_BOARD_UP_DOWN:
                        defb      $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F
                        defb    $7F, $00, $00, $00, $00, $00, $00, $00, $7F
                        defb       $7F, $00, $00, $00, $00, $00, $00, $00, $7F
                        defb          $7F, $00, $00, $00, $00, $00, $00, $00, $7F
                        defb             $7F, $00, $00, $00, $00, $00, $00, $00, $7F
                        defb                $7F, $00, $00, $00, $00, $00, $00, $00, $7F
                        defb                   $7F, $00, $00, $00, $00, $00, $00, $00, $7F
                        defb                      $7F, $00, $00, $00, $00, $00, $00, $00, $7F
                        defb                         $7F, $80, $81, $82, $83, $84, $85, $86, $7F
CYAN_BOARD_DOWN_UP:
                        defb    $7F, $00, $00, $00, $00, $00, $00, $00, $7F
                        defb       $7F, $00, $00, $00, $00, $00, $00, $00, $7F
                        defb          $7F, $00, $00, $00, $00, $00, $00, $00, $7F
                        defb             $7F, $00, $00, $00, $00, $00, $00, $00, $7F
                        defb                $7F, $00, $00, $00, $00, $00, $00, $00, $7F
                        defb                   $7F, $00, $00, $00, $00, $00, $00, $00, $7F
                        defb                      $7F, $00, $00, $00, $00, $00, $00, $00, $7F
                        defb                         $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F

; ----------------------------------------------------------------------------------------------------------------------
; Variables
; ----------------------------------------------------------------------------------------------------------------------
POTENTIALS:                                                 ; (must be in a 256-byte boundary)
                        defb    0                           ; board potential
                        defb    0                           ; attack mobility
AI_PLAYER               defb    0                           ; speccy side (FRIEND or ENEMY)
AI_DEPTH                defb    0                           ; recursion depth level (1-4)
MOVE_NUMBER             defb    0                           ; current move number
LEVEL_COLOR             defb    0                           ; current level color for frame border
GAME_LEVEL              defb    0                           ; current game level (1-4)
TOKEN_COLOR             defb    0                           ; current token color
PLAYER_COLOR            defb    5                           ; current player color

; ----------------------------------------------------------------------------------------------------------------------
; Screen addresses look-up table for board hexagons
;
; The first column contains the screen addresses high byte
; The rest of bytes are the screen addresses low byte
; ----------------------------------------------------------------------------------------------------------------------
BOARD_MAP:
                        defb    $40, $A6, $A8, $AA, $AC, $AE, $B0, $B2
                        defb    $40, $E7, $E9, $EB, $ED, $EF, $F1, $F3
                        defb    $48, $28, $2A, $2C, $2E, $30, $32, $34
                        defb    $48, $69, $6B, $6D, $6F, $71, $73, $75
                        defb    $48, $AA, $AC, $AE, $B0, $B2, $B4, $B6
                        defb    $48, $EB, $ED, $EF, $F1, $F3, $F5, $F7
                        defb    $50, $2C, $2E, $30, $32, $34, $36, $38

; ----------------------------------------------------------------------------------------------------------------------
; Keyboard array map
; ----------------------------------------------------------------------------------------------------------------------
KEY_MAP                 defm    " zxcvasdfgqwert1234509876poiuy\x0Dlkjh  mnb"

                        ;org     $6200
; ----------------------------------------------------------------------------------------------------------------------
; Vector table of routines (must be aligned at the next page of cyan board arrays)
; ----------------------------------------------------------------------------------------------------------------------
CYAN_VECTOR_TABLE:
                        defw    PathFinder_CYAN_Edge_0
                        defw    PathFinder_CYAN_Edge_1
                        defw    PathFinder_CYAN_Edge_2
                        defw    PathFinder_CYAN_Edge_3
                        defw    PathFinder_CYAN_Edge_4
                        defw    PathFinder_CYAN_Edge_5
                        defw    PathFinder_CYAN_Edge_6

; ----------------------------------------------------------------------------------------------------------------------
; Variables and strings
; ----------------------------------------------------------------------------------------------------------------------
PLAYER_MOVE:                                                ; player move in ASCII format
                        defb    0                           ; column ('a'..'g')
                        defb    0                           ; row ('1'..'7')
CHAR_COUNT              defb    0                           ; number of current characters in input player move
THREE_ROW               defb    0                           ; three-in-a-row counter
ROW_COLOR_MAP           defb    15, 14, 12, 11, 13, 10      ; level-color map for frame border
STR_MOVE                defb    0, '-', '0', 0, '\0'        ; formatted move string
STR_SPECCY              defm    "Speccy\0"
STR_PLAYER              defm    "Player\0"
STR_LEVELTEXT           defm    "Level\0"
STR_FILLED              defm    "FILLED\0"
STR_WAIT                defm    "WAIT\0"
STR_WINNER              defm    " WINS \0"
STR_EMPTY4              defm    "    \0"
STR_EMPTY6              defm    "      \0"

; ----------------------------------------------------------------------------------------------------------------------
; Conversion table: from position to XY board indexes
; ----------------------------------------------------------------------------------------------------------------------
BOARD_COORDINATES:
                        defb    $00, $00, $00, $00, $00, $00, $00, $00
                        defb    $00, $09, $0A, $0B, $0C, $0D, $0E, $0F
                        defb    $00, $12, $13, $14, $15, $16, $17, $18
                        defb    $00, $1B, $1C, $1D, $1E, $1F, $20, $21
                        defb    $00, $24, $25, $26, $27, $28, $29, $2A
                        defb    $00, $2D, $2E, $2F, $30, $31, $32, $33
                        defb    $00, $36, $37, $38, $39, $3A, $3B, $3C
                        defb    $00, $3F, $40, $41, $42, $43, $44, $45

; ----------------------------------------------------------------------------------------------------------------------
; Graphics map indexes for the frame tiles
; ----------------------------------------------------------------------------------------------------------------------
FRAME_MAP:
                        defb      0,   1,   1,   1,   1,   1,   2,   3
                        defb      4,  -1,  -1,  -1,  -1,  -1,  -1,  -1
                        defb      5,   6,   7,   1,   1,   1,   1,   1
                        defb      1,   1,   1,   1,   1,   1,   1,   8
                        defb      9,   1,   1,   1,   1,   1,   1,   1
                        defb      1,   1,   1,   1,   1,   1,   1,   1
                        defb     10,   6,  13,  13,  13,   3,  11,   1
                        defb      1,   1,   1,   1,   1,   1,   1,  12

; ----------------------------------------------------------------------------------------------------------------------
; Definition of a small "Opening Book" for speccy first move
; ----------------------------------------------------------------------------------------------------------------------
OPENINGS:
                        defb    $0F, $14, $16, $17, $18, $1C, $1D
                        defb    $1E, $1F, $20, $24, $25, $26, $27
                        defb    $28, $29, $2A, $2E, $2F, $30, $31
                        defb    $32, $36, $37, $38, $3A, $3F

; ----------------------------------------------------------------------------------------------------------------------
; Timer variables
; ----------------------------------------------------------------------------------------------------------------------
TIMER_FLAG              defb    0                           ; 0 = timer stopped, 1 = cyan timer on, 2 = red timer on
; for each timer:
;   1st byte = interrupt counter (incremented each 1/50 seconds)
;   2nd byte = seconds counter
;   3th byte = minutes counter
CYAN_TIMER              defb    50, 0, 0
RED_TIMER               defb    50, 0, 0

; ----------------------------------------------------------------------------------------------------------------------
; Screen addresses look-up array for board numbers
; ----------------------------------------------------------------------------------------------------------------------
NUMBER_SCREEN:
                        defw    $43A5, $43E6, $4B27, $4B68, $4BA9, $4BEA, $532B

                        ;org     $6300
; ----------------------------------------------------------------------------------------------------------------------
; Circular queue
; ----------------------------------------------------------------------------------------------------------------------
RED_QUEUE_AREA          defs    256                         ; 256-aligned block reserved for circular queue

; ----------------------------------------------------------------------------------------------------------------------
; RED BOARDS: these boards must be located immediately after red queue area!
; 
; These boards hold a determined position of the board from red perspective. They are used to calculate RED "two-
; distance" (Jack van Rijswijck) from LEFT to RIGHT edges and RED two-distance from RIGHT to LEFT edges. The red
; LEFT-RIGHT board is also used to store RED potentials.
; 
; The values of $7F form the border of the board. The LEFT-RIGHT edges are identified with Bit 7 set and the lowest 3
; bits are the edge number. The rest of bytes indicates "two-distance" from goal (stored in lowest 6 bits), and a flag
; that indicates a position occupied by a friendly token (stored in 6th bit).
; ----------------------------------------------------------------------------------------------------------------------
RED_BOARD_LEFT_RIGHT:
                        defb      $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F
                        defb    $7F, $00, $00, $00, $00, $00, $00, $00, $80
                        defb       $7F, $00, $00, $00, $00, $00, $00, $00, $81
                        defb          $7F, $00, $00, $00, $00, $00, $00, $00, $82
                        defb             $7F, $00, $00, $00, $00, $00, $00, $00, $83
                        defb                $7F, $00, $00, $00, $00, $00, $00, $00, $84
                        defb                   $7F, $00, $00, $00, $00, $00, $00, $00, $85
                        defb                      $7F, $00, $00, $00, $00, $00, $00, $00, $86
                        defb                         $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F
RED_BOARD_RIGHT_LEFT:
                        defb    $80, $00, $00, $00, $00, $00, $00, $00, $7F
                        defb       $81, $00, $00, $00, $00, $00, $00, $00, $7F
                        defb          $82, $00, $00, $00, $00, $00, $00, $00, $7F
                        defb             $83, $00, $00, $00, $00, $00, $00, $00, $7F
                        defb                $84, $00, $00, $00, $00, $00, $00, $00, $7F
                        defb                   $85, $00, $00, $00, $00, $00, $00, $00, $7F
                        defb                      $86, $00, $00, $00, $00, $00, $00, $00, $7F
                        defb                         $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F

; ----------------------------------------------------------------------------------------------------------------------
; Timer digits graphics. Must be in a 256 bytes boundary
; ----------------------------------------------------------------------------------------------------------------------
TIMER_DIGITS:
                        defb    $00, $0F, $0B, $0B, $0B, $0F, $00, $00
                        defb    $00, $06, $0E, $06, $06, $06, $00, $00
                        defb    $00, $0F, $03, $0F, $08, $0F, $00, $00
                        defb    $00, $0F, $03, $07, $03, $0F, $00, $00
                        defb    $00, $0B, $0B, $0F, $03, $03, $00, $00
                        defb    $00, $0F, $08, $0F, $03, $0F, $00, $00
                        defb    $00, $0F, $0C, $0F, $0D, $0F, $00, $00
                        defb    $00, $0F, $03, $03, $03, $03, $00, $00
                        defb    $00, $0F, $0B, $0F, $0B, $0F, $00, $00
                        defb    $00, $0F, $0B, $0F, $03, $0F, $00, $00

; ----------------------------------------------------------------------------------------------------------------------
; Tone parameters for sound effects
; ----------------------------------------------------------------------------------------------------------------------
; for each tone (from left to right):
;   - number of frames in the block, slide changes applied once per frame (1..65536)
;   - length of a frame (1..65536)
;   - tone pitch, lower numbers for lower tone (1..65536)
;   - pitch slide, this value is added to pitch every frame (-32767..32768)
; ----------------------------------------------------------------------------------------------------------------------
TOKEN_FX                defw       1, 1000, 1400,   0
WINNER_FX               defw       5, 5000,  200, 100
FILLED_FX               defw    1000,   10,  100,   0

FILLER                  defb    $FF                         ; filler to align next block (not used)

                        ;org     $6500
; ----------------------------------------------------------------------------------------------------------------------
; Vector table of routines (must be aligned at the next page of red board arrays)
; ----------------------------------------------------------------------------------------------------------------------
RED_VECTOR_TABLE:
                        defw    PathFinder_RED_Edge_0
                        defw    PathFinder_RED_Edge_1
                        defw    PathFinder_RED_Edge_2
                        defw    PathFinder_RED_Edge_3
                        defw    PathFinder_RED_Edge_4
                        defw    PathFinder_RED_Edge_5
                        defw    PathFinder_RED_Edge_6

; ----------------------------------------------------------------------------------------------------------------------
; Graphics for the screen frame
; ----------------------------------------------------------------------------------------------------------------------
FRAME_TILES:
                        defb    $00, $00, $1F, $3F, $3F, $3F, $3C, $3C
                        defb    $00, $00, $FF, $FF, $FF, $FF, $00, $00
                        defb    $00, $00, $FF, $FE, $FE, $FF, $00, $00
                        defb    $03, $07, $0F, $0F, $0F, $0F, $07, $03
                        defb    $FF, $FE, $FC, $FC, $FC, $FC, $FE, $FF
                        defb    $FF, $7F, $3F, $3F, $3F, $3F, $7F, $FF
                        defb    $C0, $E0, $F0, $F0, $F0, $F0, $E0, $C0
                        defb    $00, $00, $FF, $7F, $7F, $FF, $00, $00
                        defb    $00, $00, $F8, $FC, $FC, $FC, $3C, $3C
                        defb    $3C, $3C, $3F, $3F, $3F, $1F, $00, $00
                        defb    $00, $00, $FE, $FF, $FF, $FE, $00, $00
                        defb    $00, $00, $7F, $FF, $FF, $7F, $00, $00
                        defb    $3C, $3C, $FC, $FC, $FC, $F8, $00, $00
                        defb    $00, $00, $38, $7C, $7C, $38, $00, $00

; ----------------------------------------------------------------------------------------------------------------------
; Hexagon sprites
; ----------------------------------------------------------------------------------------------------------------------
HEXAGON_EMPTY:
                        defb    $07, $E0, $18, $18, $20, $04, $24, $04
                        defb    $48, $02, $48, $02, $40, $02, $40, $02
                        defb    $40, $02, $40, $02, $40, $12, $40, $12
                        defb    $20, $24, $20, $04, $18, $18, $07, $E0  
HEXAGON_SPRITE:
                        defb    $03, $C0, $0C, $30, $10, $08, $12, $08
                        defb    $24, $04, $24, $04, $20, $04, $20, $04
                        defb    $20, $04, $20, $04, $20, $24, $20, $24
                        defb    $10, $48, $10, $08, $0C, $30, $03, $C0

                        defb    $01, $80, $02, $40, $04, $20, $09, $10
                        defb    $0A, $10, $0A, $10, $08, $10, $08, $10
                        defb    $08, $10, $08, $10, $08, $50, $08, $50
                        defb    $08, $90, $04, $20, $02, $40, $01, $80

                        defb    $00, $80, $00, $80, $00, $80, $00, $80
                        defb    $00, $80, $00, $80, $00, $80, $00, $80
                        defb    $00, $80, $00, $80, $00, $80, $00, $80
                        defb    $00, $80, $00, $80, $00, $80, $00, $80  

                        defb    $01, $80, $02, $40, $05, $A0, $0B, $D0
                        defb    $0B, $D0, $0B, $D0, $0B, $D0, $0B, $D0
                        defb    $0B, $D0, $0B, $D0, $0B, $D0, $0B, $D0
                        defb    $0B, $D0, $05, $A0, $02, $40, $01, $80

                        defb    $03, $C0, $0C, $30, $13, $C8, $17, $E8
                        defb    $2F, $F4, $2F, $F4, $2F, $F4, $2F, $F4
                        defb    $2F, $F4, $2F, $F4, $2F, $F4, $2F, $F4
                        defb    $17, $E8, $13, $C8, $0C, $30, $03, $C0
HEXAGON_TOKEN:
                        defb    $07, $E0, $18, $18, $27, $E4, $2F, $F4
                        defb    $5F, $FA, $5F, $FA, $5F, $FA, $5F, $FA
                        defb    $5F, $FA, $5F, $FA, $5F, $FA, $5F, $FA
                        defb    $2F, $F4, $27, $E4, $18, $18, $07, $E0

; ----------------------------------------------------------------------------------------------------------------------
; Board letter sprites
; ----------------------------------------------------------------------------------------------------------------------
LETTER_SPRITES:
                        defb    $3C, $7E, $FF, $C3, $F3, $C3, $D3, $C3, $7E, $3C
                        defb    $3C, $7E, $CF, $CF, $C3, $CB, $CB, $C3, $7E, $3C
                        defb    $3C, $7E, $FF, $E3, $CF, $CF, $CF, $E3, $7E, $3C
                        defb    $3C, $7E, $F3, $F3, $C3, $D3, $D3, $C3, $7E, $3C
                        defb    $3C, $7E, $FF, $E3, $CB, $C3, $CF, $E3, $7E, $3C
                        defb    $3C, $7E, $E3, $CF, $C7, $CF, $CF, $CF, $7E, $3C
                        defb    $3C, $7E, $FF, $E3, $D3, $D3, $E3, $F3, $46, $3C

; ----------------------------------------------------------------------------------------------------------------------
; Board number sprites
; ----------------------------------------------------------------------------------------------------------------------
NUMBER_SPRITES:
                        defb    $3C, $7E, $E7, $C7, $E7, $E7, $E7, $E7, $7E, $3C
                        defb    $3C, $7E, $E7, $D3, $F3, $E7, $CF, $C3, $7E, $3C
                        defb    $3C, $7E, $C7, $F3, $E3, $F3, $F3, $C7, $7E, $3C
                        defb    $3C, $7E, $D3, $D3, $C3, $F3, $F3, $F3, $7E, $3C
                        defb    $3C, $7E, $C3, $CF, $C7, $F3, $F3, $C7, $7E, $3C
                        defb    $3C, $7E, $E3, $CF, $C3, $CB, $CB, $C3, $7E, $3C
                        defb    $3C, $7E, $C3, $F3, $F3, $E7, $E7, $E7, $7E, $3C

; ----------------------------------------------------------------------------------------------------------------------
; Screen addresses for menu hexagons
; ----------------------------------------------------------------------------------------------------------------------
MENU_HEXAGONS:
                        defw    $4001, $4005, $4008, $400C, $400F, $4013, $401A
                        defw    $4045, $4048, $4052, $405D, $4081, $4083, $4085
                        defw    $4088, $408A, $4091, $409D, $40C1, $40D0, $40D9
                        defw    $4805, $4808, $480A, $4813, $4819, $481B, $481D
                        defw    $400A, $4059, $40BB, $40C5, $40D2, $480C, $401C
                        defw    $4041, $4050, $40C8, $4801, $480F
SAMPLE_BOARD_RED:
                        defw    $4869, $486B, $482C, $482E, $40EF, $40F1, $40B2
                        defw    $40E9, $486F, $4830, $40F3, $48AA, $40AC, $48EF
                        defw    $482A, $486D, $40ED, $48AE
SAMPLE_BOARD_CYAN:
                        defw    $40AE, $40EF, $4830, $486F, $48AE, $48EF, $502E
                        defw    $48AC, $48B4, $486B, $486D, $482E, $40F1, $40F3
                        defw    $4873, $48B2, $5030

; ----------------------------------------------------------------------------------------------------------------------
; Strings
; ----------------------------------------------------------------------------------------------------------------------
STR_OPTIONS:
                        defm    "Start new game\0"
                        defm    "How to play\0"
                        defm    "Credits\0"
STR_CREDITS:
                        defm    "Design:     Antonio Luque\0"
                        defm    "Code:       Antonio Luque\0"
                        defm    "            Einar Saukas\0"
                        defm    "Font:       Einar Saukas\0"
                        defm    "Graphics:   Einar Saukas\0"
                        defm    "            Antonio Luque\0"
STR_PRESSKEY            defm    "Press any key\0"
STR_BUTTONS:
                        defm    "Next\0"
                        defm    "Back\0"
STR_RED                 defm    "RED\0"
STR_CYAN                defm    "CYAN\0"
STR_HELP1               defm    "Connect\0"
STR_HELP2_RED           defm    "left and\0"
STR_HELP2_CYAN          defm    "up and\0"
STR_HELP3_RED           defm    "right\0"
STR_HELP3_CYAN          defm    "down\0"
STR_HELP4               defm    "borders\0"
STR_HELP5               defm    "to win\0"
STR_HELP:
                        defm    "Win three\0"
                        defm    "times in\0"
                        defm    "a row to\0"
                        defm    "level up\0"
STR_CONGRATS            defm    " CONGRATULATIONS \0"
STR_LAST_LEVEL:
                        defm    "Well done! Last level passed\0"
                        defm    "Choose level to restart, 1-4\0"

; ----------------------------------------------------------------------------------------------------------------------
; Based on "King" font https://spectrumcomputing.co.uk/entry/25245/ZX-Spectrum/ZX-ALFA
; this font was designed by Einar Saukas for Hex game
; ----------------------------------------------------------------------------------------------------------------------
FONT:
                        includebin "King+.bin"
