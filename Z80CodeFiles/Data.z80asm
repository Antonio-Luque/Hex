; -----------------------------------------------------------------------------
; Data.z80asm
; Coded by Antonio Luque
;
; Definition of data, variables and tables
; -----------------------------------------------------------------------------
                    org     $6000

; -----------------------------------------------------------------------------
; Circular queue
; -----------------------------------------------------------------------------
BLUE_QUEUE_AREA     defs    256                     ; 256-aligned block reserved for circular queue

; -----------------------------------------------------------------------------
; These boards must be located immediately after Queue Area!
; -----------------------------------------------------------------------------
BLUE_BOARD_UP_DOWN
                    defb      $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F
                    defb    $7F, $00, $00, $00, $00, $00, $00, $00, $7F
                    defb       $7F, $00, $00, $00, $00, $00, $00, $00, $7F
                    defb          $7F, $00, $00, $00, $00, $00, $00, $00, $7F
                    defb             $7F, $00, $00, $00, $00, $00, $00, $00, $7F
                    defb                $7F, $00, $00, $00, $00, $00, $00, $00, $7F
                    defb                   $7F, $00, $00, $00, $00, $00, $00, $00, $7F
                    defb                      $7F, $00, $00, $00, $00, $00, $00, $00, $7F
                    defb                         $7F, $80, $81, $82, $83, $84, $85, $86, $7F
BLUE_BOARD_DOWN_UP
                    defb    $7F, $00, $00, $00, $00, $00, $00, $00, $7F
                    defb       $7F, $00, $00, $00, $00, $00, $00, $00, $7F
                    defb          $7F, $00, $00, $00, $00, $00, $00, $00, $7F
                    defb             $7F, $00, $00, $00, $00, $00, $00, $00, $7F
                    defb                $7F, $00, $00, $00, $00, $00, $00, $00, $7F
                    defb                   $7F, $00, $00, $00, $00, $00, $00, $00, $7F
                    defb                      $7F, $00, $00, $00, $00, $00, $00, $00, $7F
                    defb                         $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F

; -----------------------------------------------------------------------------
; Variables
; -----------------------------------------------------------------------------
POTENTIALS:
BLUE_POTENTIAL      defb    0                       ; blue board potential
BLUE_MOBILITY       defb    0                       ; blue attack mobility
RED_POTENTIAL       defb    0                       ; red board potential
RED_MOBILITY        defb    0                       ; red attack mobility
AI_PLAYER           defb    0                       ; speccy side (FRIEND or ENEMY)
AI_DEPTH            defb    0                       ; recursion depth level (1-5)
GAME_LEVEL          defb    0                       ; number of game level selected (1-5)

; -----------------------------------------------------------------------------
; Attributes/Screen look-up table for HEX board
;
; (First byte unused)
;   Row 0: contains Hi-Byte screen memory addresses
;   Column 0: contains Hi-Byte attribute memory addresses
; Rest of bytes are the Lo-Byte attr/screen memory addresses
; -----------------------------------------------------------------------------
BOARD_MAP:
                    defb    $00, $40, $40, $48, $48, $48, $48, $50
                    defb    $58, $A6, $A8, $AA, $AC, $AE, $B0, $B2
                    defb    $58, $E7, $E9, $EB, $ED, $EF, $F1, $F3
                    defb    $59, $28, $2A, $2C, $2E, $30, $32, $34
                    defb    $59, $69, $6B, $6D, $6F, $71, $73, $75
                    defb    $59, $AA, $AC, $AE, $B0, $B2, $B4, $B6
                    defb    $59, $EB, $ED, $EF, $F1, $F3, $F5, $F7
                    defb    $5A, $2C, $2E, $30, $32, $34, $36, $38

; -----------------------------------------------------------------------------
; Token graphic
; -----------------------------------------------------------------------------
TOKEN:
                    defb      7, 224,  31, 248,  56,  28, 115, 206
                    defb    103, 230, 111, 118, 111, 182, 111, 182
                    defb    111, 246, 111, 246, 111, 246, 103, 230
                    defb    115, 206,  56,  28,  31, 248,   7, 224

; -----------------------------------------------------------------------------
; Variables
; -----------------------------------------------------------------------------
NUM_PLAYERS         defb    0                       ; number of players selected (1 or 2)
PLAYER_COLOR        defb    0                       ; player color selected (BLUE_TOKEN or RED_TOKEN)

; -----------------------------------------------------------------------------
; Circular queue
; -----------------------------------------------------------------------------
RED_QUEUE_AREA      defs    256                     ; 256-aligned block reserved for circular queue

; -----------------------------------------------------------------------------
; These boards must be located immediately after Queue Area!
; -----------------------------------------------------------------------------
RED_BOARD_LEFT_RIGHT
                    defb      $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F
                    defb    $7F, $00, $00, $00, $00, $00, $00, $00, $80
                    defb       $7F, $00, $00, $00, $00, $00, $00, $00, $81
                    defb          $7F, $00, $00, $00, $00, $00, $00, $00, $82
                    defb             $7F, $00, $00, $00, $00, $00, $00, $00, $83
                    defb                $7F, $00, $00, $00, $00, $00, $00, $00, $84
                    defb                   $7F, $00, $00, $00, $00, $00, $00, $00, $85
                    defb                      $7F, $00, $00, $00, $00, $00, $00, $00, $86
                    defb                         $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F
RED_BOARD_RIGHT_LEFT
                    defb    $80, $00, $00, $00, $00, $00, $00, $00, $7F
                    defb       $81, $00, $00, $00, $00, $00, $00, $00, $7F
                    defb          $82, $00, $00, $00, $00, $00, $00, $00, $7F
                    defb             $83, $00, $00, $00, $00, $00, $00, $00, $7F
                    defb                $84, $00, $00, $00, $00, $00, $00, $00, $7F
                    defb                   $85, $00, $00, $00, $00, $00, $00, $00, $7F
                    defb                      $86, $00, $00, $00, $00, $00, $00, $00, $7F
                    defb                         $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F

; -----------------------------------------------------------------------------
; Hexagon graphic
; -----------------------------------------------------------------------------
HEXAGON:
                    defb      7, 224,  28,  56,  48,  12,  96,   6
                    defb     64,   2,  64,   2,  64,   2,  64,   2
                    defb     64,   2,  64,   2,  64,   2,  64,   2
                    defb     96,   6,  48,  12,  28,  56,   7, 224

; -----------------------------------------------------------------------------
; Strings
; -----------------------------------------------------------------------------
STR_WAIT            defm    "WAIT\0"
STR_EMPTY4          defm    "    \0"
STR_EMPTY6          defm    "      \0"
STR_MOVE            defb    0, '-', 0, 0, 0

; -----------------------------------------------------------------------------
; Variables
; -----------------------------------------------------------------------------
CHAR_ATTR           defb    %00101000               ; default char attribute: bright 0, flash 0, paper 5, ink 0
MOVE_POSXY:
MOVE_POSX           defb    0                       ; current player X input/output screen location
MOVE_POSY           defb    0                       ; current player Y input/output screen location

; -----------------------------------------------------------------------------
; Strings
; -----------------------------------------------------------------------------
STR_PLAYERS         defm    "One or two players? 1/2\0"
STR_COLORS          defm    "Choose blue or red, b/r\0"

; -----------------------------------------------------------------------------
; Vector table of routines (must be aligned)
; -----------------------------------------------------------------------------
BLUE_VECTOR_TABLE
                    defw    path_finder_BLUE_edge_0
                    defw    path_finder_BLUE_edge_1
                    defw    path_finder_BLUE_edge_2
                    defw    path_finder_BLUE_edge_3
                    defw    path_finder_BLUE_edge_4
                    defw    path_finder_BLUE_edge_5
                    defw    path_finder_BLUE_edge_6

; -----------------------------------------------------------------------------
; Strings
; -----------------------------------------------------------------------------
STR_LEVEL           defm    "Select game level, 1-5 \0"
STR_CLEAR           defm    "                       \0"
STR_SPECCY          defm    "Speccy\0"
STR_PLAYER          defm    "Player\0"
STR_LEVELTEXT       defm    "Level\0"
STR_NOLEVEL         defm    "       \0"

; -----------------------------------------------------------------------------
; 1 to 5 keys mapping
; -----------------------------------------------------------------------------
KEYS_MAP            defb    '1', '2', '3', '4', '5'

; -----------------------------------------------------------------------------
; Variables
; -----------------------------------------------------------------------------
CHAR_COUNT          defb    0                       ; number of current chars in input string

; -----------------------------------------------------------------------------
; Strings
; -----------------------------------------------------------------------------
STR_HEADER          defm    " HEX \0"
STR_FILLED          defm    "FILLED\0"
STR_WINNER          defm    " WINS \0"

; -----------------------------------------------------------------------------
; Variables
; -----------------------------------------------------------------------------
TOKEN_COLOR         defb    0                       ; current token color (BLUE_TOKEN or RED_TOKEN)
MOVE_NUMBER         defb    0                       ; current move number
PLAYER_MOVE         defb    0, 0, 0, 0              ; 4 bytes for input player move

; -----------------------------------------------------------------------------
BOARD_COORDINATES:
                    defb    $00, $00, $00, $00, $00, $00, $00, $00
                    defb    $00, $09, $0A, $0B, $0C, $0D, $0E, $0F
                    defb    $00, $12, $13, $14, $15, $16, $17, $18
                    defb    $00, $1B, $1C, $1D, $1E, $1F, $20, $21
                    defb    $00, $24, $25, $26, $27, $28, $29, $2A
                    defb    $00, $2D, $2E, $2F, $30, $31, $32, $33
                    defb    $00, $36, $37, $38, $39, $3A, $3B, $3C
                    defb    $00, $3F, $40, $41, $42, $43, $44, $45

; -----------------------------------------------------------------------------
; Sounds of the game
; -----------------------------------------------------------------------------
FILLED_FX           defw    1000, 10, 100, 0, 128
TOKEN_FX            defw    1, 200, 1000, 0, 128
WINNER_FX           defw    5, 5000, 200, 100, 128

; -----------------------------------------------------------------------------
; Definition of a small "Opening Book" for speccy first moves
;   1st byte - first blue move
;   2nd byte - response red move
; -----------------------------------------------------------------------------
OPENINGS:
                    defb    $1F, $30
                    defb    $26, $2F
                    defb    $27, $38
                    defb    $28, $1F
                    defb    $2F, $1E
                    defb         $27                ; red player default response (center node)

                    ALIGN

; -----------------------------------------------------------------------------
; Vector table of routines (must be aligned)
; -----------------------------------------------------------------------------
RED_VECTOR_TABLE
                    defw    path_finder_RED_edge_0
                    defw    path_finder_RED_edge_1
                    defw    path_finder_RED_edge_2
                    defw    path_finder_RED_edge_3
                    defw    path_finder_RED_edge_4
                    defw    path_finder_RED_edge_5
                    defw    path_finder_RED_edge_6

; -----------------------------------------------------------------------------
; Based on "King" font https://spectrumcomputing.co.uk/entry/25245/ZX-Spectrum/ZX-ALFA
; this font was designed by Einar Saukas for Hex game
; -----------------------------------------------------------------------------
FONT
                    includebin "King+.bin"
