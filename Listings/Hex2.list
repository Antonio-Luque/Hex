
; File #0: C:\Users\Antonio\source\repos\Hex\Z80CodeFiles\Hex2.z80asm

8000             0 1 ; ----------------------------------------------------------------------------------------------------------------------
8000             0 2 ; Hex2.z80asm
8000             0 3 ; Coded by Antonio Luque
8000             0 4 ;
8000             0 5 ; Build file
8000             0 6 ; ----------------------------------------------------------------------------------------------------------------------

; File #1: C:\Users\Antonio\source\repos\Hex\Z80CodeFiles\Data.z80asm

8000             1 1 ; ----------------------------------------------------------------------------------------------------------------------
8000             1 2 ; Data.z80asm
8000             1 3 ; Coded by Antonio Luque
8000             1 4 ;
8000             1 5 ; Definition of data, variables and tables
8000             1 6 ; ----------------------------------------------------------------------------------------------------------------------
8000             1 8 STACK                   ORG     $6000
6000             1 10 ; ----------------------------------------------------------------------------------------------------------------------
6000             1 11 ; Circular queue
6000             1 12 ; ----------------------------------------------------------------------------------------------------------------------
6000 00 00 00 00 1 13 CYAN_QUEUE_AREA         DEFS    256
6004 00 00 00 00 1 13 
6008 00 00 00 00 1 13 
600C 00 00 00 00 1 13 
6010 00 00 00 00 1 13 
6014 00 00 00 00 1 13 
6018 00 00 00 00 1 13 
601C 00 00 00 00 1 13 
6020 00 00 00 00 1 13 
6024 00 00 00 00 1 13 
6028 00 00 00 00 1 13 
602C 00 00 00 00 1 13 
6030 00 00 00 00 1 13 
6034 00 00 00 00 1 13 
6038 00 00 00 00 1 13 
603C 00 00 00 00 1 13 
6040 00 00 00 00 1 13 
6044 00 00 00 00 1 13 
6048 00 00 00 00 1 13 
604C 00 00 00 00 1 13 
6050 00 00 00 00 1 13 
6054 00 00 00 00 1 13 
6058 00 00 00 00 1 13 
605C 00 00 00 00 1 13 
6060 00 00 00 00 1 13 
6064 00 00 00 00 1 13 
6068 00 00 00 00 1 13 
606C 00 00 00 00 1 13 
6070 00 00 00 00 1 13 
6074 00 00 00 00 1 13 
6078 00 00 00 00 1 13 
607C 00 00 00 00 1 13 
6080 00 00 00 00 1 13 
6084 00 00 00 00 1 13 
6088 00 00 00 00 1 13 
608C 00 00 00 00 1 13 
6090 00 00 00 00 1 13 
6094 00 00 00 00 1 13 
6098 00 00 00 00 1 13 
609C 00 00 00 00 1 13 
60A0 00 00 00 00 1 13 
60A4 00 00 00 00 1 13 
60A8 00 00 00 00 1 13 
60AC 00 00 00 00 1 13 
60B0 00 00 00 00 1 13 
60B4 00 00 00 00 1 13 
60B8 00 00 00 00 1 13 
60BC 00 00 00 00 1 13 
60C0 00 00 00 00 1 13 
60C4 00 00 00 00 1 13 
60C8 00 00 00 00 1 13 
60CC 00 00 00 00 1 13 
60D0 00 00 00 00 1 13 
60D4 00 00 00 00 1 13 
60D8 00 00 00 00 1 13 
60DC 00 00 00 00 1 13 
60E0 00 00 00 00 1 13 
60E4 00 00 00 00 1 13 
60E8 00 00 00 00 1 13 
60EC 00 00 00 00 1 13 
60F0 00 00 00 00 1 13 
60F4 00 00 00 00 1 13 
60F8 00 00 00 00 1 13 
60FC 00 00 00 00 1 13 
6100             1 15 ; ----------------------------------------------------------------------------------------------------------------------
6100             1 16 ; CYAN BOARDS: these boards must be located immediately after cyan queue area!
6100             1 17 ; 
6100             1 18 ; These boards hold a determined position of the board from cyan perspective. They are used to calculate CYAN "two-
6100             1 19 ; distance" (Jack van Rijswijck) from UP to DOWN edges and CYAN two-distance from DOWN to UP edges. The cyan UP-DOWN
6100             1 20 ; board is also used to store CYAN potentials and TOTAL potentials.
6100             1 21 ; 
6100             1 22 ; The values of $7F form the border of the board. The UP and DOWN edges are identified with 7th bit set and the lowest 3
6100             1 23 ; bits are the edge number. The rest of bytes indicates "two-distance" from goal (stored in lowest 6 bits), and a flag
6100             1 24 ; that indicates a position occupied by a friendly token (stored in 6th bit).
6100             1 25 ; ----------------------------------------------------------------------------------------------------------------------
6100             1 26 CYAN_BOARD_UP_DOWN:
6100 7F 7F 7F 7F 1 27 DEFB      $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F
6104 7F 7F 7F 7F 1 27 
6108 7F 00 00 00 1 28 DEFB    $7F, $00, $00, $00, $00, $00, $00, $00, $7F
610C 00 00 00 00 1 28 
6110 7F          1 28 
6111 7F 00 00 00 1 29 DEFB       $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6115 00 00 00 00 1 29 
6119 7F          1 29 
611A 7F 00 00 00 1 30 DEFB          $7F, $00, $00, $00, $00, $00, $00, $00, $7F
611E 00 00 00 00 1 30 
6122 7F          1 30 
6123 7F 00 00 00 1 31 DEFB             $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6127 00 00 00 00 1 31 
612B 7F          1 31 
612C 7F 00 00 00 1 32 DEFB                $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6130 00 00 00 00 1 32 
6134 7F          1 32 
6135 7F 00 00 00 1 33 DEFB                   $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6139 00 00 00 00 1 33 
613D 7F          1 33 
613E 7F 00 00 00 1 34 DEFB                      $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6142 00 00 00 00 1 34 
6146 7F          1 34 
6147 7F 80 81 82 1 35 DEFB                         $7F, $80, $81, $82, $83, $84, $85, $86, $7F
614B 83 84 85 86 1 35 
614F 7F          1 35 
6150             1 36 CYAN_BOARD_DOWN_UP:
6150 7F 00 00 00 1 37 DEFB    $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6154 00 00 00 00 1 37 
6158 7F          1 37 
6159 7F 00 00 00 1 38 DEFB       $7F, $00, $00, $00, $00, $00, $00, $00, $7F
615D 00 00 00 00 1 38 
6161 7F          1 38 
6162 7F 00 00 00 1 39 DEFB          $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6166 00 00 00 00 1 39 
616A 7F          1 39 
616B 7F 00 00 00 1 40 DEFB             $7F, $00, $00, $00, $00, $00, $00, $00, $7F
616F 00 00 00 00 1 40 
6173 7F          1 40 
6174 7F 00 00 00 1 41 DEFB                $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6178 00 00 00 00 1 41 
617C 7F          1 41 
617D 7F 00 00 00 1 42 DEFB                   $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6181 00 00 00 00 1 42 
6185 7F          1 42 
6186 7F 00 00 00 1 43 DEFB                      $7F, $00, $00, $00, $00, $00, $00, $00, $7F
618A 00 00 00 00 1 43 
618E 7F          1 43 
618F 7F 7F 7F 7F 1 44 DEFB                         $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F
6193 7F 7F 7F 7F 1 44 
6197             1 46 ; ----------------------------------------------------------------------------------------------------------------------
6197             1 47 ; Variables
6197             1 48 ; ----------------------------------------------------------------------------------------------------------------------
6197             1 49 POTENTIALS:                                                 ; (must be in a 256-byte boundary)
6197 00          1 50 DEFB    0                           ; speccy board potential
6198 00          1 51 DEFB    0                           ; speccy attack mobility
6199 00          1 52 GAME_LEVEL              DEFB    0                           ; current game level (1-4)
619A 00          1 53 AI_DEPTH                DEFB    0                           ; recursion depth level (1-4)
619B 00          1 54 AI_PLAYER               DEFB    0                           ; speccy side (FRIEND or ENEMY)
619C 00          1 55 LEVEL_COLOR             DEFB    0                           ; current level color for frame border
619D 00          1 56 MOVE_NUMBER             DEFB    0                           ; current move number
619E 00          1 57 TOKEN_COLOR             DEFB    0                           ; current token color
619F 05          1 58 PLAYER_COLOR            DEFB    5                           ; current player color
61A0             1 60 ; ----------------------------------------------------------------------------------------------------------------------
61A0             1 61 ; Screen addresses look-up table for board hexagons
61A0             1 62 ;
61A0             1 63 ; The first column contains the screen addresses high byte
61A0             1 64 ; The rest of bytes are the screen addresses low byte
61A0             1 65 ; ----------------------------------------------------------------------------------------------------------------------
61A0             1 66 BOARD_MAP:
61A0 40 A6 A8 AA 1 67 DEFB    $40, $A6, $A8, $AA, $AC, $AE, $B0, $B2
61A4 AC AE B0 B2 1 67 
61A8 40 E7 E9 EB 1 68 DEFB    $40, $E7, $E9, $EB, $ED, $EF, $F1, $F3
61AC ED EF F1 F3 1 68 
61B0 48 28 2A 2C 1 69 DEFB    $48, $28, $2A, $2C, $2E, $30, $32, $34
61B4 2E 30 32 34 1 69 
61B8 48 69 6B 6D 1 70 DEFB    $48, $69, $6B, $6D, $6F, $71, $73, $75
61BC 6F 71 73 75 1 70 
61C0 48 AA AC AE 1 71 DEFB    $48, $AA, $AC, $AE, $B0, $B2, $B4, $B6
61C4 B0 B2 B4 B6 1 71 
61C8 48 EB ED EF 1 72 DEFB    $48, $EB, $ED, $EF, $F1, $F3, $F5, $F7
61CC F1 F3 F5 F7 1 72 
61D0 50 2C 2E 30 1 73 DEFB    $50, $2C, $2E, $30, $32, $34, $36, $38
61D4 32 34 36 38 1 73 
61D8             1 75 ; ----------------------------------------------------------------------------------------------------------------------
61D8             1 76 ; Keyboard array map
61D8             1 77 ; ----------------------------------------------------------------------------------------------------------------------
61D8 20 7A 78 63 1 78 KEY_MAP                 DEFM    " zxcvasdfgqwert1234509876poiuy\x0Dlkjh  mnb"
61DC 76 61 73 64 1 78 
61E0 66 67 71 77 1 78 
61E4 65 72 74 31 1 78 
61E8 32 33 34 35 1 78 
61EC 30 39 38 37 1 78 
61F0 36 70 6F 69 1 78 
61F4 75 79 0D 6C 1 78 
61F8 6B 6A 68 20 1 78 
61FC 20 6D 6E 62 1 78 
6200             1 80 ;ORG     $6200
6200             1 81 ; ----------------------------------------------------------------------------------------------------------------------
6200             1 82 ; Vector table of routines (must be aligned at the next page of cyan board arrays)
6200             1 83 ; ----------------------------------------------------------------------------------------------------------------------
6200             1 84 CYAN_VECTOR_TABLE:
6200 63 73       1 85 DEFW    PathFinder_CYAN_Edge_0
6202 83 73       1 86 DEFW    PathFinder_CYAN_Edge_1
6204 9E 73       1 87 DEFW    PathFinder_CYAN_Edge_2
6206 BC 73       1 88 DEFW    PathFinder_CYAN_Edge_3
6208 DB 73       1 89 DEFW    PathFinder_CYAN_Edge_4
620A F9 73       1 90 DEFW    PathFinder_CYAN_Edge_5
620C 14 74       1 91 DEFW    PathFinder_CYAN_Edge_6
620E             1 93 ; ----------------------------------------------------------------------------------------------------------------------
620E             1 94 ; Variables and strings
620E             1 95 ; ----------------------------------------------------------------------------------------------------------------------
620E 00          1 96 THREE_ROW               DEFB    0                           ; three-in-a-row counter
620F 0F 0E 0C 0B 1 97 ROW_COLOR_MAP           DEFB    15, 14, 12, 11, 13, 10      ; level-color map for frame border
6213 0D 0A       1 97 
6215 00 2D 30 00 1 98 STR_MOVE                DEFB    0, '-', '0', 0, '\0'        ; formatted move string
6219 00          1 98 
621A 53 70 65 63 1 99 STR_SPECCY              DEFM    "Speccy\0"
621E 63 79 00    1 99 
6221 50 6C 61 79 1 100 STR_PLAYER              DEFM    "Player\0"
6225 65 72 00    1 100 
6228 4C 65 76 65 1 101 STR_LEVELTEXT           DEFM    "Level\0"
622C 6C 00       1 101 
622E 46 49 4C 4C 1 102 STR_FILLED              DEFM    "FILLED\0"
6232 45 44 00    1 102 
6235 57 41 49 54 1 103 STR_WAIT                DEFM    "WAIT\0"
6239 00          1 103 
623A 20 57 49 4E 1 104 STR_WINNER              DEFM    " WINS \0"
623E 53 20 00    1 104 
6241 20 20 20 20 1 105 STR_EMPTY4              DEFM    "    \0"
6245 00          1 105 
6246 20 20 20 20 1 106 STR_EMPTY6              DEFM    "      \0"
624A 20 20 00    1 106 
624D             1 108 ; ----------------------------------------------------------------------------------------------------------------------
624D             1 109 ; Conversion table: from position to XY board indexes
624D             1 110 ; ----------------------------------------------------------------------------------------------------------------------
624D             1 111 BOARD_COORDINATES:
624D 00 00 00 00 1 112 DEFB    $00, $00, $00, $00, $00, $00, $00, $00
6251 00 00 00 00 1 112 
6255 00 09 0A 0B 1 113 DEFB    $00, $09, $0A, $0B, $0C, $0D, $0E, $0F
6259 0C 0D 0E 0F 1 113 
625D 00 12 13 14 1 114 DEFB    $00, $12, $13, $14, $15, $16, $17, $18
6261 15 16 17 18 1 114 
6265 00 1B 1C 1D 1 115 DEFB    $00, $1B, $1C, $1D, $1E, $1F, $20, $21
6269 1E 1F 20 21 1 115 
626D 00 24 25 26 1 116 DEFB    $00, $24, $25, $26, $27, $28, $29, $2A
6271 27 28 29 2A 1 116 
6275 00 2D 2E 2F 1 117 DEFB    $00, $2D, $2E, $2F, $30, $31, $32, $33
6279 30 31 32 33 1 117 
627D 00 36 37 38 1 118 DEFB    $00, $36, $37, $38, $39, $3A, $3B, $3C
6281 39 3A 3B 3C 1 118 
6285 00 3F 40 41 1 119 DEFB    $00, $3F, $40, $41, $42, $43, $44, $45
6289 42 43 44 45 1 119 
628D             1 121 ; ----------------------------------------------------------------------------------------------------------------------
628D             1 122 ; Graphics map indexes for the frame tiles
628D             1 123 ; ----------------------------------------------------------------------------------------------------------------------
628D             1 124 FRAME_MAP:
628D 00 01 01 01 1 125 DEFB      0,   1,   1,   1,   1,   1,   2,   3
6291 01 01 02 03 1 125 
6295 04 FF FF FF 1 126 DEFB      4,  -1,  -1,  -1,  -1,  -1,  -1,  -1
6299 FF FF FF FF 1 126 
629D 05 06 07 01 1 127 DEFB      5,   6,   7,   1,   1,   1,   1,   1
62A1 01 01 01 01 1 127 
62A5 01 01 01 01 1 128 DEFB      1,   1,   1,   1,   1,   1,   1,   8
62A9 01 01 01 08 1 128 
62AD 09 01 01 01 1 129 DEFB      9,   1,   1,   1,   1,   1,   1,   1
62B1 01 01 01 01 1 129 
62B5 01 01 01 01 1 130 DEFB      1,   1,   1,   1,   1,   1,   1,   1
62B9 01 01 01 01 1 130 
62BD 0A 06 0D 0D 1 131 DEFB     10,   6,  13,  13,  13,   3,  11,   1
62C1 0D 03 0B 01 1 131 
62C5 01 01 01 01 1 132 DEFB      1,   1,   1,   1,   1,   1,   1,  12
62C9 01 01 01 0C 1 132 
62CD             1 134 ; ----------------------------------------------------------------------------------------------------------------------
62CD             1 135 ; Definition of a small "Opening Book" for speccy first move
62CD             1 136 ; ----------------------------------------------------------------------------------------------------------------------
62CD             1 137 OPENINGS:
62CD 0F 14 16 17 1 138 DEFB    $0F, $14, $16, $17, $18, $1C, $1D
62D1 18 1C 1D    1 138 
62D4 1E 1F 20 24 1 139 DEFB    $1E, $1F, $20, $24, $25, $26, $27
62D8 25 26 27    1 139 
62DB 28 29 2A 2E 1 140 DEFB    $28, $29, $2A, $2E, $2F, $30, $31
62DF 2F 30 31    1 140 
62E2 32 36 37 38 1 141 DEFB    $32, $36, $37, $38, $3A, $3F
62E6 3A 3F       1 141 
62E8             1 143 ; ----------------------------------------------------------------------------------------------------------------------
62E8             1 144 ; Timer variables
62E8             1 145 ; ----------------------------------------------------------------------------------------------------------------------
62E8 00          1 146 TIMER_FLAG              DEFB    0                           ; 0 = timer stopped, 1 = cyan timer on, 2 = red timer on
62E9             1 147 ; for each timer:
62E9             1 148 ;   1st byte = interrupt counter (incremented each 1/50 seconds)
62E9             1 149 ;   2nd byte = seconds counter
62E9             1 150 ;   3th byte = minutes counter
62E9 32 00 00    1 151 CYAN_TIMER              DEFB    50, 0, 0
62EC 32 00 00    1 152 RED_TIMER               DEFB    50, 0, 0
62EF             1 154 ; ----------------------------------------------------------------------------------------------------------------------
62EF             1 155 ; Screen addresses look-up array for board numbers
62EF             1 156 ; ----------------------------------------------------------------------------------------------------------------------
62EF             1 157 NUMBER_SCREEN:
62EF A5 43 E6 43 1 158 DEFW    $43A5, $43E6, $4B27, $4B68, $4BA9, $4BEA, $532B
62F3 27 4B 68 4B 1 158 
62F7 A9 4B EA 4B 1 158 
62FB 2B 53       1 158 
62FD FF FF FF    1 160 FILLER_1                DEFB    $FF, $FF, $FF               ; filler to align next block (not used)
6300             1 162 ;ORG     $6300
6300             1 163 ; ----------------------------------------------------------------------------------------------------------------------
6300             1 164 ; Circular queue
6300             1 165 ; ----------------------------------------------------------------------------------------------------------------------
6300 00 00 00 00 1 166 RED_QUEUE_AREA          DEFS    256                         ; 256-aligned block reserved for circular queue
6304 00 00 00 00 1 166 
6308 00 00 00 00 1 166 
630C 00 00 00 00 1 166 
6310 00 00 00 00 1 166 
6314 00 00 00 00 1 166 
6318 00 00 00 00 1 166 
631C 00 00 00 00 1 166 
6320 00 00 00 00 1 166 
6324 00 00 00 00 1 166 
6328 00 00 00 00 1 166 
632C 00 00 00 00 1 166 
6330 00 00 00 00 1 166 
6334 00 00 00 00 1 166 
6338 00 00 00 00 1 166 
633C 00 00 00 00 1 166 
6340 00 00 00 00 1 166 
6344 00 00 00 00 1 166 
6348 00 00 00 00 1 166 
634C 00 00 00 00 1 166 
6350 00 00 00 00 1 166 
6354 00 00 00 00 1 166 
6358 00 00 00 00 1 166 
635C 00 00 00 00 1 166 
6360 00 00 00 00 1 166 
6364 00 00 00 00 1 166 
6368 00 00 00 00 1 166 
636C 00 00 00 00 1 166 
6370 00 00 00 00 1 166 
6374 00 00 00 00 1 166 
6378 00 00 00 00 1 166 
637C 00 00 00 00 1 166 
6380 00 00 00 00 1 166 
6384 00 00 00 00 1 166 
6388 00 00 00 00 1 166 
638C 00 00 00 00 1 166 
6390 00 00 00 00 1 166 
6394 00 00 00 00 1 166 
6398 00 00 00 00 1 166 
639C 00 00 00 00 1 166 
63A0 00 00 00 00 1 166 
63A4 00 00 00 00 1 166 
63A8 00 00 00 00 1 166 
63AC 00 00 00 00 1 166 
63B0 00 00 00 00 1 166 
63B4 00 00 00 00 1 166 
63B8 00 00 00 00 1 166 
63BC 00 00 00 00 1 166 
63C0 00 00 00 00 1 166 
63C4 00 00 00 00 1 166 
63C8 00 00 00 00 1 166 
63CC 00 00 00 00 1 166 
63D0 00 00 00 00 1 166 
63D4 00 00 00 00 1 166 
63D8 00 00 00 00 1 166 
63DC 00 00 00 00 1 166 
63E0 00 00 00 00 1 166 
63E4 00 00 00 00 1 166 
63E8 00 00 00 00 1 166 
63EC 00 00 00 00 1 166 
63F0 00 00 00 00 1 166 
63F4 00 00 00 00 1 166 
63F8 00 00 00 00 1 166 
63FC 00 00 00 00 1 166 
6400             1 168 ; ----------------------------------------------------------------------------------------------------------------------
6400             1 169 ; RED BOARDS: these boards must be located immediately after red queue area!
6400             1 170 ; 
6400             1 171 ; These boards hold a determined position of the board from red perspective. They are used to calculate RED "two-
6400             1 172 ; distance" (Jack van Rijswijck) from LEFT to RIGHT edges and RED two-distance from RIGHT to LEFT edges. The red
6400             1 173 ; LEFT-RIGHT board is also used to store RED potentials.
6400             1 174 ; 
6400             1 175 ; The values of $7F form the border of the board. The LEFT-RIGHT edges are identified with Bit 7 set and the lowest 3
6400             1 176 ; bits are the edge number. The rest of bytes indicates "two-distance" from goal (stored in lowest 6 bits), and a flag
6400             1 177 ; that indicates a position occupied by a friendly token (stored in 6th bit).
6400             1 178 ; ----------------------------------------------------------------------------------------------------------------------
6400             1 179 RED_BOARD_LEFT_RIGHT:
6400 7F 7F 7F 7F 1 180 DEFB      $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F
6404 7F 7F 7F 7F 1 180 
6408 7F 00 00 00 1 181 DEFB    $7F, $00, $00, $00, $00, $00, $00, $00, $80
640C 00 00 00 00 1 181 
6410 80          1 181 
6411 7F 00 00 00 1 182 DEFB       $7F, $00, $00, $00, $00, $00, $00, $00, $81
6415 00 00 00 00 1 182 
6419 81          1 182 
641A 7F 00 00 00 1 183 DEFB          $7F, $00, $00, $00, $00, $00, $00, $00, $82
641E 00 00 00 00 1 183 
6422 82          1 183 
6423 7F 00 00 00 1 184 DEFB             $7F, $00, $00, $00, $00, $00, $00, $00, $83
6427 00 00 00 00 1 184 
642B 83          1 184 
642C 7F 00 00 00 1 185 DEFB                $7F, $00, $00, $00, $00, $00, $00, $00, $84
6430 00 00 00 00 1 185 
6434 84          1 185 
6435 7F 00 00 00 1 186 DEFB                   $7F, $00, $00, $00, $00, $00, $00, $00, $85
6439 00 00 00 00 1 186 
643D 85          1 186 
643E 7F 00 00 00 1 187 DEFB                      $7F, $00, $00, $00, $00, $00, $00, $00, $86
6442 00 00 00 00 1 187 
6446 86          1 187 
6447 7F 7F 7F 7F 1 188 DEFB                         $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F
644B 7F 7F 7F 7F 1 188 
644F 7F          1 188 
6450             1 189 RED_BOARD_RIGHT_LEFT:
6450 80 00 00 00 1 190 DEFB    $80, $00, $00, $00, $00, $00, $00, $00, $7F
6454 00 00 00 00 1 190 
6458 7F          1 190 
6459 81 00 00 00 1 191 DEFB       $81, $00, $00, $00, $00, $00, $00, $00, $7F
645D 00 00 00 00 1 191 
6461 7F          1 191 
6462 82 00 00 00 1 192 DEFB          $82, $00, $00, $00, $00, $00, $00, $00, $7F
6466 00 00 00 00 1 192 
646A 7F          1 192 
646B 83 00 00 00 1 193 DEFB             $83, $00, $00, $00, $00, $00, $00, $00, $7F
646F 00 00 00 00 1 193 
6473 7F          1 193 
6474 84 00 00 00 1 194 DEFB                $84, $00, $00, $00, $00, $00, $00, $00, $7F
6478 00 00 00 00 1 194 
647C 7F          1 194 
647D 85 00 00 00 1 195 DEFB                   $85, $00, $00, $00, $00, $00, $00, $00, $7F
6481 00 00 00 00 1 195 
6485 7F          1 195 
6486 86 00 00 00 1 196 DEFB                      $86, $00, $00, $00, $00, $00, $00, $00, $7F
648A 00 00 00 00 1 196 
648E 7F          1 196 
648F 7F 7F 7F 7F 1 197 DEFB                         $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F
6493 7F 7F 7F 7F 1 197 
6497             1 199 ; ----------------------------------------------------------------------------------------------------------------------
6497             1 200 ; Timer digits graphics. Must be in a 256 bytes boundary
6497             1 201 ; ----------------------------------------------------------------------------------------------------------------------
6497             1 202 TIMER_DIGITS:
6497 00 0F 0B 0B 1 203 DEFB    $00, $0F, $0B, $0B, $0B, $0F, $00, $00
649B 0B 0F 00 00 1 203 
649F 00 06 0E 06 1 204 DEFB    $00, $06, $0E, $06, $06, $06, $00, $00
64A3 06 06 00 00 1 204 
64A7 00 0F 03 0F 1 205 DEFB    $00, $0F, $03, $0F, $08, $0F, $00, $00
64AB 08 0F 00 00 1 205 
64AF 00 0F 03 07 1 206 DEFB    $00, $0F, $03, $07, $03, $0F, $00, $00
64B3 03 0F 00 00 1 206 
64B7 00 0B 0B 0F 1 207 DEFB    $00, $0B, $0B, $0F, $03, $03, $00, $00
64BB 03 03 00 00 1 207 
64BF 00 0F 08 0F 1 208 DEFB    $00, $0F, $08, $0F, $03, $0F, $00, $00
64C3 03 0F 00 00 1 208 
64C7 00 0F 0C 0F 1 209 DEFB    $00, $0F, $0C, $0F, $0D, $0F, $00, $00
64CB 0D 0F 00 00 1 209 
64CF 00 0F 03 03 1 210 DEFB    $00, $0F, $03, $03, $03, $03, $00, $00
64D3 03 03 00 00 1 210 
64D7 00 0F 0B 0F 1 211 DEFB    $00, $0F, $0B, $0F, $0B, $0F, $00, $00
64DB 0B 0F 00 00 1 211 
64DF 00 0F 0B 0F 1 212 DEFB    $00, $0F, $0B, $0F, $03, $0F, $00, $00
64E3 03 0F 00 00 1 212 
64E7             1 214 ; ----------------------------------------------------------------------------------------------------------------------
64E7             1 215 ; Tone parameters for sound effects
64E7             1 216 ; ----------------------------------------------------------------------------------------------------------------------
64E7             1 217 ; for each tone (from left to right):
64E7             1 218 ;   - number of frames in the block, slide changes applied once per frame (1..65536)
64E7             1 219 ;   - length of a frame (1..65536)
64E7             1 220 ;   - tone pitch, lower numbers for lower tone (1..65536)
64E7             1 221 ;   - pitch slide, this value is added to pitch every frame (-32767..32768)
64E7             1 222 ; ----------------------------------------------------------------------------------------------------------------------
64E7 01 00 E8 03 1 223 TOKEN_FX                DEFW       1, 1000, 1400,   0
64EB 78 05 00 00 1 223 
64EF 05 00 88 13 1 224 WINNER_FX               DEFW       5, 5000,  200, 100
64F3 C8 00 64 00 1 224 
64F7 E8 03 0A 00 1 225 FILLED_FX               DEFW    1000,   10,  100,   0
64FB 64 00 00 00 1 225 
64FF FF          1 227 FILLER_2                DEFB    $FF                         ; filler to align next block (not used)
6500             1 229 ;ORG     $6500
6500             1 230 ; ----------------------------------------------------------------------------------------------------------------------
6500             1 231 ; Vector table of routines (must be aligned at the next page of red board arrays)
6500             1 232 ; ----------------------------------------------------------------------------------------------------------------------
6500             1 233 RED_VECTOR_TABLE:
6500 49 72       1 234 DEFW    PathFinder_RED_Edge_0
6502 77 72       1 235 DEFW    PathFinder_RED_Edge_1
6504 9D 72       1 236 DEFW    PathFinder_RED_Edge_2
6506 C3 72       1 237 DEFW    PathFinder_RED_Edge_3
6508 E9 72       1 238 DEFW    PathFinder_RED_Edge_4
650A 0F 73       1 239 DEFW    PathFinder_RED_Edge_5
650C 35 73       1 240 DEFW    PathFinder_RED_Edge_6
650E             1 242 ; ----------------------------------------------------------------------------------------------------------------------
650E             1 243 ; Graphics for the screen frame
650E             1 244 ; ----------------------------------------------------------------------------------------------------------------------
650E             1 245 FRAME_TILES:
650E 00 00 1F 3F 1 246 DEFB    $00, $00, $1F, $3F, $3F, $3F, $3C, $3C
6512 3F 3F 3C 3C 1 246 
6516 00 00 FF FF 1 247 DEFB    $00, $00, $FF, $FF, $FF, $FF, $00, $00
651A FF FF 00 00 1 247 
651E 00 00 FF FE 1 248 DEFB    $00, $00, $FF, $FE, $FE, $FF, $00, $00
6522 FE FF 00 00 1 248 
6526 03 07 0F 0F 1 249 DEFB    $03, $07, $0F, $0F, $0F, $0F, $07, $03
652A 0F 0F 07 03 1 249 
652E FF FE FC FC 1 250 DEFB    $FF, $FE, $FC, $FC, $FC, $FC, $FE, $FF
6532 FC FC FE FF 1 250 
6536 FF 7F 3F 3F 1 251 DEFB    $FF, $7F, $3F, $3F, $3F, $3F, $7F, $FF
653A 3F 3F 7F FF 1 251 
653E C0 E0 F0 F0 1 252 DEFB    $C0, $E0, $F0, $F0, $F0, $F0, $E0, $C0
6542 F0 F0 E0 C0 1 252 
6546 00 00 FF 7F 1 253 DEFB    $00, $00, $FF, $7F, $7F, $FF, $00, $00
654A 7F FF 00 00 1 253 
654E 00 00 F8 FC 1 254 DEFB    $00, $00, $F8, $FC, $FC, $FC, $3C, $3C
6552 FC FC 3C 3C 1 254 
6556 3C 3C 3F 3F 1 255 DEFB    $3C, $3C, $3F, $3F, $3F, $1F, $00, $00
655A 3F 1F 00 00 1 255 
655E 00 00 FE FF 1 256 DEFB    $00, $00, $FE, $FF, $FF, $FE, $00, $00
6562 FF FE 00 00 1 256 
6566 00 00 7F FF 1 257 DEFB    $00, $00, $7F, $FF, $FF, $7F, $00, $00
656A FF 7F 00 00 1 257 
656E 3C 3C FC FC 1 258 DEFB    $3C, $3C, $FC, $FC, $FC, $F8, $00, $00
6572 FC F8 00 00 1 258 
6576 00 00 38 7C 1 259 DEFB    $00, $00, $38, $7C, $7C, $38, $00, $00
657A 7C 38 00 00 1 259 
657E             1 261 ; ----------------------------------------------------------------------------------------------------------------------
657E             1 262 ; Hexagon sprites
657E             1 263 ; ----------------------------------------------------------------------------------------------------------------------
657E             1 264 HEXAGON_EMPTY:
657E 07 E0 18 18 1 265 DEFB    $07, $E0, $18, $18, $20, $04, $24, $04
6582 20 04 24 04 1 265 
6586 48 02 48 02 1 266 DEFB    $48, $02, $48, $02, $40, $02, $40, $02
658A 40 02 40 02 1 266 
658E 40 02 40 02 1 267 DEFB    $40, $02, $40, $02, $40, $12, $40, $12
6592 40 12 40 12 1 267 
6596 20 24 20 04 1 268 DEFB    $20, $24, $20, $04, $18, $18, $07, $E0
659A 18 18 07 E0 1 268 
659E             1 269 HEXAGON_SPRITE:
659E 03 C0 0C 30 1 270 DEFB    $03, $C0, $0C, $30, $10, $08, $12, $08
65A2 10 08 12 08 1 270 
65A6 24 04 24 04 1 271 DEFB    $24, $04, $24, $04, $20, $04, $20, $04
65AA 20 04 20 04 1 271 
65AE 20 04 20 04 1 272 DEFB    $20, $04, $20, $04, $20, $24, $20, $24
65B2 20 24 20 24 1 272 
65B6 10 48 10 08 1 273 DEFB    $10, $48, $10, $08, $0C, $30, $03, $C0
65BA 0C 30 03 C0 1 273 
65BE 01 80 02 40 1 275 DEFB    $01, $80, $02, $40, $04, $20, $09, $10
65C2 04 20 09 10 1 275 
65C6 0A 10 0A 10 1 276 DEFB    $0A, $10, $0A, $10, $08, $10, $08, $10
65CA 08 10 08 10 1 276 
65CE 08 10 08 10 1 277 DEFB    $08, $10, $08, $10, $08, $50, $08, $50
65D2 08 50 08 50 1 277 
65D6 08 90 04 20 1 278 DEFB    $08, $90, $04, $20, $02, $40, $01, $80
65DA 02 40 01 80 1 278 
65DE 00 80 00 80 1 280 DEFB    $00, $80, $00, $80, $00, $80, $00, $80
65E2 00 80 00 80 1 280 
65E6 00 80 00 80 1 281 DEFB    $00, $80, $00, $80, $00, $80, $00, $80
65EA 00 80 00 80 1 281 
65EE 00 80 00 80 1 282 DEFB    $00, $80, $00, $80, $00, $80, $00, $80
65F2 00 80 00 80 1 282 
65F6 00 80 00 80 1 283 DEFB    $00, $80, $00, $80, $00, $80, $00, $80
65FA 00 80 00 80 1 283 
65FE 01 80 02 40 1 285 DEFB    $01, $80, $02, $40, $05, $A0, $0B, $D0
6602 05 A0 0B D0 1 285 
6606 0B D0 0B D0 1 286 DEFB    $0B, $D0, $0B, $D0, $0B, $D0, $0B, $D0
660A 0B D0 0B D0 1 286 
660E 0B D0 0B D0 1 287 DEFB    $0B, $D0, $0B, $D0, $0B, $D0, $0B, $D0
6612 0B D0 0B D0 1 287 
6616 0B D0 05 A0 1 288 DEFB    $0B, $D0, $05, $A0, $02, $40, $01, $80
661A 02 40 01 80 1 288 
661E 03 C0 0C 30 1 290 DEFB    $03, $C0, $0C, $30, $13, $C8, $17, $E8
6622 13 C8 17 E8 1 290 
6626 2F F4 2F F4 1 291 DEFB    $2F, $F4, $2F, $F4, $2F, $F4, $2F, $F4
662A 2F F4 2F F4 1 291 
662E 2F F4 2F F4 1 292 DEFB    $2F, $F4, $2F, $F4, $2F, $F4, $2F, $F4
6632 2F F4 2F F4 1 292 
6636 17 E8 13 C8 1 293 DEFB    $17, $E8, $13, $C8, $0C, $30, $03, $C0
663A 0C 30 03 C0 1 293 
663E             1 294 HEXAGON_TOKEN:
663E 07 E0 18 18 1 295 DEFB    $07, $E0, $18, $18, $27, $E4, $2F, $F4
6642 27 E4 2F F4 1 295 
6646 5F FA 5F FA 1 296 DEFB    $5F, $FA, $5F, $FA, $5F, $FA, $5F, $FA
664A 5F FA 5F FA 1 296 
664E 5F FA 5F FA 1 297 DEFB    $5F, $FA, $5F, $FA, $5F, $FA, $5F, $FA
6652 5F FA 5F FA 1 297 
6656 2F F4 27 E4 1 298 DEFB    $2F, $F4, $27, $E4, $18, $18, $07, $E0
665A 18 18 07 E0 1 298 
665E             1 300 ; ----------------------------------------------------------------------------------------------------------------------
665E             1 301 ; Board letter sprites
665E             1 302 ; ----------------------------------------------------------------------------------------------------------------------
665E             1 303 LETTER_SPRITES:
665E 3C 7E FF C3 1 304 DEFB    $3C, $7E, $FF, $C3, $F3, $C3, $D3, $C3, $7E, $3C
6662 F3 C3 D3 C3 1 304 
6666 7E 3C       1 304 
6668 3C 7E CF CF 1 305 DEFB    $3C, $7E, $CF, $CF, $C3, $CB, $CB, $C3, $7E, $3C
666C C3 CB CB C3 1 305 
6670 7E 3C       1 305 
6672 3C 7E FF E3 1 306 DEFB    $3C, $7E, $FF, $E3, $CF, $CF, $CF, $E3, $7E, $3C
6676 CF CF CF E3 1 306 
667A 7E 3C       1 306 
667C 3C 7E F3 F3 1 307 DEFB    $3C, $7E, $F3, $F3, $C3, $D3, $D3, $C3, $7E, $3C
6680 C3 D3 D3 C3 1 307 
6684 7E 3C       1 307 
6686 3C 7E FF E3 1 308 DEFB    $3C, $7E, $FF, $E3, $CB, $C3, $CF, $E3, $7E, $3C
668A CB C3 CF E3 1 308 
668E 7E 3C       1 308 
6690 3C 7E E3 CF 1 309 DEFB    $3C, $7E, $E3, $CF, $C7, $CF, $CF, $CF, $7E, $3C
6694 C7 CF CF CF 1 309 
6698 7E 3C       1 309 
669A 3C 7E FF E3 1 310 DEFB    $3C, $7E, $FF, $E3, $D3, $D3, $E3, $F3, $46, $3C
669E D3 D3 E3 F3 1 310 
66A2 46 3C       1 310 
66A4             1 312 ; ----------------------------------------------------------------------------------------------------------------------
66A4             1 313 ; Board number sprites
66A4             1 314 ; ----------------------------------------------------------------------------------------------------------------------
66A4             1 315 NUMBER_SPRITES:
66A4 3C 7E E7 C7 1 316 DEFB    $3C, $7E, $E7, $C7, $E7, $E7, $E7, $E7, $7E, $3C
66A8 E7 E7 E7 E7 1 316 
66AC 7E 3C       1 316 
66AE 3C 7E E7 D3 1 317 DEFB    $3C, $7E, $E7, $D3, $F3, $E7, $CF, $C3, $7E, $3C
66B2 F3 E7 CF C3 1 317 
66B6 7E 3C       1 317 
66B8 3C 7E C7 F3 1 318 DEFB    $3C, $7E, $C7, $F3, $E3, $F3, $F3, $C7, $7E, $3C
66BC E3 F3 F3 C7 1 318 
66C0 7E 3C       1 318 
66C2 3C 7E D3 D3 1 319 DEFB    $3C, $7E, $D3, $D3, $C3, $F3, $F3, $F3, $7E, $3C
66C6 C3 F3 F3 F3 1 319 
66CA 7E 3C       1 319 
66CC 3C 7E C3 CF 1 320 DEFB    $3C, $7E, $C3, $CF, $C7, $F3, $F3, $C7, $7E, $3C
66D0 C7 F3 F3 C7 1 320 
66D4 7E 3C       1 320 
66D6 3C 7E E3 CF 1 321 DEFB    $3C, $7E, $E3, $CF, $C3, $CB, $CB, $C3, $7E, $3C
66DA C3 CB CB C3 1 321 
66DE 7E 3C       1 321 
66E0 3C 7E C3 F3 1 322 DEFB    $3C, $7E, $C3, $F3, $F3, $E7, $E7, $E7, $7E, $3C
66E4 F3 E7 E7 E7 1 322 
66E8 7E 3C       1 322 
66EA             1 324 ; ----------------------------------------------------------------------------------------------------------------------
66EA             1 325 ; Screen addresses for menu hexagons
66EA             1 326 ; ----------------------------------------------------------------------------------------------------------------------
66EA             1 327 MENU_HEXAGONS:
66EA 01 40 05 40 1 328 DEFW    $4001, $4005, $4008, $400C, $400F, $4013, $401A
66EE 08 40 0C 40 1 328 
66F2 0F 40 13 40 1 328 
66F6 1A 40       1 328 
66F8 45 40 48 40 1 329 DEFW    $4045, $4048, $4052, $405D, $4081, $4083, $4085
66FC 52 40 5D 40 1 329 
6700 81 40 83 40 1 329 
6704 85 40       1 329 
6706 88 40 8A 40 1 330 DEFW    $4088, $408A, $4091, $409D, $40C1, $40D0, $40D9
670A 91 40 9D 40 1 330 
670E C1 40 D0 40 1 330 
6712 D9 40       1 330 
6714 05 48 08 48 1 331 DEFW    $4805, $4808, $480A, $4813, $4819, $481B, $481D
6718 0A 48 13 48 1 331 
671C 19 48 1B 48 1 331 
6720 1D 48       1 331 
6722 0A 40 59 40 1 332 DEFW    $400A, $4059, $40BB, $40C5, $40D2, $480C, $401C
6726 BB 40 C5 40 1 332 
672A D2 40 0C 48 1 332 
672E 1C 40       1 332 
6730 41 40 50 40 1 333 DEFW    $4041, $4050, $40C8, $4801, $480F
6734 C8 40 01 48 1 333 
6738 0F 48       1 333 
673A             1 334 SAMPLE_BOARD_RED:
673A 69 48 6B 48 1 335 DEFW    $4869, $486B, $482C, $482E, $40EF, $40F1, $40B2
673E 2C 48 2E 48 1 335 
6742 EF 40 F1 40 1 335 
6746 B2 40       1 335 
6748 E9 40 6F 48 1 336 DEFW    $40E9, $486F, $4830, $40F3, $48AA, $40AC, $48EF
674C 30 48 F3 40 1 336 
6750 AA 48 AC 40 1 336 
6754 EF 48       1 336 
6756 2A 48 6D 48 1 337 DEFW    $482A, $486D, $40ED, $48AE
675A ED 40 AE 48 1 337 
675E             1 338 SAMPLE_BOARD_CYAN:
675E AE 40 EF 40 1 339 DEFW    $40AE, $40EF, $4830, $486F, $48AE, $48EF, $502E
6762 30 48 6F 48 1 339 
6766 AE 48 EF 48 1 339 
676A 2E 50       1 339 
676C AC 48 B4 48 1 340 DEFW    $48AC, $48B4, $486B, $486D, $482E, $40F1, $40F3
6770 6B 48 6D 48 1 340 
6774 2E 48 F1 40 1 340 
6778 F3 40       1 340 
677A 73 48 B2 48 1 341 DEFW    $4873, $48B2, $5030
677E 30 50       1 341 
6780             1 343 ; ----------------------------------------------------------------------------------------------------------------------
6780             1 344 ; Strings
6780             1 345 ; ----------------------------------------------------------------------------------------------------------------------
6780             1 346 STR_OPTIONS:
6780 53 74 61 72 1 347 DEFM    "Start new game\0"
6784 74 20 6E 65 1 347 
6788 77 20 67 61 1 347 
678C 6D 65 00    1 347 
678F 48 6F 77 20 1 348 DEFM    "How to play\0"
6793 74 6F 20 70 1 348 
6797 6C 61 79 00 1 348 
679B 43 72 65 64 1 349 DEFM    "Credits\0"
679F 69 74 73 00 1 349 
67A3 44 65 73 69 1 350 STR_DESIGN              DEFM    "Design:     \0"
67A7 67 6E 3A 20 1 350 
67AB 20 20 20 20 1 350 
67AF 00          1 350 
67B0 43 6F 64 65 1 351 STR_CODE                DEFM    "Code:       \0"
67B4 3A 20 20 20 1 351 
67B8 20 20 20 20 1 351 
67BC 00          1 351 
67BD 46 6F 6E 74 1 352 STR_FONT                DEFM    "Font:       \0"
67C1 3A 20 20 20 1 352 
67C5 20 20 20 20 1 352 
67C9 00          1 352 
67CA 47 72 61 70 1 353 STR_GRAPHICS            DEFM    "Graphics:   \0"
67CE 68 69 63 73 1 353 
67D2 3A 20 20 20 1 353 
67D6 00          1 353 
67D7 45 69 6E 61 1 354 STR_EINAR               DEFM    "Einar Saukas\0"
67DB 72 20 53 61 1 354 
67DF 75 6B 61 73 1 354 
67E3 00          1 354 
67E4 20 20 20 20 1 355 STR_EMPTY12             DEFM    "            \0"
67E8 20 20 20 20 1 355 
67EC 20 20 20 20 1 355 
67F0 00          1 355 
67F1 41 6E 74 6F 1 356 STR_ANTONIO             DEFM    "Antonio Luque\0"
67F5 6E 69 6F 20 1 356 
67F9 4C 75 71 75 1 356 
67FD 65 00       1 356 
67FF 50 72 65 73 1 357 STR_PRESSKEY            DEFM    "Press any key\0"
6803 73 20 61 6E 1 357 
6807 79 20 6B 65 1 357 
680B 79 00       1 357 
680D             1 358 STR_BUTTONS:
680D 4E 65 78 74 1 359 DEFM    "Next\0"
6811 00          1 359 
6812 42 61 63 6B 1 360 DEFM    "Back\0"
6816 00          1 360 
6817 52 45 44 00 1 361 STR_RED                 DEFM    "RED\0"
681B 43 59 41 4E 1 362 STR_CYAN                DEFM    "CYAN\0"
681F 00          1 362 
6820 43 6F 6E 6E 1 363 STR_HELP1               DEFM    "Connect\0"
6824 65 63 74 00 1 363 
6828 6C 65 66 74 1 364 STR_HELP2_RED           DEFM    "left and\0"
682C 20 61 6E 64 1 364 
6830 00          1 364 
6831 75 70 20 61 1 365 STR_HELP2_CYAN          DEFM    "up and\0"
6835 6E 64 00    1 365 
6838 72 69 67 68 1 366 STR_HELP3_RED           DEFM    "right\0"
683C 74 00       1 366 
683E 64 6F 77 6E 1 367 STR_HELP3_CYAN          DEFM    "down\0"
6842 00          1 367 
6843 62 6F 72 64 1 368 STR_HELP4               DEFM    "borders\0"
6847 65 72 73 00 1 368 
684B 74 6F 20 77 1 369 STR_HELP5               DEFM    "to win\0"
684F 69 6E 00    1 369 
6852             1 370 STR_HELP:
6852 57 69 6E 20 1 371 DEFM    "Win three\0"
6856 74 68 72 65 1 371 
685A 65 00       1 371 
685C 74 69 6D 65 1 372 DEFM    "times in\0"
6860 73 20 69 6E 1 372 
6864 00          1 372 
6865 61 20 72 6F 1 373 DEFM    "a row to\0"
6869 77 20 74 6F 1 373 
686D 00          1 373 
686E 6C 65 76 65 1 374 DEFM    "level up\0"
6872 6C 20 75 70 1 374 
6876 00          1 374 
6877 20 43 4F 4E 1 375 STR_CONGRATS            DEFM    " CONGRATULATIONS \0"
687B 47 52 41 54 1 375 
687F 55 4C 41 54 1 375 
6883 49 4F 4E 53 1 375 
6887 20 00       1 375 
6889             1 376 STR_LAST_LEVEL:
6889 57 65 6C 6C 1 377 DEFM    "Well done! Last level passed\0"
688D 20 64 6F 6E 1 377 
6891 65 21 20 4C 1 377 
6895 61 73 74 20 1 377 
6899 6C 65 76 65 1 377 
689D 6C 20 70 61 1 377 
68A1 73 73 65 64 1 377 
68A5 00          1 377 
68A6 43 68 6F 6F 1 378 DEFM    "Choose level to restart, 1-4\0"
68AA 73 65 20 6C 1 378 
68AE 65 76 65 6C 1 378 
68B2 20 74 6F 20 1 378 
68B6 72 65 73 74 1 378 
68BA 61 72 74 2C 1 378 
68BE 20 31 2D 34 1 378 
68C2 00          1 378 
68C3             1 380 ; ----------------------------------------------------------------------------------------------------------------------
68C3             1 381 ; Based on "King" font https://spectrumcomputing.co.uk/entry/25245/ZX-Spectrum/ZX-ALFA
68C3             1 382 ; this font was designed by Einar Saukas for Hex game
68C3             1 383 ; ----------------------------------------------------------------------------------------------------------------------
68C3             1 384 FONT:
68C3 00 00 00 00 1 385 INCLUDEBIN "King+.bin"
68C7 00 00 00 00 1 385 
68CB 00 18 18 18 1 385 
68CF 00 18 18 00 1 385 
68D3 00 24 24 00 1 385 
68D7 00 00 00 00 1 385 
68DB 00 24 7E 24 1 385 
68DF 24 7E 24 00 1 385 
68E3 00 08 3E 28 1 385 
68E7 3E 0A 3E 08 1 385 
68EB 00 62 64 08 1 385 
68EF 10 26 46 00 1 385 
68F3 00 10 28 10 1 385 
68F7 2A 44 3A 00 1 385 
68FB 00 18 30 00 1 385 
68FF 00 00 00 00 1 385 
6903 06 0C 08 08 1 385 
6907 08 0C 06 00 1 385 
690B 60 30 10 10 1 385 
690F 10 30 60 00 1 385 
6913 00 00 14 08 1 385 
6917 3E 08 14 00 1 385 
691B 00 00 08 08 1 385 
691F 3E 08 08 00 1 385 
6923 00 00 00 00 1 385 
6927 00 0C 18 30 1 385 
692B 00 00 00 7E 1 385 
692F 7E 00 00 00 1 385 
6933 00 00 00 00 1 385 
6937 30 70 70 00 1 385 
693B 02 06 0C 18 1 385 
693F 30 60 40 00 1 385 
6943 00 7E 62 62 1 385 
6947 62 62 7E 00 1 385 
694B 00 18 38 18 1 385 
694F 18 18 3C 00 1 385 
6953 00 38 4C 4C 1 385 
6957 18 30 7C 00 1 385 
695B 00 3C 62 0C 1 385 
695F 06 66 3C 00 1 385 
6963 00 30 30 30 1 385 
6967 30 34 3E 04 1 385 
696B 00 7E 60 7E 1 385 
696F 06 66 3C 00 1 385 
6973 00 30 60 7C 1 385 
6977 66 66 3C 00 1 385 
697B 00 7E 46 0C 1 385 
697F 18 30 60 00 1 385 
6983 00 3C 66 3C 1 385 
6987 66 66 3C 00 1 385 
698B 00 3C 66 66 1 385 
698F 3E 06 3C 00 1 385 
6993 00 00 08 18 1 385 
6997 00 08 18 00 1 385 
699B 00 00 04 0C 1 385 
699F 00 0C 18 30 1 385 
69A3 00 00 04 08 1 385 
69A7 10 08 04 00 1 385 
69AB 00 00 00 3E 1 385 
69AF 00 3E 00 00 1 385 
69B3 00 00 10 08 1 385 
69B7 04 08 10 00 1 385 
69BB 00 3C 42 04 1 385 
69BF 08 00 08 00 1 385 
69C3 00 3C 4A 56 1 385 
69C7 5E 40 3C 00 1 385 
69CB 00 7E 46 46 1 385 
69CF 7E 46 46 00 1 385 
69D3 00 7C 62 7C 1 385 
69D7 62 62 7C 00 1 385 
69DB 00 7E 66 60 1 385 
69DF 60 66 7E 00 1 385 
69E3 00 7C 46 46 1 385 
69E7 46 46 7C 00 1 385 
69EB 00 7E 60 7C 1 385 
69EF 60 60 7E 00 1 385 
69F3 00 7E 60 7C 1 385 
69F7 60 60 60 00 1 385 
69FB 00 3E 62 60 1 385 
69FF 66 66 3E 00 1 385 
6A03 00 62 62 7E 1 385 
6A07 62 62 62 00 1 385 
6A0B 00 18 18 18 1 385 
6A0F 18 18 18 00 1 385 
6A13 00 0C 0C 0C 1 385 
6A17 0C 4C 38 00 1 385 
6A1B 00 66 64 68 1 385 
6A1F 7E 46 66 00 1 385 
6A23 00 60 60 60 1 385 
6A27 60 60 7E 00 1 385 
6A2B 00 7E 56 56 1 385 
6A2F 56 56 56 00 1 385 
6A33 00 7E 46 46 1 385 
6A37 46 46 46 00 1 385 
6A3B 00 7E 62 62 1 385 
6A3F 62 62 7E 00 1 385 
6A43 00 7E 62 62 1 385 
6A47 7E 60 60 00 1 385 
6A4B 00 7C 64 64 1 385 
6A4F 64 64 7E 00 1 385 
6A53 00 7C 62 64 1 385 
6A57 7C 46 46 00 1 385 
6A5B 00 7E 60 7E 1 385 
6A5F 06 06 7E 00 1 385 
6A63 00 7E 18 18 1 385 
6A67 18 18 18 00 1 385 
6A6B 00 62 62 62 1 385 
6A6F 62 62 7E 00 1 385 
6A73 00 62 62 62 1 385 
6A77 62 34 18 00 1 385 
6A7B 00 6A 6A 6A 1 385 
6A7F 6A 6A 7E 00 1 385 
6A83 00 62 62 34 1 385 
6A87 4E 46 46 00 1 385 
6A8B 00 62 62 7E 1 385 
6A8F 18 18 18 00 1 385 
6A93 00 7E 06 1C 1 385 
6A97 38 60 7E 00 1 385 
6A9B 00 0E 08 08 1 385 
6A9F 08 08 0E 00 1 385 
6AA3 00 00 40 20 1 385 
6AA7 10 08 04 00 1 385 
6AAB 00 70 10 10 1 385 
6AAF 10 10 70 00 1 385 
6AB3 00 08 1C 2A 1 385 
6AB7 08 08 08 08 1 385 
6ABB 00 00 00 00 1 385 
6ABF 00 00 00 FF 1 385 
6AC3 0C 12 10 38 1 385 
6AC7 10 10 3E 00 1 385 
6ACB 00 00 3C 06 1 385 
6ACF 7E 46 7E 00 1 385 
6AD3 00 60 60 7E 1 385 
6AD7 62 62 7E 00 1 385 
6ADB 00 00 7E 62 1 385 
6ADF 60 62 7E 00 1 385 
6AE3 00 06 06 7E 1 385 
6AE7 46 46 7E 00 1 385 
6AEB 00 00 7E 46 1 385 
6AEF 7E 60 7E 00 1 385 
6AF3 00 1E 30 3C 1 385 
6AF7 30 30 30 00 1 385 
6AFB 00 00 7E 46 1 385 
6AFF 46 3E 06 3E 1 385 
6B03 00 60 60 7C 1 385 
6B07 66 66 66 00 1 385 
6B0B 00 18 00 38 1 385 
6B0F 18 18 3C 00 1 385 
6B13 00 0C 00 0C 1 385 
6B17 0C 0C 4C 38 1 385 
6B1B 00 20 2C 38 1 385 
6B1F 38 2C 26 00 1 385 
6B23 00 18 18 18 1 385 
6B27 18 18 0E 00 1 385 
6B2B 00 00 6C 56 1 385 
6B2F 56 56 46 00 1 385 
6B33 00 00 7C 46 1 385 
6B37 46 46 46 00 1 385 
6B3B 00 00 3C 46 1 385 
6B3F 46 46 3C 00 1 385 
6B43 00 00 7C 66 1 385 
6B47 66 7C 60 60 1 385 
6B4B 00 00 3E 46 1 385 
6B4F 46 3E 06 06 1 385 
6B53 00 00 3C 62 1 385 
6B57 60 60 60 00 1 385 
6B5B 00 00 3C 60 1 385 
6B5F 3C 06 3C 00 1 385 
6B63 00 30 78 30 1 385 
6B67 30 30 1C 00 1 385 
6B6B 00 00 46 46 1 385 
6B6F 46 46 3C 00 1 385 
6B73 00 00 46 46 1 385 
6B77 2C 3C 18 00 1 385 
6B7B 00 00 46 56 1 385 
6B7F 56 56 2C 00 1 385 
6B83 00 00 46 2C 1 385 
6B87 18 2C 46 00 1 385 
6B8B 00 00 46 46 1 385 
6B8F 46 3E 06 3C 1 385 
6B93 00 00 7E 0C 1 385 
6B97 18 30 7E 00 1 385 
6B9B 00 0E 08 30 1 385 
6B9F 08 08 0E 00 1 385 
6BA3 00 08 08 08 1 385 
6BA7 08 2A 1C 08 1 385 
6BAB 00 70 10 0C 1 385 
6BAF 10 10 70 00 1 385 
6BB3 00 14 28 00 1 385 
6BB7 00 00 00 00 1 385 
6BBB FF 81 81 81 1 385 
6BBF 81 81 81 FF 1 385 

; File #2: C:\Users\Antonio\source\repos\Hex\Z80CodeFiles\Main.z80asm

6BC3             2 1 ; ----------------------------------------------------------------------------------------------------------------------
6BC3             2 2 ; Main.z80asm
6BC3             2 3 ; Coded by Antonio Luque
6BC3             2 4 ; ----------------------------------------------------------------------------------------------------------------------
6BC3             2 6 CYAN_COLOR              EQU     %00000101                   ; attributes: flash 0, bright 0, paper 0, ink 5
6BC3             2 7 RED_COLOR               EQU     %00000010                   ; attributes: flash 0, bright 0, paper 0, ink 2
6BC3             2 9 ; ----------------------------------------------------------------------------------------------------------------------
6BC3             2 10 ; Entry point of the program - Initialization
6BC3             2 11 ; ----------------------------------------------------------------------------------------------------------------------
6BC3             2 12 Main                    ENT     $                           ; SpectNet IDE pragma: defines the entry code of the program
6BC3 F3          2 14 di                                  ; disable interrupts
6BC4             2 16 ; allocate jump to interrupt routine at address $5CA1 (pointed by IY+103)
6BC4 21 DF 75    2 18 ld      hl, Timer_Interrupt         ; HL points to interrupt routine address
6BC7 FD 36 67 C3 2 19 ld      (iy+103), $C3               ; 'jp' opcode
6BCB FD 75 68    2 20 ld      (iy+104), l                 ; Low byte of interrupt routine address
6BCE FD 74 69    2 21 ld      (iy+105), h                 ; High byte of interrupt routine address
6BD1 3E 2E       2 22 ld      a, $2E                      ; High byte of interrupt vector address
6BD3 ED 47       2 23 ld      i, a                        ; set interrupt vector address
6BD5 ED 5E       2 24 im      2                           ; set interrupt mode 2
6BD7             2 26 ; When the ULA triggers an interrupt it doesn't put any device ID in the data bus. When no value
6BD7             2 27 ; is placed on the Spectrum's data bus, this acquires the value of 8 signals one ($FF). So, the
6BD7             2 28 ; resultant vector address is formed as follows:
6BD7             2 29 ;
6BD7             2 30 ;                           ( I * $100 ) + $FF = $2E00 + $FF = $2EFF
6BD7             2 31 ; Source: 
6BD7             2 32 ; https://wiki.speccy.org/cursos/ensamblador/interrupciones#modo-im-2-en-spectrum-16k
6BD7             2 33 ;
6BD7             2 34 ; The value pointed at ROM address $2EFF is $5CA1. This address belongs to the calculator's
6BD7             2 35 ; memory area and it is used by some ROM routines, but none of them are called by HEX2 program.
6BD7 31 00 60    2 37 ld      sp, STACK                   ; move stack
6BDA AF          2 39 xor     a                           ; set border color (black)
6BDB D3 FE       2 40 out     ($FE), a
6BDD CD 25 79    2 41 call    Screen_Menu                 ; show main menu and wait for an option
6BE0             2 43 ; ----------------------------------------------------------------------------------------------------------------------
6BE0             2 44 ; Start new game
6BE0             2 45 ; ----------------------------------------------------------------------------------------------------------------------
6BE0             2 46 Main_Start
6BE0 CD BD 76    2 47 call    Screen_Clear                ; fill in black the whole screen area and attributes area
6BE3 CD CA 76    2 48 call    Screen_Letters              ; draw the two rows of letters on the screen (a..g)
6BE6 CD F6 76    2 49 call    Screen_Numbers              ; draw the two columns of numbers on the screen (1..7)
6BE9 CD 35 77    2 50 call    Screen_Frame                ; draw the screen frame
6BEC CD 8D 77    2 51 call    Screen_Tokens               ; draw the fixed tokens on the screen
6BEF CD AC 77    2 52 call    Screen_Timer_Quotes         ; draw the timer quotes (' ") on the screen
6BF2 CD EF 77    2 53 call    Screen_Color_Statics        ; apply color to statics items of the screen
6BF5 FB          2 55 ei                                  ; enable interrupts
6BF6             2 57 ; ----------------------------------------------------------------------------------------------------------------------
6BF6             2 58 ; New level
6BF6             2 59 ; ----------------------------------------------------------------------------------------------------------------------
6BF6             2 60 Main_New_Level
6BF6 3E 04       2 61 ld      a, 4                        ; maximum level
6BF8 21 99 61    2 62 ld      hl, GAME_LEVEL              ; HL points to game level address
6BFB BE          2 63 cp      (hl)                        ; level 4 achieved?
6BFC 20 05       2 64 jr      nz, Main_Increment_Level    ; no, increment game level
6BFE CD 29 78    2 65 call    Screen_Last_Level           ; show last level screen and input game level
6C01 18 DD       2 66 jr      Main_Start                  ; start a new game
6C03             2 67 Main_Increment_Level
6C03 34          2 68 inc     (hl)                        ; increment game level
6C04 06 00       2 69 ld      b, 0                        ; set game level in BC
6C06 4E          2 70 ld      c, (hl)
6C07 23          2 71 inc     hl                          ; HL points to recursion depth level
6C08 71          2 72 ld      (hl), c                     ; save recursion depth level
6C09 CD CC 78    2 73 call    Screen_Frame_Color          ; set up frame color depending on current level
6C0C CD BB 78    2 74 call    Screen_Clear_ThreeRow       ; clear all three-in-a-row marks
6C0F AF          2 75 xor     a                           ; initialize three-in-a-row counter
6C10 32 0E 62    2 76 ld      (THREE_ROW), a
6C13             2 78 ; ----------------------------------------------------------------------------------------------------------------------
6C13             2 79 ; Start new match
6C13             2 80 ; ----------------------------------------------------------------------------------------------------------------------
6C13             2 81 Main_Start_Match
6C13             2 82 ; set up timers and clear last messages
6C13 CD 12 76    2 84 call    Timer_Reset                 ; reset and display timers
6C16 AF          2 85 xor     a                           ; stop timers
6C17 32 E8 62    2 86 ld      (TIMER_FLAG), a
6C1A CD C7 6E    2 87 call    Print_Clear_Alert           ; clear last alert
6C1D 3E 02       2 88 ld      a, RED_COLOR                ; set red color in A
6C1F 32 9E 61    2 89 ld      (TOKEN_COLOR), a            ; save token color
6C22 CD EE 6E    2 90 call    Print_Clear_Move            ; clear red player last move
6C25             2 92 ; swap players' colors
6C25 3A 9F 61    2 94 ld      a, (PLAYER_COLOR)           ; get current player color
6C28 EE 07       2 95 xor     %00000111                   ; swap color
6C2A 32 9F 61    2 96 ld      (PLAYER_COLOR), a           ; save swapped player color
6C2D CD AA 6E    2 97 call    Print_Players               ; print "Player" and "Speccy" strings
6C30             2 99 ; initialize positions and draw empty board
6C30 21 00 7D    2 101 ld      hl, CYAN_POSITIONS          ; HL points to cyan positions address
6C33 11 01 7D    2 102 ld      de, CYAN_POSITIONS+1        ; DE points to cyan positions (+1) address
6C36 36 00       2 103 ld      (hl), EMPTY                 ; set first position as empty
6C38 01 FF 01    2 104 ld      bc, 256*2-1                 ; length of cyan + red positions areas (-1 already set)
6C3B ED B0       2 105 ldir                                ; fill the rest of positions as empty
6C3D CD 5B 6D    2 106 call    Draw_Board                  ; draw an empty hexagons board
6C40             2 108 ; initialize draw token delay, move number and token color
6C40 3E 0A       2 110 ld      a, 10                       ; set delay duration in 'Draw_Token' routine
6C42 32 8A 6D    2 111 ld      (@Token_Delay+1), a
6C45 3E 01       2 112 ld      a, 1                        ; initialize move number
6C47 32 9D 61    2 113 ld      (MOVE_NUMBER), a
6C4A 21 9E 61    2 114 ld      hl, TOKEN_COLOR             ; HL points to current token color address
6C4D 3E 05       2 115 ld      a, CYAN_COLOR               ; first player token color
6C4F             2 117 ; ----------------------------------------------------------------------------------------------------------------------
6C4F             2 118 ; Process players moves - Match loop
6C4F             2 119 ; ----------------------------------------------------------------------------------------------------------------------
6C4F             2 120 Main_Match_Loop
6C4F 77          2 121 ld      (hl), a                     ; save current token color
6C50 E6 03       2 122 and     %00000011                   ; set timer flag based on current token color
6C52 32 E8 62    2 123 ld      (TIMER_FLAG), a             ; start timer
6C55             2 125 ; check player turn
6C55 7E          2 127 ld      a, (hl)                     ; get current token color
6C56 23          2 128 inc     hl                          ; HL points to player color address
6C57 BE          2 129 cp      (hl)                        ; check player color
6C58 CC F3 6C    2 130 call    z, Main_GetPlayer_Move      ; if player color = current token color, get player move
6C5B C4 B4 6C    2 131 call    nz, Main_GetSpeccy_Move     ; else, get speccy move (previous call always set Z flag)
6C5E             2 133 ; update positions with player/speccy move
6C5E CD AC 70    2 135 call    PathFinder_Friend           ; get player/speccy side
6C61 CD B5 70    2 136 call    PathFinder_PutToken         ; put token on cyan and red positions
6C64             2 138 ; draw token on the board
6C64 AF          2 140 xor     a                           ; stop timers
6C65 32 E8 62    2 141 ld      (TIMER_FLAG), a
6C68 CD 76 6D    2 142 call    Draw_Token                  ; animate hexagon sprite on the screen
6C6B DD 21 E7 64 2 143 ld      ix, TOKEN_FX                ; IX points to token tone parameters address
6C6F CD 7B 76    2 144 call    Sound_FX                    ; play sound effect
6C72             2 146 ; check for a winner
6C72 CD 5C 75    2 148 call    PathFinder_VictoryPath      ; check current player victory path
6C75 3C          2 149 inc     a                           ; is there a victory path?
6C76 20 0A       2 150 jr      nz, Main_Match_End          ; yes, match ends
6C78             2 152 ; increment move number and swap players' token color
6C78 21 9D 61    2 154 ld      hl, MOVE_NUMBER             ; HL points to move number address
6C7B 34          2 155 inc     (hl)                        ; increment move number
6C7C 23          2 156 inc     hl                          ; HL points to current token color address
6C7D 3E 07       2 157 ld      a, %00000111                ; swap token color
6C7F AE          2 158 xor     (hl)
6C80 18 CD       2 159 jr      Main_Match_Loop             ; repeat match loop
6C82             2 161 ; ----------------------------------------------------------------------------------------------------------------------
6C82             2 162 ; Current player wins the match
6C82             2 163 ; ----------------------------------------------------------------------------------------------------------------------
6C82             2 164 Main_Match_End
6C82 CD 92 75    2 165 call    PathFinder_BrightPath       ; animate and highlight the winner path
6C85 11 3A 62    2 166 ld      de, STR_WINNER              ; DE points to "WINS" string address
6C88 CD CE 6E    2 167 call    Print_Alert                 ; print string
6C8B DD 21 EF 64 2 168 ld      ix, WINNER_FX               ; IX points to winner tone parameters address
6C8F CD 7B 76    2 169 call    Sound_FX                    ; play sound fx
6C92 3A 9E 61    2 171 ld      a, (TOKEN_COLOR)            ; get current token color
6C95 21 9F 61    2 172 ld      hl, PLAYER_COLOR            ; get player color
6C98 BE          2 173 cp      (hl)                        ; check player color
6C99 21 0E 62    2 174 ld      hl, THREE_ROW               ; HL points to three-in-a-row counter
6C9C 28 04       2 175 jr      z, Main_ThreeRow_Increment  ; if player color = current token color, increment counter
6C9E 35          2 176 dec     (hl)                        ; decrement three-in-a-row counter
6C9F F2 A3 6C    2 177 jp      p, Main_ThreeRow_Show       ; if not negative (-1), show marks
6CA2             2 178 Main_ThreeRow_Increment
6CA2 34          2 179 inc     (hl)                        ; increment three-in-a-row counter
6CA3             2 180 Main_ThreeRow_Show
6CA3 CD 9F 78    2 181 call    Screen_ThreeRow             ; show three-in-a-row marks
6CA6 3E FF       2 182 ld      a, 255                      ; set delay duration
6CA8 CD 4B 6D    2 183 call    Main_Delay                  ; execute delay
6CAB 3E 03       2 184 ld      a, 3                        ; check three row counter
6CAD BE          2 185 cp      (hl)                        ; is it 3?
6CAE CA F6 6B    2 186 jp      z, Main_New_Level           ; yes, start a new level
6CB1 C3 13 6C    2 187 jp      Main_Start_Match            ; start a new match
6CB4             2 189 ; ----------------------------------------------------------------------------------------------------------------------
6CB4             2 190 ; Main_GetSpeccy_Move: get the speccy move
6CB4             2 191 ;
6CB4             2 192 ; Input:    -
6CB4             2 193 ;
6CB4             2 194 ; Output:   BC = hexagon board indexes (B:column, C:row)
6CB4             2 195 ;           HL = CYAN_POSITIONS move address
6CB4             2 196 ;
6CB4             2 197 ; Uses:     MOVE_NUMBER (current move number)
6CB4             2 198 ;           GAME_LEVEL (current game level)
6CB4             2 199 ;           AI_DEPTH (recursion depth level)
6CB4             2 200 ;           STR_MOVE (formatted move string)
6CB4             2 201 ;
6CB4             2 202 ; Destroys: A, DE, IX, IY
6CB4             2 203 ; ----------------------------------------------------------------------------------------------------------------------
6CB4             2 204 Main_GetSpeccy_Move:
6CB4 CD E7 6E    2 205 call    Print_Wait                  ; print "WAIT" message
6CB7 3A 9D 61    2 206 ld      a, (MOVE_NUMBER)            ; get move number
6CBA 3D          2 207 dec     a                           ; is it cyan first move?
6CBB 28 24       2 208 jr      z, Main_GetSpeccy_Book      ; yes, get move from opening book
6CBD DD 21 00 7F 2 210 ld      ix, CANDIDATES              ; IX points to candidates list address
6CC1 CD AC 70    2 211 call    PathFinder_Friend           ; get speccy side (FRIEND or ENEMY)
6CC4 CD 38 6F    2 212 call    BRAINIAC_best_move          ; get speccy best move
6CC7 6B          2 213 ld      l, e                        ; set node index in L
6CC8             2 214 Main_GetSpeccy_Positions
6CC8 26 7D       2 215 ld      h, CYAN_POSITIONS/256       ; HL points to CYAN_POSITIONS move address
6CCA E5          2 216 push    hl                          ; store CYAN_POSITIONS move address
6CCB CD 39 6D    2 217 call    Main_Board2Indexes          ; convert board position to indexes
6CCE 78          2 218 ld      a, b                        ; get 1..7 column
6CCF C6 60       2 219 add     a, $60                      ; adjust to charset ('a'..'g')
6CD1 32 15 62    2 220 ld      (STR_MOVE+0), a             ; put it on formatted move string
6CD4 79          2 221 ld      a, c                        ; get 1..7 row
6CD5 C6 30       2 222 add     a, $30                      ; adjust to charset ('1'..'7')
6CD7 32 18 62    2 223 ld      (STR_MOVE+3), a             ; put it on formatted move string
6CDA C5          2 224 push    bc                          ; store hexagon board indexes
6CDB CD F5 6E    2 225 call    Print_Move                  ; print Speccy move
6CDE C1          2 226 pop     bc                          ; restore hexagon board indexes
6CDF E1          2 227 pop     hl                          ; restore CYAN_POSITIONS move address
6CE0 C9          2 228 ret
6CE1             2 229 Main_GetSpeccy_Book
6CE1 ED 5F       2 230 ld      a, r                        ; get a pseudo-random number (0..127)
6CE3 E6 1F       2 231 and     %00011111                   ; number is in range (0..31)
6CE5 FE 1B       2 232 cp      27                          ; is it >= 27?
6CE7 30 F8       2 233 jr      nc, Main_GetSpeccy_Book     ; yes, repeat until range is (0..26)
6CE9 21 CD 62    2 234 ld      hl, OPENINGS                ; HL points to opening book address
6CEC 16 00       2 235 ld      d, 0                        ; set index in DE
6CEE 5F          2 236 ld      e, a
6CEF 19          2 237 add     hl, de                      ; HL points to move index address
6CF0 6E          2 238 ld      l, (hl)                     ; get move from opening book
6CF1 18 D5       2 239 jr      Main_GetSpeccy_Positions    ; get speccy move positions
6CF3             2 241 ; ----------------------------------------------------------------------------------------------------------------------
6CF3             2 242 ; Main_GetPlayer_Move: get a legal (empty hexagon) move from player
6CF3             2 243 ;
6CF3             2 244 ; Input:    -
6CF3             2 245 ;
6CF3             2 246 ; Output:   BC = hexagon board indexes (B:column, C:row)
6CF3             2 247 ;           HL = CYAN_POSITIONS move address
6CF3             2 248 ;           Z  = flag set
6CF3             2 249 ;
6CF3             2 250 ; Uses:     STR_MOVE (formatted move string)
6CF3             2 251 ;
6CF3             2 252 ; Destroys: A, DE, IX
6CF3             2 253 ; ----------------------------------------------------------------------------------------------------------------------
6CF3             2 254 Main_GetPlayer_Move:
6CF3 CD EE 6E    2 255 call    Print_Clear_Move            ; clear player last move
6CF6 CD E5 6D    2 256 call    Input_Move                  ; wait for input player move
6CF9 CD F5 6E    2 257 call    Print_Move                  ; print player move
6CFC 3A 15 62    2 259 ld      a, (STR_MOVE+0)             ; get column ('a'..'g')
6CFF D6 60       2 260 sub     $60                         ; convert to number (1..7)
6D01 47          2 261 ld      b, a                        ; set column index in B
6D02 3A 18 62    2 262 ld      a, (STR_MOVE+3)             ; get row ('1'..'7')
6D05 D6 30       2 263 sub     $30                         ; convert to number (1..7)
6D07 4F          2 264 ld      c, a                        ; set row index in C
6D08 11 4D 62    2 265 ld      de, BOARD_COORDINATES       ; DE points to board coordinates address
6D0B CD 2B 6D    2 266 call    Main_Search_Table           ; search board position in board coordinates
6D0E 6E          2 267 ld      l, (hl)                     ; set board position of player move
6D0F 26 7D       2 268 ld      h, CYAN_POSITIONS/256       ; HL points to CYAN_POSITIONS move address
6D11 7E          2 269 ld      a, (hl)                     ; check position
6D12 B7          2 270 or      a                           ; is position empty?
6D13 C8          2 271 ret     z                           ; yes, return with Z flag set
6D14             2 273 ; illegal player move (position not empty)
6D14 11 2E 62    2 275 ld      de, STR_FILLED              ; DE points to "FILLED" string address
6D17 CD CE 6E    2 276 call    Print_Alert                 ; print string
6D1A DD 21 F7 64 2 277 ld      ix, FILLED_FX               ; IX points to filled tone parameters address
6D1E CD 7B 76    2 278 call    Sound_FX                    ; play sound fx
6D21 3E 50       2 279 ld      a, 80                       ; set delay counter
6D23 CD 4B 6D    2 280 call    Main_Delay                  ; execute delay
6D26 CD C7 6E    2 281 call    Print_Clear_Alert           ; clear alert message
6D29 18 C8       2 282 jr      Main_GetPlayer_Move         ; repeat player input until move is legal
6D2B             2 284 ; ----------------------------------------------------------------------------------------------------------------------
6D2B             2 285 ; Main_Search_Table: search an element in a 8x8 bytes table
6D2B             2 286 ;
6D2B             2 287 ; Input:    BC = element indexes (B = column, C = row)
6D2B             2 288 ;           DE = table address in which to search for the element
6D2B             2 289 ;
6D2B             2 290 ; Output:   DE = address of first element in the C row of the table
6D2B             2 291 ;           HL = address of the element in the BC indexes of the table
6D2B             2 292 ;
6D2B             2 293 ; Destroys: A
6D2B             2 294 ; ----------------------------------------------------------------------------------------------------------------------
6D2B             2 295 Main_Search_Table:
6D2B 79          2 296 ld      a, c                        ; first, get the C row in table
6D2C 87          2 297 add     a, a                        ; a row is 8 bytes long
6D2D 87          2 298 add     a, a
6D2E 87          2 299 add     a, a
6D2F 6F          2 300 ld      l, a                        ; set index in HL
6D30 26 00       2 301 ld      h, 0
6D32 19          2 302 add     hl, de                      ; HL points to the address of C row 
6D33 EB          2 303 ex      de, hl                      ; put it on DE
6D34 68          2 304 ld      l, b                        ; set B index in HL
6D35 26 00       2 305 ld      h, 0
6D37 19          2 306 add     hl, de                      ; HL points to the address of BC indexes
6D38 C9          2 307 ret
6D39             2 309 ; ----------------------------------------------------------------------------------------------------------------------
6D39             2 310 ; Main_Board2Indexes: convert a board position into a board indexes
6D39             2 311 ;
6D39             2 312 ; Input:    L  = board position
6D39             2 313 ;
6D39             2 314 ; Output:   BC = board indexes (B = column, C = row)
6D39             2 315 ;
6D39             2 316 ; Destroys: HL
6D39             2 317 ; ----------------------------------------------------------------------------------------------------------------------
6D39             2 318 Main_Board2Indexes:
6D39 7D          2 319 ld      a, l                        ; set board position in A to compare later
6D3A 21 8D 62    2 321 ld      hl, BOARD_COORDINATES+64    ; HL points to last board position address (+1)
6D3D 0E 07       2 322 ld      c, 7                        ; 7 rows
6D3F             2 323 Main_Board2Indexes_Row
6D3F 06 07       2 324 ld      b, 7                        ; 7 columns
6D41             2 325 Main_Board2Indexes_Col
6D41 2B          2 326 dec     hl                          ; move HL to next board position address
6D42 BE          2 327 cp      (hl)                        ; is A the position?
6D43 C8          2 328 ret     z                           ; yes, return board indexes
6D44 10 FB       2 329 djnz    Main_Board2Indexes_Col      ; repeat for each column
6D46 2B          2 330 dec     hl                          ; skip borders
6D47 0D          2 331 dec     c                           ; decrement row
6D48 C3 3F 6D    2 332 jp      Main_Board2Indexes_Row      ; loop until find position
6D4B             2 334 ; ----------------------------------------------------------------------------------------------------------------------
6D4B             2 335 ; Main_Delay: execute a delay
6D4B             2 336 ;
6D4B             2 337 ; Input:    A = delay counter
6D4B             2 338 ;
6D4B             2 339 ; Output:   -
6D4B             2 340 ;
6D4B             2 341 ; Destroys: A
6D4B             2 342 ; ----------------------------------------------------------------------------------------------------------------------
6D4B             2 343 Main_Delay:
6D4B C5          2 344 push    bc                          ; store BC register
6D4C             2 345 Main_Delay_Outer
6D4C F5          2 346 push    af                          ; store delay counter (outer loop)
6D4D 01 B0 04    2 347 ld      bc, 1200                    ; set inner loop counter in BC
6D50             2 348 Main_Delay_Inner
6D50 0B          2 349 dec     bc                          ; decrement inner loop counter
6D51 78          2 350 ld      a, b                        ; check inner loop counter
6D52 B1          2 351 or      c
6D53 20 FB       2 352 jr      nz, Main_Delay_Inner        ; repeat until inner loop counter = 0
6D55 F1          2 353 pop     af                          ; restore delay counter
6D56 3D          2 354 dec     a                           ; decrement delay counter
6D57 20 F3       2 355 jr      nz, Main_Delay_Outer        ; repeat until delay counter = 0
6D59 C1          2 356 pop     bc                          ; restore BC register
6D5A C9          2 357 ret

; File #3: C:\Users\Antonio\source\repos\Hex\Z80CodeFiles\Draw.z80asm

6D5B             3 1 ; ----------------------------------------------------------------------------------------------------------------------
6D5B             3 2 ; Draw.z80asm
6D5B             3 3 ; Coded by Antonio Luque
6D5B             3 4 ; ----------------------------------------------------------------------------------------------------------------------
6D5B             3 6 ; ----------------------------------------------------------------------------------------------------------------------
6D5B             3 7 ; Draw_Board: draw an empty 7x7 hexagons board on the screen
6D5B             3 8 ;
6D5B             3 9 ; Input:    -
6D5B             3 10 ;
6D5B             3 11 ; Output:   -
6D5B             3 12 ;
6D5B             3 13 ; Uses:     TOKEN_COLOR (current token color)
6D5B             3 14 ;
6D5B             3 15 ; Destroys: A, BC, DE, HL, IXL
6D5B             3 16 ; ----------------------------------------------------------------------------------------------------------------------
6D5B             3 17 Draw_Board:
6D5B 3E 07       3 18 ld      a, WHITE                    ; set empty hexagon color
6D5D 32 9E 61    3 19 ld      (TOKEN_COLOR), a            ; store hexagon color
6D60 0E 07       3 20 ld      c, 7                        ; 7 rows
6D62             3 21 Draw_Board_Row
6D62 06 07       3 22 ld      b, 7                        ; 7 columns
6D64             3 23 Draw_Board_Column
6D64 CD 91 6D    3 24 call    Draw_GetHEX_Screen          ; get hexagon screen address
6D67 CD C9 6D    3 25 call    Draw_Hexagon_Color          ; apply color to hexagon area
6D6A 11 7E 65    3 26 ld      de, HEXAGON_EMPTY           ; DE points to hexagon sprite address
6D6D CD 9B 6D    3 27 call    Draw_Sprite_Hexagon         ; draw an empty hexagon at screen address
6D70 10 F2       3 28 djnz    Draw_Board_Column           ; repeat for each column
6D72 0D          3 29 dec     c                           ; decrement row
6D73 20 ED       3 30 jr      nz, Draw_Board_Row          ; repeat for each row
6D75 C9          3 31 ret
6D76             3 33 ; ----------------------------------------------------------------------------------------------------------------------
6D76             3 34 ; Draw_Token: animate an hexagon sprite on the screen
6D76             3 35 ;
6D76             3 36 ; Input:    BC = hexagon board indexes (B:column, C:row)
6D76             3 37 ;
6D76             3 38 ; Output:   -
6D76             3 39 ;
6D76             3 40 ; Destroys: A, BC, DE, HL, IXL
6D76             3 41 ; ----------------------------------------------------------------------------------------------------------------------
6D76             3 42 Draw_Token:
6D76 CD 91 6D    3 43 call    Draw_GetHEX_Screen          ; get hexagon screen address
6D79 01 04 06    3 44 ld      bc, $0604                   ; B = number of sprites, C = sprite number to change color
6D7C 11 9E 65    3 45 ld      de, HEXAGON_SPRITE          ; DE points to hexagon sprite address
6D7F             3 46 Draw_Token_Loop
6D7F E5          3 47 push    hl                          ; store hexagon screen address
6D80 CD 9B 6D    3 48 call    Draw_Sprite_Hexagon         ; draw hexagon sprite
6D83 E1          3 49 pop     hl                          ; restore hexagon screen address
6D84 78          3 50 ld      a, b                        ; check loop counter
6D85 B9          3 51 cp      c                           ; is it 4?
6D86 CC C9 6D    3 52 call    z, Draw_Hexagon_Color       ; yes, apply color to hexagon area
6D89             3 53 @Token_Delay
6D89 3E 00       3 54 ld      a, 0                        ; set delay duration (changed before calling this routine)
6D8B CD 4B 6D    3 55 call    Main_Delay                  ; execute delay
6D8E 10 EF       3 56 djnz    Draw_Token_Loop             ; repeat for each hexagon sprite
6D90 C9          3 57 ret
6D91             3 59 ; ----------------------------------------------------------------------------------------------------------------------
6D91             3 60 ; Draw_GetHEX_Screen: get the screen address of an hexagon on board
6D91             3 61 ;
6D91             3 62 ; Input:    BC = hexagon board indexes (B:column, C:row)
6D91             3 63 ;
6D91             3 64 ; Output:   HL = hexagon screen address 
6D91             3 65 ;
6D91             3 66 ; Destroys: A, DE
6D91             3 67 ; ----------------------------------------------------------------------------------------------------------------------
6D91             3 68 Draw_GetHEX_Screen:
6D91 11 98 61    3 69 ld      de, BOARD_MAP-8             ; DE points to board hexagons screen addresses table (-8)
6D94 CD 2B 6D    3 70 call    Main_Search_Table           ; search the screen address of the hexagon in table
6D97 6E          3 71 ld      l, (hl)                     ; set the low byte of the screen address in L
6D98 1A          3 72 ld      a, (de)                     ; set the high byte of the screen address in H
6D99 67          3 73 ld      h, a
6D9A C9          3 74 ret
6D9B             3 76 ; ----------------------------------------------------------------------------------------------------------------------
6D9B             3 77 ; Draw_Sprite_Hexagon: draw an hexagon sprite on the screen
6D9B             3 78 ;
6D9B             3 79 ; Input:    DE = hexagon sprite address
6D9B             3 80 ;           HL = hexagon screen address
6D9B             3 81 ;
6D9B             3 82 ; Output:   DE = next hexagon sprite address
6D9B             3 83 ;
6D9B             3 84 ; Destroys: A, HL, IXL
6D9B             3 85 ; ----------------------------------------------------------------------------------------------------------------------
6D9B             3 86 Draw_Sprite_Hexagon:
6D9B DD 2E 10    3 87 ld      ixl, 16                     ; hexagon sprite height in bytes (loop counter)
6D9E             3 88 Draw_Sprite_HexLoop
6D9E 1A          3 89 ld      a, (de)                     ; get sprite byte
6D9F 77          3 90 ld      (hl), a                     ; put sprite byte on screen
6DA0 13          3 91 inc     de                          ; move DE to next sprite byte address
6DA1 2C          3 92 inc     l                           ; move HL to next screen column
6DA2 1A          3 93 ld      a, (de)                     ; get sprite byte
6DA3 77          3 94 ld      (hl), a                     ; put sprite byte on screen
6DA4 13          3 95 inc     de                          ; move DE to next sprite byte
6DA5 2D          3 96 dec     l                           ; move HL to previous screen column
6DA6 CD BA 6D    3 97 call    Draw_Down_PixelLine         ; move HL down one pixel-line
6DA9 DD 2D       3 98 dec     ixl                         ; decrement sprite height
6DAB 20 F1       3 99 jr      nz, Draw_Sprite_HexLoop     ; repeat for each byte in sprite
6DAD C9          3 100 ret
6DAE             3 102 ; ----------------------------------------------------------------------------------------------------------------------
6DAE             3 103 ; Draw_Sprite_LetterNum: draw a letter/number sprite at screen address
6DAE             3 104 ;
6DAE             3 105 ; Input:    DE = letter/number sprite address
6DAE             3 106 ;           HL = letter/number screen address
6DAE             3 107 ;
6DAE             3 108 ; Output:   DE = next letter/number sprite address
6DAE             3 109 ;
6DAE             3 110 ; Destroys: A, C, HL
6DAE             3 111 ; ----------------------------------------------------------------------------------------------------------------------
6DAE             3 112 Draw_Sprite_LetterNum:
6DAE 0E 0A       3 113 ld      c, 10                       ; letter/number sprite height in bytes (loop counter)
6DB0             3 114 Draw_Sprite_Loop
6DB0 1A          3 115 ld      a, (de)                     ; get sprite byte
6DB1 77          3 116 ld      (hl), a                     ; put sprite byte on screen
6DB2 13          3 117 inc     de                          ; move DE to next sprite byte address
6DB3 CD BA 6D    3 118 call    Draw_Down_PixelLine         ; move HL down one pixel-line
6DB6 0D          3 119 dec     c                           ; decrement sprite height
6DB7 20 F7       3 120 jr      nz, Draw_Sprite_Loop        ; repeat for each byte in sprite
6DB9 C9          3 121 ret
6DBA             3 123 ; ----------------------------------------------------------------------------------------------------------------------
6DBA             3 124 ; Draw_Down_PixelLine: move HL down one pixel-line
6DBA             3 125 ; Source: https://spectrumcomputing.co.uk/forums/viewtopic.php?p=35272#p35272
6DBA             3 126 ;
6DBA             3 127 ; The screen address of a pixel-line is encoded as follows:
6DBA             3 128 ;
6DBA             3 129 ;             H           |           L
6DBA             3 130 ;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
6DBA             3 131 ;  07|06|05|04|03|02|01|00|07|06|05|04|03|02|01|00
6DBA             3 132 ;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
6DBA             3 133 ;   0| 1| 0|Y7|Y6|Y2|Y1|Y0|Y5|Y4|Y3|X4|X3|X2|X1|X0
6DBA             3 134 ;
6DBA             3 135 ; where:
6DBA             3 136 ;   Y = pixel position: Y7,Y6,Y5,Y4,Y3,Y2,Y1,Y0 (0-191)
6DBA             3 137 ;   X = byte  position:  0, 0, 0,X4,X3,X2,X1,X0 (0-31)
6DBA             3 138 ;
6DBA             3 139 ; Input:    HL = pixel-line address
6DBA             3 140 ;
6DBA             3 141 ; Output:   HL = next (down) pixel-line address
6DBA             3 142 ;
6DBA             3 143 ; Destroys: A
6DBA             3 144 ; ----------------------------------------------------------------------------------------------------------------------
6DBA             3 145 Draw_Down_PixelLine:
6DBA 24          3 146 inc     h                           ; move HL down one pixel-line
6DBB 7C          3 147 ld      a, h                        ; get high byte of pixel-line address
6DBC E6 07       3 148 and     %00000111                   ; is pixel-line address inside a character line?
6DBE C0          3 149 ret     nz                          ; yes, return
6DBF 7D          3 150 ld      a, l                        ; get low byte of pixel-line address (at this point Y6 = 1)
6DC0 C6 20       3 151 add     a, 32                       ; add size of char line (add extra bit into Y3-Y5)
6DC2 6F          3 152 ld      l, a                        ; move HL down one character line
6DC3 D8          3 153 ret     c                           ; a third was crossed? yes, return
6DC4 7C          3 154 ld      a, h                        ; get high byte of pixel-line address
6DC5 D6 08       3 155 sub     8                           ; clean up the bit from Y6
6DC7 67          3 156 ld      h, a                        ; HL points to next (down) pixel-line address
6DC8 C9          3 157 ret
6DC9             3 159 ; ----------------------------------------------------------------------------------------------------------------------
6DC9             3 160 ; Draw_Hexagon_Color: color an hexagon sprite on the screen
6DC9             3 161 ; Source: https://spectrumcomputing.co.uk/forums/viewtopic.php?p=42285#p42285
6DC9             3 162 ;
6DC9             3 163 ; This routine converts a screen address (HL) into an attribute address (IX):
6DC9             3 164 ;
6DC9             3 165 ;             H           |           L
6DC9             3 166 ;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
6DC9             3 167 ;  07|06|05|04|03|02|01|00|07|06|05|04|03|02|01|00
6DC9             3 168 ;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
6DC9             3 169 ;   0| 1| 0|Y7|Y6|Y2|Y1|Y0|Y5|Y4|Y3|X4|X3|X2|X1|X0      screen address
6DC9             3 170 ;
6DC9             3 171 ;            IXH          |          IXL
6DC9             3 172 ;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
6DC9             3 173 ;  07|06|05|04|03|02|01|00|07|06|05|04|03|02|01|00
6DC9             3 174 ;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
6DC9             3 175 ;   0| 1| 0| 1| 1| 0|Y7|Y6|Y5|Y4|Y3|X4|X3|X2|X1|X0      attribute address
6DC9             3 176 ;
6DC9             3 177 ; where:
6DC9             3 178 ;   Y = pixel position: Y7,Y6,Y5,Y4,Y3,Y2,Y1,Y0 (0-191)
6DC9             3 179 ;   X = byte  position:  0, 0, 0,X4,X3,X2,X1,X0 (0-31)
6DC9             3 180 ;
6DC9             3 181 ; Input:    HL = screen address of the hexagon
6DC9             3 182 ;
6DC9             3 183 ; Output:   IX = attribute address of the hexagon
6DC9             3 184 ;
6DC9             3 185 ; Uses:     TOKEN_COLOR (current token color)
6DC9             3 186 ;
6DC9             3 187 ; Destroys: A
6DC9             3 188 ; ----------------------------------------------------------------------------------------------------------------------
6DC9             3 189 Draw_Hexagon_Color:
6DC9 7C          3 190 ld      a, h                        ; get high byte of screen address
6DCA F6 87       3 191 or      %10000111                   ; mask Y0-Y2 and set bit 7 on
6DCC 1F          3 192 rra                                 ; shift Y7-Y6 two positions
6DCD 1F          3 193 rra
6DCE CB 3F       3 194 srl     a                           ; shift Y7-Y6 to last positions and set bit 7 off
6DD0 DD 67       3 195 ld      ixh, a                      ; set high byte of attribute address in IXH
6DD2 7D          3 196 ld      a, l                        ; (the low byte for attribute address doesn't change)
6DD3 DD 6F       3 197 ld      ixl, a                      ; set low byte of attribute address in IXL
6DD5 3A 9E 61    3 198 ld      a, (TOKEN_COLOR)            ; get current token color
6DD8 DD 77 00    3 199 ld      (ix+0), a                   ; set hexagon color (4 bytes)
6DDB DD 77 01    3 200 ld      (ix+1), a
6DDE DD 77 20    3 201 ld      (ix+32), a
6DE1 DD 77 21    3 202 ld      (ix+33), a
6DE4 C9          3 203 ret

; File #4: C:\Users\Antonio\source\repos\Hex\Z80CodeFiles\Input.z80asm

6DE5             4 1 ; ----------------------------------------------------------------------------------------------------------------------
6DE5             4 2 ; Input.z80asm
6DE5             4 3 ; Coded by Antonio Luque
6DE5             4 4 ; ----------------------------------------------------------------------------------------------------------------------
6DE5             4 6 MAX_CHARS               EQU     2                           ; maximum of input chars
6DE5             4 8 ; ----------------------------------------------------------------------------------------------------------------------
6DE5             4 9 ; Input_Move: wait for the input of a movement through the keyboard
6DE5             4 10 ;
6DE5             4 11 ; Based on assembler course by sromero:
6DE5             4 12 ; https://wiki.speccy.org/cursos/ensamblador/gfx4_fuentes#lectura-de-texto-desde-teclado
6DE5             4 13 ;
6DE5             4 14 ; Input:    -
6DE5             4 15 ;
6DE5             4 16 ; Output:   -
6DE5             4 17 ;
6DE5             4 18 ; Uses:     TOKEN_COLOR (current token color)
6DE5             4 19 ;           STR_MOVE (formatted move string)
6DE5             4 20 ;
6DE5             4 21 ; Destroys: A, BC, DE, HL, IX
6DE5             4 22 ; ----------------------------------------------------------------------------------------------------------------------
6DE5             4 23 Input_Move:
6DE5 01 00 02    4 24 ld      bc, MAX_CHARS*256           ; B = maximum of input chars, C = chars counter
6DE8 DD 21 83 5A 4 26 ld      ix, $5A83                   ; IX points to attribute address of RED input text
6DEC 21 83 50    4 27 ld      hl, $5083                   ; HL points to screen address of RED input text
6DEF 3A 9E 61    4 28 ld      a, (TOKEN_COLOR)            ; check current player color
6DF2 FE 02       4 29 cp      RED_COLOR                   ; is RED the current token color?
6DF4 28 07       4 30 jr      z, Input_Start              ; yes, start input
6DF6 DD 21 19 59 4 31 ld      ix, $5919                   ; IX points to attribute address of CYAN input text
6DFA 21 19 48    4 32 ld      hl, $4819                   ; HL points to screen address of CYAN input text
6DFD             4 33 Input_Start
6DFD DD 36 00 C7 4 34 ld      (ix+0), WHITE_FLASH1        ; set attributes for cursor (flash)
6E01 3E 5F       4 35 ld      a, '_'                      ; text input cursor
6E03 CD 1E 6F    4 36 call    Print_Char                  ; print cursor
6E06             4 37 Input_Loop
6E06 CD 7E 6E    4 38 call    Input_Key_Scan              ; scan for a key pressed
6E09 FE 0D       4 39 cp      13                          ; is it ENTER?
6E0B 28 64       4 40 jr      z, Input_Enter              ; yes, perform enter pressed
6E0D FE 30       4 41 cp      '0'                         ; is it "delete"? (char '0' acts as delete, without Shift)
6E0F 28 42       4 42 jr      z, Input_Delete             ; yes, perform delete char
6E11 57          4 43 ld      d, a                        ; store char in D
6E12 79          4 44 ld      a, c                        ; check number of chars inserted
6E13 B8          4 45 cp      b                           ; chars limit reached?
6E14 28 F0       4 46 jr      z, Input_Loop               ; yes, repeat input loop
6E16 B7          4 48 or      a                           ; is it the first char?
6E17 20 21       4 49 jr      nz, Input_Numbers           ; no, perform input of second char
6E19             4 51 ; restrict first char to 'a'-'g'
6E19 7A          4 53 ld      a, d                        ; restore char
6E1A FE 61       4 54 cp      'a'                         ; is it < 'a'?
6E1C 38 E8       4 55 jr      c, Input_Loop               ; yes, repeat input loop (char is not allowed)
6E1E FE 68       4 56 cp      'g'+1                       ; is it > 'g'?
6E20 30 E4       4 57 jr      nc, Input_Loop              ; yes, repeat input loop (char is not allowed)
6E22             4 59 ; char is valid as column
6E22 32 15 62    4 61 ld      (STR_MOVE+0), a             ; save char in player move
6E25 DD 36 00 47 4 62 ld      (ix+0), WHITE_FLASH0        ; restore attributes (no flash)
6E29 CD 1E 6F    4 63 call    Print_Char                  ; print key pressed
6E2C 0C          4 64 inc     c                           ; increment chars counter
6E2D 2C          4 65 inc     l                           ; increment X position of current input screen location
6E2E DD 2C       4 66 inc     ixl                         ; increment X position of current input attr location
6E30 3E 2D       4 67 ld      a, '-'                      ; set dash char
6E32 CD 1E 6F    4 68 call    Print_Char                  ; print dash char
6E35 2C          4 69 inc     l                           ; increment X position of current input screen location
6E36 DD 2C       4 70 inc     ixl                         ; increment X position of current input attr location
6E38 18 C3       4 71 jr      Input_Start                 ; get next char (do until ENTER is pressed)
6E3A             4 72 Input_Numbers
6E3A             4 73 ; restrict second char to '1'-'7'
6E3A 7A          4 75 ld      a, d                        ; restore char
6E3B FE 31       4 76 cp      '1'                         ; is it < '1'?
6E3D 38 C7       4 77 jr      c, Input_Loop               ; yes, repeat input loop (char is not allowed)
6E3F FE 38       4 78 cp      '7'+1                       ; is it > '7'?
6E41 30 C3       4 79 jr      nc, Input_Loop              ; yes, repeat input loop (char is not allowed)
6E43             4 81 ; char is valid as row
6E43 32 18 62    4 83 ld      (STR_MOVE+3), a             ; save char in player move
6E46 DD 36 00 47 4 84 ld      (ix+0), WHITE_FLASH0        ; restore attributes (no flash)
6E4A CD 1E 6F    4 85 call    Print_Char                  ; print key pressed
6E4D 0C          4 86 inc     c                           ; increment chars counter
6E4E 2C          4 87 inc     l                           ; increment X position of current input screen location
6E4F DD 2C       4 88 inc     ixl                         ; increment X position of current input attr location
6E51 18 AA       4 89 jr      Input_Start                 ; get next char (do until ENTER is pressed)
6E53             4 91 ; player pressed "delete" (char '0')
6E53             4 92 Input_Delete
6E53 79          4 93 ld      a, c                        ; get char counter
6E54 B7          4 94 or      a                           ; is it 0?
6E55 28 AF       4 95 jr      z, Input_Loop               ; repeat input loop (no chars to delete)
6E57 DD 36 00 47 4 97 ld      (ix+0), WHITE_FLASH0        ; restore attributes (no flash)
6E5B B8          4 98 cp      b                           ; is it the first char?
6E5C 28 08       4 99 jr      z, Input_Delete_Char        ; yes, continue delete
6E5E 3E 20       4 100 ld      a, ' '                      ; empty char
6E60 CD 1E 6F    4 101 call    Print_Char                  ; delete cursor and last char
6E63 2D          4 102 dec     l                           ; decrement X position of input screen location
6E64 DD 2D       4 103 dec     ixl                         ; decrement X position of input attr location
6E66             4 104 Input_Delete_Char
6E66 0D          4 105 dec     c                           ; decrement char counter
6E67 3E 20       4 106 ld      a, ' '                      ; empty char
6E69 CD 1E 6F    4 107 call    Print_Char                  ; delete cursor and last char
6E6C 2D          4 108 dec     l                           ; decrement X position of player input screen location
6E6D DD 2D       4 109 dec     ixl                         ; decrement X position of player input attr location
6E6F 18 8C       4 110 jr      Input_Start                 ; get next char
6E71             4 112 ; player pressed ENTER
6E71             4 113 Input_Enter
6E71 79          4 114 ld      a, c                        ; check char counter  
6E72 B8          4 115 cp      b                           ; is it < MAX_CHARS?
6E73 38 91       4 116 jr      c, Input_Loop               ; yes, repeat input loop (move is incomplete)
6E75 DD 36 00 47 4 118 ld      (ix+0), WHITE_FLASH0        ; restore attributes (no flash)
6E79 3E 20       4 119 ld      a, ' '                      ; empty char
6E7B C3 1E 6F    4 120 jp      Print_Char                  ; delete cursor and return via Print_Char
6E7E             4 122 ; ----------------------------------------------------------------------------------------------------------------------
6E7E             4 123 ; Input_Key_Scan: wait for a key pressed and return its ASCII code
6E7E             4 124 ;
6E7E             4 125 ;                           Bit
6E7E             4 126 ;  Port  |   0   |   1   |   2   |   3   |   4   |
6E7E             4 127 ;  ------+-------+-------+-------+-------+-------+
6E7E             4 128 ;  $FEFE | Shift |   Z   |   X   |   C   |   V   |
6E7E             4 129 ;  $FDFE |   A   |   S   |   D   |   F   |   G   |
6E7E             4 130 ;  $FBFE |   Q   |   W   |   E   |   R   |   T   |
6E7E             4 131 ;  $F7FE |   1   |   2   |   3   |   4   |   5   |
6E7E             4 132 ;  $EFFE |   0   |   9   |   8   |   7   |   6   |
6E7E             4 133 ;  $DFFE |   P   |   O   |   I   |   U   |   Y   |
6E7E             4 134 ;  $BFFE | Enter |   L   |   K   |   J   |   H   |
6E7E             4 135 ;  $7FFE | Space |  Sym  |   M   |   N   |   B   |
6E7E             4 136 ;
6E7E             4 137 ;  Bits are set to 0 for any key that is pressed and 1 for any key that is not pressed
6E7E             4 138 ;
6E7E             4 139 ; Input:    -
6E7E             4 140 ;
6E7E             4 141 ; Output:   A = ASCII code of key pressed
6E7E             4 142 ;
6E7E             4 143 ; Destroys: DE
6E7E             4 144 ; ----------------------------------------------------------------------------------------------------------------------
6E7E             4 145 Input_Key_Scan:
6E7E C5          4 146 push    bc                          ; store registers
6E7F E5          4 147 push    hl
6E80             4 148 Input_Key_Released
6E80 01 FE FE    4 149 ld      bc, $FEFE                   ; set keyboard port (see above)
6E83             4 150 Input_Key_Released_Line
6E83 ED 78       4 151 in      a, (c)                      ; read port
6E85 2F          4 152 cpl                                 ; invert bits
6E86 E6 1F       4 153 and     %00011111                   ; check 0 to 4 bits
6E88 20 F6       4 154 jr      nz, Input_Key_Released      ; repeat from the beginning until no key is pressed
6E8A CB 00       4 155 rlc     b                           ; move BC to the next port
6E8C 38 F5       4 156 jr      c, Input_Key_Released_Line  ; repeat for each port
6E8E 11 05 00    4 157 ld      de, 5                       ; number of keys in each port (KEY_MAP displacement)
6E91             4 158 Input_Key_Pressed_Begin
6E91 21 D8 61    4 159 ld      hl, KEY_MAP                 ; HL points to KEY_MAP array
6E94             4 160 Input_Key_Pressed_Line
6E94 ED 78       4 161 in      a, (c)                      ; read port
6E96 2F          4 162 cpl                                 ; invert bits
6E97 E6 1F       4 163 and     %00011111                   ; check 0 to 4 bits
6E99 20 08       4 164 jr      nz, Input_Key_Pressed       ; if any key is pressed, process it
6E9B 19          4 165 add     hl, de                      ; HL points to the next KEY_MAP block
6E9C CB 00       4 166 rlc     b                           ; move BC to the next port
6E9E 38 F4       4 167 jr      c, Input_Key_Pressed_Line   ; repeat for each port
6EA0 18 EF       4 168 jr      Input_Key_Pressed_Begin     ; repeat from the beginning until any key is pressed
6EA2             4 169 Input_Key_Next
6EA2 23          4 170 inc     hl                          ; move HL to the next character
6EA3             4 171 Input_Key_Pressed
6EA3 1F          4 172 rra                                 ; rotate bits of port readed
6EA4 30 FC       4 173 jr      nc, Input_Key_Next          ; repeat until find the key pressed
6EA6 7E          4 174 ld      a, (hl)                     ; return key pressed (ASCII) in A
6EA7 E1          4 175 pop     hl                          ; restore registers
6EA8 C1          4 176 pop     bc
6EA9 C9          4 177 ret

; File #5: C:\Users\Antonio\source\repos\Hex\Z80CodeFiles\Print.z80asm

6EAA             5 1 ; ----------------------------------------------------------------------------------------------------------------------
6EAA             5 2 ; Print.z80asm
6EAA             5 3 ; Coded by Antonio Luque
6EAA             5 4 ; ----------------------------------------------------------------------------------------------------------------------
6EAA             5 6 CHAR_SET                EQU     FONT-256                    ; address of character set data, adjusted for ASCII codes
6EAA             5 8 ; ----------------------------------------------------------------------------------------------------------------------
6EAA             5 9 ; Print_Players: print "Player" and "Speccy" strings in the corresponding positions
6EAA             5 10 ;
6EAA             5 11 ; Input:    A = player color (CYAN_COLOR or RED_COLOR)
6EAA             5 12 ;
6EAA             5 13 ; Output:   -
6EAA             5 14 ;
6EAA             5 15 ; Destroys: A, BC, DE, HL
6EAA             5 16 ; ----------------------------------------------------------------------------------------------------------------------
6EAA             5 17 Print_Players:
6EAA 11 21 62    5 18 ld      de, STR_PLAYER              ; DE points to "Player" string address
6EAD 01 1A 62    5 19 ld      bc, STR_SPECCY              ; BC points to "Speccy" string address
6EB0 21 02 50    5 20 ld      hl, $5002                   ; HL points to red string screen address
6EB3 FE 02       5 21 cp      RED_COLOR                   ; is player color red?
6EB5 28 06       5 22 jr      z, Print_Players_Strings    ; yes, print players strings
6EB7 11 1A 62    5 23 ld      de, STR_SPECCY              ; DE points to "Speccy" string address
6EBA 01 21 62    5 24 ld      bc, STR_PLAYER              ; BC points to "Player" string address
6EBD             5 25 Print_Players_Strings
6EBD CD 12 6F    5 26 call    Print_String                ; print "Player" or "Speccy"
6EC0 50          5 27 ld      d, b                        ; DE points to "Player" or "Speccy" string address
6EC1 59          5 28 ld      e, c
6EC2 21 98 40    5 29 ld      hl, $4098                   ; HL points to cyan string screen address
6EC5 18 4B       5 30 jr      Print_String                ; print "Player" or "Speccy"
6EC7             5 32 ; ----------------------------------------------------------------------------------------------------------------------
6EC7             5 33 ; Print_Clear_Alert: clear a printed alert message below the current player input move
6EC7             5 34 ;
6EC7             5 35 ; Input:    -
6EC7             5 36 ; Output:   -
6EC7             5 37 ; Destroys: A, BC, DE, HL, IX
6EC7             5 38 ; ----------------------------------------------------------------------------------------------------------------------
6EC7             5 39 Print_Clear_Alert:
6EC7 11 46 62    5 40 ld      de, STR_EMPTY6              ; DE points to a 6 blanks string address
6ECA 0E 47       5 41 ld      c, WHITE_FLASH0             ; set (clear) alert message color
6ECC 18 02       5 42 jr      Print_Alert_XY              ; print (clear) alert string
6ECE             5 44 ; ----------------------------------------------------------------------------------------------------------------------
6ECE             5 45 ; Print_Alert: print an alert message below the current player input move
6ECE             5 46 ;
6ECE             5 47 ; Input:    DE = alert message string address
6ECE             5 48 ;
6ECE             5 49 ; Output:   -
6ECE             5 50 ;
6ECE             5 51 ; Uses:     TOKEN_COLOR (current token color)
6ECE             5 52 ;
6ECE             5 53 ; Destroys: A, BC, DE, HL, IX
6ECE             5 54 ; ----------------------------------------------------------------------------------------------------------------------
6ECE             5 55 Print_Alert:
6ECE 0E C7       5 56 ld      c, WHITE_FLASH1             ; set alert message color
6ED0             5 57 Print_Alert_XY
6ED0 DD 21 A2 5A 5 58 ld      ix, $5AA2                   ; IX points to red alert string attribute address
6ED4 21 A2 50    5 59 ld      hl, $50A2                   ; HL points to red alert string screen address
6ED7 3A 9E 61    5 60 ld      a, (TOKEN_COLOR)            ; check current token color
6EDA FE 02       5 61 cp      RED_COLOR                   ; is token color red?
6EDC 28 31       5 62 jr      z, Print_String_Color       ; yes, print alert string with color
6EDE DD 21 38 59 5 63 ld      ix, $5938                   ; IX points to cyan alert string attribute address
6EE2 21 38 48    5 64 ld      hl, $4838                   ; HL points to cyan alert string screen address
6EE5 18 28       5 65 jr      Print_String_Color          ; print alert string with color
6EE7             5 67 ; ----------------------------------------------------------------------------------------------------------------------
6EE7             5 68 ; Print_Wait: print "WAIT" message at current player input move location 
6EE7             5 69 ;
6EE7             5 70 ; Input:    -
6EE7             5 71 ;
6EE7             5 72 ; Output:   -
6EE7             5 73 ;
6EE7             5 74 ; Destroys: A, BC, DE, HL, IX
6EE7             5 75 ; ----------------------------------------------------------------------------------------------------------------------
6EE7             5 76 Print_Wait:
6EE7 11 35 62    5 77 ld      de, STR_WAIT                ; DE points to "WAIT" string address
6EEA 0E C7       5 78 ld      c, WHITE_FLASH1             ; set wait message color
6EEC 18 0C       5 79 jr      Print_Move_XY               ; print wait string
6EEE             5 81 ; ----------------------------------------------------------------------------------------------------------------------
6EEE             5 82 ; Clear_Move: clear a printed player move at current player input move location 
6EEE             5 83 ;
6EEE             5 84 ; Input:    -
6EEE             5 85 ;
6EEE             5 86 ; Output:   -
6EEE             5 87 ;
6EEE             5 88 ; Destroys: A, BC, DE, HL, IX
6EEE             5 89 ; ----------------------------------------------------------------------------------------------------------------------
6EEE             5 90 Print_Clear_Move:
6EEE 11 41 62    5 91 ld      de, STR_EMPTY4              ; DE points to a 4 blanks string address
6EF1 0E 47       5 92 ld      c, WHITE_FLASH0             ; set (clear) move string color
6EF3 18 05       5 93 jr      Print_Move_XY               ; print (clear) move string
6EF5             5 95 ; ----------------------------------------------------------------------------------------------------------------------
6EF5             5 96 ; Print_Move: print a formatted move at current player input move location 
6EF5             5 97 ;
6EF5             5 98 ; Input:    -
6EF5             5 99 ;
6EF5             5 100 ; Output:   -
6EF5             5 101 ;
6EF5             5 102 ; Uses:     TOKEN_COLOR (current token color)
6EF5             5 103 ;
6EF5             5 104 ; Destroys: A, BC, DE, HL, IX
6EF5             5 105 ; ----------------------------------------------------------------------------------------------------------------------
6EF5             5 106 Print_Move:
6EF5 11 15 62    5 107 ld      de, STR_MOVE                ; DE points to formatted move string address
6EF8 0E 47       5 108 ld      c, WHITE_FLASH0             ; set string color
6EFA             5 109 Print_Move_XY
6EFA DD 21 82 5A 5 110 ld      ix, $5A82                   ; IX points to red move attribute address
6EFE 21 83 50    5 111 ld      hl, $5083                   ; HL points to red move screen address
6F01 3A 9E 61    5 112 ld      a, (TOKEN_COLOR)            ; check current token color
6F04 FE 02       5 113 cp      RED_COLOR                   ; is token color red?
6F06 28 07       5 114 jr      z, Print_String_Color       ; yes, print move string with color
6F08 DD 21 18 59 5 115 ld      ix, $5918                   ; IX points to cyan move attribute address
6F0C 21 19 48    5 116 ld      hl, $4819                   ; HL points to cyan move screen address
6F0F             5 117 Print_String_Color
6F0F CD 1F 78    5 118 call    Screen_Apply_Color_6        ; apply color to string area
6F12             5 119 ; ----------------------------------------------------------------------------------------------------------------------
6F12             5 120 ; Print_String: print a string on the screen
6F12             5 121 ; Based on assembler course by sromero: https://wiki.speccy.org/cursos/ensamblador/gfx4_fuentes
6F12             5 122 ;
6F12             5 123 ; Input:    DE = string address (ending with 0)
6F12             5 124 ;           HL = string screen address
6F12             5 125 ;
6F12             5 126 ; Output:   -
6F12             5 127 ;
6F12             5 128 ; Destroys: A, DE, HL
6F12             5 129 ; ----------------------------------------------------------------------------------------------------------------------
6F12             5 130 Print_String:
6F12 1A          5 131 ld      a, (de)                     ; get string character
6F13 B7          5 132 or      a                           ; is it 0? (end of string)
6F14 C8          5 133 ret     z                           ; yes, return
6F15 D5          5 134 push    de                          ; store pointer to string address
6F16 CD 1E 6F    5 135 call    Print_Char                  ; print character
6F19 D1          5 136 pop     de                          ; restore pointer to string address
6F1A 13          5 137 inc     de                          ; move DE to next string character
6F1B 2C          5 138 inc     l                           ; move HL to next screen column
6F1C 18 F4       5 139 jr      Print_String                ; repeat until end of string
6F1E             5 141 ; ----------------------------------------------------------------------------------------------------------------------
6F1E             5 142 ; Print_Char: print a character on the screen
6F1E             5 143 ;
6F1E             5 144 ; Input:    A  = character to print (ASCII)
6F1E             5 145 ;           HL = character screen address
6F1E             5 146 ;
6F1E             5 147 ; Output:   -
6F1E             5 148 ;
6F1E             5 149 ; Destroys: A, DE
6F1E             5 150 ; ----------------------------------------------------------------------------------------------------------------------
6F1E             5 151 Print_Char:
6F1E 11 C3 67    5 152 ld      de, CHAR_SET                ; DE points to charset address
6F21             5 153 Print_Tile:
6F21 E5          5 154 push    hl                          ; store pointer to character/tile screen address
6F22 26 00       5 155 ld      h, 0                        ; set character/tile index in HL
6F24 6F          5 156 ld      l, a
6F25 29          5 157 add     hl, hl                      ; a character/tile is 8 bytes long
6F26 29          5 158 add     hl, hl
6F27 29          5 159 add     hl, hl
6F28 19          5 160 add     hl, de                      ; move HL to character/tile address
6F29 EB          5 161 ex      de, hl                      ; DE points to character/tile address
6F2A E1          5 162 pop     hl                          ; restore pointer to character/tile screen address
6F2B C5          5 163 push    bc                          ; store BC register
6F2C 4C          5 164 ld      c, h                        ; save high byte of character/tile screen address
6F2D 06 08       5 165 ld      b, 8                        ; number of character/tile bytes (loop counter)
6F2F             5 166 Print_Tile_Pixels
6F2F 1A          5 167 ld      a, (de)                     ; get character/tile byte
6F30 77          5 168 ld      (hl), a                     ; put character/tile byte on screen
6F31 13          5 169 inc     de                          ; move DE to next character/tile byte
6F32 24          5 170 inc     h                           ; move HL down one pixel-line
6F33 10 FA       5 171 djnz    Print_Tile_Pixels           ; repeat for each character/tile bytes
6F35 61          5 172 ld      h, c                        ; restore high byte of character/tile screen address
6F36 C1          5 173 pop     bc                          ; restore BC register
6F37 C9          5 174 ret

; File #6: C:\Users\Antonio\source\repos\Hex\Z80CodeFiles\Brainiac.z80asm

6F38             6 1 ; ----------------------------------------------------------------------------------------------------------------------
6F38             6 2 ; Brainiac.z80asm
6F38             6 3 ; Coded by Einar Saukas: https://spectrumcomputing.co.uk/entry/31171/ZX-Spectrum/BRAINIAC
6F38             6 4 ;
6F38             6 5 ; Adapted for Hex game by Einar Saukas
6F38             6 6 ; ----------------------------------------------------------------------------------------------------------------------
6F38             6 8 MIN_VALUE               EQU     0                           ; alphaBeta pruning minimum value
6F38             6 9 MAX_VALUE               EQU     255                         ; alphaBeta pruning maximum value
6F38             6 11 ; ----------------------------------------------------------------------------------------------------------------------
6F38             6 12 ; BRAINIAC_best_move: execute BRAINIAC algorithm to determine best choice for specified player's next move, according to
6F38             6 13 ; specified AI difficulty level. This algorithm is implemented as recursive Minimax with alpha-beta pruning, that
6F38             6 14 ; alternates between tree nodes maximizing score (speccy move) and minimizing it (player move) depending on recursion
6F38             6 15 ; depth.
6F38             6 16 ;
6F38             6 17 ; Original source code by Einar Saukas: https://spectrumcomputing.co.uk/entry/31171/ZX-Spectrum/BRAINIAC
6F38             6 18 ;
6F38             6 19 ; Input:    A   = speccy side (FRIEND or ENEMY)
6F38             6 20 ;           IX  = candidates vector address
6F38             6 21 ;           P/V = flag unset if speccy side is FRIEND, flag set if speccy side is ENEMY
6F38             6 22 ;
6F38             6 23 ; Output:   E  = selected position (speccy move)
6F38             6 24 ;
6F38             6 25 ; Uses:     AI_PLAYER (speccy side)
6F38             6 26 ;           AI_DEPTH (recursion depth level)
6F38             6 27 ;
6F38             6 28 ; Destroys: A, A', BC, D, HL, IX, IY
6F38             6 29 ; ----------------------------------------------------------------------------------------------------------------------
6F38             6 30 BRAINIAC_best_move:
6F38 32 9B 61    6 31 ld      (AI_PLAYER), a              ; save speccy side
6F3B CD 34 74    6 33 call    PathFinder_Score            ; get board score (needed to get candidates)
6F3E CD D7 74    6 34 call    PathFinder_Candidates       ; get candidates from board potentials
6F41             6 36 ; BRAINIAC start
6F41             6 37 AI_First_Candidate
6F41 DD 7E 00    6 38 ld      a, (ix+0)                   ; A is our first candidate
6F44 5F          6 40 ld      e, a                        ; E = best speccy move (initialization)
6F45 16 00       6 41 ld      d, MIN_VALUE                ; D = alphaMax
6F47             6 43 AI_Main_Loop                                                ; for each candidate {
6F47 D5          6 44 push    de                          ;       store alphaMax and best speccy move
6F48 26 7D       6 46 ld      h, CYAN_POSITIONS/256       ;       get and store candidate position on board
6F4A 6F          6 47 ld      l, a
6F4B E5          6 48 push    hl
6F4C 3A 9B 61    6 50 ld      a, (AI_PLAYER)              ;       get speccy side
6F4F CD B5 70    6 51 call    PathFinder_PutToken         ;       BRAINIAC_play
6F52 EE 7C       6 52 xor     $7C                         ;       restore speccy side
6F54 1E FF       6 53 ld      e, MAX_VALUE                ;       E = betaMin
6F56 CD 6F 6F    6 54 call    Alphabeta_Min               ;       A = alphabeta_min(alphaMax, betaMin)
6F59 E1          6 56 pop     hl                          ;       restore candidate position
6F5A CD BB 70    6 57 call    PathFinder_EraseToken       ;       BRAINIAC_undo
6F5D D1          6 59 pop     de                          ;       restore alphaMax and best player node
6F5E BA          6 61 cp      d
6F5F 38 04       6 62 jr      c, AI_Main_Next
6F61 28 02       6 63 jr      z, AI_Main_Next             ;       if (A <= alphaMax) continue
6F63 57          6 65 ld      d, a                        ;       alphaMax = A
6F64 5D          6 66 ld      e, l                        ;       best move = E
6F65             6 68 AI_Main_Next
6F65 DD 2D       6 69 dec     ixl
6F67 DD 7E 00    6 70 ld      a, (ix+0)                   ;       A is our next candidate
6F6A B7          6 71 or      a                           ;       repeat until no more candidates
6F6B C2 47 6F    6 72 jp      nz, AI_Main_Loop            ; }
6F6E C9          6 73 ret
6F6F             6 75 ; ----------------------------------------------------------------------------------------------------------------------
6F6F             6 76 ; Alphabeta_Min: Process a tree node of the Minimax search tree with alpha-beta pruning, when it requires MINIMIZING
6F6F             6 77 ; Speccy's score.
6F6F             6 78 ;
6F6F             6 79 ; This implementation is different from conventional alpha-beta pruning because it returns the best (lowest) betaMin
6F6F             6 80 ; value obtained so far at this subtree depth (from previous sibling nodes), when it's even lower than the best (lowest)
6F6F             6 81 ; score at this tree node only. In practice that's OK, since the existence of a lower betaMin in a previous sibling node
6F6F             6 82 ; would make parent node discard the node's betaMin value and adopt the even lower betaMin value from a previous sibling
6F6F             6 83 ; node anyway. This change was useful to allow a highly optimized Assembly implementation with a more efficient register
6F6F             6 84 ; allocation. The only drawback was that, whenever a parent node obtains the same best score from 2 child nodes, it must
6F6F             6 85 ; always choose the child node evaluated first, since the other child node node may not really have the same score and
6F6F             6 86 ; could be just reproducing the best score from its sibling.
6F6F             6 87 ;
6F6F             6 88 ; Original source code by Einar Saukas: https://spectrumcomputing.co.uk/entry/31171/ZX-Spectrum/BRAINIAC
6F6F             6 89 ;
6F6F             6 90 ; Input:    A   = speccy side (FRIEND or ENEMY)
6F6F             6 91 ;           D   = alphaMax
6F6F             6 92 ;           E   = betaMin
6F6F             6 93 ;           P/V = flag unset if speccy side is FRIEND, flag set if speccy side is ENEMY
6F6F             6 94 ;
6F6F             6 95 ; Output:   A = "improved" betaMin
6F6F             6 96 ;           D = alphaMax
6F6F             6 97 ;           E = "improved" betaMin
6F6F             6 98 ;
6F6F             6 99 ; Uses:     AI_PLAYER (speccy side)
6F6F             6 100 ;           AI_DEPTH (recursion depth level)
6F6F             6 101 ;
6F6F             6 102 ; Destroys: BC, HL, IX, IY
6F6F             6 103 ; ----------------------------------------------------------------------------------------------------------------------
6F6F             6 104 Alphabeta_Min:
6F6F D5          6 105 push    de
6F70             6 107 ; check if last speccy move is a winner one
6F70 CD 34 74    6 109 call    PathFinder_Score            ; if (speccy won)
6F73 B7          6 110 or      a
6F74 C2 7E 6F    6 111 jp      nz, Alphabeta_Min_Candidates
6F77 3A 9A 61    6 112 ld      a, (AI_DEPTH)
6F7A C6 E0       6 113 add     a, 224                      ;     return 224+depth
6F7C D1          6 114 pop     de
6F7D C9          6 115 ret
6F7E             6 117 Alphabeta_Min_Candidates
6F7E CD D7 74    6 118 call    PathFinder_Candidates       ; find candidates for next move
6F81 D1          6 119 pop     de
6F82 DD 7E 00    6 121 ld      a, (ix+0)                   ; A is our first candidate
6F85 21 9A 61    6 123 ld      hl, AI_DEPTH
6F88 35          6 124 dec     (hl)                        ; depth--
6F89 CA C9 6F    6 125 jp      z, Heuristic_Min            ; if (depth == 0) return heuristic_min
6F8C             6 127 Alphabeta_Min_Loop                                          ; for each candidate {
6F8C D5          6 128 push    de                          ;       store alphaMax and betaMin
6F8D 26 7D       6 130 ld      h, CYAN_POSITIONS/256       ;       get and store candidate position on board
6F8F 6F          6 131 ld      l, a
6F90 E5          6 132 push    hl
6F91 3A 9B 61    6 134 ld      a, (AI_PLAYER)              ;       get speccy side
6F94 EE 7C       6 135 xor     $7C                         ;       switch to player side
6F96 CD B5 70    6 136 call    PathFinder_PutToken         ;       BRAINIAC_play
6F99 CD 0D 70    6 137 call    Alphabeta_Max               ;       A = alphabeta_max(alphaMax, betaMin)
6F9C E1          6 139 pop     hl                          ;       restore candidate position
6F9D CD BB 70    6 140 call    PathFinder_EraseToken       ;       BRAINIAC_undo
6FA0 D1          6 142 pop     de                          ;       restore alphaMax and betaMin
6FA1 BB          6 144 cp      e
6FA2 30 06       6 145 jr      nc, Alphabeta_Min_Next      ;       if (A >= betaMin) continue
6FA4 BA          6 147 cp      d
6FA5 38 12       6 148 jr      c, Alphabeta_Min_Exit
6FA7 28 10       6 149 jr      z, Alphabeta_Min_Exit       ;       if (A <= alphaMax) { depth++; return A }
6FA9 5F          6 151 ld      e, a                        ;       betaMin = A
6FAA             6 153 Alphabeta_Min_Next
6FAA DD 2D       6 154 dec     ixl
6FAC DD 7E 00    6 155 ld      a, (ix+0)                   ;       A is our next candidate
6FAF B7          6 156 or      a                           ;       repeat until no more candidates
6FB0 C2 8C 6F    6 157 jp      nz, Alphabeta_Min_Loop      ; }
6FB3 7B          6 159 ld      a, e                        ; return betaMin
6FB4 21 9A 61    6 161 ld      hl, AI_DEPTH
6FB7 34          6 162 inc     (hl)                        ; depth++
6FB8 C9          6 163 ret
6FB9             6 165 Alphabeta_Min_Exit
6FB9 5F          6 166 ld      e, a                        ; (discard remaining candidates)
6FBA AF          6 167 xor     a
6FBB             6 168 Alphabeta_Min_Skip
6FBB DD 2D       6 169 dec     ixl
6FBD DD BE 00    6 170 cp      (ix+0)
6FC0 C2 BB 6F    6 171 jp      nz, Alphabeta_Min_Skip
6FC3 7B          6 172 ld      a, e
6FC4 21 9A 61    6 174 ld      hl, AI_DEPTH
6FC7 34          6 175 inc     (hl)                        ; (depth++)
6FC8 C9          6 176 ret
6FC9             6 178 ; ----------------------------------------------------------------------------------------------------------------------
6FC9             6 179 ; Heuristic_Min: Specialized routine to process the lowest tree node (depth zero) of the Minimax search tree with alpha-
6FC9             6 180 ; beta pruning, when it requires MINIMIZING Speccy's score.
6FC9             6 181 ;
6FC9             6 182 ; Technically "Heuristic_Min" works exactly like "Alphabeta_Min_Loop", except it directly evaluates board for each child
6FC9             6 183 ; node instead of calling "Alphabeta_Max" recursively. Although it would be easier to just let it invoke "Alphabeta_Max"
6FC9             6 184 ; again to obtain the evaluated board, this simple optimization is responsible for making BRAINIAC almost 2 seconds
6FC9             6 185 ; faster.
6FC9             6 186 ;
6FC9             6 187 ; Original source code by Einar Saukas: https://spectrumcomputing.co.uk/entry/31171/ZX-Spectrum/BRAINIAC
6FC9             6 188 ;
6FC9             6 189 ; Input:    A = first candidate
6FC9             6 190 ;           D = alphaMax
6FC9             6 191 ;           E = betaMin
6FC9             6 192 ;
6FC9             6 193 ; Output:   A = "improved" betaMin
6FC9             6 194 ;           D = alphaMax
6FC9             6 195 ;           E = "improved" betaMin
6FC9             6 196 ;
6FC9             6 197 ; Uses:     AI_PLAYER (speccy side)
6FC9             6 198 ;           AI_DEPTH (recursion depth level)
6FC9             6 199 ;
6FC9             6 200 ; Destroys: BC, HL, IX, IY
6FC9             6 201 ; ----------------------------------------------------------------------------------------------------------------------
6FC9             6 202 Heuristic_Min:                                              ; for each candidate {
6FC9 D5          6 203 push    de                          ;       store alphaMax and betaMin
6FCA 26 7D       6 205 ld      h, CYAN_POSITIONS/256       ;       get and store candidate position on board
6FCC 6F          6 206 ld      l, a
6FCD E5          6 207 push    hl
6FCE 3A 9B 61    6 209 ld      a, (AI_PLAYER)              ;       get speccy side
6FD1 EE 7C       6 210 xor     $7C                         ;       switch to player side
6FD3 CD B5 70    6 211 call    PathFinder_PutToken         ;       BRAINIAC_play
6FD6 CD 34 74    6 213 call    PathFinder_Score            ;       if (player won)
6FD9 FE FF       6 214 cp      -1
6FDB C2 E0 6F    6 215 jp      nz, Heuristic_Min_Continue
6FDE 3E 20       6 216 ld      a, 32                       ;           A = 32
6FE0             6 217 Heuristic_Min_Continue
6FE0 E1          6 218 pop     hl
6FE1 CD BB 70    6 219 call    PathFinder_EraseToken       ;       BRAINIAC_undo
6FE4 D1          6 221 pop     de
6FE5 BB          6 223 cp      e
6FE6 30 06       6 224 jr      nc, Heuristic_Min_Next      ;       if (A >= betaMin) continue
6FE8 BA          6 226 cp      d
6FE9 38 12       6 227 jr      c, Heuristic_Min_Exit
6FEB 28 10       6 228 jr      z, Heuristic_Min_Exit       ;       if (A <= alphaMax) { depth++; return A }
6FED 5F          6 230 ld      e, a                        ;       betaMin = A
6FEE             6 232 Heuristic_Min_Next
6FEE DD 2D       6 233 dec     ixl
6FF0 DD 7E 00    6 234 ld      a, (ix+0)                   ;       A is our next candidate
6FF3 B7          6 235 or      a                           ;       repeat until no more candidates
6FF4 C2 C9 6F    6 236 jp      nz, Heuristic_Min           ; }
6FF7 7B          6 238 ld      a, e                        ; return betaMin
6FF8 21 9A 61    6 240 ld      hl, AI_DEPTH
6FFB 34          6 241 inc     (hl)                        ; depth++
6FFC C9          6 242 ret
6FFD             6 244 Heuristic_Min_Exit
6FFD 5F          6 245 ld      e, a                        ; (discard remaining candidates)
6FFE AF          6 246 xor     a
6FFF             6 247 Heuristic_Min_Skip
6FFF DD 2D       6 248 dec     ixl
7001 DD BE 00    6 249 cp      (ix+0)
7004 C2 FF 6F    6 250 jp      nz, Heuristic_Min_Skip
7007 7B          6 251 ld      a, e
7008 21 9A 61    6 253 ld      hl, AI_DEPTH
700B 34          6 254 inc     (hl)                        ; (depth++)
700C C9          6 255 ret
700D             6 257 ; ----------------------------------------------------------------------------------------------------------------------
700D             6 258 ; Alphabeta_Max: Process a tree node of the Minimax search tree with alpha-beta pruning, when it requires MAXIMIZING
700D             6 259 ; Speccy's score.
700D             6 260 ;
700D             6 261 ; This implementation is different from conventional alpha-beta pruning because it returns the best (highest) alphaMax
700D             6 262 ; value obtained so far at this subtree depth (from previous sibling nodes), when it's even higher than the best
700D             6 263 ; (highest) score at this tree node only. In practice that's OK, since the existence of a higher alphaMax in a previous
700D             6 264 ; sibling node would make parent node discard the node's alphaMax value and adopt the even higher alphaMax value from a
700D             6 265 ; previous sibling node anyway. This change was useful to allow a highly optimized Assembly implementation with a more
700D             6 266 ; efficient register allocation. The only drawback was that, whenever a parent node obtains the same best score from 2
700D             6 267 ; child nodes, it must always choose the child node evaluated first, since the other child node node may not really have
700D             6 268 ; the same score and could be just reproducing the best score from its sibling.
700D             6 269 ;
700D             6 270 ; Original source code by Einar Saukas: https://spectrumcomputing.co.uk/entry/31171/ZX-Spectrum/BRAINIAC
700D             6 271 ;
700D             6 272 ; Input:    A   = speccy side (FRIEND or ENEMY)
700D             6 273 ;           D   = alphaMax
700D             6 274 ;           E   = betaMin
700D             6 275 ;           P/V = flag unset if speccy side is FRIEND, flag set if speccy side is ENEMY
700D             6 276 ;
700D             6 277 ; Output:   A = "improved" alphaMax
700D             6 278 ;           D = "improved" alphaMax
700D             6 279 ;           E = betaMin
700D             6 280 ;
700D             6 281 ; Uses:     AI_PLAYER (speccy side)
700D             6 282 ;           AI_DEPTH (recursion depth level)
700D             6 283 ;
700D             6 284 ; Destroys: BC, HL, IX, IY
700D             6 285 ; ----------------------------------------------------------------------------------------------------------------------
700D             6 286 Alphabeta_Max:
700D D5          6 287 push    de
700E             6 289 ; check if last player move is a winner one
700E CD 34 74    6 291 call    PathFinder_Score            ; if (player won)
7011 FE FF       6 292 cp      -1
7013 C2 1E 70    6 293 jp      nz, Alphabeta_Max_Candidates
7016 3A 9A 61    6 294 ld      a, (AI_DEPTH)
7019 2F          6 295 cpl
701A C6 21       6 296 add     a, 32+1                     ;     return 32-depth
701C D1          6 297 pop     de
701D C9          6 298 ret
701E             6 300 Alphabeta_Max_Candidates
701E CD D7 74    6 301 call    PathFinder_Candidates       ; find candidates for next move
7021 D1          6 302 pop     de
7022 DD 7E 00    6 304 ld      a, (ix+0)                   ; A is our first candidate
7025 21 9A 61    6 306 ld      hl, AI_DEPTH
7028 35          6 307 dec     (hl)                        ; depth--
7029 CA 69 70    6 308 jp      z, Heuristic_Max            ; if (depth == 0) return heuristic_max
702C             6 310 Alphabeta_Max_Loop                                          ; for each candidate {
702C D5          6 311 push    de                          ;       store alphaMax and betaMin
702D 26 7D       6 313 ld      h, CYAN_POSITIONS/256       ;       get and store candidate position on board
702F 6F          6 314 ld      l, a
7030 E5          6 315 push    hl
7031 3A 9B 61    6 317 ld      a, (AI_PLAYER)              ;       get speccy side
7034 CD B5 70    6 318 call    PathFinder_PutToken         ;       BRAINIAC_play
7037 EE 7C       6 319 xor     $7C                         ;       restore speccy side
7039 CD 6F 6F    6 320 call    Alphabeta_Min               ;       A = alphabeta_min(alphaMax, betaMin)
703C E1          6 322 pop     hl                          ;       restore candidate position
703D CD BB 70    6 323 call    PathFinder_EraseToken       ;       BRAINIAC_undo
7040 D1          6 325 pop     de                          ;       restore alphaMax and betaMin
7041 BA          6 327 cp      d
7042 38 06       6 328 jr      c, Alphabeta_Max_Next
7044 28 04       6 329 jr      z, Alphabeta_Max_Next       ;       if (A <= alphaMax) continue
7046 BB          6 331 cp      e
7047 30 10       6 332 jr      nc, Alphabeta_Max_Exit      ;       if (A >= betaMin) { depth++; return A }
7049 57          6 334 ld      d, a                        ;       alphaMax = A
704A             6 336 Alphabeta_Max_Next
704A DD 2D       6 337 dec     ixl
704C DD 7E 00    6 338 ld      a, (ix+0)                   ;       A is our next candidate
704F B7          6 339 or      a                           ;       repeat until no more candidates
7050 C2 2C 70    6 340 jp      nz, Alphabeta_Max_Loop      ; }
7053 7A          6 342 ld      a, d                        ; return alphaMax
7054 21 9A 61    6 344 ld      hl, AI_DEPTH
7057 34          6 345 inc     (hl)                        ; depth++
7058 C9          6 346 ret
7059             6 348 Alphabeta_Max_Exit
7059 57          6 349 ld      d, a                        ; (discard remaining candidates)
705A AF          6 350 xor     a
705B             6 351 Alphabeta_Max_Skip
705B DD 2D       6 352 dec     ixl
705D DD BE 00    6 353 cp      (ix+0)
7060 C2 5B 70    6 354 jp      nz, Alphabeta_Max_Skip
7063 7A          6 355 ld      a, d
7064 21 9A 61    6 357 ld      hl, AI_DEPTH
7067 34          6 358 inc     (hl)                        ; (depth++)
7068 C9          6 359 ret
7069             6 361 ; ----------------------------------------------------------------------------------------------------------------------
7069             6 362 ; Heuristic_Max: Specialized routine to process the lowest tree node (depth zero) of the Minimax search tree with alpha-
7069             6 363 ; beta pruning, when it requires MAXIMIZING Speccy's score.
7069             6 364 ;
7069             6 365 ; Technically "Heuristic_Max" works exactly like "Alphabeta_Max_Loop", except it directly evaluates board for each child
7069             6 366 ; node instead of calling "Alphabeta_Min" recursively. Although it would be easier to just let it invoke "Alphabeta_Min"
7069             6 367 ; again to obtain the evaluated board, this simple optimization is responsible for making BRAINIAC almost 2 seconds
7069             6 368 ; faster.
7069             6 369 ;
7069             6 370 ; Original source code by Einar Saukas: https://spectrumcomputing.co.uk/entry/31171/ZX-Spectrum/BRAINIAC
7069             6 371 ;
7069             6 372 ; Input:    A = first candidate
7069             6 373 ;           D = alphaMax
7069             6 374 ;           E = betaMin
7069             6 375 ;
7069             6 376 ; Returns:  A = "improved" alphaMax
7069             6 377 ;           D = "improved" alphaMax
7069             6 378 ;           E = betaMin
7069             6 379 ;
7069             6 380 ; Uses:     AI_PLAYER (speccy side)
7069             6 381 ;           AI_DEPTH (recursion depth level)
7069             6 382 ;
7069             6 383 ; Destroys: BC, HL, IX, IY
7069             6 384 ; ----------------------------------------------------------------------------------------------------------------------
7069             6 385 Heuristic_Max:                                              ; for each candidate {
7069 D5          6 386 push    de                          ;       store alphaMax and betaMin
706A 26 7D       6 388 ld      h, CYAN_POSITIONS/256       ;       get and store candidate position on board
706C 6F          6 389 ld      l, a
706D E5          6 390 push    hl
706E 3A 9B 61    6 392 ld      a, (AI_PLAYER)              ;       get speccy side
7071 CD B5 70    6 393 call    PathFinder_PutToken         ;       (BRAINIAC_play)
7074 EE 7C       6 394 xor     $7C                         ;       restore speccy side
7076 CD 34 74    6 396 call    PathFinder_Score            ;       if (speccy won)
7079 B7          6 397 or      a
707A C2 7F 70    6 398 jp      nz, Heuristic_Max_Continue
707D 3E E0       6 399 ld      a, 224                      ;           A = 224
707F             6 400 Heuristic_Max_Continue
707F E1          6 401 pop     hl                          ;       restore candidate position
7080 CD BB 70    6 402 call    PathFinder_EraseToken       ;       BRAINIAC_undo
7083 D1          6 404 pop     de                          ;       restore alphaMax and betaMin
7084 BA          6 406 cp      d
7085 38 06       6 407 jr      c, Heuristic_Max_Next
7087 28 04       6 408 jr      z, Heuristic_Max_Next       ;       if (A <= alphaMax) continue
7089 BB          6 410 cp      e
708A 30 10       6 411 jr      nc, Heuristic_Max_Exit      ;       if (A >= betaMin) { depth++; return A }
708C 57          6 413 ld      d, a                        ;       alphaMax = A
708D             6 415 Heuristic_Max_Next
708D DD 2D       6 416 dec     ixl
708F DD 7E 00    6 417 ld      a, (ix+0)                   ;       A is our next candidate
7092 B7          6 418 or      a                           ;       repeat until no more candidates
7093 C2 69 70    6 419 jp      nz, Heuristic_Max           ; }
7096 7A          6 421 ld      a, d                        ; return alphaMax
7097 21 9A 61    6 423 ld      hl, AI_DEPTH
709A 34          6 424 inc     (hl)                        ; depth++
709B C9          6 425 ret
709C             6 427 Heuristic_Max_Exit
709C 57          6 428 ld      d, a                        ; (discard remaining candidates)
709D AF          6 429 xor     a
709E             6 430 Heuristic_Max_Skip
709E DD 2D       6 431 dec     ixl
70A0 DD BE 00    6 432 cp      (ix+0)
70A3 C2 9E 70    6 433 jp      nz, Heuristic_Max_Skip
70A6 7A          6 434 ld      a, d
70A7 21 9A 61    6 436 ld      hl, AI_DEPTH
70AA 34          6 437 inc     (hl)                        ; (depth++)
70AB C9          6 438 ret

; File #7: C:\Users\Antonio\source\repos\Hex\Z80CodeFiles\PathFinder.z80asm

70AC             7 1 ; ----------------------------------------------------------------------------------------------------------------------
70AC             7 2 ; PathFinder.z80asm
70AC             7 3 ; Coded by Einar Saukas: https://spectrumcomputing.co.uk/entry/28178/ZX-Spectrum/PATHFINDER
70AC             7 4 ;
70AC             7 5 ; Adapted by Antonio Luque and Einar Saukas to be used as heuristic in Hex game.
70AC             7 6 ; Based on chapter 5 of Jack van Rijswijck's thesis - https://webdocs.cs.ualberta.ca/~hayward/theses/jackmsc.pdf
70AC             7 7 ; ----------------------------------------------------------------------------------------------------------------------
70AC             7 9 EMPTY                   EQU     $00                         ; empty positions on the board
70AC             7 10 SKIPPED                 EQU     $01                         ; skipped positions on the board
70AC             7 11 FRIEND                  EQU     $02                         ; positions occupied by friendly tokens on the board
70AC             7 12 ENEMY                   EQU     $7E                         ; positions occupied by opponent tokens on the board
70AC             7 13 VICTORY                 EQU     $03                         ; internal value if victory
70AC             7 14 WIDTH                   EQU     $08                         ; distance to up-left/down-right neighbor
70AC             7 16 CYAN_POSITIONS          EQU     $7D00                       ; a 256-aligned memory area reserved for cyan positions
70AC             7 17 RED_POSITIONS           EQU     $7E00                       ; a 256-aligned memory area reserved for red positions
70AC             7 18 CANDIDATES              EQU     $7F00                       ; a 256-aligned memory area reserved to store candidates
70AC             7 20 ; ----------------------------------------------------------------------------------------------------------------------
70AC             7 21 ; PathFinder_Friend: return if current player is FRIEND or ENEMY from the perspective of the cyan player
70AC             7 22 ;
70AC             7 23 ; Input:    -
70AC             7 24 ;
70AC             7 25 ; Output:   A   = FRIEND if current token color is cyan, or A = ENEMY if current token color is red
70AC             7 26 ;           P/V = flag unset if speccy side is FRIEND, flag set if speccy side is ENEMY
70AC             7 27 ;
70AC             7 28 ; Uses:     TOKEN_COLOR (current token color)
70AC             7 29 ;
70AC             7 30 ; Destroys: -
70AC             7 31 ; ----------------------------------------------------------------------------------------------------------------------
70AC             7 32 PathFinder_Friend:
70AC 3A 9E 61    7 33 ld      a, (TOKEN_COLOR)            ; get current player color
70AF EE 07       7 34 xor     $07                         ; is current player color cyan?
70B1 E0          7 35 ret     po                          ; yes, return FRIEND 
70B2 3E 7E       7 36 ld      a, ENEMY                    ; no, return ENEMY
70B4 C9          7 37 ret
70B5             7 39 ; ----------------------------------------------------------------------------------------------------------------------
70B5             7 40 ; PathFinder_PutToken: put a token on both CYAN_POSITIONS and RED_POSITIONS areas
70B5             7 41 ;
70B5             7 42 ; Input:    A  = either FRIEND or ENEMY from the perspective of cyan player
70B5             7 43 ;           HL = CYAN_POSITIONS token address
70B5             7 44 ;
70B5             7 45 ; Output:   A   = inverted side (FRIEND or ENEMY)
70B5             7 46 ;           P/V = flag unset if speccy side is FRIEND, flag set if speccy side is ENEMY
70B5             7 47 ;
70B5             7 48 ; Destroys: -
70B5             7 49 ; ----------------------------------------------------------------------------------------------------------------------
70B5             7 50 PathFinder_PutToken:
70B5 77          7 51 ld      (hl), a                     ; put token at cyan position
70B6 24          7 52 inc     h                           ; move HL to red position address
70B7 EE 7C       7 53 xor     $7C                         ; invert side
70B9 77          7 54 ld      (hl), a                     ; put token at red position
70BA C9          7 55 ret
70BB             7 57 ; ----------------------------------------------------------------------------------------------------------------------
70BB             7 58 ; PathFinder_EraseToken: erase a token from both CYAN_POSITIONS and RED_POSITIONS areas
70BB             7 59 ;
70BB             7 60 ; Input:    HL = CYAN_POSITIONS token address
70BB             7 61 ;
70BB             7 62 ; Output:   -
70BB             7 63 ;
70BB             7 64 ; Destroys: -
70BB             7 65 ; ----------------------------------------------------------------------------------------------------------------------
70BB             7 66 PathFinder_EraseToken:
70BB 36 00       7 67 ld      (hl), EMPTY                 ; erase token at cyan position
70BD 24          7 68 inc     h                           ; move HL to red position address
70BE 36 00       7 69 ld      (hl), EMPTY                 ; erase token at red position
70C0 C9          7 70 ret
70C1             7 72 ; ----------------------------------------------------------------------------------------------------------------------
70C1             7 73 ; PathFinder_CopyPositions: copy from CYAN_POSITIONS or RED_POSITIONS area to its corresponding board
70C1             7 74 ;
70C1             7 75 ; Input:    DE = cyan or red board address (destiny)
70C1             7 76 ;           HL = CYAN_POSITIONS or RED_POSITIONS address (origin)
70C1             7 77 ;
70C1             7 78 ; Output:   DE = cyan or red board address (last position+1)
70C1             7 79 ;
70C1             7 80 ; Destroys: BC, HL
70C1             7 81 ; ----------------------------------------------------------------------------------------------------------------------
70C1             7 82 PathFinder_CopyPositions:
70C1 01 31 00    7 83 ld      bc, 7*7                     ; number of positions to be copied
70C4             7 84 PathFinder_CopyLoop
70C4 2C          7 85 inc     l                           ; skip borders on positions
70C5 2C          7 86 inc     l
70C6 1C          7 87 inc     e                           ; skip borders on board
70C7 1C          7 88 inc     e
70C8 ED A0       7 89 ldi                                 ; copy a row of 7 positions
70CA ED A0       7 90 ldi
70CC ED A0       7 91 ldi
70CE ED A0       7 92 ldi
70D0 ED A0       7 93 ldi
70D2 ED A0       7 94 ldi
70D4 ED A0       7 95 ldi
70D6 EA C4 70    7 96 jp      pe, PathFinder_CopyLoop     ; repeat for each row
70D9 C9          7 97 ret
70DA             7 99 ; ----------------------------------------------------------------------------------------------------------------------
70DA             7 100 ; PathFinder_Update: update current board position during heuristic function evaluation
70DA             7 101 ;
70DA             7 102 ; This is an approach to Jack van Rijswijck's "two-distance" metric. The two-distance is defined as "one more than the
70DA             7 103 ; second lowest distance of p's neighbors to q, with the proviso that the two-distance equals 1 if p and q are directly
70DA             7 104 ; adjacent".
70DA             7 105 ;
70DA             7 106 ; The position will be updated with a number that indicates two-distance from goal (stored in lowest 6 bits), and a flag
70DA             7 107 ; that indicates a position occupied by a friendly token (stored in 6th bit). Therefore this position is updated as
70DA             7 108 ; follows, depending on current content:
70DA             7 109 ;
70DA             7 110 ; * SKIPPED: 1 + distance of neighbor closest to goal
70DA             7 111 ; * FRIEND:  distance of neighbor closest to goal
70DA             7 112 ; * EMPTY:   1 + distance of neighbor closest to goal, if current distance is friendly, SKIPPED otherwise
70DA             7 113 ;
70DA             7 114 ; Input:    Z    = flag set when (HL) is FRIEND
70DA             7 115 ;           C    = current distance (also with a flag at 6th bit that indicates a friendly position)
70DA             7 116 ;           HL   = current position address (on either cyan boards or red boards)
70DA             7 117 ;           SP+2 = queue head address (on either cyan queue or red queue areas)
70DA             7 118 ;
70DA             7 119 ; Output:   -
70DA             7 120 ;
70DA             7 121 ; Destroys: B, DE
70DA             7 122 ; ----------------------------------------------------------------------------------------------------------------------
70DA             7 123 PathFinder_Update:
70DA 28 12       7 124 jr      z, PathFinder_Friendly      ; if Z flag is set, update friend distance
70DC 46          7 125 ld      b, (hl)                     ; check current position
70DD 10 1A       7 126 djnz    PathFinder_EMPTY            ; if (hl) = EMPTY, jump below
70DF             7 127 ; if (HL) = SKIPPED, then set (HL) = C+1 and insert HL at queue tail
70DF             7 128 PathFinder_Skipped:
70DF 71          7 129 ld      (hl), c                     ; save current distance in current position
70E0 34          7 130 inc     (hl)                        ; increment distance of current position
70E1 CB B6       7 131 res     6, (hl)                     ; reset friendly token flag
70E3 EB          7 132 ex      de, hl                      ; store current position in DE
70E4             7 133 @Queue_Tail
70E4 21 00 00    7 134 ld      hl, $0000                   ; HL points to queue tail address (changed before call)
70E7 2C          7 135 inc     l                           ; move queue tail down
70E8 73          7 136 ld      (hl), e                     ; store position into queue tail
70E9 22 E5 70    7 137 ld      (@Queue_Tail+1), hl         ; update queue tail
70EC EB          7 138 ex      de, hl                      ; restore current position
70ED C9          7 139 ret
70EE             7 140 ; if (HL) = FRIEND, then set (HL) = C and insert HL at queue head
70EE             7 141 PathFinder_Friendly
70EE 71          7 142 ld      (hl), c                     ; save current distance in current position
70EF CB F6       7 143 set     6, (hl)                     ; set friendly token flag
70F1 45          7 144 ld      b, l                        ; save current position in B
70F2 D1          7 145 pop     de                          ; preserve RET address
70F3 E3          7 146 ex      (sp), hl                    ; retrieve queue head
70F4 70          7 147 ld      (hl), b                     ; push this position into queue head
70F5 2D          7 148 dec     l                           ; move queue head up
70F6 E3          7 149 ex      (sp), hl                    ; update queue head
70F7 D5          7 150 push    de                          ; restore RET address
70F8 C9          7 151 ret
70F9             7 152 ; if (HL) = EMPTY, then set (HL) = C+1 if current distance is friendly, set (HL) = SKIPPED otherwise
70F9             7 153 PathFinder_EMPTY
70F9 CB 71       7 154 bit     6, c                        ; is current distance friendly?
70FB 20 E2       7 155 jr      nz, PathFinder_Skipped      ; yes, set (HL) = C+1 and insert HL in queue tail
70FD 34          7 156 inc     (hl)                        ; set (HL) = SKIPPED to find the second lowest distance
70FE C9          7 157 ret
70FF             7 159 ; ----------------------------------------------------------------------------------------------------------------------
70FF             7 160 ; PathFinder_Cyan_UpDown: set up 'Path_Finder' routine to calculate CYAN two-distances from UP to DOWN edge
70FF             7 161 ;
70FF             7 162 ; Input:    -
70FF             7 163 ;
70FF             7 164 ; Output:   A  = -1, if down edge couldn't be reached
70FF             7 165 ;           A  =  0, if there is chain of connected cyan tokens between the two edges
70FF             7 166 ;           A  = last edge position visited (-1), otherwise
70FF             7 167 ;           HL = cyan queue head address
70FF             7 168 ;
70FF             7 169 ; Uses:     @Queue_Tail (queue pointer in 'PathFinder_Update' routine)
70FF             7 170 ;
70FF             7 171 ; Destroys: BC, DE, IY
70FF             7 172 ; ----------------------------------------------------------------------------------------------------------------------
70FF             7 173 PathFinder_Cyan_UpDown:
70FF 21 07 7D    7 174 ld      hl, CYAN_POSITIONS+7        ; HL points to cyan positions address (up-right corner)
7102 11 07 61    7 175 ld      de, CYAN_BOARD_UP_DOWN+7    ; DE points to cyan board up-down address (up-right corner)
7105 CD C1 70    7 176 call    PathFinder_CopyPositions    ; copy from cyan positions to cyan board up-down
7108             7 178 ; entry point for PathFinder_VictoryPath
7108             7 179 PathFinder_Cyan_CheckPath:
7108 FD 21 00 09 7 180 ld      iy, $0900                   ; IYH = distance to check edge positions
710C             7 181 ; IYL = last edge position visited
710C 26 60       7 182 ld      h, CYAN_QUEUE_AREA/256      ; HL points to cyan queue area address
710E 22 E5 70    7 183 ld      (@Queue_Tail+1), hl         ; initialize cyan queue tail
7111 E5          7 184 push    hl                          ; store cyan queue head
7112             7 186 ; set up cyan board (up-down) start positions distances
7112 21 09 61    7 188 ld      hl, CYAN_BOARD_UP_DOWN+9    ; HL points to cyan board up-down address (1st position)
7115 0E 43       7 189 ld      c, VICTORY+$40              ; set start positions distance + friendly flag
7117 3E 02       7 190 ld      a, FRIEND                   ; set distance to compare with
7119 BE          7 191 cp      (hl)                        ; check 1st start position distance
711A D4 DA 70    7 192 call    nc, PathFinder_Update       ; if FRIEND >= distance, update distance
711D 2C          7 193 inc     l                           ; move HL to next start position address
711E BE          7 194 cp      (hl)                        ; check 2nd start position distance
711F D4 DA 70    7 195 call    nc, PathFinder_Update       ; (repeat for each start position)
7122 2C          7 196 inc     l
7123 BE          7 197 cp      (hl)                        ; check 3rd start position distance
7124 D4 DA 70    7 198 call    nc, PathFinder_Update
7127 2C          7 199 inc     l
7128 BE          7 200 cp      (hl)                        ; check 4th start position distance
7129 D4 DA 70    7 201 call    nc, PathFinder_Update
712C 2C          7 202 inc     l
712D BE          7 203 cp      (hl)                        ; check 5th start position distance
712E D4 DA 70    7 204 call    nc, PathFinder_Update
7131 2C          7 205 inc     l
7132 BE          7 206 cp      (hl)                        ; check 6th start position distance
7133 D4 DA 70    7 207 call    nc, PathFinder_Update
7136 2C          7 208 inc     l
7137 C3 23 72    7 209 jp      PathFinder_First            ; calculate two-distances of cyan board (up-down)
713A             7 211 ; ----------------------------------------------------------------------------------------------------------------------
713A             7 212 ; PathFinder_Cyan_DownUp: set up Path_Finder routine to calculate CYAN two-distance from DOWN to UP edge
713A             7 213 ;
713A             7 214 ; Input:    -
713A             7 215 ;
713A             7 216 ; Output:   A  = -1, if up edge couldn't be reached
713A             7 217 ;           A  =  0, if there is chain of connected cyan tokens between the two edges
713A             7 218 ;           A  = last edge position visited (-1), otherwise
713A             7 219 ;           HL = cyan queue head address
713A             7 220 ;
713A             7 221 ; Uses:     @Queue_Tail (queue pointer in 'PathFinder_Update' routine)
713A             7 222 ;
713A             7 223 ; Destroys: BC, DE, IY
713A             7 224 ; ----------------------------------------------------------------------------------------------------------------------
713A             7 225 PathFinder_Cyan_DownUp:
713A 21 07 7D    7 226 ld      hl, CYAN_POSITIONS+7        ; HL points to cyan positions address (up-right corner)
713D 11 4F 61    7 227 ld      de, CYAN_BOARD_DOWN_UP-1    ; DE points to cyan board down-up address (up-right corner)
7140 CD C1 70    7 228 call    PathFinder_CopyPositions    ; copy from cyan positions to cyan board down-up
7143 FD 21 00 F7 7 230 ld      iy, $F700                   ; IYH = distance to check edge positions
7147             7 231 ; IYL = last edge position visited
7147 2A E5 70    7 232 ld      hl, (@Queue_Tail+1)         ; retreive cyan queue tail
714A E5          7 233 push    hl                          ; initialize cyan queue head
714B             7 235 ; set up cyan board (down-up) start positions distances
714B EB          7 237 ex      de, hl                      ; (take advantage of last "CopyPositions" execution)
714C 2D          7 238 dec     l                           ; move HL to cyan boad down-up address (last position)
714D 0E 43       7 239 ld      c, VICTORY+$40              ; set start positions distance + friendly flag
714F 3E 02       7 240 ld      a, FRIEND                   ; set distance to compare with
7151 BE          7 241 cp      (hl)                        ; check 1st start position distance
7152 D4 DA 70    7 242 call    nc, PathFinder_Update       ; if FRIEND >= distance, update distance
7155 2D          7 243 dec     l                           ; move HL to next start position address
7156 BE          7 244 cp      (hl)                        ; check 2nd start position distance
7157 D4 DA 70    7 245 call    nc, PathFinder_Update       ; (repeat for each start position)
715A 2D          7 246 dec     l
715B BE          7 247 cp      (hl)                        ; check 3rd start position distance
715C D4 DA 70    7 248 call    nc, PathFinder_Update
715F 2D          7 249 dec     l
7160 BE          7 250 cp      (hl)                        ; check 4th start position distance
7161 D4 DA 70    7 251 call    nc, PathFinder_Update
7164 2D          7 252 dec     l
7165 BE          7 253 cp      (hl)                        ; check 5th start position distance
7166 D4 DA 70    7 254 call    nc, PathFinder_Update
7169 2D          7 255 dec     l
716A BE          7 256 cp      (hl)                        ; check 6th start position distance
716B D4 DA 70    7 257 call    nc, PathFinder_Update
716E 2D          7 258 dec     l
716F C3 23 72    7 259 jp      PathFinder_First            ; calculate two-distances of cyan board (down-up)
7172             7 261 ; ----------------------------------------------------------------------------------------------------------------------
7172             7 262 ; PathFinder_Red_LeftRight: set up Path_Finder routine to calculate RED two-distance from LEFT to RIGHT edge
7172             7 263 ;
7172             7 264 ; Input:    -
7172             7 265 ;
7172             7 266 ; Output:   A  = -1, if right edge couldn't be reached
7172             7 267 ;           A  =  0, if there is chain of connected cyan tokens between the two edges
7172             7 268 ;           A  = last edge position visited (-1), otherwise
7172             7 269 ;           HL = red queue head address
7172             7 270 ;
7172             7 271 ; Uses:     @Queue_Tail (queue pointer in 'PathFinder_Update' routine)
7172             7 272 ;
7172             7 273 ; Destroys: BC, DE, IY
7172             7 274 ; ----------------------------------------------------------------------------------------------------------------------
7172             7 275 PathFinder_Red_LeftRight:
7172 21 07 7E    7 276 ld      hl, RED_POSITIONS+7         ; HL points to red positions address (up-right corner)
7175 11 07 64    7 277 ld      de, RED_BOARD_LEFT_RIGHT+7  ; DE points to red board left-right addr. (up-right corner)
7178 CD C1 70    7 278 call    PathFinder_CopyPositions    ; copy from red positions to red board left-right
717B             7 280 ; entry point for PathFinder_VictoryPath
717B             7 281 PathFinder_Red_CheckPath
717B FD 21 00 01 7 282 ld      iy, $0100                   ; IYH = distance to check edge positions
717F             7 283 ; IYL = last edge position visited
717F 26 63       7 284 ld      h, RED_QUEUE_AREA/256       ; HL points to red queue area address
7181 22 E5 70    7 285 ld      (@Queue_Tail+1), hl         ; initialize red queue tail
7184 E5          7 286 push    hl                          ; store red queue head
7185             7 288 ; set up red board (left-right) start positions distances
7185 21 09 64    7 290 ld      hl, RED_BOARD_LEFT_RIGHT+9  ; HL points to red board left-right address (1st position)
7188 0E 43       7 291 ld      c, VICTORY+$40              ; set start positions distance + friendly flag
718A 3E 02       7 292 ld      a, FRIEND                   ; set distance to compare with
718C BE          7 293 cp      (hl)                        ; check 1st start position distance
718D D4 DA 70    7 294 call    nc, PathFinder_Update       ; if FRIEND >= distance, update distance
7190 2E 12       7 295 ld      l, (RED_BOARD_LEFT_RIGHT+18)%256
7192 BE          7 296 cp      (hl)                        ; check 2nd start position distance
7193 D4 DA 70    7 297 call    nc, PathFinder_Update       ; (repeat for each start position)
7196 2E 1B       7 298 ld      l, (RED_BOARD_LEFT_RIGHT+27)%256
7198 BE          7 299 cp      (hl)                        ; check 3rd start position distance
7199 D4 DA 70    7 300 call    nc, PathFinder_Update
719C 2E 24       7 301 ld      l, (RED_BOARD_LEFT_RIGHT+36)%256
719E BE          7 302 cp      (hl)                        ; check 4th start position distance
719F D4 DA 70    7 303 call    nc, PathFinder_Update
71A2 2E 2D       7 304 ld      l, (RED_BOARD_LEFT_RIGHT+45)%256
71A4 BE          7 305 cp      (hl)                        ; check 5th start position distance
71A5 D4 DA 70    7 306 call    nc, PathFinder_Update
71A8 2E 36       7 307 ld      l, (RED_BOARD_LEFT_RIGHT+54)%256
71AA BE          7 308 cp      (hl)                        ; check 6th start position distance
71AB D4 DA 70    7 309 call    nc, PathFinder_Update
71AE 2E 3F       7 310 ld      l, (RED_BOARD_LEFT_RIGHT+63)%256
71B0 C3 23 72    7 311 jp      PathFinder_First            ; calculate two-distances of red board (left-right)
71B3             7 313 ; ----------------------------------------------------------------------------------------------------------------------
71B3             7 314 ; PathFinder_Red_RightLeft: set up Path_Finder routine to calculate RED two-distance from RIGHT to LEFT edge
71B3             7 315 ;
71B3             7 316 ; Input:    -
71B3             7 317 ;
71B3             7 318 ; Output:   A  = -1, if left edge couldn't be reached
71B3             7 319 ;           A  =  0, if there is chain of connected cyan tokens between the two edges
71B3             7 320 ;           A  = last edge position visited (-1), otherwise
71B3             7 321 ;           HL = red queue head address
71B3             7 322 ;
71B3             7 323 ; Uses:     @Queue_Tail (queue pointer in 'PathFinder_Update' routine)
71B3             7 324 ;
71B3             7 325 ; Destroys: BC, DE, IY
71B3             7 326 ; ----------------------------------------------------------------------------------------------------------------------
71B3             7 327 PathFinder_Red_RightLeft:
71B3 21 07 7E    7 328 ld      hl, RED_POSITIONS+7         ; HL points to red positions address (up-right corner)
71B6 11 4F 64    7 329 ld      de, RED_BOARD_RIGHT_LEFT-1  ; DE points to red board right-left addr. (up-right corner)
71B9 CD C1 70    7 330 call    PathFinder_CopyPositions    ; copy from red positions to red board right-left
71BC FD 21 00 FF 7 332 ld      iy, $FF00                   ; IYH = distance to check edge positions
71C0             7 333 ; IYL = last edge position visited
71C0 2A E5 70    7 334 ld      hl, (@Queue_Tail+1)         ; retreive red queue tail
71C3 E5          7 335 push    hl                          ; initialize red queue head
71C4             7 337 ; set up red board (right-left) start positions distances
71C4 EB          7 339 ex      de, hl                      ; take advantage of last "CopyPositions" execution
71C5 2D          7 340 dec     l                           ; move HL to red board right-left address (last position)
71C6 0E 43       7 341 ld      c, VICTORY+$40              ; set start positions distance + friendly flag
71C8 3E 02       7 342 ld      a, FRIEND                   ; set distance to compare with
71CA BE          7 343 cp      (hl)                        ; check 1st start position distance
71CB D4 DA 70    7 344 call    nc, PathFinder_Update       ; if FRIEND >= distance, update distance
71CE 2E 84       7 345 ld      l, (RED_BOARD_RIGHT_LEFT+52)%256
71D0 BE          7 346 cp      (hl)                        ; check 2nd start position distance
71D1 D4 DA 70    7 347 call    nc, PathFinder_Update       ; (repeat for each start position)
71D4 2E 7B       7 348 ld      l, (RED_BOARD_RIGHT_LEFT+43)%256
71D6 BE          7 349 cp      (hl)                        ; check 3rd start position distance
71D7 D4 DA 70    7 350 call    nc, PathFinder_Update
71DA 2E 72       7 351 ld      l, (RED_BOARD_RIGHT_LEFT+34)%256
71DC BE          7 352 cp      (hl)                        ; check 4th start position distance
71DD D4 DA 70    7 353 call    nc, PathFinder_Update
71E0 2E 69       7 354 ld      l, (RED_BOARD_RIGHT_LEFT+25)%256
71E2 BE          7 355 cp      (hl)                        ; check 5th start position distance
71E3 D4 DA 70    7 356 call    nc, PathFinder_Update
71E6 2E 60       7 357 ld      l, (RED_BOARD_RIGHT_LEFT+16)%256
71E8 BE          7 358 cp      (hl)                        ; check 6th start position distance
71E9 D4 DA 70    7 359 call    nc, PathFinder_Update
71EC 2E 57       7 360 ld      l, (RED_BOARD_RIGHT_LEFT+7)%256
71EE C3 23 72    7 361 jp      PathFinder_First            ; calculate red two-distance (right-left)
71F1             7 363 ; ----------------------------------------------------------------------------------------------------------------------
71F1             7 364 ; PathFinder: calculate two-distance metric for each board position
71F1             7 365 ;
71F1             7 366 ; The algorithm is implemented running PATHFINDER, starting at the corresponding side of the input board
71F1             7 367 ;
71F1             7 368 ; Input:    HL  = cyan or red queue area address
71F1             7 369 ;           IYH = distance to check edge positions
71F1             7 370 ;           IYL = 0
71F1             7 371 ;
71F1             7 372 ; Output:   A   = -1, if corresponding edge couldn't be reached
71F1             7 373 ;           A   =  0, if there is chain of connected (color) tokens between the two edges
71F1             7 374 ;           A   = last edge position visited (-1), otherwise
71F1             7 375 ;           HL  = cyan or red queue head address
71F1             7 376 ;
71F1             7 377 ; Uses:     @Queue_Tail (queue pointer in 'PathFinder_Update' routine)
71F1             7 378 ;
71F1             7 379 ; Destroys: BC, DE, IY
71F1             7 380 ; ----------------------------------------------------------------------------------------------------------------------
71F1             7 381 PathFinder:
71F1 2C          7 382 inc     l                           ; move queue head down
71F2 E5          7 383 push    hl                          ; preserve queue head address
71F3 6E          7 384 ld      l, (hl)                     ; retrieve next position to be checked
71F4 24          7 385 inc     h                           ; move HL to corresponding board address
71F5 4E          7 386 ld      c, (hl)                     ; retrieve distance from this position to start
71F6 5D          7 387 ld      e, l                        ; store current position
71F7             7 389 ; look for adjacent positions
71F7 7D          7 391 ld      a, l                        ; get current position
71F8 FD 84       7 392 add     a, iyh                      ; add distance to check edge positions
71FA 6F          7 393 ld      l, a                        ; move HL to calculated position address
71FB CB 7E       7 394 bit     7, (hl)                     ; is it an edge?
71FD 20 34       7 395 jr      nz, PathFinder_Adjacent     ; yes, update adjacent positions
71FF 3E 02       7 397 ld      a, FRIEND                   ; set distance to compare with
7201             7 398 ; return point from PathFinder_Adjacent
7201             7 399 PathFinder_Neighbors
7201 6B          7 400 ld      l, e                        ; restore current position to be checked
7202 2C          7 401 inc     l                           ; move HL to right neighbor address
7203 BE          7 402 cp      (hl)                        ; check right neighbor distance
7204 D4 DA 70    7 403 call    nc, PathFinder_Update       ; if FRIEND >= distance, update distance
7207 2D          7 404 dec     l                           ; move HL to left neighbor address
7208 2D          7 405 dec     l
7209 BE          7 406 cp      (hl)                        ; check left neighbor distance
720A D4 DA 70    7 407 call    nc, PathFinder_Update       ; (repeat for each neighbor)
720D 11 F8 FF    7 408 ld      de, -WIDTH
7210 19          7 409 add     hl, de
7211 BE          7 410 cp      (hl)                        ; check upper-left neighbor distance
7212 D4 DA 70    7 411 call    nc, PathFinder_Update
7215 2C          7 412 inc     l
7216 BE          7 413 cp      (hl)                        ; check upper-right neighbor distance
7217 D4 DA 70    7 414 call    nc, PathFinder_Update
721A 11 10 00    7 415 ld      de, WIDTH*2
721D 19          7 416 add     hl, de
721E BE          7 417 cp      (hl)                        ; check lower-left neighbor distance
721F D4 DA 70    7 418 call    nc, PathFinder_Update
7222 2C          7 419 inc     l
7223             7 420 PathFinder_First
7223 BE          7 421 cp      (hl)                        ; check lower-right neighbor distance
7224 D4 DA 70    7 422 call    nc, PathFinder_Update
7227 E1          7 423 pop     hl                          ; retreive queue head address
7228 3A E5 70    7 424 ld      a, (@Queue_Tail+1)          ; get queue tail address (low-byte)
722B BD          7 425 cp      l                           ; is queue empty?
722C C2 F1 71    7 426 jp      nz, PathFinder              ; no, repeat until queue is empty
722F FD 7D       7 428 ld      a, iyl                      ; get last edge position visited
7231 3D          7 429 dec     a                           ; return A = -1, if the edge couldn't be reached
7232 C9          7 430 ret
7233             7 432 ; ----------------------------------------------------------------------------------------------------------------------
7233             7 433 ; PathFinder_Adjacent: update adjacent positions
7233             7 434 ;
7233             7 435 ; This is an approach to update the two-distance of adjacent positions. As explained in Jack van Rijswijck's thesis:
7233             7 436 ; "two cells are adjacent if they share a common edge on the board."
7233             7 437 ;
7233             7 438 ; Input:    E  = current position
7233             7 439 ;           C  = current distance (with a flag at 6th bit that indicates a friendly position)
7233             7 440 ;           HL = current edge position address (a flag in 7th bit indicates an edge position and the lowest 3 bits the
7233             7 441 ;                edge number)
7233             7 442 ;
7233             7 443 ; Output:   A  = 0 and HL = cyan or red queue head address, if there is a chain of connected tokens of the same color
7233             7 444 ;                between the two edges.
7233             7 445 ;           A  = FRIEND and E = current position, otherwise.
7233             7 446 ;
7233             7 447 ; Destroys: BC, D
7233             7 448 ; ----------------------------------------------------------------------------------------------------------------------
7233             7 449 PathFinder_Adjacent
7233 3E 43       7 450 ld      a, VICTORY+$40              ; set victory distance + friendly flag
7235 B9          7 451 cp      c                           ; is current distance victory and friendly?
7236 28 0E       7 452 jr      z, PathFinder_Abort         ; yes, abort path_finder
7238 FD 6B       7 454 ld      iyl, e                      ; update last edge position visited
723A 54          7 455 ld      d, h                        ; store pointer to current position address in DE
723B 6E          7 456 ld      l, (hl)                     ; get current edge position
723C CB 25       7 457 sla     l                           ; calculate vector table routine index
723E 24          7 458 inc     h                           ; move HL to (cyan or red) vector table routine address
723F 7E          7 459 ld      a, (hl)                     ; get low byte of vector table routine address
7240 2C          7 460 inc     l                           ; move HL to high byte of vector table routine address
7241 66          7 461 ld      h, (hl)                     ; get high byte of vector table routine address
7242 6F          7 462 ld      l, a                        ; HL points to 'PathFinder_[COLOR]_Edge_[n]' routine address
7243 3E 02       7 463 ld      a, FRIEND                   ; set distance to compare with
7245 E9          7 464 jp      (hl)                        ; jump to 'PathFinder_[COLOR]_Edge_[n]' routine
7246             7 465 PathFinder_Abort
7246 E1          7 466 pop     hl                          ; restore queue head address
7247 AF          7 467 xor     a                           ; return A = 0
7248 C9          7 468 ret
7249             7 470 ; ----------------------------------------------------------------------------------------------------------------------
7249             7 471 ;  Update two-distance of RED adjacent positions
7249             7 472 ; ----------------------------------------------------------------------------------------------------------------------
7249             7 473 PathFinder_RED_Edge_0
7249 EB          7 474 ex      de, hl                      ; restore pointer to current position address
724A 11 12 00    7 475 ld      de, 9*2                     ; calculate distance to adjacent #2
724D 19          7 476 add     hl, de                      ; move HL to adjacent #2 address
724E BE          7 477 cp      (hl)                        ; check adjacent #2 distance
724F D4 DA 70    7 478 call    nc, PathFinder_Update       ; if FRIEND >= adjacent #2 distance, update distance
7252 11 09 00    7 479 ld      de, 9                       ; calculate distance to adjacent #3
7255 19          7 480 add     hl, de                      ; move HL to adjacent #3 address
7256 BE          7 481 cp      (hl)                        ; check adjacent #3 distance
7257 D4 DA 70    7 482 call    nc, PathFinder_Update       ; (repeat for each adjacent)
725A 11 09 00    7 483 ld      de, 9
725D 19          7 484 add     hl, de
725E BE          7 485 cp      (hl)                        ; check adjacent #4 distance
725F D4 DA 70    7 486 call    nc, PathFinder_Update
7262 11 09 00    7 487 ld      de, 9
7265 19          7 488 add     hl, de
7266 BE          7 489 cp      (hl)                        ; check adjacent #5 distance
7267 D4 DA 70    7 490 call    nc, PathFinder_Update
726A 11 09 00    7 491 ld      de, 9
726D 19          7 492 add     hl, de
726E BE          7 493 cp      (hl)                        ; check adjacent #6 distance
726F D4 DA 70    7 494 call    nc, PathFinder_Update
7272 FD 5D       7 495 ld      e, iyl                      ; restore current position
7274 C3 01 72    7 496 jp      PathFinder_Neighbors        ; continue processing neighbors
7277             7 498 PathFinder_RED_Edge_1
7277 EB          7 499 ex      de, hl                      ; restore pointer to current position address
7278 11 12 00    7 500 ld      de, 9*2
727B 19          7 501 add     hl, de
727C BE          7 502 cp      (hl)                        ; check adjacent #3 distance
727D D4 DA 70    7 503 call    nc, PathFinder_Update
7280 11 09 00    7 504 ld      de, 9
7283 19          7 505 add     hl, de
7284 BE          7 506 cp      (hl)                        ; check adjacent #4 distance
7285 D4 DA 70    7 507 call    nc, PathFinder_Update
7288 11 09 00    7 508 ld      de, 9
728B 19          7 509 add     hl, de
728C BE          7 510 cp      (hl)                        ; check adjacent #5 distance
728D D4 DA 70    7 511 call    nc, PathFinder_Update
7290 11 09 00    7 512 ld      de, 9
7293 19          7 513 add     hl, de
7294 BE          7 514 cp      (hl)                        ; check adjacent #6 distance
7295 D4 DA 70    7 515 call    nc, PathFinder_Update
7298 FD 5D       7 516 ld      e, iyl                      ; restore current position
729A C3 01 72    7 517 jp      PathFinder_Neighbors        ; continue processing neighbors
729D             7 519 PathFinder_RED_Edge_2
729D EB          7 520 ex      de, hl                      ; restore pointer to current position address
729E 11 12 00    7 521 ld      de, 9*2
72A1 19          7 522 add     hl, de
72A2 BE          7 523 cp      (hl)                        ; check adjacent #4 distance
72A3 D4 DA 70    7 524 call    nc, PathFinder_Update
72A6 11 09 00    7 525 ld      de, 9
72A9 19          7 526 add     hl, de
72AA BE          7 527 cp      (hl)                        ; check adjacent #5 distance
72AB D4 DA 70    7 528 call    nc, PathFinder_Update
72AE 11 09 00    7 529 ld      de, 9
72B1 19          7 530 add     hl, de
72B2 BE          7 531 cp      (hl)                        ; check adjacent #6 distance
72B3 D4 DA 70    7 532 call    nc, PathFinder_Update
72B6 11 CA FF    7 533 ld      de, -9*6
72B9 19          7 534 add     hl, de
72BA BE          7 535 cp      (hl)                        ; check adjacent #0 distance
72BB D4 DA 70    7 536 call    nc, PathFinder_Update
72BE FD 5D       7 537 ld      e, iyl                      ; restore current position
72C0 C3 01 72    7 538 jp      PathFinder_Neighbors        ; continue processing neighbors
72C3             7 540 PathFinder_RED_Edge_3
72C3 EB          7 541 ex      de, hl                      ; restore pointer to current position address
72C4 11 E5 FF    7 542 ld      de, -9*3
72C7 19          7 543 add     hl, de
72C8 BE          7 544 cp      (hl)                        ; check adjacent #0 distance
72C9 D4 DA 70    7 545 call    nc, PathFinder_Update
72CC 11 09 00    7 546 ld      de, 9
72CF 19          7 547 add     hl, de
72D0 BE          7 548 cp      (hl)                        ; check adjacent #1 distance
72D1 D4 DA 70    7 549 call    nc, PathFinder_Update
72D4 11 24 00    7 550 ld      de, 9*4
72D7 19          7 551 add     hl, de
72D8 BE          7 552 cp      (hl)                        ; check adjacent #5 distance
72D9 D4 DA 70    7 553 call    nc, PathFinder_Update
72DC 11 09 00    7 554 ld      de, 9
72DF 19          7 555 add     hl, de
72E0 BE          7 556 cp      (hl)                        ; check adjacent #6 distance
72E1 D4 DA 70    7 557 call    nc, PathFinder_Update
72E4 FD 5D       7 558 ld      e, iyl                      ; restore current position
72E6 C3 01 72    7 559 jp      PathFinder_Neighbors        ; continue processing neighbors
72E9             7 561 PathFinder_RED_Edge_4
72E9 EB          7 562 ex      de, hl                      ; restore pointer to current position address
72EA 11 12 00    7 563 ld      de, 9*2
72ED 19          7 564 add     hl, de
72EE BE          7 565 cp      (hl)                        ; check adjacent #6 distance
72EF D4 DA 70    7 566 call    nc, PathFinder_Update
72F2 11 CA FF    7 567 ld      de, -9*6
72F5 19          7 568 add     hl, de
72F6 BE          7 569 cp      (hl)                        ; check adjacent #0 distance
72F7 D4 DA 70    7 570 call    nc, PathFinder_Update
72FA 11 09 00    7 571 ld      de, 9
72FD 19          7 572 add     hl, de
72FE BE          7 573 cp      (hl)                        ; check adjacent #1 distance
72FF D4 DA 70    7 574 call    nc, PathFinder_Update
7302 11 09 00    7 575 ld      de, 9
7305 19          7 576 add     hl, de
7306 BE          7 577 cp      (hl)                        ; check adjacent #2 distance
7307 D4 DA 70    7 578 call    nc, PathFinder_Update
730A FD 5D       7 579 ld      e, iyl                      ; restore current position
730C C3 01 72    7 580 jp      PathFinder_Neighbors        ; continue processing neighbors
730F             7 582 PathFinder_RED_Edge_5
730F EB          7 583 ex      de, hl                      ; restore pointer to current position address
7310 11 D3 FF    7 584 ld      de, -9*5
7313 19          7 585 add     hl, de
7314 BE          7 586 cp      (hl)                        ; check adjacent #0 distance
7315 D4 DA 70    7 587 call    nc, PathFinder_Update
7318 11 09 00    7 588 ld      de, 9
731B 19          7 589 add     hl, de
731C BE          7 590 cp      (hl)                        ; check adjacent #1 distance
731D D4 DA 70    7 591 call    nc, PathFinder_Update
7320 11 09 00    7 592 ld      de, 9
7323 19          7 593 add     hl, de
7324 BE          7 594 cp      (hl)                        ; check adjacent #2 distance
7325 D4 DA 70    7 595 call    nc, PathFinder_Update
7328 11 09 00    7 596 ld      de, 9
732B 19          7 597 add     hl, de
732C BE          7 598 cp      (hl)                        ; check adjacent #3 distance
732D D4 DA 70    7 599 call    nc, PathFinder_Update
7330 FD 5D       7 600 ld      e, iyl                      ; restore current position
7332 C3 01 72    7 601 jp      PathFinder_Neighbors        ; continue processing neighbors
7335             7 603 PathFinder_RED_Edge_6
7335 EB          7 604 ex      de, hl                      ; restore pointer to current position address
7336 11 CA FF    7 605 ld      de, -9*6
7339 19          7 606 add     hl, de
733A BE          7 607 cp      (hl)                        ; check adjacent #0 distance
733B D4 DA 70    7 608 call    nc, PathFinder_Update
733E 11 09 00    7 609 ld      de, 9
7341 19          7 610 add     hl, de
7342 BE          7 611 cp      (hl)                        ; check adjacent #1 distance
7343 D4 DA 70    7 612 call    nc, PathFinder_Update
7346 11 09 00    7 613 ld      de, 9
7349 19          7 614 add     hl, de
734A BE          7 615 cp      (hl)                        ; check adjacent #2 distance
734B D4 DA 70    7 616 call    nc, PathFinder_Update
734E 11 09 00    7 617 ld      de, 9
7351 19          7 618 add     hl, de
7352 BE          7 619 cp      (hl)                        ; check adjacent #3 distance
7353 D4 DA 70    7 620 call    nc, PathFinder_Update
7356 11 09 00    7 621 ld      de, 9
7359 19          7 622 add     hl, de
735A BE          7 623 cp      (hl)                        ; check adjacent #4 distance
735B D4 DA 70    7 624 call    nc, PathFinder_Update
735E FD 5D       7 625 ld      e, iyl                      ; restore current position
7360 C3 01 72    7 626 jp      PathFinder_Neighbors        ; continue processing neighbors
7363             7 628 ; ----------------------------------------------------------------------------------------------------------------------
7363             7 629 ;  Update two-distance of CYAN adjacent positions
7363             7 630 ; ----------------------------------------------------------------------------------------------------------------------
7363             7 631 PathFinder_CYAN_Edge_0
7363 EB          7 632 ex      de, hl                      ; restore pointer to current position address
7364 2C          7 633 inc     l
7365 2C          7 634 inc     l
7366 BE          7 635 cp      (hl)                        ; check adjacent #2 distance
7367 D4 DA 70    7 636 call    nc, PathFinder_Update
736A 2C          7 637 inc     l
736B BE          7 638 cp      (hl)                        ; check adjacent #3 distance
736C D4 DA 70    7 639 call    nc, PathFinder_Update
736F 2C          7 640 inc     l
7370 BE          7 641 cp      (hl)                        ; check adjacent #4 distance
7371 D4 DA 70    7 642 call    nc, PathFinder_Update
7374 2C          7 643 inc     l
7375 BE          7 644 cp      (hl)                        ; check adjacent of edge number 5
7376 D4 DA 70    7 645 call    nc, PathFinder_Update
7379 2C          7 646 inc     l
737A BE          7 647 cp      (hl)                        ; check adjacent of edge number 6
737B D4 DA 70    7 648 call    nc, PathFinder_Update
737E FD 5D       7 649 ld      e, iyl                      ; restore current position
7380 C3 01 72    7 650 jp      PathFinder_Neighbors        ; continue processing neighbors
7383             7 652 PathFinder_CYAN_Edge_1
7383 EB          7 653 ex      de, hl                      ; restore pointer to current position address
7384 2C          7 654 inc     l
7385 2C          7 655 inc     l
7386 BE          7 656 cp      (hl)                        ; check adjacent #3 distance
7387 D4 DA 70    7 657 call    nc, PathFinder_Update
738A 2C          7 658 inc     l
738B BE          7 659 cp      (hl)                        ; check adjacent #4 distance
738C D4 DA 70    7 660 call    nc, PathFinder_Update
738F 2C          7 661 inc     l
7390 BE          7 662 cp      (hl)                        ; check adjacent #5 distance
7391 D4 DA 70    7 663 call    nc, PathFinder_Update
7394 2C          7 664 inc     l
7395 BE          7 665 cp      (hl)                        ; check adjacent #6 distance
7396 D4 DA 70    7 666 call    nc, PathFinder_Update
7399 FD 5D       7 667 ld      e, iyl                      ; restore current position
739B C3 01 72    7 668 jp      PathFinder_Neighbors        ; continue processing neighbors
739E             7 670 PathFinder_CYAN_Edge_2
739E EB          7 671 ex      de, hl                      ; restore pointer to current position address
739F 2D          7 672 dec     l
73A0 2D          7 673 dec     l
73A1 BE          7 674 cp      (hl)                        ; check adjacent #0 distance
73A2 D4 DA 70    7 675 call    nc, PathFinder_Update
73A5 2C          7 676 inc     l
73A6 2C          7 677 inc     l
73A7 2C          7 678 inc     l
73A8 2C          7 679 inc     l
73A9 BE          7 680 cp      (hl)                        ; check adjacent #4 distance
73AA D4 DA 70    7 681 call    nc, PathFinder_Update
73AD 2C          7 682 inc     l
73AE BE          7 683 cp      (hl)                        ; check adjacent #5 distance
73AF D4 DA 70    7 684 call    nc, PathFinder_Update
73B2 2C          7 685 inc     l
73B3 BE          7 686 cp      (hl)                        ; check adjacent #6 distance
73B4 D4 DA 70    7 687 call    nc, PathFinder_Update
73B7 FD 5D       7 688 ld      e, iyl                      ; restore current position
73B9 C3 01 72    7 689 jp      PathFinder_Neighbors        ; continue processing neighbors
73BC             7 691 PathFinder_CYAN_Edge_3
73BC EB          7 692 ex      de, hl                      ; restore pointer to current position address
73BD 2D          7 693 dec     l
73BE 2D          7 694 dec     l
73BF 2D          7 695 dec     l
73C0 BE          7 696 cp      (hl)                        ; check adjacent #0 distance
73C1 D4 DA 70    7 697 call    nc, PathFinder_Update
73C4 2C          7 698 inc     l
73C5 BE          7 699 cp      (hl)                        ; check adjacent #1 distance
73C6 D4 DA 70    7 700 call    nc, PathFinder_Update
73C9 2C          7 701 inc     l
73CA 2C          7 702 inc     l
73CB 2C          7 703 inc     l
73CC 2C          7 704 inc     l
73CD BE          7 705 cp      (hl)                        ; check adjacent #5 distance
73CE D4 DA 70    7 706 call    nc, PathFinder_Update
73D1 2C          7 707 inc     l
73D2 BE          7 708 cp      (hl)                        ; check adjacent #6 distance
73D3 D4 DA 70    7 709 call    nc, PathFinder_Update
73D6 FD 5D       7 710 ld      e, iyl                      ; restore current position
73D8 C3 01 72    7 711 jp      PathFinder_Neighbors        ; continue processing neighbors
73DB             7 713 PathFinder_CYAN_Edge_4
73DB EB          7 714 ex      de, hl                      ; restore pointer to current position address
73DC 2C          7 715 inc     l
73DD 2C          7 716 inc     l
73DE BE          7 717 cp      (hl)                        ; check adjacent #6 distance
73DF D4 DA 70    7 718 call    nc, PathFinder_Update
73E2 2D          7 719 dec     l
73E3 2D          7 720 dec     l
73E4 2D          7 721 dec     l
73E5 2D          7 722 dec     l
73E6 BE          7 723 cp      (hl)                        ; check adjacent #2 distance
73E7 D4 DA 70    7 724 call    nc, PathFinder_Update
73EA 2D          7 725 dec     l
73EB BE          7 726 cp      (hl)                        ; check adjacent #1 distance
73EC D4 DA 70    7 727 call    nc, PathFinder_Update
73EF 2D          7 728 dec     l
73F0 BE          7 729 cp      (hl)                        ; check adjacent #0 distance
73F1 D4 DA 70    7 730 call    nc, PathFinder_Update
73F4 FD 5D       7 731 ld      e, iyl                      ; restore current position
73F6 C3 01 72    7 732 jp      PathFinder_Neighbors        ; continue processing neighbors
73F9             7 734 PathFinder_CYAN_Edge_5
73F9 EB          7 735 ex      de, hl                      ; restore pointer to current position address
73FA 2D          7 736 dec     l
73FB 2D          7 737 dec     l
73FC BE          7 738 cp      (hl)                        ; check adjacent #3 distance
73FD D4 DA 70    7 739 call    nc, PathFinder_Update
7400 2D          7 740 dec     l
7401 BE          7 741 cp      (hl)                        ; check adjacent #2 distance
7402 D4 DA 70    7 742 call    nc, PathFinder_Update
7405 2D          7 743 dec     l
7406 BE          7 744 cp      (hl)                        ; check adjacent #1 distance
7407 D4 DA 70    7 745 call    nc, PathFinder_Update
740A 2D          7 746 dec     l
740B BE          7 747 cp      (hl)                        ; check adjacent #0 distance
740C D4 DA 70    7 748 call    nc, PathFinder_Update
740F FD 5D       7 749 ld      e, iyl                      ; restore current position
7411 C3 01 72    7 750 jp      PathFinder_Neighbors        ; continue processing neighbors
7414             7 752 PathFinder_CYAN_Edge_6
7414 EB          7 753 ex      de, hl                      ; restore pointer to current position address
7415 2D          7 754 dec     l
7416 2D          7 755 dec     l
7417 BE          7 756 cp      (hl)                        ; check adjacent #4 distance
7418 D4 DA 70    7 757 call    nc, PathFinder_Update
741B 2D          7 758 dec     l
741C BE          7 759 cp      (hl)                        ; check adjacent #3 distance
741D D4 DA 70    7 760 call    nc, PathFinder_Update
7420 2D          7 761 dec     l
7421 BE          7 762 cp      (hl)                        ; check adjacent #2 distance
7422 D4 DA 70    7 763 call    nc, PathFinder_Update
7425 2D          7 764 dec     l
7426 BE          7 765 cp      (hl)                        ; check adjacent #1 distance
7427 D4 DA 70    7 766 call    nc, PathFinder_Update
742A 2D          7 767 dec     l
742B BE          7 768 cp      (hl)                        ; check adjacent #0 distance
742C D4 DA 70    7 769 call    nc, PathFinder_Update
742F FD 5D       7 770 ld      e, iyl                      ; restore current position
7431 C3 01 72    7 771 jp      PathFinder_Neighbors        ; continue processing neighbors
7434             7 773 ; ----------------------------------------------------------------------------------------------------------------------
7434             7 774 ; PathFinder_Score: calculate board score depending on speccy color
7434             7 775 ;
7434             7 776 ; Input:    P/V = flag unset if speccy side is FRIEND, flag set if speccy side is ENEMY
7434             7 777 ;
7434             7 778 ; Output:   A = -1, if speccy can't reach his opposite edge
7434             7 779 ;           A =  0, if speccy has a chain of connected tokens between the two edges or if player cant reach his edge
7434             7 780 ;           A = speccy heuristic evaluation, otherwise
7434             7 781 ;
7434             7 782 ; Uses:     -
7434             7 783 ;
7434             7 784 ; Destroys: A', BC, DE, HL, IY
7434             7 785 ; ----------------------------------------------------------------------------------------------------------------------
7434             7 786 PathFinder_Score:
7434 E2 68 74    7 787 jp      po, PathFinder_CyanScore    ; if speccy side is FRIEND, calculate CYAN score
7437             7 789 ; ----------------------------------------------------------------------------------------------------------------------
7437             7 790 ; PathFinder_RedScore: calculate red score
7437             7 791 ;
7437             7 792 ; Input:    -
7437             7 793 ;
7437             7 794 ; Output:   A = -1, if red can't reach his opposite edge
7437             7 795 ;           A =  0, if there a chain of connected red tokens between the two edges or if cyan can't reach his edge
7437             7 796 ;           A = red heuristic evaluation, otherwise
7437             7 797 ;
7437             7 798 ; Uses:     POTENTIALS (speccy board potential and attack mobility)
7437             7 799 ;
7437             7 800 ; Destroys: A', BC, DE, HL, IY
7437             7 801 ; ----------------------------------------------------------------------------------------------------------------------
7437             7 802 PathFinder_RedScore
7437 CD 72 71    7 803 call    PathFinder_Red_LeftRight    ; calculate RED two-distance from LEFT to RIGHT edge
743A C8          7 804 ret     z                           ; if red has a chain of connected tokens, return A = 0
743B 08          7 805 ex      af, af'                     ; save first result
743C CD B3 71    7 806 call    PathFinder_Red_RightLeft    ; calculate RED two-distance from RIGHT to LEFT edge
743F 47          7 807 ld      b, a                        ; save second result
7440 08          7 808 ex      af, af'                     ; restore first result
7441 90          7 809 sub     b                           ; subtract both results
7442 78          7 810 ld      a, b                        ; restore second result
7443 C8          7 811 ret     z                           ; if red can't reach his opposite edge, return A = -1
7444 CD FF 70    7 813 call    PathFinder_Cyan_UpDown      ; calculate CYAN two-distance from UP to DOWN edge
7447 08          7 814 ex      af, af'                     ; save result
7448 CD 3A 71    7 815 call    PathFinder_Cyan_DownUp      ; calculate CYAN two-distance from DOWN to UP edge
744B 47          7 816 ld      b, a                        ; save second result
744C 08          7 817 ex      af, af'                     ; restore first result
744D 90          7 818 sub     b                           ; subtract both results
744E C8          7 819 ret     z                           ; if cyan can't reach his opposite edge, return A = 0
744F 21 09 64    7 821 ld      hl, RED_BOARD_LEFT_RIGHT+9  ; HL points to red board left-right address (1st position)
7452 11 51 64    7 822 ld      de, RED_BOARD_RIGHT_LEFT+1  ; DE points to red board right-left address (1st position)
7455 CD A6 74    7 823 call    PathFinder_Potentials       ; calculate RED potentials
7458 ED 43 97 61 7 824 ld      (POTENTIALS), bc            ; store RED potentials
745C 21 09 61    7 826 ld      hl, CYAN_BOARD_UP_DOWN+9    ; HL points to cyan board up-down address (1st position)
745F 11 51 61    7 827 ld      de, CYAN_BOARD_DOWN_UP+1    ; DE points to cyan board down-up address (1st position)
7462 CD A6 74    7 828 call    PathFinder_Potentials       ; calculate cyan potentials
7465 C3 96 74    7 829 jp      PathFinder_Evaluation       ; calculate heuristic evaluation
7468             7 831 ; ----------------------------------------------------------------------------------------------------------------------
7468             7 832 ; PathFinder_CyanScore: calculate cyan score
7468             7 833 ;
7468             7 834 ; Input:    -
7468             7 835 ;
7468             7 836 ; Output:   A = -1, if cyan can't reach his opposite edge
7468             7 837 ;           A =  0, if there a chain of connected cyan tokens between the two edges or if red can't reach his edge
7468             7 838 ;           A = cyan heuristic evaluation, otherwise
7468             7 839 ;
7468             7 840 ; Uses:     POTENTIALS (speccy board potential and attack mobility)
7468             7 841 ;
7468             7 842 ; Destroys: A', BC, DE, HL
7468             7 843 ; ----------------------------------------------------------------------------------------------------------------------
7468             7 844 PathFinder_CyanScore
7468 CD FF 70    7 845 call    PathFinder_Cyan_UpDown      ; calculate CYAN two-distance from UP to DOWN edge
746B C8          7 846 ret     z                           ; if cyan has a chain of connected tokens, return A = 0
746C 08          7 847 ex      af, af'                     ; save result
746D CD 3A 71    7 848 call    PathFinder_Cyan_DownUp      ; calculate CYAN two-distance from DOWN to UP edge
7470 47          7 849 ld      b, a                        ; save second result
7471 08          7 850 ex      af, af'                     ; restore first result
7472 90          7 851 sub     b                           ; subtract both results
7473 78          7 852 ld      a, b                        ; restore second result
7474 C8          7 853 ret     z                           ; if cyan can't reach his opposite edge, return A = -1
7475 CD 72 71    7 855 call    PathFinder_Red_LeftRight    ; calculate RED two-distance from LEFT to RIGHT edge
7478 08          7 856 ex      af, af'                     ; save result
7479 CD B3 71    7 857 call    PathFinder_Red_RightLeft    ; calculate RED two-distance from RIGHT to LEFT edge
747C 47          7 858 ld      b, a                        ; save second result
747D 08          7 859 ex      af, af'                     ; restore first result
747E 90          7 860 sub     b                           ; subtract both results
747F C8          7 861 ret     z                           ; if red can't reach his opposite edge, return A = 0
7480 21 09 61    7 863 ld      hl, CYAN_BOARD_UP_DOWN+9    ; HL points to cyan board up-down address (1st position)
7483 11 51 61    7 864 ld      de, CYAN_BOARD_DOWN_UP+1    ; DE points to cyan board down-up address (1st position)
7486 CD A6 74    7 865 call    PathFinder_Potentials       ; calculate cyan potentials
7489 ED 43 97 61 7 866 ld      (POTENTIALS), bc            ; store cyan potentials
748D 21 09 64    7 868 ld      hl, RED_BOARD_LEFT_RIGHT+9  ; HL points to red board left-right address (1st position)
7490 11 51 64    7 869 ld      de, RED_BOARD_RIGHT_LEFT+1  ; DE points to red board right-left address (1st position)
7493 CD A6 74    7 870 call    PathFinder_Potentials       ; calculate red potentials
7496             7 871 ; ----------------------------------------------------------------------------------------------------------------------
7496             7 872 ; PathFinder_Evaluation: calculate heuristic evaluation.
7496             7 873 ; The original evaluation function (from cyan perspective) is described in Jack van Rijswijck's thesis as:
7496             7 874 ;
7496             7 875 ;                                       e = M (pC - pR) - (aC - aR)
7496             7 876 ; where:
7496             7 877 ;   pC = cyan board potential
7496             7 878 ;   pR = red board potential
7496             7 879 ;   aC = cyan attack mobility
7496             7 880 ;   aR = red attack mobility
7496             7 881 ;    M = a large number
7496             7 882 ;
7496             7 883 ; This adaptation uses an "invert" result to better fit BRAINIAC process.
7496             7 884 ;
7496             7 885 ; Input:    B = player attack mobility
7496             7 886 ;           C = player board potential
7496             7 887 ;
7496             7 888 ; Output:   A = heuristic evaluation
7496             7 889 ;
7496             7 890 ; Uses:     POTENTIALS (speccy's board potential and attack mobility)
7496             7 891 ;
7496             7 892 ; Destroys: E, HL
7496             7 893 ; ----------------------------------------------------------------------------------------------------------------------
7496             7 894 PathFinder_Evaluation:
7496 21 98 61    7 895 ld      hl, POTENTIALS+1            ; HL points to speccy attack mobility address
7499 78          7 896 ld      a, b                        ; get player attack mobility
749A 96          7 897 sub     (hl)                        ; subtract attack mobilities -> (aC - aR)
749B 5F          7 898 ld      e, a                        ; save the result in E
749C 2D          7 899 dec     l                           ; move HL to speccy board potential address
749D 79          7 900 ld      a, c                        ; get player board potential
749E 96          7 901 sub     (hl)                        ; subtract potentials -> (pC - pR)
749F 87          7 902 add     a, a                        ; multiply by 8 -> M (pC - pR)
74A0 87          7 903 add     a, a
74A1 87          7 904 add     a, a
74A2 93          7 905 sub     e                           ; subtract result of attack mobilities subtraction
74A3             7 906 ; -> M (pC - pR) - (aC - aR)
74A3 EE 80       7 907 xor     $80                         ; invert sign for easier further comparative
74A5 C9          7 908 ret                                 ; return A = -1 * (M (pC - pR) - (aC - aR))
74A6             7 910 ; ----------------------------------------------------------------------------------------------------------------------
74A6             7 911 ; PathFinder_Potentials: calculate board potential and attack mobility
74A6             7 912 ;
74A6             7 913 ; * A cell's Cyan potential is defined as the sum of its Cyan two-distance to both cyan edges; its Red potential is the
74A6             7 914 ;   sum of its Red two-distance to both red edges. The board potential is defined as the lowest potential that occurs on
74A6             7 915 ;   the board.
74A6             7 916 ; * The attack mobility is defined for each player as the number of cells that realize that player's board potential.
74A6             7 917 ;
74A6             7 918 ; Input:    HL = cyan board or red board address
74A6             7 919 ;           DE = cyan board or red board address
74A6             7 920 ;
74A6             7 921 ; Output:   B = attack mobility
74A6             7 922 ;           C = board potential
74A6             7 923 ;
74A6             7 924 ; Destroys: A, DE, HL, IYL
74A6             7 925 ; ----------------------------------------------------------------------------------------------------------------------
74A6             7 926 PathFinder_Potentials:
74A6 01 FF 00    7 927 ld      bc, $00FF                   ; initialize attack mobility and board potential
74A9 FD 2E 3D    7 928 ld      iyl, 61                     ; number of cells to be checked (loop counter)
74AC             7 929 Potentials_Loop
74AC 7E          7 930 ld      a, (hl)                     ; get cell's two-distance pointed by HL
74AD FE 40       7 931 cp      $40                         ; is cell occupied or border?
74AF 30 14       7 932 jr      nc, Potentials_Next         ; yes, skip to next cell
74B1 FE 04       7 933 cp      $04                         ; cell distance was not updated?
74B3 38 18       7 934 jr      c, Potentials_Infinite      ; yes, set cell potential as infinite and skip
74B5 1A          7 935 ld      a, (de)                     ; get cell's two-distance pointed by DE
74B6 FE 04       7 936 cp      $04                         ; cell distance was not updated?
74B8 38 13       7 937 jr      c, Potentials_Infinite      ; yes, set cell potential as infinite and skip
74BA 86          7 938 add     a, (hl)                     ; sum both two-distances (calculate cell potential)
74BB B9          7 939 cp      c                           ; is the new potential = board potential?
74BC 28 05       7 940 jr      z, Potentials_Increment     ; yes, increment attack mobility
74BE 30 04       7 941 jr      nc, Potentials_Update       ; if (new potential > board potential) update and skip
74C0 4F          7 942 ld      c, a                        ; board potential = new potential
74C1 06 00       7 943 ld      b, 0                        ; restart attack mobility
74C3             7 944 Potentials_Increment
74C3 04          7 945 inc     b                           ; increment attack mobility
74C4             7 946 Potentials_Update
74C4 77          7 947 ld      (hl), a                     ; save potential in the cell pointed by HL
74C5             7 948 Potentials_Next
74C5 1C          7 949 inc     e                           ; move to next cell of each board
74C6 2C          7 950 inc     l
74C7 FD 2D       7 951 dec     iyl                         ; decrement loop counter
74C9 C2 AC 74    7 952 jp      nz, Potentials_Loop         ; repeat until end of boards
74CC C9          7 953 ret
74CD             7 954 Potentials_Infinite
74CD 1F          7 955 rra                                 ; as carry flag is set, the 7th bit of A is set
74CE 77          7 956 ld      (hl), a                     ; save potential as infinite in the cell pointed by HL
74CF 1C          7 957 inc     e                           ; move to next cell of each board
74D0 2C          7 958 inc     l
74D1 FD 2D       7 959 dec     iyl                         ; decrement loop counter
74D3 C2 AC 74    7 960 jp      nz, Potentials_Loop         ; repeat until end of boards
74D6 C9          7 961 ret
74D7             7 963 ; ----------------------------------------------------------------------------------------------------------------------
74D7             7 964 ; PathFinder_Candidates: search candidates based on score result and boards potentials
74D7             7 965 ;
74D7             7 966 ; Input :    A = -1, if speccy can't reach his opposite edge
74D7             7 967 ;            A =  0, if speccy has a chain of connected tokens between the two edges or if player cant reach his edge
74D7             7 968 ;            A = speccy heuristic evaluation, otherwise
74D7             7 969 ;           IX = candidates area address
74D7             7 970 ;
74D7             7 971 ; Output:   IX = first candidate address
74D7             7 972 ;
74D7             7 973 ; Uses:     AI_PLAYER (speccy side)
74D7             7 974 ;
74D7             7 975 ; Destroys: A, A', BC, DE, HL
74D7             7 976 ; ----------------------------------------------------------------------------------------------------------------------
74D7             7 977 PathFinder_Candidates:
74D7 DD 36 00 00 7 978 ld      (ix+0), 0                   ; set candidates endmarker
74DB B7          7 980 or      a                           ; is speccy the winner?
74DC 28 3D       7 981 jr      z, Candidates_Winner        ; yes, fill candidates for winner color
74DE 3C          7 982 inc     a                           ; is speccy defeated?
74DF 28 4E       7 983 jr      z, Candidates_Defeat        ; yes, fill candidates for defeated color
74E1             7 985 ; if score is not -1 nor 0, fill candidates from total potentials
74E1 21 09 61    7 987 ld      hl, CYAN_BOARD_UP_DOWN+9    ; HL points to cyan board up-down address (1st position)
74E4 11 09 64    7 988 ld      de, RED_BOARD_LEFT_RIGHT+9  ; DE points to red board left-right address (1st position)
74E7 CD A6 74    7 989 call    PathFinder_Potentials       ; process candidates from total potentials
74EA 79          7 991 ld      a, c                        ; set board potential in A
74EB 08          7 992 ex      af, af'                     ; save board potential
74EC 50          7 993 ld      d, b                        ; store attack mobility
74ED DD 5D       7 994 ld      e, ixl                      ; store candidates position
74EF             7 996 ; insert the second best board potentials in candidates area
74EF             7 997 Candidates_2ndBest
74EF 2E 09       7 998 ld      l, 9                        ; HL points to board potentials address (1st position)
74F1 0C          7 999 inc     c                           ; increment board potential
74F2 79          7 1000 ld      a, c                        ; A = second best potential
74F3 FE 20       7 1001 cp      $20                         ; is potential >= $20? (2nd best max potential)
74F5 30 13       7 1002 jr      nc, Candidates_2ndBest_Exit ; yes, stop searching 2nd best potential
74F7 06 3D       7 1004 ld      b, 61                       ; number of cells to be checked (loop counter)
74F9             7 1005 Candidates_2ndBest_Loop
74F9 BE          7 1006 cp      (hl)                        ; is current board potential = 2nd best board potential?
74FA C2 02 75    7 1007 jp      nz, Candidates_2ndBest_Next ; no, skip to next potential
74FD DD 2C       7 1008 inc     ixl                         ; yes, insert candidate
74FF DD 75 00    7 1009 ld      (ix+0), l
7502             7 1010 Candidates_2ndBest_Next
7502 2C          7 1011 inc     l                           ; move HL to next board potential address
7503 10 F4       7 1012 djnz    Candidates_2ndBest_Loop     ; repeat for each cell
7505 DD 7D       7 1013 ld      a, ixl                      ; A = current candidates position
7507 BB          7 1014 cp      e                           ; new candidates inserted?
7508 28 E5       7 1015 jr      z, Candidates_2ndBest       ; no, repeat until new candidates inserted
750A             7 1017 Candidates_2ndBest_Exit
750A 42          7 1018 ld      b, d                        ; restore attack mobility
750B 08          7 1019 ex      af, af'                     ; restore board potential
750C             7 1021 ; insert the best board potentials in candidates area
750C             7 1022 Candidates_Best
750C 2E 08       7 1023 ld      l, 8                        ; HL points to board potential address (1st position -1)
750E             7 1024 Candidates_Best_Loop
750E 2C          7 1025 inc     l                           ; move HL to next board potential address
750F BE          7 1026 cp      (hl)                        ; is current board potential equal to best board potential?
7510 C2 0E 75    7 1027 jp      nz, Candidates_Best_Loop    ; no, next potential
7513 DD 2C       7 1028 inc     ixl                         ; yes, insert candidate
7515 DD 75 00    7 1029 ld      (ix+0), l
7518 10 F4       7 1030 djnz    Candidates_Best_Loop        ; repeat for each cell
751A C9          7 1031 ret
751B             7 1033 ; ----------------------------------------------------------------------------------------------------------------------
751B             7 1034 ; Fill candidates for winner color
751B             7 1035 ; ----------------------------------------------------------------------------------------------------------------------
751B             7 1036 Candidates_Winner
751B 3A 9B 61    7 1037 ld      a, (AI_PLAYER)              ; check speccy side
751E B7          7 1038 or      a                           ; is it FRIEND?
751F E2 3C 75    7 1039 jp      po, Candidates_Cyan         ; yes, fill candidates from cyan potentials
7522 21 09 64    7 1041 ld      hl, RED_BOARD_LEFT_RIGHT+9  ; HL points to red board left-right address (1st pos.)
7525 11 51 64    7 1042 ld      de, RED_BOARD_RIGHT_LEFT+1  ; DE points to red board right-left address (1st position)
7528 CD A6 74    7 1043 call    PathFinder_Potentials       ; calculate red potentials
752B 79          7 1044 ld      a, c                        ; set board potential in A
752C C3 0C 75    7 1045 jp      Candidates_Best             ; fill only the best candidates
752F             7 1047 ; ----------------------------------------------------------------------------------------------------------------------
752F             7 1048 ; Fill candidates for defeated color
752F             7 1049 ; ----------------------------------------------------------------------------------------------------------------------
752F             7 1050 Candidates_Defeat
752F 3A 9B 61    7 1051 ld      a, (AI_PLAYER)              ; check speccy side
7532 B7          7 1052 or      a                           ; is it FRIEND?
7533 E2 49 75    7 1053 jp      po, Candidates_Red          ; yes, fill candidates from red potentials
7536             7 1055 ; if RED is defeated, candidates are chosen from cyan board potentials
7536 CD FF 70    7 1057 call    PathFinder_Cyan_UpDown      ; calculate cyan two-distance from UP to DOWN edge
7539 CD 3A 71    7 1058 call    PathFinder_Cyan_DownUp      ; calculate cyan two-distance from DOWN to UP edge
753C             7 1059 Candidates_Cyan
753C 21 09 61    7 1060 ld      hl, CYAN_BOARD_UP_DOWN+9    ; HL points to cyan board up-down address (1st position)
753F 11 51 61    7 1061 ld      de, CYAN_BOARD_DOWN_UP+1    ; DE points to cyan board down-up address (1st position)
7542 CD A6 74    7 1062 call    PathFinder_Potentials       ; calculate cyan potentials
7545 79          7 1063 ld      a, c                        ; set board potential in A
7546 C3 0C 75    7 1064 jp      Candidates_Best             ; fill only the best candidates
7549             7 1066 ; if CYAN is defeated, candidates are chosen from red board potentials
7549             7 1067 Candidates_Red
7549 CD 72 71    7 1068 call    PathFinder_Red_LeftRight    ; calculate red two-distance from LEFT to RIGHT edge
754C CD B3 71    7 1069 call    PathFinder_Red_RightLeft    ; calculate red two-distance from RIGHT to LEFT edge
754F 21 09 64    7 1070 ld      hl, RED_BOARD_LEFT_RIGHT+9  ; HL points to red board left-right address (1st pos.)
7552 11 51 64    7 1071 ld      de, RED_BOARD_RIGHT_LEFT+1  ; DE points to red board right-left address (1st position)
7555 CD A6 74    7 1072 call    PathFinder_Potentials       ; calculate red potentials
7558 79          7 1073 ld      a, c                        ; set board potential in A
7559 C3 0C 75    7 1074 jp      Candidates_Best             ; fill only the best candidates
755C             7 1076 ; ----------------------------------------------------------------------------------------------------------------------
755C             7 1077 ; PathFinder_VictoryPath: calculate current player victory path
755C             7 1078 ;
755C             7 1079 ; Input:    -
755C             7 1080 ;
755C             7 1081 ; Output:   A   = -1, if there isn't a victory path
755C             7 1082 ;           A   = start position (-1) of the victory path, otherwise
755C             7 1083 ;           HL  = cyan or red queue head address
755C             7 1084 ;
755C             7 1085 ; Uses:     TOKEN_COLOR (current token color)
755C             7 1086 ;
755C             7 1087 ; Destroys: BC, DE, HL, IY
755C             7 1088 ; ----------------------------------------------------------------------------------------------------------------------
755C             7 1089 PathFinder_VictoryPath:
755C 3A 9E 61    7 1090 ld      a, (TOKEN_COLOR)            ; get current token color
755F FE 05       7 1091 cp      CYAN_COLOR                  ; if it is cyan, check victory path for cyan player
7561 28 0C       7 1092 jr      z, PathFinder_VictoryPath_Cyan
7563 CD 72 71    7 1094 call    PathFinder_Red_LeftRight    ; execute Path_Finder RED two-distance from LEFT to RIGHT
7566 21 45 64    7 1095 ld      hl, RED_BOARD_LEFT_RIGHT+69 ; HL points to red board left-right address (last position)
7569 CD 7B 75    7 1096 call    PathFinder_PrepareBoard     ; prepare board to calculate victory path
756C C3 7B 71    7 1097 jp      PathFinder_Red_CheckPath    ; calculate RED victory path
756F             7 1099 PathFinder_VictoryPath_Cyan
756F CD FF 70    7 1100 call    PathFinder_Cyan_UpDown      ; execute Path_Finder CYAN two-distance from UP to DOWN
7572 21 45 61    7 1101 ld      hl, CYAN_BOARD_UP_DOWN+69   ; HL points to cyan board up-down address (last position)
7575 CD 7B 75    7 1102 call    PathFinder_PrepareBoard     ; prepare board to calculate victory path
7578 C3 08 71    7 1103 jp      PathFinder_Cyan_CheckPath   ; calculate CYAN victory path
757B             7 1105 ; ----------------------------------------------------------------------------------------------------------------------
757B             7 1106 ; PathFinder_PrepareBoard: update '[color]_BOARD_XX_YY', changing VICTORY+$40 to 1, everything else to ENEMY.
757B             7 1107 ; Immediately after 'Path_Finder_[color]' returned VICTORY, you can execute this routine, then execute 'Path_Finder_
757B             7 1108 ; [color]' again to find a victory path.
757B             7 1109 ;
757B             7 1110 ; Coded by Einar Saukas
757B             7 1111 ;
757B             7 1112 ; Input:    HL = pointer to last position of [color]_BOARD
757B             7 1113 ;
757B             7 1114 ; Output:   -
757B             7 1115 ;
757B             7 1116 ; Destroys: A, BC, HL
757B             7 1117 ; ----------------------------------------------------------------------------------------------------------------------
757B             7 1118 PathFinder_PrepareBoard:
757B 3E 43       7 1119 ld      a, VICTORY+$40              ; set victory distance + friendly flag
757D 0E 07       7 1120 ld      c, 7                        ; 7 rows
757F             7 1121 PrepareBoard_Row
757F 06 07       7 1122 ld      b, 7                        ; 7 columns
7581             7 1123 PrepareBoard_Column
7581 BE          7 1124 cp      (hl)                        ; check win condition
7582 36 01       7 1125 ld      (hl), 1                     ; save 1 by default
7584 28 02       7 1126 jr      z, PrepareBoard_Next        ; if win condition, skip to position
7586 36 7E       7 1127 ld      (hl), ENEMY                 ; else, save ENEMY
7588             7 1128 PrepareBoard_Next
7588 2D          7 1129 dec     l                           ; HL points to next board position
7589 10 F6       7 1130 djnz    PrepareBoard_Column         ; repeat for each column
758B 2D          7 1132 dec     l                           ; skip borders
758C 2D          7 1133 dec     l
758D 0D          7 1134 dec     c                           ; decrement rows
758E C2 7F 75    7 1135 jp      nz, PrepareBoard_Row        ; repeat for each row
7591 C9          7 1136 ret
7592             7 1138 ; ----------------------------------------------------------------------------------------------------------------------
7592             7 1139 ; PathFinder_BrightPath: animate and highlight the hexagons included in shortest path when match ends
7592             7 1140 ;
7592             7 1141 ; Input:    A  = start position of the victory path
7592             7 1142 ;           HL = cyan or red queue head address
7592             7 1143 ;
7592             7 1144 ; Output:   -
7592             7 1145 ;
7592             7 1146 ; Uses:     TOKEN_COLOR (current token color)
7592             7 1147 ;
7592             7 1148 ; Destroys: A, BC, DE, HL, IX
7592             7 1149 ; ----------------------------------------------------------------------------------------------------------------------
7592             7 1150 PathFinder_BrightPath:
7592 6F          7 1151 ld      l, a                        ; move HL to the start position of the victory path
7593 24          7 1152 inc     h
7594 4E          7 1153 ld      c, (hl)                     ; set current victory path length in C
7595 06 03       7 1154 ld      b, VICTORY                  ; set victory length in B
7597 3A 9E 61    7 1156 ld      a, (TOKEN_COLOR)            ; get current token color
759A C6 40       7 1157 add     a, BRIGHT                   ; switch on bright attribute
759C 32 9E 61    7 1158 ld      (TOKEN_COLOR), a
759F 3E 04       7 1159 ld      a, 4                        ; set delay duration for animate hexagons
75A1 32 8A 6D    7 1160 ld      (@Token_Delay+1), a
75A4 18 1C       7 1161 jr      BrightPath_Position         ; animate and highlight the hexagon position
75A6             7 1162 BrightPath_Neighbor
75A6 2C          7 1163 inc     l                           ; move HL to left neighbor address
75A7 BE          7 1164 cp      (hl)                        ; is it the same as current victory path length?
75A8 28 18       7 1165 jr      z, BrightPath_Position      ; yes, animate and highlight the hexagon position
75AA 2D          7 1166 dec     l                           ; move HL to right neighbor address
75AB 2D          7 1167 dec     l
75AC BE          7 1168 cp      (hl)                        ; is it the same as current victory path length?
75AD 28 13       7 1169 jr      z, BrightPath_Position      ; yes, animate and highlight the hexagon position
75AF 11 F8 FF    7 1170 ld      de, -WIDTH                  ; move HL to upper-right neighbor address
75B2 19          7 1171 add     hl, de
75B3 BE          7 1172 cp      (hl)                        ; is it the same as current victory path length?
75B4 28 0C       7 1173 jr      z, BrightPath_Position      ; yes, animate and highlight the hexagon position
75B6 2C          7 1174 inc     l                           ; move HL to upper-left neighbor address
75B7 BE          7 1175 cp      (hl)                        ; is it the same as current victory path length?
75B8 28 08       7 1176 jr      z, BrightPath_Position      ; yes, animate and highlight the hexagon position
75BA 11 10 00    7 1177 ld      de, WIDTH*2                 ; move HL to lower-right neighbor address
75BD 19          7 1178 add     hl, de
75BE BE          7 1179 cp      (hl)                        ; is it the same as current victory path length?
75BF 28 01       7 1180 jr      z, BrightPath_Position      ; yes, animate and highlight the hexagon position
75C1 2C          7 1181 inc     l                           ; move HL to lower-left neighbor address
75C2             7 1182 BrightPath_Position
75C2 C5          7 1183 push    bc                          ; store current victory path length
75C3 E5          7 1184 push    hl                          ; store current position pointer
75C4 CD 39 6D    7 1185 call    Main_Board2Indexes          ; convert a board position into a board indexes
75C7 CD 76 6D    7 1186 call    Draw_Token                  ; animate hexagon sprite on the screen
75CA DD 21 E7 64 7 1187 ld      ix, TOKEN_FX                ; IX points to token tone parameters address
75CE CD 7B 76    7 1188 call    Sound_FX                    ; play sound effect
75D1 E1          7 1189 pop     hl                          ; restore current position pointer
75D2 C1          7 1190 pop     bc                          ; restore current victory path length
75D3 0D          7 1191 dec     c                           ; decrement current victory path length
75D4 79          7 1192 ld      a, c                        ; set current victory path length in A
75D5 B8          7 1193 cp      b                           ; has reached victory length?
75D6 C2 A6 75    7 1194 jp      nz, BrightPath_Neighbor     ; repeat for each neighbor until reach victory length
75D9 21 9E 61    7 1196 ld      hl, TOKEN_COLOR             ; get current token color address
75DC CB B6       7 1197 res     6, (hl)                     ; switch off bright attribute
75DE C9          7 1198 ret

; File #8: C:\Users\Antonio\source\repos\Hex\Z80CodeFiles\Timer.z80asm

75DF             8 1 ; ----------------------------------------------------------------------------------------------------------------------
75DF             8 2 ; Timer.z80asm
75DF             8 3 ; Coded by Antonio Luque
75DF             8 4 ;
75DF             8 5 ; Based on disassembly of "Chess" (c) 1982 Psion
75DF             8 6 ; ----------------------------------------------------------------------------------------------------------------------
75DF             8 8 CYAN_TIMER_ON           EQU     1                           ; cyan timer flag on
75DF             8 9 RED_TIMER_ON            EQU     2                           ; red timer flag on
75DF             8 11 ; ----------------------------------------------------------------------------------------------------------------------
75DF             8 12 ; Timer_Interrupt: interrupt routine to manage players' timers
75DF             8 13 ;
75DF             8 14 ; Input:    -
75DF             8 15 ;
75DF             8 16 ; Output:   -
75DF             8 17 ;
75DF             8 18 ; Uses:     TIMER_FLAG (0 = timer stopped, 1 = cyan timer on, 2 = red timer on)
75DF             8 19 ;
75DF             8 20 ; Destroys: BC', DE', HL'
75DF             8 21 ; ----------------------------------------------------------------------------------------------------------------------
75DF             8 22 Timer_Interrupt:
75DF F5          8 23 push    af                          ; store AF register
75E0 D9          8 24 exx                                 ; store BC, DE and HL registers
75E1 3A E8 62    8 26 ld      a, (TIMER_FLAG)             ; check timer flag
75E4 B7          8 27 or      a                           ; is timer stopped?
75E5 CA 0E 76    8 28 jp      z, Timer_Exit               ; yes, exit routine
75E8 21 EC 62    8 30 ld      hl, RED_TIMER               ; HL points to red's interrupt counter address
75EB 3D          8 31 dec     a                           ; is red timer on?
75EC C2 F2 75    8 32 jp      nz, Timer_Counters          ; yes, check interrupt counter 
75EF 21 E9 62    8 33 ld      hl, CYAN_TIMER              ; HL points to cyan's interrupt counter address
75F2             8 34 Timer_Counters
75F2 35          8 35 dec     (hl)                        ; decrement interrupt counter
75F3 C2 0E 76    8 36 jp      nz, Timer_Exit              ; if not 0, exit routine
75F6 36 32       8 38 ld      (hl), 50                    ; restart interrupt counter
75F8 23          8 39 inc     hl                          ; move HL to seconds counter address
75F9 3E 01       8 40 ld      a, 1                        ; increment seconds counter
75FB 86          8 41 add     a, (hl)
75FC 27          8 42 daa                                 ; convert to BCD (Binary-Coded-Decimal)
75FD 77          8 43 ld      (hl), a                     ; store seconds
75FE FE 60       8 44 cp      $60                         ; 60 seconds reached?
7600 C2 0B 76    8 45 jp      nz, Timer_Show              ; no, show timer
7603 36 00       8 46 ld      (hl), 0                     ; restart seconds counter
7605 23          8 47 inc     hl                          ; move HL to minutes counter address
7606 3E 01       8 48 ld      a, 1                        ; increment minutes counter
7608 86          8 49 add     a, (hl)
7609 27          8 50 daa                                 ; convert to BCD (Binary-Coded-Decimal)
760A 77          8 51 ld      (hl), a                     ; store minutes
760B             8 52 Timer_Show
760B CD 2E 76    8 53 call    Timer_Display               ; display timer on the screen
760E             8 54 Timer_Exit
760E D9          8 55 exx                                 ; restore BC, DE and HL registers
760F F1          8 56 pop     af                          ; restore AF register
7610 FB          8 58 ei                                  ; enable interrupts
7611 C9          8 59 ret
7612             8 61 ; ----------------------------------------------------------------------------------------------------------------------
7612             8 62 ; Timer_Reset: initialize and display cyan and red timers
7612             8 63 ;
7612             8 64 ; Input:    -
7612             8 65 ;
7612             8 66 ; Output:   -
7612             8 67 ;
7612             8 68 ; Uses:     TIMER_FLAG (0 = timer stopped, 1 = cyan timer on, 2 = red timer on)
7612             8 69 ;
7612             8 70 ; Destroys: A, BC, DE, HL
7612             8 71 ; ----------------------------------------------------------------------------------------------------------------------
7612             8 72 Timer_Reset:
7612 21 EE 62    8 73 ld      hl, RED_TIMER+2             ; HL points to red's minutes counter address
7615 AF          8 74 xor     a                           ; reset minutes counter
7616 77          8 75 ld      (hl), a
7617 2B          8 76 dec     hl                          ; move HL to red's seconds counter address
7618 77          8 77 ld      (hl), a                     ; reset seconds counter
7619 2B          8 78 dec     hl                          ; move HL to red's interrupt counter
761A 36 32       8 79 ld      (hl), 50                    ; set interrupt counter (1/50 seconds)
761C 2B          8 81 dec     hl                          ; move HL to cyan's minutes counter address
761D 77          8 82 ld      (hl), a                     ; reset minutes counter
761E 2B          8 83 dec     hl                          ; move HL to cyan's seconds counter address
761F 77          8 84 ld      (hl), a                     ; reset seconds counter
7620 2B          8 85 dec     hl                          ; move HL to cyan's interrupt counter
7621 36 32       8 86 ld      (hl), 50                    ; set interrupt counter (1/50 seconds)
7623 2B          8 88 dec     hl                          ; move HL to timer flag address
7624 36 01       8 89 ld      (hl), CYAN_TIMER_ON         ; set cyan timer on
7626 CD 2E 76    8 90 call    Timer_Display               ; display cyan timer
7629 3E 02       8 92 ld      a, RED_TIMER_ON             ; set red timer on
762B 32 E8 62    8 93 ld      (TIMER_FLAG), a
762E             8 95 ; ----------------------------------------------------------------------------------------------------------------------
762E             8 96 ; Timer_Display: display a timer on the screen
762E             8 97 ;
762E             8 98 ; Input:    -
762E             8 99 ;
762E             8 100 ; Output:   -
762E             8 101 ;
762E             8 102 ; Uses:     TIMER_FLAG (0 = timer stopped, 1 = cyan timer on, 2 = red timer on)
762E             8 103 ;
762E             8 104 ; Destroys: A, BC, DE, HL
762E             8 105 ; ----------------------------------------------------------------------------------------------------------------------
762E             8 106 Timer_Display:
762E 01 EE 62    8 107 ld      bc, RED_TIMER+2             ; BC points to red's minutes counter address
7631 11 E2 48    8 108 ld      de, $48E2                   ; DE points to red's minutes screen address
7634 3A E8 62    8 109 ld      a, (TIMER_FLAG)             ; check timer flag
7637 3D          8 110 dec     a                           ; is cyan timer on?
7638 C2 41 76    8 111 jp      nz, Timer_Display_Min       ; no, jump to display minutes counter
763B 01 EB 62    8 112 ld      bc, CYAN_TIMER+2            ; BC points to cyan's minutes counter address
763E 11 78 40    8 113 ld      de, $4078                   ; DE points to cyan's minutes screen address
7641             8 114 Timer_Display_Min
7641 CD 46 76    8 115 call    Timer_Display_MinSec        ; display minutes counter on screen
7644 0B          8 116 dec     bc                          ; BC points to seconds counter address
7645 1C          8 117 inc     e                           ; DE points to seconds screen address
7646             8 118 Timer_Display_MinSec:
7646 0A          8 119 ld      a, (bc)                     ; set min/sec counter in A
7647 1F          8 120 rra                                 ; move tens digit to the first 4th bits of A
7648 1F          8 121 rra
7649 1F          8 122 rra
764A 1F          8 123 rra
764B CD 4F 76    8 124 call    Timer_Display_Digit         ; display tens digit on screen
764E 0A          8 125 ld      a, (bc)                     ; set min/sec counter in A 
764F             8 126 Timer_Display_Digit:
764F E6 0F       8 127 and     %00001111                   ; discard the last 4th bits of the digit
7651 D5          8 128 push    de                          ; store digit screen address
7652 21 97 64    8 130 ld      hl, TIMER_DIGITS            ; HL points to timer digits (graphics) address
7655 87          8 131 add     a, a                        ; a digit is 8 bytes long
7656 87          8 132 add     a, a
7657 87          8 133 add     a, a
7658 85          8 134 add     a, l                        ; set digit index in HL
7659 6F          8 135 ld      l, a
765A 7E          8 137 ld      a, (hl)                     ; get digit tile
765B 12          8 138 ld      (de), a                     ; put it on screen address
765C 14          8 139 inc     d                           ; move DE to next pixel-line address
765D 2C          8 140 inc     l                           ; move HL to next digit tile address
765E 7E          8 141 ld      a, (hl)                     ; (repeat 7 more times)
765F 12          8 142 ld      (de), a
7660 14          8 143 inc     d
7661 2C          8 144 inc     l
7662 7E          8 145 ld      a, (hl)
7663 12          8 146 ld      (de), a
7664 14          8 147 inc     d
7665 2C          8 148 inc     l
7666 7E          8 149 ld      a, (hl)
7667 12          8 150 ld      (de), a
7668 14          8 151 inc     d
7669 2C          8 152 inc     l
766A 7E          8 153 ld      a, (hl)
766B 12          8 154 ld      (de), a
766C 14          8 155 inc     d
766D 2C          8 156 inc     l
766E 7E          8 157 ld      a, (hl)
766F 12          8 158 ld      (de), a
7670 14          8 159 inc     d
7671 2C          8 160 inc     l
7672 7E          8 161 ld      a, (hl)
7673 12          8 162 ld      (de), a
7674 14          8 163 inc     d
7675 2C          8 164 inc     l
7676 7E          8 165 ld      a, (hl)
7677 12          8 166 ld      (de), a
7678 D1          8 168 pop     de                          ; restore digit screen address
7679 1C          8 169 inc     e                           ; move screen address to next column
767A C9          8 170 ret

; File #9: C:\Users\Antonio\source\repos\Hex\Z80CodeFiles\Sound.z80asm

767B             9 1 ; ----------------------------------------------------------------------------------------------------------------------
767B             9 2 ; Sound.z80asm
767B             9 3 ; Coded with BeepFX player tool by Shiru: https://shiru.untergrund.net/software.shtml
767B             9 4 ;
767B             9 5 ; Adapted for Hex game by Antonio Luque
767B             9 6 ; ----------------------------------------------------------------------------------------------------------------------
767B             9 8 ; ----------------------------------------------------------------------------------------------------------------------
767B             9 9 ; Sound_FX: play a sound effect (tone) defined by many parameters
767B             9 10 ; 
767B             9 11 ; Input:    IX = tone parameters address
767B             9 12 ;
767B             9 13 ; Output:   -
767B             9 14 ;
767B             9 15 ; Destroys: A, BC, DE, HL, IY
767B             9 16 ; ----------------------------------------------------------------------------------------------------------------------
767B             9 17 Sound_FX:
767B F3          9 18 di                                  ; disable interrupts
767C DD 4E 00    9 20 ld      c, (ix+0)                   ; BC = frames
767F DD 46 01    9 21 ld      b, (ix+1)
7682 DD 5E 02    9 22 ld      e, (ix+2)                   ; DE = frame length
7685 DD 56 03    9 23 ld      d, (ix+3)
7688 D5          9 24 push    de                          ; store frame length in IY
7689 FD E1       9 25 pop     iy
768B DD 5E 04    9 26 ld      e, (ix+4)                   ; DE = pitch
768E DD 56 05    9 27 ld      d, (ix+5)
7691 21 00 00    9 28 ld      hl, 0                       ; reset HL
7694             9 30 Sound_FX_Frames
7694 C5          9 31 push    bc                          ; store frames
7695 FD E5       9 32 push    iy                          ; restore frame length in BC
7697 C1          9 33 pop     bc
7698             9 34 Sound_FX_FrameLength
7698 19          9 35 add     hl, de                      ; HL = incremented pitch
7699 7C          9 36 ld      a, h                        ; compares with fixed duty cycle ($80 for 50% square wave)
769A FE 80       9 37 cp      $80                         ; if (incremented pitch < duty cycle)
769C 9F          9 38 sbc     a, a                        ;    { A = %11111111 } else { A = %00000000 }
769D E6 10       9 39 and     %00010000                   ; toggling bit 4 controls the internal speaker
769F F6 00       9 40 or      0                           ; keep border unchanged, dummy (7t)
76A1 D3 FE       9 41 out     ($FE), a                    ; send bit to internal speaker
76A3 3A 00 00    9 42 ld      a, (0)                      ; dummy (13t)
76A6 0B          9 43 dec     bc                          ; decrement frame length
76A7 78          9 44 ld      a, b                        ; check frame length
76A8 B1          9 45 or      c                           ; frame length = 0?
76A9 C2 98 76    9 46 jp      nz, Sound_FX_FrameLength    ; no, repeat "frame length" times (loop = 88t)
76AC DD 4E 06    9 48 ld      c, (ix+6)                   ; BC = pitch slide
76AF DD 46 07    9 49 ld      b, (ix+7)
76B2 EB          9 50 ex      de, hl                      ; HL = current pitch
76B3 09          9 51 add     hl, bc                      ; increment pitch with pitch slide
76B4 EB          9 52 ex      de, hl                      ; DE = new pitch
76B5 C1          9 54 pop     bc                          ; restore frames
76B6 0B          9 55 dec     bc                          ; decrement frames
76B7 78          9 56 ld      a, b                        ; check frames
76B8 B1          9 57 or      c                           ; frames = 0?
76B9 20 D9       9 58 jr      nz, Sound_FX_Frames         ; no, repeat "frames" times
76BB FB          9 60 ei                                  ; enable interrupts
76BC C9          9 61 ret

; File #10: C:\Users\Antonio\source\repos\Hex\Z80CodeFiles\Screen.z80asm

76BD             10 1 ; ----------------------------------------------------------------------------------------------------------------------
76BD             10 2 ; Screen.z80asm
76BD             10 3 ; Coded by Antonio Luque
76BD             10 4 ; ----------------------------------------------------------------------------------------------------------------------
76BD             10 6 BLUE_INK                EQU     %00000001                   ; attributes: flash 0, bright 0, paper 0, ink 1
76BD             10 7 BLUE_PAPER              EQU     %00001000                   ; attributes: flash 0, bright 0, paper 1, ink 0
76BD             10 8 WHITE_PAPER             EQU     %00111000                   ; attributes: flash 0, bright 0, paper 7, ink 0
76BD             10 9 WHITE                   EQU     %00000111                   ; attributes: flash 0, bright 0, paper 0, ink 7
76BD             10 10 BRIGHT                  EQU     %01000000                   ; mask to apply bright to attributes
76BD             10 11 FLASH                   EQU     %10000000                   ; mask to apply flash to attributes
76BD             10 12 WHITE_FLASH0            EQU     WHITE+BRIGHT                ; attributes: flash 0, bright 1, paper 0, ink 7
76BD             10 13 WHITE_FLASH1            EQU     WHITE+BRIGHT+FLASH          ; attributes: flash 1, bright 1, paper 0, ink 7
76BD             10 15 ; ----------------------------------------------------------------------------------------------------------------------
76BD             10 16 ; Screen_Clear: fill in black the whole screen area and attributes area
76BD             10 17 ;
76BD             10 18 ; Input:    -
76BD             10 19 ;
76BD             10 20 ; Output:   -
76BD             10 21 ;
76BD             10 22 ; Destroys: BC, DE, HL
76BD             10 23 ; ----------------------------------------------------------------------------------------------------------------------
76BD             10 24 Screen_Clear:
76BD 21 00 40    10 25 ld      hl, $4000                   ; HL points to start of the screen address
76C0 11 01 40    10 26 ld      de, $4001                   ; DE points to next byte of the screen address
76C3 75          10 27 ld      (hl), l                     ; set first pixel-byte in black
76C4 01 FF 1A    10 28 ld      bc, 6144-1+768              ; length of screen area (-1 already set) + attributes area 
76C7 ED B0       10 29 ldir                                ; fill the rest of screen area and attributes area in black
76C9 C9          10 30 ret
76CA             10 32 ; ----------------------------------------------------------------------------------------------------------------------
76CA             10 33 ; Screen_Letters: draw the two rows of letters on the screen (a..g)
76CA             10 34 ;
76CA             10 35 ; Input:    -
76CA             10 36 ;
76CA             10 37 ; Output:   -
76CA             10 38 ;
76CA             10 39 ; Destroys: A, BC, DE, HL, IX
76CA             10 40 ; ----------------------------------------------------------------------------------------------------------------------
76CA             10 41 Screen_Letters:
76CA 21 66 45    10 42 ld      hl, $4566                   ; HL points to first letter screen address (top row)
76CD DD 21 66 58 10 43 ld      ix, $5866                   ; IX points to first letter attribute address (top row)
76D1 CD DB 76    10 44 call    Screen_Letters_Row          ; draw top row of letters
76D4 21 6D 51    10 45 ld      hl, $516D                   ; HL points to first letter screen address (bottom row)
76D7 DD 21 6D 5A 10 46 ld      ix, $5A6D                   ; IX points to first letter attribute address (bottom row)
76DB             10 47 Screen_Letters_Row:
76DB 11 5E 66    10 48 ld      de, LETTER_SPRITES          ; DE points to letter sprites address
76DE 06 07       10 49 ld      b, 7                        ; number of letters (loop counter)
76E0             10 50 Screen_Letter_Loop
76E0 E5          10 51 push    hl                          ; store letter screen address
76E1 CD AE 6D    10 52 call    Draw_Sprite_LetterNum       ; draw letter at screen address
76E4 E1          10 53 pop     hl                          ; restore letter screen address
76E5 2C          10 54 inc     l                           ; move HL to next screen address
76E6 2C          10 55 inc     l
76E7 DD 36 00 05 10 56 ld      (ix+0), CYAN_COLOR          ; set letter color (2 bytes)
76EB DD 36 20 05 10 57 ld      (ix+32), CYAN_COLOR
76EF DD 2C       10 58 inc     ixl                         ; move IX to next attribute address
76F1 DD 2C       10 59 inc     ixl
76F3 10 EB       10 60 djnz    Screen_Letter_Loop          ; repeat for each letter
76F5 C9          10 61 ret
76F6             10 63 ; ----------------------------------------------------------------------------------------------------------------------
76F6             10 64 ; Screen_Numbers: draw the two columns of numbers on the screen (1-7)
76F6             10 65 ;
76F6             10 66 ; Input:    -
76F6             10 67 ;
76F6             10 68 ; Output:   -
76F6             10 69 ;
76F6             10 70 ; Destroys: A, BC, DE, HL, IX, IY
76F6             10 71 ; ----------------------------------------------------------------------------------------------------------------------
76F6             10 72 Screen_Numbers:
76F6 11 A4 66    10 73 ld      de, NUMBER_SPRITES          ; DE points to numbers sprites
76F9 FD 21 EF 62 10 74 ld      iy, NUMBER_SCREEN           ; IY points to numbers screen addresses
76FD DD 21 A5 58 10 75 ld      ix, $58A5                   ; IX points to first number attribute address
7701 06 07       10 76 ld      b, 7                        ; number of numbers (loop counter)
7703             10 77 Screen_Number_Loop
7703 FD 6E 00    10 78 ld      l, (iy+0)                   ; HL points to number screen address
7706 FD 66 01    10 79 ld      h, (iy+1)
7709 E5          10 80 push    hl                          ; store pointer to number screen address
770A D5          10 81 push    de                          ; store pointer to sprite address
770B CD AE 6D    10 82 call    Draw_Sprite_LetterNum       ; draw number at screen address
770E D1          10 83 pop     de                          ; restore pointer to sprite address
770F E1          10 84 pop     hl                          ; restore pointer to number screen address
7710 DD 36 00 02 10 85 ld      (ix+0), RED_COLOR           ; set number color (2 bytes)
7714 DD 36 20 02 10 86 ld      (ix+32), RED_COLOR
7718 7D          10 87 ld      a, l                        ; move HL to screen address of the 2nd column
7719 C6 0F       10 88 add     a, 15
771B 6F          10 89 ld      l, a
771C CD AE 6D    10 90 call    Draw_Sprite_LetterNum       ; draw number at screen address
771F DD 36 0F 02 10 91 ld      (ix+15), RED_COLOR          ; set number color (2 bytes)
7723 DD 36 2F 02 10 92 ld      (ix+47), RED_COLOR
7727 78          10 93 ld      a, b                        ; save loop counter
7728 01 41 00    10 94 ld      bc, 65                      ; displacement of next attribute address
772B DD 09       10 95 add     ix, bc                      ; move IX to next attribute address
772D FD 23       10 96 inc     iy                          ; move IY to next number screen address
772F FD 23       10 97 inc     iy
7731 47          10 98 ld      b, a                        ; restore loop counter
7732 10 CF       10 99 djnz    Screen_Number_Loop          ; repeat for each number
7734 C9          10 100 ret
7735             10 102 ; ----------------------------------------------------------------------------------------------------------------------
7735             10 103 ; Screen_Frame: draw the screen frame on the screen
7735             10 104 ;
7735             10 105 ; Input:    -
7735             10 106 ;
7735             10 107 ; Output:   -
7735             10 108 ;
7735             10 109 ; Destroys: A, BC, DE, HL, IX
7735             10 110 ; ----------------------------------------------------------------------------------------------------------------------
7735             10 111 Screen_Frame:
7735 11 28 62    10 112 ld      de, STR_LEVELTEXT           ; DE points to "Level" string address
7738 21 09 40    10 113 ld      hl, $4009                   ; HL points to screen address of the string
773B CD 12 6F    10 114 call    Print_String                ; print "Level"
773E CD 7A 77    10 115 call    Screen_Vertical_Bars        ; draw the vertical bars of frame
7741 01 8D 62    10 117 ld      bc, FRAME_MAP               ; BC points to the frame tiles indexes
7744 21 00 40    10 118 ld      hl, $4000                   ; HL points to the screen address of the up-border
7747 CD 4D 77    10 119 call    Screen_Frame_Border         ; draw up-border
774A 21 E0 50    10 120 ld      hl, $50E0                   ; HL points to the screen address of the bottom-border
774D             10 121 Screen_Frame_Border:
774D DD 2E 20    10 122 ld      ixl, 32                     ; border width in bytes (loop counter)
7750             10 123 Screen_Frame_Loop
7750 0A          10 124 ld      a, (bc)                     ; get tile index
7751 FE FF       10 125 cp      -1                          ; is it -1?
7753 28 06       10 126 jr      z, Screen_Frame_Next        ; yes, there is no tile to print
7755 11 0E 65    10 127 ld      de, FRAME_TILES             ; DE points to tiles array
7758 CD 21 6F    10 128 call    Print_Tile                  ; print frame tile
775B             10 129 Screen_Frame_Next
775B 2C          10 130 inc     l                           ; HL points to the next screen address (next column)
775C 03          10 131 inc     bc                          ; BC points to the next tile index
775D DD 2D       10 132 dec     ixl                         ; decrement loop counter
775F 20 EF       10 133 jr      nz, Screen_Frame_Loop       ; repeat for each tile
7761 DD 21 07 58 10 135 ld      ix, $5807                   ; IX points to the "concave left" tile screen position
7765 DD 36 00 08 10 136 ld      (ix+0), BLUE_PAPER          ; color tile
7769 DD 36 0A 08 10 137 ld      (ix+10), BLUE_PAPER         ; color "concave right" tile
776D DD 21 F1 5A 10 138 ld      ix, $5AF1                   ; IX points to the "convex left" tile screen position
7771 DD 36 00 01 10 139 ld      (ix+0), BLUE_INK            ; color tile
7775 DD 36 04 01 10 140 ld      (ix+4), BLUE_INK            ; color "convex right" tile
7779 C9          10 141 ret
777A             10 143 ; ----------------------------------------------------------------------------------------------------------------------
777A             10 144 ; Screen_Vertical_Bars: draw the vertical bars of the frame on the screen
777A             10 145 ;
777A             10 146 ; Input:    -
777A             10 147 ;
777A             10 148 ; Output:   -
777A             10 149 ;
777A             10 150 ; Destroys: A, BC, HL
777A             10 151 ; ----------------------------------------------------------------------------------------------------------------------
777A             10 152 Screen_Vertical_Bars:
777A 21 20 40    10 153 ld      hl, $4020                   ; HL points to left bar screen address
777D CD 83 77    10 154 call    Screen_Vertical_Bar         ; draw left bar
7780 21 3F 40    10 155 ld      hl, $403F                   ; HL points to right bar screen address
7783             10 156 Screen_Vertical_Bar:
7783 06 B0       10 157 ld      b, 176                      ; number of pixel lines (loop counter)
7785             10 158 Screen_Vertical_Loop
7785 36 3C       10 159 ld      (hl), %00111100             ; draw pixel byte of bar
7787 CD BA 6D    10 160 call    Draw_Down_PixelLine         ; move HL to the next pixel-line address
778A 10 F9       10 161 djnz    Screen_Vertical_Loop        ; repeat for each pixel line
778C C9          10 162 ret
778D             10 164 ; ----------------------------------------------------------------------------------------------------------------------
778D             10 165 ; Screen_Tokens: draw the fixed tokens on the screen
778D             10 166 ;
778D             10 167 ; Input:    -
778D             10 168 ;
778D             10 169 ; Output:   -
778D             10 170 ;
778D             10 171 ; Uses:     TOKEN_COLOR (current token color)
778D             10 172 ;
778D             10 173 ; Destroys: A, BC, DE, HL, IX
778D             10 174 ; ----------------------------------------------------------------------------------------------------------------------
778D             10 175 Screen_Tokens:
778D 3E 05       10 176 ld      a, CYAN_COLOR               ; set token color
778F 21 BA 44    10 177 ld      hl, $44BA                   ; HL points to the fixed cyan token screen address
7792 CD 9A 77    10 178 call    Screen_Tokens_Draw          ; draw cyan fixed token
7795 3E 02       10 180 ld      a, RED_COLOR                ; set token color
7797 21 24 54    10 181 ld      hl, $5424                   ; HL points to the fixed red token screen address 
779A             10 182 Screen_Tokens_Draw:
779A 32 9E 61    10 183 ld      (TOKEN_COLOR), a            ; save token color
779D CD C9 6D    10 184 call    Draw_Hexagon_Color          ; color fixed token area
77A0 DD 77 40    10 185 ld      (ix+64), a                  ; the fixed tokens are 3 bytes (attributes) high, so we have
77A3 DD 77 41    10 186 ld      (ix+65), a                  ; to color the remaining 2 bytes that have not been colored
77A6 11 3E 66    10 187 ld      de, HEXAGON_TOKEN           ; DE points to token sprite address
77A9 C3 9B 6D    10 188 jp      Draw_Sprite_Hexagon         ; draw fixed token
77AC             10 190 ; ----------------------------------------------------------------------------------------------------------------------
77AC             10 191 ; Screen_Timer_Quotes: draw the timer quotes ('  '') on the screen
77AC             10 192 ;
77AC             10 193 ; Input:    -
77AC             10 194 ;
77AC             10 195 ; Output:   -
77AC             10 196 ;
77AC             10 197 ; Destroys: IX
77AC             10 198 ; ----------------------------------------------------------------------------------------------------------------------
77AC             10 199 Screen_Timer_Quotes:
77AC DD 21 7A 40 10 200 ld      ix, $407A                   ; IX points to the screen address of the cyan timer quotes 
77B0 DD 36 00 08 10 201 ld      (ix+0), %00001000           ; draw 1st half of simple quote (')
77B4 DD 36 03 0A 10 202 ld      (ix+3), %00001010           ; draw 1st half of double quotes (")
77B8 DD 24       10 203 inc     ixh                         ; move IX to the next screen pixel-line
77BA DD 36 00 08 10 204 ld      (ix+0), %00001000           ; draw 2nd half of simple quote (')
77BE DD 36 03 0A 10 205 ld      (ix+3), %00001010           ; draw 2nd half of double quotes (")
77C2 DD 26 58    10 206 ld      ixh, $58                    ; move IX to the attribute address
77C5 DD 36 00 07 10 207 ld      (ix+0), WHITE               ; color simple quote
77C9 DD 36 03 07 10 208 ld      (ix+3), WHITE               ; color double quotes
77CD DD 21 E4 48 10 210 ld      ix, $48E4                   ; IX points to the screen address of the red timer quotes
77D1 DD 36 00 08 10 211 ld      (ix+0), %00001000           ; draw 1st half of simple quote (')
77D5 DD 36 03 0A 10 212 ld      (ix+3), %00001010           ; draw 1st half of double quotes (")
77D9 DD 24       10 213 inc     ixh                         ; move IX to the next screen pixel-line
77DB DD 36 00 08 10 214 ld      (ix+0), %00001000           ; draw 2nd half of simple quote (')
77DF DD 36 03 0A 10 215 ld      (ix+3), %00001010           ; draw 2nd half of double quotes (")
77E3 DD 26 59    10 216 ld      ixh, $59                    ; move IX to the attribute address
77E6 DD 36 00 07 10 217 ld      (ix+0), WHITE               ; color simple quote
77EA DD 36 03 07 10 218 ld      (ix+3), WHITE               ; color double quotes
77EE C9          10 219 ret
77EF             10 221 ; ----------------------------------------------------------------------------------------------------------------------
77EF             10 222 ; Screen_Color_Statics: apply color to some statics items of the screen
77EF             10 223 ;
77EF             10 224 ; Input:    -
77EF             10 225 ;
77EF             10 226 ; Output:   -
77EF             10 227 ;
77EF             10 228 ; Destroys: BC, IX
77EF             10 229 ; ----------------------------------------------------------------------------------------------------------------------
77EF             10 230 Screen_Color_Statics:
77EF DD 21 78 58 10 231 ld      ix, $5878                   ; IX points to the attr. address of the cyan player timer
77F3 0E 07       10 232 ld      c, WHITE                    ; set color in C
77F5 CD 1F 78    10 233 call    Screen_Apply_Color_6        ; apply color
77F8 DD 2E 98    10 234 ld      ixl, $98                    ; IX points to the attr. address of the cyan player name
77FB 0E 05       10 235 ld      c, CYAN_COLOR               ; set color in C
77FD CD 1F 78    10 236 call    Screen_Apply_Color_6        ; apply color
7800 DD 21 18 59 10 237 ld      ix, $5918                   ; IX points to the attr. address of the cyan player messages
7804 0E 47       10 238 ld      c, WHITE+BRIGHT             ; set color in C
7806 CD 1F 78    10 239 call    Screen_Apply_Color_6        ; apply color
7809 DD 2E E2    10 240 ld      ixl, $E2                    ; IX points to the attr. address of the red player timer
780C 0E 07       10 241 ld      c, WHITE                    ; set color in C
780E CD 1F 78    10 242 call    Screen_Apply_Color_6        ; apply color
7811 DD 21 02 5A 10 243 ld      ix, $5A02                   ; IX points to the attr. address of the red player name
7815 0E 02       10 244 ld      c, RED_COLOR                ; set color in C
7817 CD 1F 78    10 245 call    Screen_Apply_Color_6        ; apply color
781A DD 2E 82    10 246 ld      ixl, $82                    ; IX points to the attr. address of the red player messages
781D 0E 47       10 247 ld      c, WHITE+BRIGHT             ; set color in C
781F             10 248 Screen_Apply_Color_6:
781F 06 06       10 249 ld      b, 6                        ; number of bytes to be colored (loop counter)
7821             10 250 ; ----------------------------------------------------------------------------------------------------------------------
7821             10 251 ; Screen_Apply_Color: apply color to a screen area
7821             10 252 ;
7821             10 253 ; Input:    B  = area length
7821             10 254 ;           C  = color attribute to apply
7821             10 255 ;           IX = attribute's area address
7821             10 256 ;
7821             10 257 ; Output:   -
7821             10 258 ;
7821             10 259 ; Destroys: B, IX
7821             10 260 ; ----------------------------------------------------------------------------------------------------------------------
7821             10 261 Screen_Apply_Color:
7821 DD 71 00    10 262 ld      (ix+0), c                   ; apply color
7824 DD 2C       10 263 inc     ixl                         ; move IX to the next attribute address
7826 10 F9       10 264 djnz    Screen_Apply_Color          ; repeat for each byte
7828 C9          10 265 ret
7829             10 267 ; ----------------------------------------------------------------------------------------------------------------------
7829             10 268 ; Screen_Last_Level: show last level screen and input game level
7829             10 269 ;
7829             10 270 ; Input:    -
7829             10 271 ;
7829             10 272 ; Output:   -
7829             10 273 ;
7829             10 274 ; Uses:     GAME_LEVEL (current game level)
7829             10 275 ;
7829             10 276 ; Destroys: A, BC, DE, HL, IX, IY
7829             10 277 ; ----------------------------------------------------------------------------------------------------------------------
7829             10 278 Screen_Last_Level:
7829 11 FF 67    10 279 ld      de, STR_PRESSKEY            ; DE points to "Press any key" string address
782C 21 AD 50    10 280 ld      hl, $50AD                   ; HL points to string screen address
782F CD 12 6F    10 281 call    Print_String                ; print "Press any key"
7832 DD 21 AD 5A 10 282 ld      ix, $5AAD                   ; IX points to string attributes address
7836 01 38 0D    10 283 ld      bc, 13*256+WHITE_PAPER      ; B = string length (loop counter), C = color attributes
7839 CD 21 78    10 284 call    Screen_Apply_Color          ; apply color to string area
783C CD 7E 6E    10 285 call    Input_Key_Scan              ; wait for a key pressed
783F CD BD 76    10 287 call    Screen_Clear                ; fill in black the whole screen area and attributes area
7842 CD FB 7B    10 288 call    Screen_Hexagons             ; draw menu hexagons ("HEX 2")
7845 DD 21 C7 59 10 289 ld      ix, $59C7                   ; IX points to "CONGRATULATIONS" string attributes address
7849 01 C7 11    10 290 ld      bc, 17*256+WHITE_FLASH1     ; B = string length (loop counter), C = color attributes
784C CD 21 78    10 291 call    Screen_Apply_Color          ; apply color to string area
784F 11 77 68    10 292 ld      de, STR_CONGRATS            ; DE points to string address
7852 21 C7 48    10 293 ld      hl, $48C7                   ; HL points to string screen address
7855 CD 12 6F    10 294 call    Print_String                ; print "CONGRATULATIONS"
7858 DD 21 EF 64 10 295 ld      ix, WINNER_FX               ; IX points to winner tone parameters address
785C CD 7B 76    10 296 call    Sound_FX                    ; play sound fx
785F F3          10 298 di                                  ; disable interrupts
7860 DD 21 42 5A 10 299 ld      ix, $5A42                   ; IX points to "Well done!..." string attributes address
7864 01 07 1C    10 300 ld      bc, 28*256+WHITE            ; B = string length (loop counter), C = color attributes
7867 CD 21 78    10 301 call    Screen_Apply_Color          ; apply color to string area
786A 11 89 68    10 302 ld      de, STR_LAST_LEVEL          ; DE points to string address
786D 21 42 50    10 303 ld      hl, $5042                   ; HL points to string screen address
7870 CD 12 6F    10 304 call    Print_String                ; print "Well done!..."
7873 DD 2E 82    10 305 ld      ixl, $82                    ; IX points to "Choose..." string attributes address
7876 06 18       10 306 ld      b, 24                       ; string length-4 (loop counter)
7878 CD 21 78    10 307 call    Screen_Apply_Color          ; apply color to string area
787B DD 36 01 78 10 308 ld      (ix+1), WHITE_PAPER+BRIGHT  ; set color for last characters ("1-4")
787F DD 36 02 78 10 309 ld      (ix+2), WHITE_PAPER+BRIGHT
7883 DD 36 03 78 10 310 ld      (ix+3), WHITE_PAPER+BRIGHT
7887 13          10 311 inc     de                          ; move DE to next string address
7888 2E 82       10 312 ld      l, $82                      ; HL points to string screen address
788A CD 12 6F    10 313 call    Print_String                ; print "Choose..."
788D             10 314 Screen_Choose_Level
788D CD 7E 6E    10 315 call    Input_Key_Scan              ; wait for a key pressed
7890 FE 31       10 316 cp      '1'                         ; is it < '1' ?
7892 38 F9       10 317 jr      c, Screen_Choose_Level      ; yes, wait for a key pressed
7894 FE 35       10 318 cp      '5'                         ; is it >= '5' ?
7896 30 F5       10 319 jr      nc, Screen_Choose_Level     ; yes, wait for a key pressed
7898 D6 31       10 320 sub     $31                         ; convert ASCII into level number (-1)
789A 21 99 61    10 321 ld      hl, GAME_LEVEL              ; HL points to game level address
789D 77          10 322 ld      (hl), a                     ; save chosen game level (-1)
789E C9          10 323 ret
789F             10 325 ; ----------------------------------------------------------------------------------------------------------------------
789F             10 326 ; Screen_ThreeRow: color the three-in-a-row marks according to the current three row counter
789F             10 327 ;
789F             10 328 ; Input:    HL = three-in-a-row counter address
789F             10 329 ;
789F             10 330 ; Output:   -
789F             10 331 ;
789F             10 332 ; Uses:     LEVEL_COLOR (current level color for frame border)
789F             10 333 ;
789F             10 334 ; Destroys: A, C, IX
789F             10 335 ; ----------------------------------------------------------------------------------------------------------------------
789F             10 336 Screen_ThreeRow:
789F CD BB 78    10 337 call    Screen_Clear_ThreeRow       ; clear all three-in-a-row marks
78A2 7E          10 338 ld      a, (hl)                     ; A = three-in-a-row counter
78A3 B7          10 339 or      a                           ; is it 0?
78A4 C8          10 340 ret     z                           ; yes, return
78A5 E5          10 342 push    hl                          ; store three-in-a-row counter address
78A6 21 9C 61    10 344 ld      hl, LEVEL_COLOR             ; HL points to level color address
78A9 4E          10 345 ld      c, (hl)                     ; save level color in C
78AA 3D          10 346 dec     a                           ; is it 1?
78AB 28 09       10 347 jr      z, Screen_ThreeRow_1        ; yes, color first mark
78AD 3D          10 348 dec     a                           ; is it 2?
78AE 28 03       10 349 jr      z, Screen_ThreeRow_2        ; yes color 2nd and 1st marks
78B0 DD 71 00    10 350 ld      (ix+0), c                   ; color 3rd mark
78B3             10 351 Screen_ThreeRow_2
78B3 DD 71 01    10 352 ld      (ix+1), c                   ; color 2nd mark
78B6             10 353 Screen_ThreeRow_1
78B6 DD 71 02    10 354 ld      (ix+2), c                   ; color 1st mark
78B9 E1          10 356 pop     hl
78BA C9          10 357 ret
78BB             10 359 ; ----------------------------------------------------------------------------------------------------------------------
78BB             10 360 ; Screen_Clear_ThreeRow: clear all three-in-a-row marks
78BB             10 361 ;
78BB             10 362 ; Input:    -
78BB             10 363 ;
78BB             10 364 ; Output:   IX = three-in-a-row marks attribute address
78BB             10 365 ;
78BB             10 366 ; Destroys: -
78BB             10 367 ; ----------------------------------------------------------------------------------------------------------------------
78BB             10 368 Screen_Clear_ThreeRow:
78BB DD 21 F2 5A 10 369 ld      ix, $5AF2                   ; IX points to attribute address of three-in-a-row marks
78BF DD 36 00 01 10 370 ld      (ix+0), BLUE_INK            ; clear all three-in-a-row marks
78C3 DD 36 01 01 10 371 ld      (ix+1), BLUE_INK
78C7 DD 36 02 01 10 372 ld      (ix+2), BLUE_INK
78CB C9          10 373 ret
78CC             10 375 ; ----------------------------------------------------------------------------------------------------------------------
78CC             10 376 ; Screen_Frame_Color: set up frame color and print level number depending on current level
78CC             10 377 ;
78CC             10 378 ; Input:    BC = game level
78CC             10 379 ;
78CC             10 380 ; Output:   -
78CC             10 381 ;
78CC             10 382 ; Uses:     LEVEL_COLOR (current level color for frame border)
78CC             10 383 ;
78CC             10 384 ; Destroys: A, BC, DE, HL
78CC             10 385 ; ----------------------------------------------------------------------------------------------------------------------
78CC             10 386 Screen_Frame_Color:
78CC 3E 30       10 387 ld      a, $30                      ; convert game level number to game level character
78CE 81          10 388 add     a, c
78CF 21 0F 40    10 389 ld      hl, $400F                   ; HL points to screen address of game level
78D2 CD 1E 6F    10 390 call    Print_Char                  ; print game level
78D5 21 0E 62    10 391 ld      hl, ROW_COLOR_MAP-1         ; HL points to color map address (adjusted for index 0)
78D8 09          10 392 add     hl, bc                      ; use BC as index for color map address
78D9 7E          10 393 ld      a, (hl)                     ; A = level color
78DA CD EF 78    10 394 call    Screen_Tiles_Color          ; color the frame according to the current level
78DD E6 07       10 395 and     %00000111                   ; mask color
78DF 32 9C 61    10 396 ld      (LEVEL_COLOR), a            ; save masked color
78E2 17          10 397 rla                                 ; rotate to text level color
78E3 17          10 398 rla
78E4 17          10 399 rla
78E5 21 08 58    10 400 ld      hl, $5808                   ; HL points to attribute address of level text
78E8 06 09       10 401 ld      b, 9                        ; length of level text (loop counter)
78EA             10 402 Screen_Level_Loop
78EA 77          10 403 ld      (hl), a                     ; apply color to level text
78EB 2C          10 404 inc     l                           ; HL points to attr address of next character of level text
78EC 10 FC       10 405 djnz    Screen_Level_Loop           ; repeat for each character of level text
78EE C9          10 406 ret
78EF             10 408 ; ----------------------------------------------------------------------------------------------------------------------
78EF             10 409 ; Screen_Tiles_Color: apply color to the frame tiles
78EF             10 410 ;
78EF             10 411 ; Input:    A = color to apply
78EF             10 412 ;
78EF             10 413 ; Output:   -
78EF             10 414 ;
78EF             10 415 ; Destroys: BC, DE, HL
78EF             10 416 ; ----------------------------------------------------------------------------------------------------------------------
78EF             10 417 Screen_Tiles_Color:
78EF             10 418 ; color up row
78EF 21 01 58    10 420 ld      hl, $5801                   ; HL points to attribute address of the the frame tile 
78F2 06 06       10 421 ld      b, 6                        ; number of tiles (loop counter)
78F4             10 422 Screen_Tiles_URow1
78F4 77          10 423 ld      (hl), a                     ; apply color
78F5 2C          10 424 inc     l                           ; move HL to the next attribute address
78F6 10 FC       10 425 djnz    Screen_Tiles_URow1          ; repeat for each tile
78F8 2E 12       10 426 ld      l, $12                      ; move HL to the next attribute address
78FA 06 0D       10 427 ld      b, 13                       ; number of tiles (loop counter)
78FC             10 428 Screen_Tiles_URow2
78FC 77          10 429 ld      (hl), a                     ; apply color
78FD 2C          10 430 inc     l                           ; move HL to the next attribute address
78FE 10 FC       10 431 djnz    Screen_Tiles_URow2          ; repeat for each tile
7900             10 433 ; color vertical bars
7900 2E 00       10 435 ld      l, 0                        ; move HL to the next attribute address
7902 11 1F 00    10 436 ld      de, 31                      ; attribute address displacement (for each bar)
7905 0E 03       10 437 ld      c, 3                        ; number of screen thirds (outer loop counter)
7907             10 438 Screen_Tiles_VBar1
7907 06 08       10 439 ld      b, 8                        ; number of tiles (inner loop counter)
7909             10 440 Screen_Tiles_VBar2
7909 77          10 441 ld      (hl), a                     ; apply color
790A 19          10 442 add     hl, de                      ; move HL to the right column
790B 77          10 443 ld      (hl), a                     ; apply color
790C 2C          10 444 inc     l                           ; move HL to the next attribute address
790D 10 FA       10 445 djnz    Screen_Tiles_VBar2          ; repeat for each tile
790F 24          10 446 inc     h                           ; move HL to the next screen third
7910 0D          10 447 dec     c                           ; decrement number of thirds
7911 20 F4       10 448 jr      nz, Screen_Tiles_VBar1      ; repeat for each third
7913             10 450 ; color bottom row
7913 21 E1 5A    10 452 ld      hl, $5AE1                   ; HL points to attribute address of the the frame tile
7916 06 10       10 453 ld      b, 16                       ; number of tiles (loop counter)
7918             10 454 Screen_Tiles_BRow1
7918 77          10 455 ld      (hl), a                     ; apply color
7919 2C          10 456 inc     l                           ; move HL to the next attribute address
791A 10 FC       10 457 djnz    Screen_Tiles_BRow1          ; repeat for each tile
791C 2E F6       10 458 ld      l, $F6                      ; move HL to the next attribute address
791E 06 09       10 459 ld      b, 9                        ; number of tiles (loop counter)
7920             10 460 Screen_Tiles_BRow2
7920 77          10 461 ld      (hl), a                     ; apply color
7921 2C          10 462 inc     l                           ; move HL to the next attribute address
7922 10 FC       10 463 djnz    Screen_Tiles_BRow2          ; repeat for each tile
7924 C9          10 464 ret
7925             10 466 ; ----------------------------------------------------------------------------------------------------------------------
7925             10 467 ; Screen_Menu: show main menu and wait for an option
7925             10 468 ;
7925             10 469 ; Input:    -
7925             10 470 ;
7925             10 471 ; Output:   -
7925             10 472 ;
7925             10 473 ; Uses:     GAME_LEVEL (current game level)
7925             10 474 ;
7925             10 475 ; Destroys: A, BC, DE, HL, IX, IY
7925             10 476 ; ----------------------------------------------------------------------------------------------------------------------
7925             10 477 Screen_Menu:
7925 CD BD 76    10 478 call    Screen_Clear                ; fill in black the whole screen area and attributes area
7928 CD FB 7B    10 479 call    Screen_Hexagons             ; draw menu hexagons ("HEX 2")
792B             10 480 Screen_Menu_Strings
792B DD 21 CA 59 10 481 ld      ix, $59CA                   ; IX points to "Start new game" string attr. address (+1)
792F DD 36 FF 78 10 482 ld      (ix-1), WHITE_PAPER+BRIGHT  ; set color of first letter
7933 01 47 0D    10 483 ld      bc, 13*256+WHITE_FLASH0     ; B = string length-1 (loop counter), C = color attributes
7936 CD 21 78    10 484 call    Screen_Apply_Color          ; apply color to string area
7939 11 80 67    10 485 ld      de, STR_OPTIONS             ; DE points to string address
793C 21 C9 48    10 486 ld      hl, $48C9                   ; HL points to string screen address
793F CD 12 6F    10 487 call    Print_String                ; print "Start new game"
7942 DD 21 2A 5A 10 488 ld      ix, $5A2A                   ; IX points to "How to play" string attributes address (+1)
7946 DD 36 FF 78 10 489 ld      (ix-1), WHITE_PAPER+BRIGHT  ; set color of first letter
794A 06 0A       10 490 ld      b, 10                       ; string length-1 (loop counter)
794C CD 21 78    10 491 call    Screen_Apply_Color          ; apply color to string area
794F 13          10 492 inc     de                          ; move DE to "How to play" string address
7950 21 29 50    10 493 ld      hl, $5029                   ; HL points to string screen address
7953 CD 12 6F    10 494 call    Print_String                ; print "How to play"
7956 DD 2E 8A    10 495 ld      ixl, $8A                    ; IX points to "Credits" string attributes address (+1)
7959 DD 36 FF 78 10 496 ld      (ix-1), WHITE_PAPER+BRIGHT  ; set color of first letter
795D CD 1F 78    10 497 call    Screen_Apply_Color_6        ; apply color to string area
7960 13          10 498 inc     de                          ; move DE to "Credits" string address
7961 2E 89       10 499 ld      l, $89                      ; HL points to string screen address
7963 CD 12 6F    10 500 call    Print_String                ; print "Credits"
7966             10 501 Screen_Menu_Options
7966 CD 7E 6E    10 502 call    Input_Key_Scan              ; wait for a key pressed
7969 FE 73       10 503 cp      's'                         ; is it 's'?
796B C8          10 504 ret     z                           ; yes, return
796C FE 63       10 505 cp      'c'                         ; is it 'c'?
796E CA 85 7B    10 506 jp      z, Screen_Menu_Credits      ; yes, show credits
7971 FE 68       10 507 cp      'h'                         ; is it 'h'?
7973 20 F1       10 508 jr      nz, Screen_Menu_Options     ; no, repeat until key pressed = 's' or 'c' or 'h'
7975             10 510 ; ----------------------------------------------------------------------------------------------------------------------
7975             10 511 ; Show "How to play" pages
7975             10 512 ; ----------------------------------------------------------------------------------------------------------------------
7975             10 513 Screen_Menu_How2Play
7975 CD BD 76    10 514 call    Screen_Clear                ; fill in black the whole screen area and attributes area
7978 CD CA 76    10 515 call    Screen_Letters              ; draw the two rows of letters on the screen (a..g)
797B CD F6 76    10 516 call    Screen_Numbers              ; draw the two columns of numbers on the screen (1..7)
797E CD 35 77    10 517 call    Screen_Frame                ; draw the screen frame
7981 21 99 61    10 519 ld      hl, GAME_LEVEL              ; HL points to game level address (needed for color frame)
7984 34          10 520 inc     (hl)                        ; increment game level (GAME_LEVEL = 1)
7985 06 00       10 521 ld      b, 0                        ; set game level in BC
7987 4E          10 522 ld      c, (hl)
7988 CD CC 78    10 523 call    Screen_Frame_Color          ; set up frame color depending on current level
798B CD BB 78    10 524 call    Screen_Clear_ThreeRow       ; clear all three-in-a-row marks
798E 11 0D 68    10 526 ld      de, STR_BUTTONS             ; DE points to "Next" string address
7991 21 DB 50    10 527 ld      hl, $50DB                   ; HL points to string screen address
7994 CD 12 6F    10 528 call    Print_String                ; print "Next"
7997 13          10 529 inc     de                          ; move DE to "Back" string address
7998 21 C1 50    10 530 ld      hl, $50C1                   ; HL points to string screen address
799B CD 12 6F    10 531 call    Print_String                ; print "Back"
799E             10 533 Screen_How2Play_RED
799E 21 5E 58    10 534 ld      hl, $5876-24                ; HL points to cyan text area attributes address (-24)
79A1 CD 35 7C    10 535 call    Screen_Clear_Text           ; clear text area attributes
79A4 CD 5B 6D    10 536 call    Draw_Board                  ; draw an empty hexagons board
79A7             10 538 ; text for RED
79A7 DD 21 01 5A 10 540 ld      ix, $5A01                   ; IX points to "Connect" string attributes address
79AB 01 07 07    10 541 ld      bc, 7*256+WHITE             ; B = string length (loop counter), C = color attributes
79AE CD 21 78    10 542 call    Screen_Apply_Color          ; apply color to string area
79B1 11 20 68    10 543 ld      de, STR_HELP1               ; DE points to string address
79B4 21 01 50    10 544 ld      hl, $5001                   ; HL points to string screen address
79B7 CD 12 6F    10 545 call    Print_String                ; print "Connect"
79BA DD 2E 21    10 546 ld      ixl, $21                    ; IX points to "left and" string attributes address
79BD 06 08       10 547 ld      b, 8                        ; string length (loop counter)
79BF CD 21 78    10 548 call    Screen_Apply_Color          ; apply color to string area
79C2 13          10 549 inc     de                          ; move DE to "left and" string address
79C3 2E 21       10 550 ld      l, $21                      ; HL points to string screen address
79C5 CD 12 6F    10 551 call    Print_String                ; print "left and"
79C8 DD 2E 41    10 552 ld      ixl, $41                    ; IX points to "right" string attributes address
79CB 06 05       10 553 ld      b, 5                        ; set string length (loop counter)
79CD CD 21 78    10 554 call    Screen_Apply_Color          ; apply color to string area
79D0 11 38 68    10 555 ld      de, STR_HELP3_RED           ; DE points to "right" string address
79D3 2E 41       10 556 ld      l, $41                      ; HL points to string screen address
79D5 CD 12 6F    10 557 call    Print_String                ; print "right"
79D8 DD 2E 61    10 558 ld      ixl, $61                    ; IX points to "borders" string attributes address
79DB 06 07       10 559 ld      b, 7                        ; set string length (loop counter)
79DD CD 21 78    10 560 call    Screen_Apply_Color          ; apply color to string area
79E0 11 43 68    10 561 ld      de, STR_HELP4               ; DE points to "borders" string address
79E3 2E 61       10 562 ld      l, $61                      ; HL points to string screen address
79E5 CD 12 6F    10 563 call    Print_String                ; print "borders"
79E8 DD 2E 81    10 564 ld      ixl, $81                    ; IX points to "to win" string attributes address
79EB CD 1F 78    10 565 call    Screen_Apply_Color_6        ; apply color to string area
79EE 13          10 566 inc     de                          ; move DE to "to win" string address
79EF 2E 81       10 567 ld      l, $81                      ; HL points to string screen address
79F1 CD 12 6F    10 568 call    Print_String                ; print "to win"
79F4 DD 21 E3 59 10 569 ld      ix, $59E3                   ; IX points to "RED" string attributes address
79F8 01 42 03    10 570 ld      bc, 3*256+RED_COLOR+BRIGHT  ; B = string length (loop counter), C = color attributes
79FB CD 21 78    10 571 call    Screen_Apply_Color          ; apply color to string area
79FE 11 17 68    10 572 ld      de, STR_RED                 ; DE points to "RED" string address
7A01 21 E3 48    10 573 ld      hl, $48E3                   ; HL points to string screen address
7A04 CD 12 6F    10 574 call    Print_String                ; print "RED"
7A07             10 576 ; draw RED sample board
7A07 FD 21 3A 67 10 578 ld      iy, SAMPLE_BOARD_RED        ; IY points to sample board (red) screen addresses
7A0B 11 3E 66    10 579 ld      de, HEXAGON_TOKEN           ; DE points to token sprite address
7A0E 06 07       10 580 ld      b, 7                        ; number of red+bright tokens (loop counter)
7A10 3E 42       10 581 ld      a, RED_COLOR+BRIGHT         ; set token color
7A12 32 9E 61    10 582 ld      (TOKEN_COLOR), a            ; save token color
7A15 CD 20 7C    10 583 call    Screen_Hexagons_Loop        ; draw tokens
7A18 06 02       10 584 ld      b, 2                        ; number of red tokens (loop counter)
7A1A 3E 02       10 585 ld      a, RED_COLOR                ; set token color
7A1C 32 9E 61    10 586 ld      (TOKEN_COLOR), a            ; save token color
7A1F CD 20 7C    10 587 call    Screen_Hexagons_Loop        ; draw tokens
7A22 06 09       10 588 ld      b, 9                        ; number of cyan tokens (loop counter)
7A24 3E 05       10 589 ld      a, CYAN_COLOR               ; set token color
7A26 32 9E 61    10 590 ld      (TOKEN_COLOR), a            ; save token color
7A29 CD 20 7C    10 591 call    Screen_Hexagons_Loop        ; draw tokens
7A2C             10 593 ; wait for "Next" option pressed
7A2C DD 21 C1 5A 10 595 ld      ix, $5AC1                   ; IX points to "Back" string attribute address
7A30 01 00 04    10 596 ld      bc, $0400                   ; B = string length (loop counter), C = attributes (black)
7A33 CD 21 78    10 597 call    Screen_Apply_Color          ; hide "Back" string
7A36 DD 2E DC    10 598 ld      ixl, $DC                    ; IX points to "Next" string attribute address (+1)
7A39 DD 36 FF 78 10 599 ld      (ix-1), WHITE_PAPER+BRIGHT  ; set color of first letter
7A3D 01 47 03    10 600 ld      bc, 3*256+WHITE_FLASH0      ; B = string length-1 (loop counter), C = color attributes
7A40 CD 21 78    10 601 call    Screen_Apply_Color          ; apply color to string area
7A43             10 602 Screen_How2PlayRED_End
7A43 CD 7E 6E    10 603 call    Input_Key_Scan              ; wait for a key pressed
7A46 FE 6E       10 604 cp      'n'                         ; is it 'n'?
7A48 20 F9       10 605 jr      nz, Screen_How2PlayRED_End  ; no, repeat until key pressed = 'n'
7A4A             10 607 Screen_How2Play_CYAN
7A4A 21 0F 58    10 608 ld      hl, $580F                   ; HL points to level number attribute address
7A4D CB BE       10 609 res     7, (hl)                     ; reset flash attribute
7A4F 26 40       10 610 ld      h, $40                      ; HL points to level number screen address
7A51 3E 31       10 611 ld      a, '1'                      ; set level number (char)
7A53 CD 1E 6F    10 612 call    Print_Char                  ; print '1'
7A56 CD BB 78    10 613 call    Screen_Clear_ThreeRow       ; clear all three-in-a-row marks
7A59 21 C9 59    10 615 ld      hl, $59E1-24                ; HL points to red text area attributes address (-24)
7A5C CD 35 7C    10 616 call    Screen_Clear_Text           ; clear text area attributes
7A5F CD 5B 6D    10 617 call    Draw_Board                  ; draw an empty hexagons board
7A62             10 619 ; text for CYAN
7A62 DD 21 98 58 10 621 ld      ix, $5898                   ; IX points to "Connect" string attributes address
7A66 01 07 07    10 622 ld      bc, 7*256+WHITE             ; B = string length (loop counter), C = color attributes
7A69 CD 21 78    10 623 call    Screen_Apply_Color          ; apply color to string area
7A6C 11 20 68    10 624 ld      de, STR_HELP1               ; DE points to "Connect" string address
7A6F 21 98 40    10 625 ld      hl, $4098                   ; HL points to string screen address
7A72 CD 12 6F    10 626 call    Print_String                ; print "Connect"
7A75 DD 2E B9    10 627 ld      ixl, $B9                    ; IX points to "up and" string attributes address
7A78 CD 1F 78    10 628 call    Screen_Apply_Color_6        ; apply color to string area
7A7B 11 31 68    10 629 ld      de, STR_HELP2_CYAN          ; DE points to "up and" string address
7A7E 2E B9       10 630 ld      l, $B9                      ; HL points to string screen address
7A80 CD 12 6F    10 631 call    Print_String                ; print "up and"
7A83 DD 2E DB    10 632 ld      ixl, $DB                    ; IX points to "down" string attributes address
7A86 06 04       10 633 ld      b, 4                        ; string length (loop counter)
7A88 CD 21 78    10 634 call    Screen_Apply_Color          ; apply color to string area
7A8B 11 3E 68    10 635 ld      de, STR_HELP3_CYAN          ; DE points to "down" string address
7A8E 2E DB       10 636 ld      l, $DB                      ; HL points to string screen address
7A90 CD 12 6F    10 637 call    Print_String                ; print "down"
7A93 DD 2E F8    10 638 ld      ixl, $F8                    ; IX points to "borders" string attributes address
7A96 06 07       10 639 ld      b, 7                        ; string length (loop counter)
7A98 CD 21 78    10 640 call    Screen_Apply_Color          ; apply color to string area
7A9B 13          10 641 inc     de                          ; move DE to "borders" string address
7A9C 2E F8       10 642 ld      l, $F8                      ; HL points to string screen address
7A9E CD 12 6F    10 643 call    Print_String                ; print "borders"
7AA1 DD 21 19 59 10 644 ld      ix, $5919                   ; IX points to "to win" string attributes address
7AA5 CD 1F 78    10 645 call    Screen_Apply_Color_6        ; apply color to string area
7AA8 13          10 646 inc     de                          ; move DE to "to win" string address
7AA9 21 19 48    10 647 ld      hl, $4819                   ; HL points to string screen address
7AAC CD 12 6F    10 648 call    Print_String                ; print "to win"
7AAF DD 21 7A 58 10 649 ld      ix, $587A                   ; IX points to "CYAN" string attributes address
7AB3 01 45 04    10 650 ld      bc, $0445                   ; B = string length (loop counter)
7AB6             10 651 ; C = color attributes (cyan+bright)
7AB6 CD 21 78    10 652 call    Screen_Apply_Color          ; apply color to string area
7AB9 11 1B 68    10 653 ld      de, STR_CYAN                ; DE points to "CYAN" string address
7ABC 21 7A 40    10 654 ld      hl, $407A                   ; HL points to string screen address
7ABF CD 12 6F    10 655 call    Print_String                ; print "CYAN"
7AC2             10 657 ; draw CYAN sample board
7AC2 FD 21 5E 67 10 659 ld      iy, SAMPLE_BOARD_CYAN       ; IY points to sample board (cyan) screen addresses
7AC6 11 3E 66    10 660 ld      de, HEXAGON_TOKEN           ; DE points to token sprite address
7AC9 06 07       10 661 ld      b, 7                        ; number of cyan+bright tokens (loop counter)
7ACB 3E 45       10 662 ld      a, CYAN_COLOR+BRIGHT        ; set token color
7ACD 32 9E 61    10 663 ld      (TOKEN_COLOR), a            ; save token color
7AD0 CD 20 7C    10 664 call    Screen_Hexagons_Loop        ; draw tokens
7AD3 06 02       10 665 ld      b, 2                        ; number of cyan tokens (loop counter)
7AD5 3E 05       10 666 ld      a, CYAN_COLOR               ; set token color
7AD7 32 9E 61    10 667 ld      (TOKEN_COLOR), a            ; save token color
7ADA CD 20 7C    10 668 call    Screen_Hexagons_Loop        ; draw tokens
7ADD 06 08       10 669 ld      b, 8                        ; number of red tokens (loop counter)
7ADF 3E 02       10 670 ld      a, RED_COLOR                ; set token color
7AE1 32 9E 61    10 671 ld      (TOKEN_COLOR), a            ; save token color
7AE4 CD 20 7C    10 672 call    Screen_Hexagons_Loop        ; draw tokens
7AE7             10 674 ; wait for "Next" or "Back" options pressed
7AE7 DD 21 C2 5A 10 676 ld      ix, $5AC2                   ; IX points to "Back" string attributes address (+1)
7AEB DD 36 FF 78 10 677 ld      (ix-1), WHITE_PAPER+BRIGHT  ; set color of first letter
7AEF 01 47 03    10 678 ld      bc, 3*256+WHITE_FLASH0      ; B = string length (-1), C = color attributes
7AF2 CD 21 78    10 679 call    Screen_Apply_Color          ; apply color to string area
7AF5             10 680 Screen_How2PlayCYAN_End
7AF5 CD 7E 6E    10 681 call    Input_Key_Scan              ; wait for a key pressed
7AF8 FE 62       10 682 cp      'b'                         ; is it 'b'?
7AFA CA 9E 79    10 683 jp      z, Screen_How2Play_RED      ; yes, show RED page
7AFD FE 6E       10 684 cp      'n'                         ; is it 'n'?
7AFF 20 F4       10 685 jr      nz, Screen_How2PlayCYAN_End ; no, repeat until key pressed = 'n' or 'b'
7B01             10 687 Screen_How2Play_LevelUp
7B01 21 5E 58    10 688 ld      hl, $5876-24                ; HL points to cyan text area attributes address (-24)
7B04 CD 35 7C    10 689 call    Screen_Clear_Text           ; clear text area attributes
7B07             10 691 ; text for Level Up
7B07 DD 21 21 5A 10 693 ld      ix, $5A21                   ; IX points to "Win three" string attributes address
7B0B 01 07 09    10 694 ld      bc, 9*256+WHITE             ; B = string length (loop counter), C = color attributes
7B0E CD 21 78    10 695 call    Screen_Apply_Color          ; apply color to string area
7B11 11 52 68    10 696 ld      de, STR_HELP                ; DE points to "Win three" string address
7B14 21 21 50    10 697 ld      hl, $5021                   ; HL points to string screen address
7B17 CD 12 6F    10 698 call    Print_String                ; print "Win three"
7B1A DD 2E 41    10 699 ld      ixl, $41                    ; IX points to "times in" string attributes address
7B1D 06 08       10 700 ld      b, 8                        ; string length (loop counter)
7B1F CD 21 78    10 701 call    Screen_Apply_Color          ; apply color to string area
7B22 13          10 702 inc     de                          ; move DE to "times in" string address
7B23 2E 41       10 703 ld      l, $41                      ; HL points to string screen address
7B25 CD 12 6F    10 704 call    Print_String                ; print "times in"
7B28 DD 2E 61    10 705 ld      ixl, $61                    ; IX points to "a row to" string attributes address
7B2B 06 08       10 706 ld      b, 8                        ; string length (loop counter)
7B2D CD 21 78    10 707 call    Screen_Apply_Color          ; apply color to string area
7B30 13          10 708 inc     de                          ; move DE to "a row to" string address
7B31 2E 61       10 709 ld      l, $61                      ; HL points to string screen address
7B33 CD 12 6F    10 710 call    Print_String                ; print "a row to"
7B36 DD 2E 81    10 711 ld      ixl, $81                    ; IX points to "level up" string attributes address
7B39 06 08       10 712 ld      b, 8                        ; string length (loop counter)
7B3B CD 21 78    10 713 call    Screen_Apply_Color          ; apply color to string area
7B3E 13          10 714 inc     de                          ; move DE to "level up" string address
7B3F 2E 81       10 715 ld      l, $81                      ; HL points to string screen address
7B41 CD 12 6F    10 716 call    Print_String                ; print "level up"
7B44             10 718 ; reset bright of cyan tokens
7B44 FD 21 5E 67 10 720 ld      iy, SAMPLE_BOARD_CYAN       ; IY points to sample board (cyan) screen addresses
7B48 11 3E 66    10 721 ld      de, HEXAGON_TOKEN           ; DE points to token sprite address
7B4B 06 07       10 722 ld      b, 7                        ; number of cyan+bright tokens (loop counter)
7B4D 3E 05       10 723 ld      a, CYAN_COLOR               ; set new token color
7B4F 32 9E 61    10 724 ld      (TOKEN_COLOR), a            ; save color
7B52 CD 20 7C    10 725 call    Screen_Hexagons_Loop        ; draw tokens
7B55             10 727 ; set flash attribute of level number and three-in-a-row marks
7B55 21 0F 58    10 729 ld      hl, $580F                   ; HL points to level number attribute address
7B58 CB FE       10 730 set     7, (hl)                     ; set flash attribute
7B5A 21 0F 40    10 731 ld      hl, $400F                   ; HL points to level number screen address
7B5D 3E 32       10 732 ld      a, '2'                      ; set new level
7B5F CD 1E 6F    10 733 call    Print_Char                  ; print new level
7B62 DD 21 F2 5A 10 734 ld      ix, $5AF2                   ; IX points to three-in-a-row attribute address
7B66 DD 36 00 B8 10 735 ld      (ix+0), WHITE_PAPER+FLASH   ; set flash attributes
7B6A DD 36 01 B8 10 736 ld      (ix+1), WHITE_PAPER+FLASH
7B6E DD 36 02 B8 10 737 ld      (ix+2), WHITE_PAPER+FLASH
7B72             10 739 ; wait for "Next" or "Back" options pressed
7B72             10 741 Screen_How2Play_End
7B72 CD 7E 6E    10 742 call    Input_Key_Scan              ; wait for a key pressed
7B75 FE 62       10 743 cp      'b'                         ; is it 'b'?
7B77 CA 4A 7A    10 744 jp      z, Screen_How2Play_CYAN     ; yes, show CYAN page
7B7A FE 6E       10 745 cp      'n'                         ; is it 'n'?
7B7C 20 F4       10 746 jr      nz, Screen_How2Play_End     ; no, repeat until key pressed = 'b' or 'n'
7B7E 21 99 61    10 748 ld      hl, GAME_LEVEL              ; HL points to game level address
7B81 35          10 749 dec     (hl)                        ; decrement game level (GAME_LEVEL = 0)
7B82 C3 25 79    10 750 jp      Screen_Menu                 ; return to main menu
7B85             10 752 ; ----------------------------------------------------------------------------------------------------------------------
7B85             10 753 ; Show credits
7B85             10 754 ; ----------------------------------------------------------------------------------------------------------------------
7B85             10 755 Screen_Menu_Credits
7B85 3E 47       10 756 ld      a, WHITE_FLASH0             ; set attribute color
7B87 CD EE 7B    10 757 call    Screen_Credits_ATTR         ; apply color to credits area
7B8A 11 A3 67    10 759 ld      de, STR_DESIGN              ; DE points to "Design..." string address
7B8D 21 84 48    10 760 ld      hl, $4884                   ; HL points to string screen address
7B90 CD 12 6F    10 761 call    Print_String                ; print "Design..."
7B93 11 F1 67    10 762 ld      de, STR_ANTONIO             ; move DE to "Antonio Luque" string 
7B96 CD 12 6F    10 763 call    Print_String                ; print "Antonio Luque"
7B99 11 B0 67    10 764 ld      de, STR_CODE                ; move DE to "Code..." string address
7B9C 2E C4       10 765 ld      l, $C4                      ; HL points to string screen address
7B9E CD 12 6F    10 766 call    Print_String                ; print "Code..."
7BA1 11 F1 67    10 767 ld      de, STR_ANTONIO             ; move DE to "Antonio Luque" string 
7BA4 CD 12 6F    10 768 call    Print_String                ; print "Antonio Luque"
7BA7 2E F0       10 769 ld      l, $F0                      ; HL points to string screen address
7BA9 11 D7 67    10 770 ld      de, STR_EINAR               ; move DE to "Einar Saukas" string address
7BAC CD 12 6F    10 771 call    Print_String                ; print "Einar Saukas"
7BAF 11 BD 67    10 772 ld      de, STR_FONT                ; move DE to "Font..." string address
7BB2 21 24 50    10 773 ld      hl, $5024                   ; HL points to string screen address
7BB5 CD 12 6F    10 774 call    Print_String                ; print "Font..."
7BB8 11 D7 67    10 775 ld      de, STR_EINAR               ; move DE to "Einar Saukas" string address
7BBB CD 12 6F    10 776 call    Print_String                ; print "Einar Saukas"
7BBE 11 CA 67    10 777 ld      de, STR_GRAPHICS            ; move DE to "Graphics..." string address
7BC1 2E 64       10 778 ld      l, $64                      ; HL points to string screen address
7BC3 CD 12 6F    10 779 call    Print_String                ; print "Graphics..."
7BC6 13          10 780 inc     de                          ; move DE to "Einar Saukas" string address
7BC7 CD 12 6F    10 781 call    Print_String                ; print "Einar Saukas"
7BCA 13          10 782 inc     de                          ; move DE to Empty12 string
7BCB 2E 84       10 783 ld      l, $84                      ; HL points to string screen address
7BCD CD 12 6F    10 784 call    Print_String                ; print Empty12 string
7BD0 13          10 785 inc     de                          ; move DE to "Antonio Luque" string 
7BD1 CD 12 6F    10 786 call    Print_String                ; print "Antonio Luque"
7BD4 DD 21 E9 5A 10 787 ld      ix, $5AE9                   ; IX points to "Press any key" string attributes address
7BD8 01 38 0D    10 788 ld      bc, 13*256+WHITE_PAPER      ; B = string length (loop counter), C = color attributes
7BDB CD 21 78    10 789 call    Screen_Apply_Color          ; apply color to string area
7BDE 13          10 790 inc     de                          ; move DE to "Press any key" string address
7BDF 2E E9       10 791 ld      l, $E9                      ; HL points to string screen address
7BE1 CD 12 6F    10 792 call    Print_String                ; print "Press any key"
7BE4 CD 7E 6E    10 793 call    Input_Key_Scan              ; wait for a key pressed
7BE7 AF          10 795 xor     a                           ; set attribute color (black)
7BE8 CD EE 7B    10 796 call    Screen_Credits_ATTR         ; apply color to credits area
7BEB C3 2B 79    10 797 jp      Screen_Menu_Strings         ; return to main menu
7BEE             10 799 ; ----------------------------------------------------------------------------------------------------------------------
7BEE             10 800 ; Screen_Menu_ATTR: apply an attribute color to credits area
7BEE             10 801 ;
7BEE             10 802 ; Input:    A = attribute color to apply
7BEE             10 803 ;
7BEE             10 804 ; Output:   -
7BEE             10 805 ;
7BEE             10 806 ; Destroys: BC, DE, HL
7BEE             10 807 ; ----------------------------------------------------------------------------------------------------------------------
7BEE             10 808 Screen_Credits_ATTR:
7BEE 21 80 59    10 809 ld      hl, $5980                   ; HL points to start of credits area attributes address
7BF1 11 81 59    10 810 ld      de, $5981                   ; DE points to next byte of credits area attributes address
7BF4 77          10 811 ld      (hl), a                     ; set first byte of attribute color
7BF5 01 7F 01    10 812 ld      bc, 32*12-1                 ; length of attributes area (-1 already set)
7BF8 ED B0       10 813 ldir                                ; fill the rest of attributes color of credits area
7BFA C9          10 814 ret
7BFB             10 816 ; ----------------------------------------------------------------------------------------------------------------------
7BFB             10 817 ; Screen_Menu_Hexagons: draw menu hexagons on screen
7BFB             10 818 ;
7BFB             10 819 ; Input:    -
7BFB             10 820 ;
7BFB             10 821 ; Output:   -
7BFB             10 822 ;
7BFB             10 823 ; Uses:     TOKEN_COLOR (current token color)
7BFB             10 824 ;
7BFB             10 825 ; Destroys: A, BC, DE, HL, IX, IY
7BFB             10 826 ; ----------------------------------------------------------------------------------------------------------------------
7BFB             10 827 Screen_Hexagons:
7BFB FD 21 EA 66 10 828 ld      iy, MENU_HEXAGONS           ; IY points to menu hexagons screen addresses
7BFF 3E 07       10 829 ld      a, WHITE                    ; set hexagon color
7C01 32 9E 61    10 830 ld      (TOKEN_COLOR), a            ; save hexagon color
7C04 11 7E 65    10 831 ld      de, HEXAGON_EMPTY           ; DE points to empty hexagon sprite address
7C07 06 1C       10 832 ld      b, 28                       ; number of empty hexagons (loop counter)
7C09 CD 20 7C    10 833 call    Screen_Hexagons_Loop        ; draw empty hexagons
7C0C 3E 05       10 834 ld      a, CYAN_COLOR               ; set token color
7C0E 32 9E 61    10 835 ld      (TOKEN_COLOR), a            ; save hexagon color
7C11 11 3E 66    10 836 ld      de, HEXAGON_TOKEN           ; DE points to token sprite address
7C14 06 06       10 837 ld      b, 6                        ; number of cyan tokens (loop counter)
7C16 CD 20 7C    10 838 call    Screen_Hexagons_Loop        ; draw cyan tokens
7C19 3E 02       10 839 ld      a, RED_COLOR                ; set token color
7C1B 32 9E 61    10 840 ld      (TOKEN_COLOR), a            ; save hexagon color
7C1E 06 06       10 841 ld      b, 6                        ; number of red tokens (loop counter)
7C20             10 842 Screen_Hexagons_Loop:
7C20 FD 6E 00    10 843 ld      l, (iy+0)                   ; HL points to hexagon/token screen address
7C23 FD 66 01    10 844 ld      h, (iy+1)
7C26 CD C9 6D    10 845 call    Draw_Hexagon_Color          ; apply color to hexagon/token area
7C29 D5          10 846 push    de                          ; store hexagon/token sprite address
7C2A CD 9B 6D    10 847 call    Draw_Sprite_Hexagon         ; draw hexagon sprite
7C2D D1          10 848 pop     de                          ; restore hexagon/token sprite address
7C2E FD 23       10 849 inc     iy                          ; move IY to next hexagon/token screen address
7C30 FD 23       10 850 inc     iy
7C32 10 EC       10 851 djnz    Screen_Hexagons_Loop        ; repeat for each hexagon/token
7C34 C9          10 852 ret
7C35             10 854 ; ----------------------------------------------------------------------------------------------------------------------
7C35             10 855 ; Screen_Clear_Text: clean a text attributes area
7C35             10 856 ;
7C35             10 857 ; Input:    HL = text area attributes address
7C35             10 858 ;
7C35             10 859 ; Output:   -
7C35             10 860 ;
7C35             10 861 ; Destroys: BC, DE, HL
7C35             10 862 ; ----------------------------------------------------------------------------------------------------------------------
7C35             10 863 Screen_Clear_Text:
7C35 01 30 00    10 864 ld      bc, 8*6                     ; length of attributes area: width x height (in bytes)
7C38             10 865 Screen_ClearText_Loop
7C38 11 18 00    10 866 ld      de, 24                      ; displacement for each text row
7C3B 19          10 867 add     hl, de                      ; add displacement to text area attributes address
7C3C 54          10 868 ld      d, h                        ; DE points to text area attributes address
7C3D 5D          10 869 ld      e, l
7C3E 36 00       10 870 ld      (hl), 0                     ; set attributes color (black) for 1st byte of current row
7C40 13          10 871 inc     de                          ; move DE to next byte attribute address
7C41 ED A0       10 872 ldi                                 ; set attributes color for the rest of bytes of current row
7C43 ED A0       10 873 ldi
7C45 ED A0       10 874 ldi
7C47 ED A0       10 875 ldi
7C49 ED A0       10 876 ldi
7C4B ED A0       10 877 ldi
7C4D ED A0       10 878 ldi
7C4F ED A0       10 879 ldi
7C51 EA 38 7C    10 880 jp      pe, Screen_ClearText_Loop   ; repeat for each row
7C54 C9          10 881 ret

; File #0: C:\Users\Antonio\source\repos\Hex\Z80CodeFiles\Hex2.z80asm

7C55             0 19 ; ----------------------------------------------------------------------------------------------------------------------
7C55             0 20 ; Credits and acknowledgements:
7C55             0 21 ;
7C55             0 22 ; - Einar Saukas and his amazing BRAINIAC: https://spectrumcomputing.co.uk/entry/31171/ZX-Spectrum/BRAINIAC,
7C55             0 23 ;   PATHFINDER adaptation: https://spectrumcomputing.co.uk/entry/28178/ZX-Spectrum/PATHFINDER, loading screen,
7C55             0 24 ;   "King+" font and TOKEN graphics.
7C55             0 25 ; - Greg Surma article: https://gsurma.medium.com/hex-creating-intelligent-opponents-with-minimax-driven-ai-part-1-%CE%B
7C55             0 26 ;   1-%CE%B2-pruning-cc1df850e5bd
7C55             0 27 ; - Jack van Rijswijck's thesis: https://webdocs.cs.ualberta.ca/~hayward/theses/jackmsc.pdf
7C55             0 28 ; - ChibiAkumas lessons: https://www.chibiakumas.com/z80/simplesamples.php#LessonS2
7C55             0 29 ; - Santiago Romero assembler course: https://wiki.speccy.org/cursos/ensamblador/indice
7C55             0 30 ;
7C55             0 31 ; - Special thanks to my wife Sonia.
7C55             0 32 ; ----------------------------------------------------------------------------------------------------------------------
