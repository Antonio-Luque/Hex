
; File #0: C:\Users\Antonio Luque\source\repos\Hex\Z80CodeFiles\Hex2.z80asm

8000             0 1 ; ----------------------------------------------------------------------------------------------------------------------
8000             0 2 ; Hex2.z80asm
8000             0 3 ; Coded by Antonio Luque
8000             0 4 ;
8000             0 5 ; Build file
8000             0 6 ; ----------------------------------------------------------------------------------------------------------------------

; File #1: C:\Users\Antonio Luque\source\repos\Hex\Z80CodeFiles\Data.z80asm

8000             1 1 ; ----------------------------------------------------------------------------------------------------------------------
8000             1 2 ; Data.z80asm
8000             1 3 ; Coded by Antonio Luque
8000             1 4 ;
8000             1 5 ; Definition of data, variables and tables
8000             1 6 ; ----------------------------------------------------------------------------------------------------------------------
8000             1 8 STACK                   org     $6000
6000             1 10 ; ----------------------------------------------------------------------------------------------------------------------
6000             1 11 ; Circular queue
6000             1 12 ; ----------------------------------------------------------------------------------------------------------------------
6000 00 00 00 00 1 13 CYAN_QUEUE_AREA         defs    256                         ; 256-aligned block reserved for circular queue
6004 00 00 00 00 1 13 
6008 00 00 00 00 1 13 
600C 00 00 00 00 1 13 
6010 00 00 00 00 1 13 
6014 00 00 00 00 1 13 
6018 00 00 00 00 1 13 
601C 00 00 00 00 1 13 
6020 00 00 00 00 1 13 
6024 00 00 00 00 1 13 
6028 00 00 00 00 1 13 
602C 00 00 00 00 1 13 
6030 00 00 00 00 1 13 
6034 00 00 00 00 1 13 
6038 00 00 00 00 1 13 
603C 00 00 00 00 1 13 
6040 00 00 00 00 1 13 
6044 00 00 00 00 1 13 
6048 00 00 00 00 1 13 
604C 00 00 00 00 1 13 
6050 00 00 00 00 1 13 
6054 00 00 00 00 1 13 
6058 00 00 00 00 1 13 
605C 00 00 00 00 1 13 
6060 00 00 00 00 1 13 
6064 00 00 00 00 1 13 
6068 00 00 00 00 1 13 
606C 00 00 00 00 1 13 
6070 00 00 00 00 1 13 
6074 00 00 00 00 1 13 
6078 00 00 00 00 1 13 
607C 00 00 00 00 1 13 
6080 00 00 00 00 1 13 
6084 00 00 00 00 1 13 
6088 00 00 00 00 1 13 
608C 00 00 00 00 1 13 
6090 00 00 00 00 1 13 
6094 00 00 00 00 1 13 
6098 00 00 00 00 1 13 
609C 00 00 00 00 1 13 
60A0 00 00 00 00 1 13 
60A4 00 00 00 00 1 13 
60A8 00 00 00 00 1 13 
60AC 00 00 00 00 1 13 
60B0 00 00 00 00 1 13 
60B4 00 00 00 00 1 13 
60B8 00 00 00 00 1 13 
60BC 00 00 00 00 1 13 
60C0 00 00 00 00 1 13 
60C4 00 00 00 00 1 13 
60C8 00 00 00 00 1 13 
60CC 00 00 00 00 1 13 
60D0 00 00 00 00 1 13 
60D4 00 00 00 00 1 13 
60D8 00 00 00 00 1 13 
60DC 00 00 00 00 1 13 
60E0 00 00 00 00 1 13 
60E4 00 00 00 00 1 13 
60E8 00 00 00 00 1 13 
60EC 00 00 00 00 1 13 
60F0 00 00 00 00 1 13 
60F4 00 00 00 00 1 13 
60F8 00 00 00 00 1 13 
60FC 00 00 00 00 1 13 
6100             1 15 ; ----------------------------------------------------------------------------------------------------------------------
6100             1 16 ; CYAN BOARDS: these boards must be located immediately after cyan queue area!
6100             1 17 ; 
6100             1 18 ; These boards hold a determined position of the board from cyan perspective. They are used to calculate CYAN "two-
6100             1 19 ; distance" (Jack van Rijswijck) from UP to DOWN edges and CYAN two-distance from DOWN to UP edges. The cyan UP-DOWN
6100             1 20 ; board is also used to store CYAN potentials and TOTAL potentials.
6100             1 21 ; 
6100             1 22 ; The values of $7F form the border of the board. The UP and DOWN edges are identified with 7th bit set and the lowest 3
6100             1 23 ; bits are the edge number. The rest of bytes indicates "two-distance" from goal (stored in lowest 6 bits), and a flag
6100             1 24 ; that indicates a position occupied by a friendly token (stored in 6th bit).
6100             1 25 ; ----------------------------------------------------------------------------------------------------------------------
6100             1 26 CYAN_BOARD_UP_DOWN:
6100 7F 7F 7F 7F 1 27 defb      $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F
6104 7F 7F 7F 7F 1 27 
6108 7F 00 00 00 1 28 defb    $7F, $00, $00, $00, $00, $00, $00, $00, $7F
610C 00 00 00 00 1 28 
6110 7F          1 28 
6111 7F 00 00 00 1 29 defb       $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6115 00 00 00 00 1 29 
6119 7F          1 29 
611A 7F 00 00 00 1 30 defb          $7F, $00, $00, $00, $00, $00, $00, $00, $7F
611E 00 00 00 00 1 30 
6122 7F          1 30 
6123 7F 00 00 00 1 31 defb             $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6127 00 00 00 00 1 31 
612B 7F          1 31 
612C 7F 00 00 00 1 32 defb                $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6130 00 00 00 00 1 32 
6134 7F          1 32 
6135 7F 00 00 00 1 33 defb                   $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6139 00 00 00 00 1 33 
613D 7F          1 33 
613E 7F 00 00 00 1 34 defb                      $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6142 00 00 00 00 1 34 
6146 7F          1 34 
6147 7F 80 81 82 1 35 defb                         $7F, $80, $81, $82, $83, $84, $85, $86, $7F
614B 83 84 85 86 1 35 
614F 7F          1 35 
6150             1 36 CYAN_BOARD_DOWN_UP:
6150 7F 00 00 00 1 37 defb    $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6154 00 00 00 00 1 37 
6158 7F          1 37 
6159 7F 00 00 00 1 38 defb       $7F, $00, $00, $00, $00, $00, $00, $00, $7F
615D 00 00 00 00 1 38 
6161 7F          1 38 
6162 7F 00 00 00 1 39 defb          $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6166 00 00 00 00 1 39 
616A 7F          1 39 
616B 7F 00 00 00 1 40 defb             $7F, $00, $00, $00, $00, $00, $00, $00, $7F
616F 00 00 00 00 1 40 
6173 7F          1 40 
6174 7F 00 00 00 1 41 defb                $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6178 00 00 00 00 1 41 
617C 7F          1 41 
617D 7F 00 00 00 1 42 defb                   $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6181 00 00 00 00 1 42 
6185 7F          1 42 
6186 7F 00 00 00 1 43 defb                      $7F, $00, $00, $00, $00, $00, $00, $00, $7F
618A 00 00 00 00 1 43 
618E 7F          1 43 
618F 7F 7F 7F 7F 1 44 defb                         $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F
6193 7F 7F 7F 7F 1 44 
6197             1 46 ; ----------------------------------------------------------------------------------------------------------------------
6197             1 47 ; Variables
6197             1 48 ; ----------------------------------------------------------------------------------------------------------------------
6197             1 49 POTENTIALS:                                                 ; (must be in a 256-byte boundary)
6197 00          1 50 defb    0                           ; board potential
6198 00          1 51 defb    0                           ; attack mobility
6199 00          1 52 AI_PLAYER               defb    0                           ; speccy side (FRIEND or ENEMY)
619A 00          1 53 AI_DEPTH                defb    0                           ; recursion depth level (1-4)
619B 00          1 54 MOVE_NUMBER             defb    0                           ; current move number
619C 00          1 55 LEVEL_COLOR             defb    0                           ; current level color for frame border
619D 00          1 56 GAME_LEVEL              defb    0                           ; current game level (1-4)
619E 00          1 57 TOKEN_COLOR             defb    0                           ; current token color
619F 05          1 58 PLAYER_COLOR            defb    5                           ; current player color
61A0             1 60 ; ----------------------------------------------------------------------------------------------------------------------
61A0             1 61 ; Screen addresses look-up table for board hexagons
61A0             1 62 ;
61A0             1 63 ; The first column contains the screen addresses high byte
61A0             1 64 ; The rest of bytes are the screen addresses low byte
61A0             1 65 ; ----------------------------------------------------------------------------------------------------------------------
61A0             1 66 BOARD_MAP:
61A0 40 A6 A8 AA 1 67 defb    $40, $A6, $A8, $AA, $AC, $AE, $B0, $B2
61A4 AC AE B0 B2 1 67 
61A8 40 E7 E9 EB 1 68 defb    $40, $E7, $E9, $EB, $ED, $EF, $F1, $F3
61AC ED EF F1 F3 1 68 
61B0 48 28 2A 2C 1 69 defb    $48, $28, $2A, $2C, $2E, $30, $32, $34
61B4 2E 30 32 34 1 69 
61B8 48 69 6B 6D 1 70 defb    $48, $69, $6B, $6D, $6F, $71, $73, $75
61BC 6F 71 73 75 1 70 
61C0 48 AA AC AE 1 71 defb    $48, $AA, $AC, $AE, $B0, $B2, $B4, $B6
61C4 B0 B2 B4 B6 1 71 
61C8 48 EB ED EF 1 72 defb    $48, $EB, $ED, $EF, $F1, $F3, $F5, $F7
61CC F1 F3 F5 F7 1 72 
61D0 50 2C 2E 30 1 73 defb    $50, $2C, $2E, $30, $32, $34, $36, $38
61D4 32 34 36 38 1 73 
61D8             1 75 ; ----------------------------------------------------------------------------------------------------------------------
61D8             1 76 ; Keyboard array map
61D8             1 77 ; ----------------------------------------------------------------------------------------------------------------------
61D8 20 7A 78 63 1 78 KEY_MAP                 defm    " zxcvasdfgqwert1234509876poiuy\x0Dlkjh  mnb"
61DC 76 61 73 64 1 78 
61E0 66 67 71 77 1 78 
61E4 65 72 74 31 1 78 
61E8 32 33 34 35 1 78 
61EC 30 39 38 37 1 78 
61F0 36 70 6F 69 1 78 
61F4 75 79 0D 6C 1 78 
61F8 6B 6A 68 20 1 78 
61FC 20 6D 6E 62 1 78 
6200             1 80 ;org     $6200
6200             1 81 ; ----------------------------------------------------------------------------------------------------------------------
6200             1 82 ; Vector table of routines (must be aligned at the next page of cyan board arrays)
6200             1 83 ; ----------------------------------------------------------------------------------------------------------------------
6200             1 84 CYAN_VECTOR_TABLE:
6200 D0 73       1 85 defw    PathFinder_CYAN_Edge_0
6202 F0 73       1 86 defw    PathFinder_CYAN_Edge_1
6204 0B 74       1 87 defw    PathFinder_CYAN_Edge_2
6206 29 74       1 88 defw    PathFinder_CYAN_Edge_3
6208 48 74       1 89 defw    PathFinder_CYAN_Edge_4
620A 66 74       1 90 defw    PathFinder_CYAN_Edge_5
620C 81 74       1 91 defw    PathFinder_CYAN_Edge_6
620E             1 93 ; ----------------------------------------------------------------------------------------------------------------------
620E             1 94 ; Variables and strings
620E             1 95 ; ----------------------------------------------------------------------------------------------------------------------
620E             1 96 PLAYER_MOVE:                                                ; player move in ASCII format
620E 00          1 97 defb    0                           ; column ('a'..'g')
620F 00          1 98 defb    0                           ; row ('1'..'7')
6210 00          1 99 CHAR_COUNT              defb    0                           ; number of current characters in input player move
6211 00          1 100 THREE_ROW               defb    0                           ; three-in-a-row counter
6212 0F 0E 0C 0B 1 101 ROW_COLOR_MAP           defb    15, 14, 12, 11, 13, 10      ; level-color map for frame border
6216 0D 0A       1 101 
6218 00 2D 30 00 1 102 STR_MOVE                defb    0, '-', '0', 0, '\0'        ; formatted move string
621C 00          1 102 
621D 53 70 65 63 1 103 STR_SPECCY              defm    "Speccy\0"
6221 63 79 00    1 103 
6224 50 6C 61 79 1 104 STR_PLAYER              defm    "Player\0"
6228 65 72 00    1 104 
622B 4C 65 76 65 1 105 STR_LEVELTEXT           defm    "Level\0"
622F 6C 00       1 105 
6231 46 49 4C 4C 1 106 STR_FILLED              defm    "FILLED\0"
6235 45 44 00    1 106 
6238 57 41 49 54 1 107 STR_WAIT                defm    "WAIT\0"
623C 00          1 107 
623D 20 57 49 4E 1 108 STR_WINNER              defm    " WINS \0"
6241 53 20 00    1 108 
6244 20 20 20 20 1 109 STR_EMPTY4              defm    "    \0"
6248 00          1 109 
6249 20 20 20 20 1 110 STR_EMPTY6              defm    "      \0"
624D 20 20 00    1 110 
6250             1 112 ; ----------------------------------------------------------------------------------------------------------------------
6250             1 113 ; Conversion table: from position to XY board indexes
6250             1 114 ; ----------------------------------------------------------------------------------------------------------------------
6250             1 115 BOARD_COORDINATES:
6250 00 00 00 00 1 116 defb    $00, $00, $00, $00, $00, $00, $00, $00
6254 00 00 00 00 1 116 
6258 00 09 0A 0B 1 117 defb    $00, $09, $0A, $0B, $0C, $0D, $0E, $0F
625C 0C 0D 0E 0F 1 117 
6260 00 12 13 14 1 118 defb    $00, $12, $13, $14, $15, $16, $17, $18
6264 15 16 17 18 1 118 
6268 00 1B 1C 1D 1 119 defb    $00, $1B, $1C, $1D, $1E, $1F, $20, $21
626C 1E 1F 20 21 1 119 
6270 00 24 25 26 1 120 defb    $00, $24, $25, $26, $27, $28, $29, $2A
6274 27 28 29 2A 1 120 
6278 00 2D 2E 2F 1 121 defb    $00, $2D, $2E, $2F, $30, $31, $32, $33
627C 30 31 32 33 1 121 
6280 00 36 37 38 1 122 defb    $00, $36, $37, $38, $39, $3A, $3B, $3C
6284 39 3A 3B 3C 1 122 
6288 00 3F 40 41 1 123 defb    $00, $3F, $40, $41, $42, $43, $44, $45
628C 42 43 44 45 1 123 
6290             1 125 ; ----------------------------------------------------------------------------------------------------------------------
6290             1 126 ; Graphics map indexes for the frame tiles
6290             1 127 ; ----------------------------------------------------------------------------------------------------------------------
6290             1 128 FRAME_MAP:
6290 00 01 01 01 1 129 defb      0,   1,   1,   1,   1,   1,   2,   3
6294 01 01 02 03 1 129 
6298 04 FF FF FF 1 130 defb      4,  -1,  -1,  -1,  -1,  -1,  -1,  -1
629C FF FF FF FF 1 130 
62A0 05 06 07 01 1 131 defb      5,   6,   7,   1,   1,   1,   1,   1
62A4 01 01 01 01 1 131 
62A8 01 01 01 01 1 132 defb      1,   1,   1,   1,   1,   1,   1,   8
62AC 01 01 01 08 1 132 
62B0 09 01 01 01 1 133 defb      9,   1,   1,   1,   1,   1,   1,   1
62B4 01 01 01 01 1 133 
62B8 01 01 01 01 1 134 defb      1,   1,   1,   1,   1,   1,   1,   1
62BC 01 01 01 01 1 134 
62C0 0A 06 0D 0D 1 135 defb     10,   6,  13,  13,  13,   3,  11,   1
62C4 0D 03 0B 01 1 135 
62C8 01 01 01 01 1 136 defb      1,   1,   1,   1,   1,   1,   1,  12
62CC 01 01 01 0C 1 136 
62D0             1 138 ; ----------------------------------------------------------------------------------------------------------------------
62D0             1 139 ; Definition of a small "Opening Book" for speccy first move
62D0             1 140 ; ----------------------------------------------------------------------------------------------------------------------
62D0             1 141 OPENINGS:
62D0 0F 14 16 17 1 142 defb    $0F, $14, $16, $17, $18, $1C, $1D
62D4 18 1C 1D    1 142 
62D7 1E 1F 20 24 1 143 defb    $1E, $1F, $20, $24, $25, $26, $27
62DB 25 26 27    1 143 
62DE 28 29 2A 2E 1 144 defb    $28, $29, $2A, $2E, $2F, $30, $31
62E2 2F 30 31    1 144 
62E5 32 36 37 38 1 145 defb    $32, $36, $37, $38, $3A, $3F
62E9 3A 3F       1 145 
62EB             1 147 ; ----------------------------------------------------------------------------------------------------------------------
62EB             1 148 ; Timer variables
62EB             1 149 ; ----------------------------------------------------------------------------------------------------------------------
62EB 00          1 150 TIMER_FLAG              defb    0                           ; 0 = timer stopped, 1 = cyan timer on, 2 = red timer on
62EC             1 151 ; for each timer:
62EC             1 152 ;   1st byte = interrupt counter (incremented each 1/50 seconds)
62EC             1 153 ;   2nd byte = seconds counter
62EC             1 154 ;   3th byte = minutes counter
62EC 32 00 00    1 155 CYAN_TIMER              defb    50, 0, 0
62EF 32 00 00    1 156 RED_TIMER               defb    50, 0, 0
62F2             1 158 ; ----------------------------------------------------------------------------------------------------------------------
62F2             1 159 ; Screen addresses look-up array for board numbers
62F2             1 160 ; ----------------------------------------------------------------------------------------------------------------------
62F2             1 161 NUMBER_SCREEN:
62F2 A5 43 E6 43 1 162 defw    $43A5, $43E6, $4B27, $4B68, $4BA9, $4BEA, $532B
62F6 27 4B 68 4B 1 162 
62FA A9 4B EA 4B 1 162 
62FE 2B 53       1 162 
6300             1 164 ;org     $6300
6300             1 165 ; ----------------------------------------------------------------------------------------------------------------------
6300             1 166 ; Circular queue
6300             1 167 ; ----------------------------------------------------------------------------------------------------------------------
6300 00 00 00 00 1 168 RED_QUEUE_AREA          defs    256                         ; 256-aligned block reserved for circular queue
6304 00 00 00 00 1 168 
6308 00 00 00 00 1 168 
630C 00 00 00 00 1 168 
6310 00 00 00 00 1 168 
6314 00 00 00 00 1 168 
6318 00 00 00 00 1 168 
631C 00 00 00 00 1 168 
6320 00 00 00 00 1 168 
6324 00 00 00 00 1 168 
6328 00 00 00 00 1 168 
632C 00 00 00 00 1 168 
6330 00 00 00 00 1 168 
6334 00 00 00 00 1 168 
6338 00 00 00 00 1 168 
633C 00 00 00 00 1 168 
6340 00 00 00 00 1 168 
6344 00 00 00 00 1 168 
6348 00 00 00 00 1 168 
634C 00 00 00 00 1 168 
6350 00 00 00 00 1 168 
6354 00 00 00 00 1 168 
6358 00 00 00 00 1 168 
635C 00 00 00 00 1 168 
6360 00 00 00 00 1 168 
6364 00 00 00 00 1 168 
6368 00 00 00 00 1 168 
636C 00 00 00 00 1 168 
6370 00 00 00 00 1 168 
6374 00 00 00 00 1 168 
6378 00 00 00 00 1 168 
637C 00 00 00 00 1 168 
6380 00 00 00 00 1 168 
6384 00 00 00 00 1 168 
6388 00 00 00 00 1 168 
638C 00 00 00 00 1 168 
6390 00 00 00 00 1 168 
6394 00 00 00 00 1 168 
6398 00 00 00 00 1 168 
639C 00 00 00 00 1 168 
63A0 00 00 00 00 1 168 
63A4 00 00 00 00 1 168 
63A8 00 00 00 00 1 168 
63AC 00 00 00 00 1 168 
63B0 00 00 00 00 1 168 
63B4 00 00 00 00 1 168 
63B8 00 00 00 00 1 168 
63BC 00 00 00 00 1 168 
63C0 00 00 00 00 1 168 
63C4 00 00 00 00 1 168 
63C8 00 00 00 00 1 168 
63CC 00 00 00 00 1 168 
63D0 00 00 00 00 1 168 
63D4 00 00 00 00 1 168 
63D8 00 00 00 00 1 168 
63DC 00 00 00 00 1 168 
63E0 00 00 00 00 1 168 
63E4 00 00 00 00 1 168 
63E8 00 00 00 00 1 168 
63EC 00 00 00 00 1 168 
63F0 00 00 00 00 1 168 
63F4 00 00 00 00 1 168 
63F8 00 00 00 00 1 168 
63FC 00 00 00 00 1 168 
6400             1 170 ; ----------------------------------------------------------------------------------------------------------------------
6400             1 171 ; RED BOARDS: these boards must be located immediately after red queue area!
6400             1 172 ; 
6400             1 173 ; These boards hold a determined position of the board from red perspective. They are used to calculate RED "two-
6400             1 174 ; distance" (Jack van Rijswijck) from LEFT to RIGHT edges and RED two-distance from RIGHT to LEFT edges. The red
6400             1 175 ; LEFT-RIGHT board is also used to store RED potentials.
6400             1 176 ; 
6400             1 177 ; The values of $7F form the border of the board. The LEFT-RIGHT edges are identified with Bit 7 set and the lowest 3
6400             1 178 ; bits are the edge number. The rest of bytes indicates "two-distance" from goal (stored in lowest 6 bits), and a flag
6400             1 179 ; that indicates a position occupied by a friendly token (stored in 6th bit).
6400             1 180 ; ----------------------------------------------------------------------------------------------------------------------
6400             1 181 RED_BOARD_LEFT_RIGHT:
6400 7F 7F 7F 7F 1 182 defb      $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F
6404 7F 7F 7F 7F 1 182 
6408 7F 00 00 00 1 183 defb    $7F, $00, $00, $00, $00, $00, $00, $00, $80
640C 00 00 00 00 1 183 
6410 80          1 183 
6411 7F 00 00 00 1 184 defb       $7F, $00, $00, $00, $00, $00, $00, $00, $81
6415 00 00 00 00 1 184 
6419 81          1 184 
641A 7F 00 00 00 1 185 defb          $7F, $00, $00, $00, $00, $00, $00, $00, $82
641E 00 00 00 00 1 185 
6422 82          1 185 
6423 7F 00 00 00 1 186 defb             $7F, $00, $00, $00, $00, $00, $00, $00, $83
6427 00 00 00 00 1 186 
642B 83          1 186 
642C 7F 00 00 00 1 187 defb                $7F, $00, $00, $00, $00, $00, $00, $00, $84
6430 00 00 00 00 1 187 
6434 84          1 187 
6435 7F 00 00 00 1 188 defb                   $7F, $00, $00, $00, $00, $00, $00, $00, $85
6439 00 00 00 00 1 188 
643D 85          1 188 
643E 7F 00 00 00 1 189 defb                      $7F, $00, $00, $00, $00, $00, $00, $00, $86
6442 00 00 00 00 1 189 
6446 86          1 189 
6447 7F 7F 7F 7F 1 190 defb                         $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F
644B 7F 7F 7F 7F 1 190 
644F 7F          1 190 
6450             1 191 RED_BOARD_RIGHT_LEFT:
6450 80 00 00 00 1 192 defb    $80, $00, $00, $00, $00, $00, $00, $00, $7F
6454 00 00 00 00 1 192 
6458 7F          1 192 
6459 81 00 00 00 1 193 defb       $81, $00, $00, $00, $00, $00, $00, $00, $7F
645D 00 00 00 00 1 193 
6461 7F          1 193 
6462 82 00 00 00 1 194 defb          $82, $00, $00, $00, $00, $00, $00, $00, $7F
6466 00 00 00 00 1 194 
646A 7F          1 194 
646B 83 00 00 00 1 195 defb             $83, $00, $00, $00, $00, $00, $00, $00, $7F
646F 00 00 00 00 1 195 
6473 7F          1 195 
6474 84 00 00 00 1 196 defb                $84, $00, $00, $00, $00, $00, $00, $00, $7F
6478 00 00 00 00 1 196 
647C 7F          1 196 
647D 85 00 00 00 1 197 defb                   $85, $00, $00, $00, $00, $00, $00, $00, $7F
6481 00 00 00 00 1 197 
6485 7F          1 197 
6486 86 00 00 00 1 198 defb                      $86, $00, $00, $00, $00, $00, $00, $00, $7F
648A 00 00 00 00 1 198 
648E 7F          1 198 
648F 7F 7F 7F 7F 1 199 defb                         $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F
6493 7F 7F 7F 7F 1 199 
6497             1 201 ; ----------------------------------------------------------------------------------------------------------------------
6497             1 202 ; Timer digits graphics. Must be in a 256 bytes boundary
6497             1 203 ; ----------------------------------------------------------------------------------------------------------------------
6497             1 204 TIMER_DIGITS:
6497 00 0F 0B 0B 1 205 defb    $00, $0F, $0B, $0B, $0B, $0F, $00, $00              ; 0
649B 0B 0F 00 00 1 205 
649F 00 06 0E 06 1 206 defb    $00, $06, $0E, $06, $06, $06, $00, $00              ; 1
64A3 06 06 00 00 1 206 
64A7 00 0F 03 0F 1 207 defb    $00, $0F, $03, $0F, $08, $0F, $00, $00              ; 2
64AB 08 0F 00 00 1 207 
64AF 00 0F 03 07 1 208 defb    $00, $0F, $03, $07, $03, $0F, $00, $00              ; 3
64B3 03 0F 00 00 1 208 
64B7 00 0B 0B 0F 1 209 defb    $00, $0B, $0B, $0F, $03, $03, $00, $00              ; 4 
64BB 03 03 00 00 1 209 
64BF 00 0F 08 0F 1 210 defb    $00, $0F, $08, $0F, $03, $0F, $00, $00              ; 5
64C3 03 0F 00 00 1 210 
64C7 00 0F 0C 0F 1 211 defb    $00, $0F, $0C, $0F, $0D, $0F, $00, $00              ; 6
64CB 0D 0F 00 00 1 211 
64CF 00 0F 03 03 1 212 defb    $00, $0F, $03, $03, $03, $03, $00, $00              ; 7
64D3 03 03 00 00 1 212 
64D7 00 0F 0B 0F 1 213 defb    $00, $0F, $0B, $0F, $0B, $0F, $00, $00              ; 8
64DB 0B 0F 00 00 1 213 
64DF 00 0F 0B 0F 1 214 defb    $00, $0F, $0B, $0F, $03, $0F, $00, $00              ; 9
64E3 03 0F 00 00 1 214 
64E7             1 216 ; ----------------------------------------------------------------------------------------------------------------------
64E7             1 217 ; Tone parameters for sound effects
64E7             1 218 ; ----------------------------------------------------------------------------------------------------------------------
64E7             1 219 ; for each tone (from left to right):
64E7             1 220 ;   - number of frames in the block, slide changes applied once per frame (1..65536)
64E7             1 221 ;   - length of a frame (1..65536)
64E7             1 222 ;   - tone pitch, lower numbers for lower tone (1..65536)
64E7             1 223 ;   - pitch slide, this value is added to pitch every frame (-32767..32768)
64E7             1 224 ; ----------------------------------------------------------------------------------------------------------------------
64E7 01 00 E8 03 1 225 TOKEN_FX                defw       1, 1000, 1400,   0
64EB 78 05 00 00 1 225 
64EF 05 00 88 13 1 226 WINNER_FX               defw       5, 5000,  200, 100
64F3 C8 00 64 00 1 226 
64F7 E8 03 0A 00 1 227 FILLED_FX               defw    1000,   10,  100,   0
64FB 64 00 00 00 1 227 
64FF FF          1 229 FILLER                  defb    $FF                         ; filler to align next block (not used)
6500             1 231 ;org     $6500
6500             1 232 ; ----------------------------------------------------------------------------------------------------------------------
6500             1 233 ; Vector table of routines (must be aligned at the next page of red board arrays)
6500             1 234 ; ----------------------------------------------------------------------------------------------------------------------
6500             1 235 RED_VECTOR_TABLE:
6500 B6 72       1 236 defw    PathFinder_RED_Edge_0
6502 E4 72       1 237 defw    PathFinder_RED_Edge_1
6504 0A 73       1 238 defw    PathFinder_RED_Edge_2
6506 30 73       1 239 defw    PathFinder_RED_Edge_3
6508 56 73       1 240 defw    PathFinder_RED_Edge_4
650A 7C 73       1 241 defw    PathFinder_RED_Edge_5
650C A2 73       1 242 defw    PathFinder_RED_Edge_6
650E             1 244 ; ----------------------------------------------------------------------------------------------------------------------
650E             1 245 ; Graphics for the screen frame
650E             1 246 ; ----------------------------------------------------------------------------------------------------------------------
650E             1 247 FRAME_TILES:
650E 00 00 1F 3F 1 248 defb    $00, $00, $1F, $3F, $3F, $3F, $3C, $3C              ; 00: up-left corner
6512 3F 3F 3C 3C 1 248 
6516 00 00 FF FF 1 249 defb    $00, $00, $FF, $FF, $FF, $FF, $00, $00              ; 01: horizontal bar
651A FF FF 00 00 1 249 
651E 00 00 FF FE 1 250 defb    $00, $00, $FF, $FE, $FE, $FF, $00, $00              ; 02: concave left
6522 FE FF 00 00 1 250 
6526 03 07 0F 0F 1 251 defb    $03, $07, $0F, $0F, $0F, $0F, $07, $03              ; 03: end frame 1
652A 0F 0F 07 03 1 251 
652E FF FE FC FC 1 252 defb    $FF, $FE, $FC, $FC, $FC, $FC, $FE, $FF              ; 04: level left
6532 FC FC FE FF 1 252 
6536 FF 7F 3F 3F 1 253 defb    $FF, $7F, $3F, $3F, $3F, $3F, $7F, $FF              ; 05: level right
653A 3F 3F 7F FF 1 253 
653E C0 E0 F0 F0 1 254 defb    $C0, $E0, $F0, $F0, $F0, $F0, $E0, $C0              ; 06: end frame 2
6542 F0 F0 E0 C0 1 254 
6546 00 00 FF 7F 1 255 defb    $00, $00, $FF, $7F, $7F, $FF, $00, $00              ; 07: concave right
654A 7F FF 00 00 1 255 
654E 00 00 F8 FC 1 256 defb    $00, $00, $F8, $FC, $FC, $FC, $3C, $3C              ; 08: up-right corner
6552 FC FC 3C 3C 1 256 
6556 3C 3C 3F 3F 1 257 defb    $3C, $3C, $3F, $3F, $3F, $1F, $00, $00              ; 09: bottom-left corner
655A 3F 1F 00 00 1 257 
655E 00 00 FE FF 1 258 defb    $00, $00, $FE, $FF, $FF, $FE, $00, $00              ; 10: convex left
6562 FF FE 00 00 1 258 
6566 00 00 7F FF 1 259 defb    $00, $00, $7F, $FF, $FF, $7F, $00, $00              ; 11: convex right
656A FF 7F 00 00 1 259 
656E 3C 3C FC FC 1 260 defb    $3C, $3C, $FC, $FC, $FC, $F8, $00, $00              ; 12: bottom-right corner
6572 FC F8 00 00 1 260 
6576 00 00 38 7C 1 261 defb    $00, $00, $38, $7C, $7C, $38, $00, $00              ; 13: level marks
657A 7C 38 00 00 1 261 
657E             1 263 ; ----------------------------------------------------------------------------------------------------------------------
657E             1 264 ; Hexagon sprites
657E             1 265 ; ----------------------------------------------------------------------------------------------------------------------
657E             1 266 HEXAGON_EMPTY:
657E 07 E0 18 18 1 267 defb    $07, $E0, $18, $18, $20, $04, $24, $04
6582 20 04 24 04 1 267 
6586 48 02 48 02 1 268 defb    $48, $02, $48, $02, $40, $02, $40, $02
658A 40 02 40 02 1 268 
658E 40 02 40 02 1 269 defb    $40, $02, $40, $02, $40, $12, $40, $12
6592 40 12 40 12 1 269 
6596 20 24 20 04 1 270 defb    $20, $24, $20, $04, $18, $18, $07, $E0
659A 18 18 07 E0 1 270 
659E             1 271 HEXAGON_SPRITE:
659E 03 C0 0C 30 1 272 defb    $03, $C0, $0C, $30, $10, $08, $12, $08
65A2 10 08 12 08 1 272 
65A6 24 04 24 04 1 273 defb    $24, $04, $24, $04, $20, $04, $20, $04
65AA 20 04 20 04 1 273 
65AE 20 04 20 04 1 274 defb    $20, $04, $20, $04, $20, $24, $20, $24
65B2 20 24 20 24 1 274 
65B6 10 48 10 08 1 275 defb    $10, $48, $10, $08, $0C, $30, $03, $C0
65BA 0C 30 03 C0 1 275 
65BE 01 80 02 40 1 277 defb    $01, $80, $02, $40, $04, $20, $09, $10
65C2 04 20 09 10 1 277 
65C6 0A 10 0A 10 1 278 defb    $0A, $10, $0A, $10, $08, $10, $08, $10
65CA 08 10 08 10 1 278 
65CE 08 10 08 10 1 279 defb    $08, $10, $08, $10, $08, $50, $08, $50
65D2 08 50 08 50 1 279 
65D6 08 90 04 20 1 280 defb    $08, $90, $04, $20, $02, $40, $01, $80
65DA 02 40 01 80 1 280 
65DE 00 80 00 80 1 282 defb    $00, $80, $00, $80, $00, $80, $00, $80
65E2 00 80 00 80 1 282 
65E6 00 80 00 80 1 283 defb    $00, $80, $00, $80, $00, $80, $00, $80
65EA 00 80 00 80 1 283 
65EE 00 80 00 80 1 284 defb    $00, $80, $00, $80, $00, $80, $00, $80
65F2 00 80 00 80 1 284 
65F6 00 80 00 80 1 285 defb    $00, $80, $00, $80, $00, $80, $00, $80
65FA 00 80 00 80 1 285 
65FE 01 80 02 40 1 287 defb    $01, $80, $02, $40, $05, $A0, $0B, $D0
6602 05 A0 0B D0 1 287 
6606 0B D0 0B D0 1 288 defb    $0B, $D0, $0B, $D0, $0B, $D0, $0B, $D0
660A 0B D0 0B D0 1 288 
660E 0B D0 0B D0 1 289 defb    $0B, $D0, $0B, $D0, $0B, $D0, $0B, $D0
6612 0B D0 0B D0 1 289 
6616 0B D0 05 A0 1 290 defb    $0B, $D0, $05, $A0, $02, $40, $01, $80
661A 02 40 01 80 1 290 
661E 03 C0 0C 30 1 292 defb    $03, $C0, $0C, $30, $13, $C8, $17, $E8
6622 13 C8 17 E8 1 292 
6626 2F F4 2F F4 1 293 defb    $2F, $F4, $2F, $F4, $2F, $F4, $2F, $F4
662A 2F F4 2F F4 1 293 
662E 2F F4 2F F4 1 294 defb    $2F, $F4, $2F, $F4, $2F, $F4, $2F, $F4
6632 2F F4 2F F4 1 294 
6636 17 E8 13 C8 1 295 defb    $17, $E8, $13, $C8, $0C, $30, $03, $C0
663A 0C 30 03 C0 1 295 
663E             1 296 HEXAGON_TOKEN:
663E 07 E0 18 18 1 297 defb    $07, $E0, $18, $18, $27, $E4, $2F, $F4
6642 27 E4 2F F4 1 297 
6646 5F FA 5F FA 1 298 defb    $5F, $FA, $5F, $FA, $5F, $FA, $5F, $FA
664A 5F FA 5F FA 1 298 
664E 5F FA 5F FA 1 299 defb    $5F, $FA, $5F, $FA, $5F, $FA, $5F, $FA
6652 5F FA 5F FA 1 299 
6656 2F F4 27 E4 1 300 defb    $2F, $F4, $27, $E4, $18, $18, $07, $E0
665A 18 18 07 E0 1 300 
665E             1 302 ; ----------------------------------------------------------------------------------------------------------------------
665E             1 303 ; Board letter sprites
665E             1 304 ; ----------------------------------------------------------------------------------------------------------------------
665E             1 305 LETTER_SPRITES:
665E 3C 7E FF C3 1 306 defb    $3C, $7E, $FF, $C3, $F3, $C3, $D3, $C3, $7E, $3C    ; a
6662 F3 C3 D3 C3 1 306 
6666 7E 3C       1 306 
6668 3C 7E CF CF 1 307 defb    $3C, $7E, $CF, $CF, $C3, $CB, $CB, $C3, $7E, $3C    ; b
666C C3 CB CB C3 1 307 
6670 7E 3C       1 307 
6672 3C 7E FF E3 1 308 defb    $3C, $7E, $FF, $E3, $CF, $CF, $CF, $E3, $7E, $3C    ; c
6676 CF CF CF E3 1 308 
667A 7E 3C       1 308 
667C 3C 7E F3 F3 1 309 defb    $3C, $7E, $F3, $F3, $C3, $D3, $D3, $C3, $7E, $3C    ; d
6680 C3 D3 D3 C3 1 309 
6684 7E 3C       1 309 
6686 3C 7E FF E3 1 310 defb    $3C, $7E, $FF, $E3, $CB, $C3, $CF, $E3, $7E, $3C    ; e
668A CB C3 CF E3 1 310 
668E 7E 3C       1 310 
6690 3C 7E E3 CF 1 311 defb    $3C, $7E, $E3, $CF, $C7, $CF, $CF, $CF, $7E, $3C    ; f
6694 C7 CF CF CF 1 311 
6698 7E 3C       1 311 
669A 3C 7E FF E3 1 312 defb    $3C, $7E, $FF, $E3, $D3, $D3, $E3, $F3, $46, $3C    ; g
669E D3 D3 E3 F3 1 312 
66A2 46 3C       1 312 
66A4             1 314 ; ----------------------------------------------------------------------------------------------------------------------
66A4             1 315 ; Board number sprites
66A4             1 316 ; ----------------------------------------------------------------------------------------------------------------------
66A4             1 317 NUMBER_SPRITES:
66A4 3C 7E E7 C7 1 318 defb    $3C, $7E, $E7, $C7, $E7, $E7, $E7, $E7, $7E, $3C    ; 1
66A8 E7 E7 E7 E7 1 318 
66AC 7E 3C       1 318 
66AE 3C 7E E7 D3 1 319 defb    $3C, $7E, $E7, $D3, $F3, $E7, $CF, $C3, $7E, $3C    ; 2
66B2 F3 E7 CF C3 1 319 
66B6 7E 3C       1 319 
66B8 3C 7E C7 F3 1 320 defb    $3C, $7E, $C7, $F3, $E3, $F3, $F3, $C7, $7E, $3C    ; 3
66BC E3 F3 F3 C7 1 320 
66C0 7E 3C       1 320 
66C2 3C 7E D3 D3 1 321 defb    $3C, $7E, $D3, $D3, $C3, $F3, $F3, $F3, $7E, $3C    ; 4
66C6 C3 F3 F3 F3 1 321 
66CA 7E 3C       1 321 
66CC 3C 7E C3 CF 1 322 defb    $3C, $7E, $C3, $CF, $C7, $F3, $F3, $C7, $7E, $3C    ; 5
66D0 C7 F3 F3 C7 1 322 
66D4 7E 3C       1 322 
66D6 3C 7E E3 CF 1 323 defb    $3C, $7E, $E3, $CF, $C3, $CB, $CB, $C3, $7E, $3C    ; 6
66DA C3 CB CB C3 1 323 
66DE 7E 3C       1 323 
66E0 3C 7E C3 F3 1 324 defb    $3C, $7E, $C3, $F3, $F3, $E7, $E7, $E7, $7E, $3C    ; 7
66E4 F3 E7 E7 E7 1 324 
66E8 7E 3C       1 324 
66EA             1 326 ; ----------------------------------------------------------------------------------------------------------------------
66EA             1 327 ; Screen addresses for menu hexagons
66EA             1 328 ; ----------------------------------------------------------------------------------------------------------------------
66EA             1 329 MENU_HEXAGONS:
66EA 01 40 05 40 1 330 defw    $4001, $4005, $4008, $400C, $400F, $4013, $401A
66EE 08 40 0C 40 1 330 
66F2 0F 40 13 40 1 330 
66F6 1A 40       1 330 
66F8 45 40 48 40 1 331 defw    $4045, $4048, $4052, $405D, $4081, $4083, $4085
66FC 52 40 5D 40 1 331 
6700 81 40 83 40 1 331 
6704 85 40       1 331 
6706 88 40 8A 40 1 332 defw    $4088, $408A, $4091, $409D, $40C1, $40D0, $40D9
670A 91 40 9D 40 1 332 
670E C1 40 D0 40 1 332 
6712 D9 40       1 332 
6714 05 48 08 48 1 333 defw    $4805, $4808, $480A, $4813, $4819, $481B, $481D
6718 0A 48 13 48 1 333 
671C 19 48 1B 48 1 333 
6720 1D 48       1 333 
6722 0A 40 59 40 1 334 defw    $400A, $4059, $40BB, $40C5, $40D2, $480C, $401C
6726 BB 40 C5 40 1 334 
672A D2 40 0C 48 1 334 
672E 1C 40       1 334 
6730 41 40 50 40 1 335 defw    $4041, $4050, $40C8, $4801, $480F
6734 C8 40 01 48 1 335 
6738 0F 48       1 335 
673A             1 336 SAMPLE_BOARD_RED:
673A 69 48 6B 48 1 337 defw    $4869, $486B, $482C, $482E, $40EF, $40F1, $40B2
673E 2C 48 2E 48 1 337 
6742 EF 40 F1 40 1 337 
6746 B2 40       1 337 
6748 E9 40 6F 48 1 338 defw    $40E9, $486F, $4830, $40F3, $48AA, $40AC, $48EF
674C 30 48 F3 40 1 338 
6750 AA 48 AC 40 1 338 
6754 EF 48       1 338 
6756 2A 48 6D 48 1 339 defw    $482A, $486D, $40ED, $48AE
675A ED 40 AE 48 1 339 
675E             1 340 SAMPLE_BOARD_CYAN:
675E AE 40 EF 40 1 341 defw    $40AE, $40EF, $4830, $486F, $48AE, $48EF, $502E
6762 30 48 6F 48 1 341 
6766 AE 48 EF 48 1 341 
676A 2E 50       1 341 
676C AC 48 B4 48 1 342 defw    $48AC, $48B4, $486B, $486D, $482E, $40F1, $40F3
6770 6B 48 6D 48 1 342 
6774 2E 48 F1 40 1 342 
6778 F3 40       1 342 
677A 73 48 B2 48 1 343 defw    $4873, $48B2, $5030
677E 30 50       1 343 
6780             1 345 ; ----------------------------------------------------------------------------------------------------------------------
6780             1 346 ; Strings
6780             1 347 ; ----------------------------------------------------------------------------------------------------------------------
6780             1 348 STR_OPTIONS:
6780 53 74 61 72 1 349 defm    "Start new game\0"
6784 74 20 6E 65 1 349 
6788 77 20 67 61 1 349 
678C 6D 65 00    1 349 
678F 48 6F 77 20 1 350 defm    "How to play\0"
6793 74 6F 20 70 1 350 
6797 6C 61 79 00 1 350 
679B 43 72 65 64 1 351 defm    "Credits\0"
679F 69 74 73 00 1 351 
67A3             1 352 STR_CREDITS:
67A3 44 65 73 69 1 353 defm    "Design:     Antonio Luque\0"
67A7 67 6E 3A 20 1 353 
67AB 20 20 20 20 1 353 
67AF 41 6E 74 6F 1 353 
67B3 6E 69 6F 20 1 353 
67B7 4C 75 71 75 1 353 
67BB 65 00       1 353 
67BD 43 6F 64 65 1 354 defm    "Code:       Antonio Luque\0"
67C1 3A 20 20 20 1 354 
67C5 20 20 20 20 1 354 
67C9 41 6E 74 6F 1 354 
67CD 6E 69 6F 20 1 354 
67D1 4C 75 71 75 1 354 
67D5 65 00       1 354 
67D7 20 20 20 20 1 355 defm    "            Einar Saukas\0"
67DB 20 20 20 20 1 355 
67DF 20 20 20 20 1 355 
67E3 45 69 6E 61 1 355 
67E7 72 20 53 61 1 355 
67EB 75 6B 61 73 1 355 
67EF 00          1 355 
67F0 46 6F 6E 74 1 356 defm    "Font:       Einar Saukas\0"
67F4 3A 20 20 20 1 356 
67F8 20 20 20 20 1 356 
67FC 45 69 6E 61 1 356 
6800 72 20 53 61 1 356 
6804 75 6B 61 73 1 356 
6808 00          1 356 
6809 47 72 61 70 1 357 defm    "Graphics:   Einar Saukas\0"
680D 68 69 63 73 1 357 
6811 3A 20 20 20 1 357 
6815 45 69 6E 61 1 357 
6819 72 20 53 61 1 357 
681D 75 6B 61 73 1 357 
6821 00          1 357 
6822 20 20 20 20 1 358 defm    "            Antonio Luque\0"
6826 20 20 20 20 1 358 
682A 20 20 20 20 1 358 
682E 41 6E 74 6F 1 358 
6832 6E 69 6F 20 1 358 
6836 4C 75 71 75 1 358 
683A 65 00       1 358 
683C 50 72 65 73 1 359 STR_PRESSKEY            defm    "Press any key\0"
6840 73 20 61 6E 1 359 
6844 79 20 6B 65 1 359 
6848 79 00       1 359 
684A             1 360 STR_BUTTONS:
684A 4E 65 78 74 1 361 defm    "Next\0"
684E 00          1 361 
684F 42 61 63 6B 1 362 defm    "Back\0"
6853 00          1 362 
6854 52 45 44 00 1 363 STR_RED                 defm    "RED\0"
6858 43 59 41 4E 1 364 STR_CYAN                defm    "CYAN\0"
685C 00          1 364 
685D 43 6F 6E 6E 1 365 STR_HELP1               defm    "Connect\0"
6861 65 63 74 00 1 365 
6865 6C 65 66 74 1 366 STR_HELP2_RED           defm    "left and\0"
6869 20 61 6E 64 1 366 
686D 00          1 366 
686E 75 70 20 61 1 367 STR_HELP2_CYAN          defm    "up and\0"
6872 6E 64 00    1 367 
6875 72 69 67 68 1 368 STR_HELP3_RED           defm    "right\0"
6879 74 00       1 368 
687B 64 6F 77 6E 1 369 STR_HELP3_CYAN          defm    "down\0"
687F 00          1 369 
6880 62 6F 72 64 1 370 STR_HELP4               defm    "borders\0"
6884 65 72 73 00 1 370 
6888 74 6F 20 77 1 371 STR_HELP5               defm    "to win\0"
688C 69 6E 00    1 371 
688F             1 372 STR_HELP:
688F 57 69 6E 20 1 373 defm    "Win three\0"
6893 74 68 72 65 1 373 
6897 65 00       1 373 
6899 74 69 6D 65 1 374 defm    "times in\0"
689D 73 20 69 6E 1 374 
68A1 00          1 374 
68A2 61 20 72 6F 1 375 defm    "a row to\0"
68A6 77 20 74 6F 1 375 
68AA 00          1 375 
68AB 6C 65 76 65 1 376 defm    "level up\0"
68AF 6C 20 75 70 1 376 
68B3 00          1 376 
68B4 20 43 4F 4E 1 377 STR_CONGRATS            defm    " CONGRATULATIONS \0"
68B8 47 52 41 54 1 377 
68BC 55 4C 41 54 1 377 
68C0 49 4F 4E 53 1 377 
68C4 20 00       1 377 
68C6             1 378 STR_LAST_LEVEL:
68C6 57 65 6C 6C 1 379 defm    "Well done! Last level passed\0"
68CA 20 64 6F 6E 1 379 
68CE 65 21 20 4C 1 379 
68D2 61 73 74 20 1 379 
68D6 6C 65 76 65 1 379 
68DA 6C 20 70 61 1 379 
68DE 73 73 65 64 1 379 
68E2 00          1 379 
68E3 43 68 6F 6F 1 380 defm    "Choose level to restart, 1-4\0"
68E7 73 65 20 6C 1 380 
68EB 65 76 65 6C 1 380 
68EF 20 74 6F 20 1 380 
68F3 72 65 73 74 1 380 
68F7 61 72 74 2C 1 380 
68FB 20 31 2D 34 1 380 
68FF 00          1 380 
6900             1 382 ; ----------------------------------------------------------------------------------------------------------------------
6900             1 383 ; Based on "King" font https://spectrumcomputing.co.uk/entry/25245/ZX-Spectrum/ZX-ALFA
6900             1 384 ; this font was designed by Einar Saukas for Hex game
6900             1 385 ; ----------------------------------------------------------------------------------------------------------------------
6900             1 386 FONT:
6900 00 00 00 00 1 387 includebin "King+.bin"
6904 00 00 00 00 1 387 
6908 00 18 18 18 1 387 
690C 00 18 18 00 1 387 
6910 00 24 24 00 1 387 
6914 00 00 00 00 1 387 
6918 00 24 7E 24 1 387 
691C 24 7E 24 00 1 387 
6920 00 08 3E 28 1 387 
6924 3E 0A 3E 08 1 387 
6928 00 62 64 08 1 387 
692C 10 26 46 00 1 387 
6930 00 10 28 10 1 387 
6934 2A 44 3A 00 1 387 
6938 00 18 30 00 1 387 
693C 00 00 00 00 1 387 
6940 06 0C 08 08 1 387 
6944 08 0C 06 00 1 387 
6948 60 30 10 10 1 387 
694C 10 30 60 00 1 387 
6950 00 00 14 08 1 387 
6954 3E 08 14 00 1 387 
6958 00 00 08 08 1 387 
695C 3E 08 08 00 1 387 
6960 00 00 00 00 1 387 
6964 00 0C 18 30 1 387 
6968 00 00 00 7E 1 387 
696C 7E 00 00 00 1 387 
6970 00 00 00 00 1 387 
6974 30 70 70 00 1 387 
6978 02 06 0C 18 1 387 
697C 30 60 40 00 1 387 
6980 00 7E 62 62 1 387 
6984 62 62 7E 00 1 387 
6988 00 18 38 18 1 387 
698C 18 18 3C 00 1 387 
6990 00 38 4C 4C 1 387 
6994 18 30 7C 00 1 387 
6998 00 3C 62 0C 1 387 
699C 06 66 3C 00 1 387 
69A0 00 30 30 30 1 387 
69A4 30 34 3E 04 1 387 
69A8 00 7E 60 7E 1 387 
69AC 06 66 3C 00 1 387 
69B0 00 30 60 7C 1 387 
69B4 66 66 3C 00 1 387 
69B8 00 7E 46 0C 1 387 
69BC 18 30 60 00 1 387 
69C0 00 3C 66 3C 1 387 
69C4 66 66 3C 00 1 387 
69C8 00 3C 66 66 1 387 
69CC 3E 06 3C 00 1 387 
69D0 00 00 08 18 1 387 
69D4 00 08 18 00 1 387 
69D8 00 00 04 0C 1 387 
69DC 00 0C 18 30 1 387 
69E0 00 00 04 08 1 387 
69E4 10 08 04 00 1 387 
69E8 00 00 00 3E 1 387 
69EC 00 3E 00 00 1 387 
69F0 00 00 10 08 1 387 
69F4 04 08 10 00 1 387 
69F8 00 3C 42 04 1 387 
69FC 08 00 08 00 1 387 
6A00 00 3C 4A 56 1 387 
6A04 5E 40 3C 00 1 387 
6A08 00 7E 46 46 1 387 
6A0C 7E 46 46 00 1 387 
6A10 00 7C 62 7C 1 387 
6A14 62 62 7C 00 1 387 
6A18 00 7E 66 60 1 387 
6A1C 60 66 7E 00 1 387 
6A20 00 7C 46 46 1 387 
6A24 46 46 7C 00 1 387 
6A28 00 7E 60 7C 1 387 
6A2C 60 60 7E 00 1 387 
6A30 00 7E 60 7C 1 387 
6A34 60 60 60 00 1 387 
6A38 00 3E 62 60 1 387 
6A3C 66 66 3E 00 1 387 
6A40 00 62 62 7E 1 387 
6A44 62 62 62 00 1 387 
6A48 00 18 18 18 1 387 
6A4C 18 18 18 00 1 387 
6A50 00 0C 0C 0C 1 387 
6A54 0C 4C 38 00 1 387 
6A58 00 66 64 68 1 387 
6A5C 7E 46 66 00 1 387 
6A60 00 60 60 60 1 387 
6A64 60 60 7E 00 1 387 
6A68 00 7E 56 56 1 387 
6A6C 56 56 56 00 1 387 
6A70 00 7E 46 46 1 387 
6A74 46 46 46 00 1 387 
6A78 00 7E 62 62 1 387 
6A7C 62 62 7E 00 1 387 
6A80 00 7E 62 62 1 387 
6A84 7E 60 60 00 1 387 
6A88 00 7C 64 64 1 387 
6A8C 64 64 7E 00 1 387 
6A90 00 7C 62 64 1 387 
6A94 7C 46 46 00 1 387 
6A98 00 7E 60 7E 1 387 
6A9C 06 06 7E 00 1 387 
6AA0 00 7E 18 18 1 387 
6AA4 18 18 18 00 1 387 
6AA8 00 62 62 62 1 387 
6AAC 62 62 7E 00 1 387 
6AB0 00 62 62 62 1 387 
6AB4 62 34 18 00 1 387 
6AB8 00 6A 6A 6A 1 387 
6ABC 6A 6A 7E 00 1 387 
6AC0 00 62 62 34 1 387 
6AC4 4E 46 46 00 1 387 
6AC8 00 62 62 7E 1 387 
6ACC 18 18 18 00 1 387 
6AD0 00 7E 06 1C 1 387 
6AD4 38 60 7E 00 1 387 
6AD8 00 0E 08 08 1 387 
6ADC 08 08 0E 00 1 387 
6AE0 00 00 40 20 1 387 
6AE4 10 08 04 00 1 387 
6AE8 00 70 10 10 1 387 
6AEC 10 10 70 00 1 387 
6AF0 00 08 1C 2A 1 387 
6AF4 08 08 08 08 1 387 
6AF8 00 00 00 00 1 387 
6AFC 00 00 00 FF 1 387 
6B00 0C 12 10 38 1 387 
6B04 10 10 3E 00 1 387 
6B08 00 00 3C 06 1 387 
6B0C 7E 46 7E 00 1 387 
6B10 00 60 60 7E 1 387 
6B14 62 62 7E 00 1 387 
6B18 00 00 7E 62 1 387 
6B1C 60 62 7E 00 1 387 
6B20 00 06 06 7E 1 387 
6B24 46 46 7E 00 1 387 
6B28 00 00 7E 46 1 387 
6B2C 7E 60 7E 00 1 387 
6B30 00 1E 30 3C 1 387 
6B34 30 30 30 00 1 387 
6B38 00 00 7E 46 1 387 
6B3C 46 3E 06 3E 1 387 
6B40 00 60 60 7C 1 387 
6B44 66 66 66 00 1 387 
6B48 00 18 00 38 1 387 
6B4C 18 18 3C 00 1 387 
6B50 00 0C 00 0C 1 387 
6B54 0C 0C 4C 38 1 387 
6B58 00 20 2C 38 1 387 
6B5C 38 2C 26 00 1 387 
6B60 00 18 18 18 1 387 
6B64 18 18 0E 00 1 387 
6B68 00 00 6C 56 1 387 
6B6C 56 56 46 00 1 387 
6B70 00 00 7C 46 1 387 
6B74 46 46 46 00 1 387 
6B78 00 00 3C 46 1 387 
6B7C 46 46 3C 00 1 387 
6B80 00 00 7C 66 1 387 
6B84 66 7C 60 60 1 387 
6B88 00 00 3E 46 1 387 
6B8C 46 3E 06 06 1 387 
6B90 00 00 3C 62 1 387 
6B94 60 60 60 00 1 387 
6B98 00 00 3C 60 1 387 
6B9C 3C 06 3C 00 1 387 
6BA0 00 30 78 30 1 387 
6BA4 30 30 1C 00 1 387 
6BA8 00 00 46 46 1 387 
6BAC 46 46 3C 00 1 387 
6BB0 00 00 46 46 1 387 
6BB4 2C 3C 18 00 1 387 
6BB8 00 00 46 56 1 387 
6BBC 56 56 2C 00 1 387 
6BC0 00 00 46 2C 1 387 
6BC4 18 2C 46 00 1 387 
6BC8 00 00 46 46 1 387 
6BCC 46 3E 06 3C 1 387 
6BD0 00 00 7E 0C 1 387 
6BD4 18 30 7E 00 1 387 
6BD8 00 0E 08 30 1 387 
6BDC 08 08 0E 00 1 387 
6BE0 00 08 08 08 1 387 
6BE4 08 2A 1C 08 1 387 
6BE8 00 70 10 0C 1 387 
6BEC 10 10 70 00 1 387 
6BF0 00 14 28 00 1 387 
6BF4 00 00 00 00 1 387 

; File #2: C:\Users\Antonio Luque\source\repos\Hex\Z80CodeFiles\Main.z80asm

6BF8             2 1 ; ----------------------------------------------------------------------------------------------------------------------
6BF8             2 2 ; Main.z80asm
6BF8             2 3 ; Coded by Antonio Luque
6BF8             2 4 ; ----------------------------------------------------------------------------------------------------------------------
6BF8             2 6 CYAN_COLOR              equ     %00000101                   ; attributes: flash 0, bright 0, paper 0, ink 5
6BF8             2 7 RED_COLOR               equ     %00000010                   ; attributes: flash 0, bright 0, paper 0, ink 2
6BF8             2 9 ent     $
6BF8             2 10 ; ----------------------------------------------------------------------------------------------------------------------
6BF8             2 11 ; Entry point of the program - Initialization
6BF8             2 12 ; ----------------------------------------------------------------------------------------------------------------------
6BF8 F3          2 14 di                                  ; disable interrupts
6BF9             2 16 ; allocate jump to interrupt routine at address $5CA1 (pointed by IY+103)
6BF9 21 32 76    2 18 ld      hl, Timer_Interrupt         ; HL points to interrupt routine address
6BFC FD 36 67 C3 2 19 ld      (iy+103), $C3               ; 'jp' opcode
6C00 FD 75 68    2 20 ld      (iy+104), l                 ; Low byte of interrupt routine address
6C03 FD 74 69    2 21 ld      (iy+105), h                 ; High byte of interrupt routine address
6C06 3E 2E       2 22 ld      a, $2E                      ; High byte of interrupt vector address
6C08 ED 47       2 23 ld      i, a                        ; set interrupt vector address
6C0A ED 5E       2 24 im      2                           ; set interrupt mode 2
6C0C             2 26 ; When the ULA triggers an interrupt it doesn't put any device ID in the data bus. When no value
6C0C             2 27 ; is placed on the Spectrum's data bus, this acquires the value of 8 signals one ($FF). So, the
6C0C             2 28 ; resultant vector address is formed as follows:
6C0C             2 29 ;
6C0C             2 30 ;                           ( I * $100 ) + $FF = $2E00 + $FF = $2EFF
6C0C             2 31 ; Source: 
6C0C             2 32 ; https://wiki.speccy.org/cursos/ensamblador/interrupciones#curiosidades-y-consideraciones
6C0C             2 33 ;
6C0C             2 34 ; The value pointed at ROM address $2EFF is $5CA1. This address belongs to the calculator's
6C0C             2 35 ; memory area and it is used by some ROM routines, but it is no longer used by HEX2 program.
6C0C 31 00 60    2 37 ld      sp, STACK                   ; move stack
6C0F AF          2 39 xor     a                           ; A = 0
6C10 D3 FE       2 40 out     ($FE), a                    ; set border color (black)
6C12 CD 83 79    2 41 call    Screen_Menu                 ; show main menu and wait for an option
6C15             2 43 ; ----------------------------------------------------------------------------------------------------------------------
6C15             2 44 ; Start new game
6C15             2 45 ; ----------------------------------------------------------------------------------------------------------------------
6C15             2 46 Main_Start
6C15 CD 18 77    2 47 call    Screen_Clear                ; fill in black the whole screen area and attributes area
6C18 CD 25 77    2 48 call    Screen_Letters              ; draw the two rows of letters on the screen (a..g)
6C1B CD 51 77    2 49 call    Screen_Numbers              ; draw the two columns of numbers on the screen (1..7)
6C1E CD 90 77    2 50 call    Screen_Frame                ; draw the screen frame
6C21 CD E8 77    2 51 call    Screen_Tokens               ; draw the fixed tokens on the screen
6C24 CD 07 78    2 52 call    Screen_Timer_Quotes         ; draw the timer quotes (' ") on the screen
6C27 CD 4A 78    2 53 call    Screen_Color_Statics        ; apply color to statics items of the screen
6C2A FB          2 55 ei                                  ; enable interrupts
6C2B             2 57 ; ----------------------------------------------------------------------------------------------------------------------
6C2B             2 58 ; New level
6C2B             2 59 ; ----------------------------------------------------------------------------------------------------------------------
6C2B             2 60 Main_New_Level
6C2B 3E 04       2 61 ld      a, 4                        ; maximum level
6C2D 21 9D 61    2 62 ld      hl, GAME_LEVEL              ; HL points to game level address
6C30 BE          2 63 cp      (hl)                        ; level 4 achieved?
6C31 20 05       2 64 jr      nz, Main_Increment_Level    ; no, increment game level
6C33 CD 84 78    2 65 call    Screen_Last_Level           ; show last level screen and input game level
6C36 18 DD       2 66 jr      Main_Start                  ; start a new game
6C38             2 67 Main_Increment_Level
6C38 34          2 68 inc     (hl)                        ; increment game level
6C39 CD 27 79    2 69 call    Screen_Frame_Color          ; set up frame color depending on current level
6C3C CD 16 79    2 70 call    Screen_Clear_ThreeRow       ; clear all three-in-a-row marks
6C3F AF          2 71 xor     a                           ; A = 0
6C40 32 11 62    2 72 ld      (THREE_ROW), a              ; initialize three-in-a-row counter
6C43             2 74 ; ----------------------------------------------------------------------------------------------------------------------
6C43             2 75 ; Start new match
6C43             2 76 ; ----------------------------------------------------------------------------------------------------------------------
6C43             2 77 Main_Start_Match
6C43             2 78 ; set up timers and clear last messages
6C43 CD C7 76    2 80 call    Timer_Reset                 ; reset timers
6C46 CD B2 76    2 81 call    Timer_Display_All           ; display timers
6C49 CD 41 6F    2 82 call    Print_Clear_Alert           ; clear last alert
6C4C 3E 02       2 83 ld      a, RED_COLOR                ; set red color in A
6C4E 32 9E 61    2 84 ld      (TOKEN_COLOR), a            ; save token color
6C51 CD 68 6F    2 85 call    Print_Clear_Move            ; clear red player last move
6C54             2 87 ; swap players' colors
6C54 3A 9F 61    2 89 ld      a, (PLAYER_COLOR)           ; get current player color
6C57 EE 07       2 90 xor     %00000111                   ; swap color
6C59 32 9F 61    2 91 ld      (PLAYER_COLOR), a           ; save swapped player color
6C5C CD 24 6F    2 92 call    Print_Players               ; print "Player" and "Speccy" strings
6C5F             2 94 ; initialize boards
6C5F 21 00 7D    2 96 ld      hl, CYAN_POSITIONS          ; HL points to cyan positions address
6C62 11 01 7D    2 97 ld      de, CYAN_POSITIONS+1        ; DE points to cyan positions (+1) address
6C65 36 00       2 98 ld      (hl), EMPTY                 ; set first position as empty
6C67 01 FF 01    2 99 ld      bc, (256*2)-1               ; length of cyan + red positions areas (-1 already set)
6C6A ED B0       2 100 ldir                                ; fill the rest of positions as empty
6C6C CD A4 6D    2 102 call    Draw_Board                  ; draw an empty hexagons board
6C6F 3E 0A       2 104 ld      a, 10
6C71 32 DA 6D    2 105 ld      (Draw_Token_Delay+1), a     ; set delay duration for animate hexagons
6C74 3E 01       2 106 ld      a, 1
6C76 32 9B 61    2 107 ld      (MOVE_NUMBER), a            ; initialize move number
6C79 32 EB 62    2 108 ld      (TIMER_FLAG), a             ; set cyan timer on
6C7C 3E 05       2 109 ld      a, CYAN_COLOR               ; first player token color
6C7E             2 111 ; ----------------------------------------------------------------------------------------------------------------------
6C7E             2 112 ; Process players moves - Match loop
6C7E             2 113 ; ----------------------------------------------------------------------------------------------------------------------
6C7E             2 114 Main_Match_Loop
6C7E             2 115 ; check player turn
6C7E 32 9E 61    2 117 ld      (TOKEN_COLOR), a            ; save current token color
6C81 21 9F 61    2 118 ld      hl, PLAYER_COLOR            ; HL points to player color address
6C84 BE          2 119 cp      (hl)                        ; is player color = current token color?
6C85 28 05       2 120 jr      z, Main_Player_Move         ; yes, process player move
6C87 CD F4 6C    2 121 call    Main_GetSpeccy_Move         ; get the speccy move
6C8A 18 03       2 122 jr      Main_Update_Board           ; update board position
6C8C             2 123 Main_Player_Move
6C8C CD 39 6D    2 124 call    Main_GetPlayer_Move         ; get a legal (empty position) player move 
6C8F             2 125 Main_Update_Board
6C8F             2 126 ; update positions with player/speccy move
6C8F CD 12 71    2 128 call    PathFinder_Friend           ; get player/speccy side
6C92 CD 1C 71    2 129 call    PathFinder_PutToken         ; put token on cyan and red positions
6C95 CD BF 6D    2 130 call    Draw_Token                  ; animate hexagon sprite on the screen
6C98             2 132 ; check win condition
6C98 3A 9E 61    2 134 ld      a, (TOKEN_COLOR)            ; get current token color
6C9B FE 05       2 135 cp      CYAN_COLOR                  ; is token color = cyan?
6C9D 28 05       2 136 jr      z, Main_Cyan_Score          ; yes, get score for cyan player
6C9F CD DB 71    2 137 call    PathFinder_Red_LeftRight    ; get score for red player
6CA2 18 03       2 138 jr      Main_Check_Winner           ; check victory condition
6CA4             2 139 Main_Cyan_Score
6CA4 CD 67 71    2 140 call    PathFinder_Cyan_UpDown      ; get score for cyan player
6CA7             2 141 Main_Check_Winner
6CA7 B7          2 142 or      a                           ; player/speccy won?
6CA8 28 13       2 143 jr      z, Main_Match_End           ; yes, match ends
6CAA 21 9B 61    2 145 ld      hl, MOVE_NUMBER             ; HL points to move number address
6CAD 34          2 146 inc     (hl)                        ; increment move number
6CAE             2 148 ; swap players' timers and token color
6CAE 3A EB 62    2 150 ld      a, (TIMER_FLAG)             ; get current timer flag
6CB1 EE 03       2 151 xor     %00000011                   ; swap timer flag
6CB3 32 EB 62    2 152 ld      (TIMER_FLAG), a             ; save swapped timer flag
6CB6 3A 9E 61    2 154 ld      a, (TOKEN_COLOR)            ; get current token color
6CB9 EE 07       2 155 xor     %00000111                   ; swap token color
6CBB 18 C1       2 156 jr      Main_Match_Loop             ; repeat match loop
6CBD             2 158 ; ----------------------------------------------------------------------------------------------------------------------
6CBD             2 159 ; Current player wins the match
6CBD             2 160 ; ----------------------------------------------------------------------------------------------------------------------
6CBD             2 161 Main_Match_End
6CBD 21 EB 62    2 162 ld      hl, TIMER_FLAG              ; HL points to timer flag address
6CC0 36 00       2 163 ld      (hl), 0                     ; stop timers
6CC2 3E 04       2 164 ld      a, 4
6CC4 32 DA 6D    2 165 ld      (Draw_Token_Delay+1), a     ; set delay duration for animate hexagons
6CC7 CD BC 75    2 166 call    PathFinder_BrightPath       ; animate and highlight the winner path
6CCA 11 3D 62    2 167 ld      de, STR_WINNER              ; DE points to "WINS" string address
6CCD CD 48 6F    2 168 call    Print_Alert                 ; print string
6CD0 3A 9E 61    2 170 ld      a, (TOKEN_COLOR)            ; get current token color
6CD3 21 9F 61    2 171 ld      hl, PLAYER_COLOR            ; get player color
6CD6 BE          2 172 cp      (hl)                        ; is player color = current token color?
6CD7 21 11 62    2 173 ld      hl, THREE_ROW               ; HL points to three-in-a-row counter
6CDA 28 04       2 174 jr      z, Main_ThreeRow_Increment  ; yes, go to increment three-in-a-row counter
6CDC 35          2 175 dec     (hl)                        ; decrement three-in-a-row counter
6CDD F2 E1 6C    2 176 jp      p, Main_ThreeRow_Show       ; if not negative (-1), show marks
6CE0             2 177 Main_ThreeRow_Increment
6CE0 34          2 178 inc     (hl)                        ; increment three-in-a-row counter
6CE1             2 179 Main_ThreeRow_Show
6CE1 CD FA 78    2 180 call    Screen_ThreeRow             ; show three-in-a-row marks
6CE4 3E FF       2 181 ld      a, 255                      ; set delay duration
6CE6 CD 95 6D    2 182 call    Main_Delay                  ; execute delay
6CE9 3A 11 62    2 183 ld      a, (THREE_ROW)              ; check three row counter
6CEC FE 03       2 184 cp      3                           ; is it 3?
6CEE CA 2B 6C    2 185 jp      z, Main_New_Level           ; yes, start a new level
6CF1 C3 43 6C    2 186 jp      Main_Start_Match            ; start a new match
6CF4             2 188 ; ----------------------------------------------------------------------------------------------------------------------
6CF4             2 189 ; Main_GetSpeccy_Move: get the speccy move
6CF4             2 190 ;
6CF4             2 191 ; Input:    -
6CF4             2 192 ;
6CF4             2 193 ; Output:   BC = hexagon board indexes (B:column, C:row)
6CF4             2 194 ;           HL = CYAN_POSITIONS move address
6CF4             2 195 ;
6CF4             2 196 ; Uses:     MOVE_NUMBER (current move number)
6CF4             2 197 ;           GAME_LEVEL (current game level)
6CF4             2 198 ;           AI_DEPTH (recursion depth level)
6CF4             2 199 ;           STR_MOVE (formatted move string)
6CF4             2 200 ;
6CF4             2 201 ; Destroys: A, DE, IX, IY
6CF4             2 202 ; ----------------------------------------------------------------------------------------------------------------------
6CF4             2 203 Main_GetSpeccy_Move:
6CF4 CD 61 6F    2 204 call    Print_Wait                  ; print "WAIT" message
6CF7 3A 9B 61    2 205 ld      a, (MOVE_NUMBER)            ; get move number
6CFA 3D          2 206 dec     a                           ; is it cyan first move?
6CFB 28 2A       2 207 jr      z, Main_GetSpeccy_Book      ; yes, get move from opening book
6CFD DD 21 00 7F 2 209 ld      ix, CANDIDATES              ; IX points to candidates list address
6D01 3A 9D 61    2 210 ld      a, (GAME_LEVEL)             ; get game level
6D04 32 9A 61    2 211 ld      (AI_DEPTH), a               ; save recursion depth level
6D07 CD 12 71    2 212 call    PathFinder_Friend           ; get speccy side
6D0A CD B4 6F    2 213 call    BRAINIAC_best_move          ; get speccy best move
6D0D 6B          2 214 ld      l, e                        ; set node index in L
6D0E             2 215 Main_GetSpeccy_Positions
6D0E 26 7D       2 216 ld      h, CYAN_POSITIONS/256       ; HL points to CYAN_POSITIONS move address
6D10 E5          2 217 push    hl                          ; store CYAN_POSITIONS move address
6D11 CD 84 6D    2 218 call    Main_Board2Indexes          ; convert board position to indexes
6D14 78          2 219 ld      a, b                        ; get 1..7 column
6D15 C6 60       2 220 add     a, $60                      ; adjust to charset ('a'..'g')
6D17 32 18 62    2 221 ld      (STR_MOVE+0), a             ; put it on formatted move string
6D1A 79          2 222 ld      a, c                        ; get 1..7 row
6D1B C6 30       2 223 add     a, $30                      ; adjust to charset ('1'..'7')
6D1D 32 1B 62    2 224 ld      (STR_MOVE+3), a             ; put it on formatted move string
6D20 C5          2 225 push    bc                          ; store hexagon board indexes
6D21 CD 6F 6F    2 226 call    Print_Move                  ; print Speccy move
6D24 C1          2 227 pop     bc                          ; restore hexagon board indexes
6D25 E1          2 228 pop     hl                          ; restore CYAN_POSITIONS move address
6D26 C9          2 229 ret
6D27             2 230 Main_GetSpeccy_Book
6D27 ED 5F       2 231 ld      a, r                        ; get a pseudo-random number (0..127)
6D29 E6 1F       2 232 and     %00011111                   ; number is in range (0..31)
6D2B FE 1B       2 233 cp      27                          ; is it >= 27?
6D2D 30 F8       2 234 jr      nc, Main_GetSpeccy_Book     ; yes, repeat until range is (0..26)
6D2F 21 D0 62    2 235 ld      hl, OPENINGS                ; HL points to opening book address
6D32 16 00       2 236 ld      d, 0                        ; set index in DE
6D34 5F          2 237 ld      e, a
6D35 19          2 238 add     hl, de                      ; HL points to move index address
6D36 6E          2 239 ld      l, (hl)                     ; get move from opening book
6D37 18 D5       2 240 jr      Main_GetSpeccy_Positions    ; get speccy move positions
6D39             2 242 ; ----------------------------------------------------------------------------------------------------------------------
6D39             2 243 ; Main_GetPlayer_Move: get a legal (empty hexagon) move from player
6D39             2 244 ;
6D39             2 245 ; Input:    -
6D39             2 246 ;
6D39             2 247 ; Output:   BC = hexagon board indexes (B:column, C:row)
6D39             2 248 ;           HL = CYAN_POSITIONS move address
6D39             2 249 ;
6D39             2 250 ; Uses:     STR_MOVE (formatted move string)
6D39             2 251 ;
6D39             2 252 ; Destroys: A, DE, IX
6D39             2 253 ; ----------------------------------------------------------------------------------------------------------------------
6D39             2 254 Main_GetPlayer_Move:
6D39 CD 68 6F    2 255 call    Print_Clear_Move            ; clear player last move
6D3C CD 40 6E    2 256 call    Input_Move                  ; wait for input player move
6D3F 7E          2 257 ld      a, (hl)                     ; get column ('a'..'g') from move
6D40 32 18 62    2 258 ld      (STR_MOVE+0), a             ; put it on formatted move string
6D43 D6 60       2 259 sub     $60                         ; convert to number (1..7)
6D45 47          2 260 ld      b, a                        ; set column index in B
6D46 23          2 261 inc     hl                          ; HL points to move-row address
6D47 7E          2 262 ld      a, (hl)                     ; get row ('1'..'7')
6D48 32 1B 62    2 263 ld      (STR_MOVE+3), a             ; put it on formatted move string
6D4B D6 30       2 264 sub     $30                         ; convert to number (1..7)
6D4D 4F          2 265 ld      c, a                        ; set row index in C
6D4E C5          2 266 push    bc                          ; store board indexes
6D4F CD 6F 6F    2 267 call    Print_Move                  ; print player move
6D52 C1          2 268 pop     bc                          ; restore board indexes
6D53 11 50 62    2 269 ld      de, BOARD_COORDINATES       ; DE points to board coordinates address
6D56 CD 77 6D    2 270 call    Main_Search_Table           ; search board position in board coordinates
6D59 6E          2 271 ld      l, (hl)                     ; set board position of player move
6D5A 26 7D       2 272 ld      h, CYAN_POSITIONS/256       ; HL points to CYAN_POSITIONS move address
6D5C 3E 00       2 273 ld      a, EMPTY                    ; check position
6D5E BE          2 274 cp      (hl)                        ; is position empty?
6D5F C8          2 275 ret     z                           ; yes, return
6D60             2 277 ; illegal player move (position not empty)
6D60 11 31 62    2 279 ld      de, STR_FILLED              ; DE points to "FILLED" string address
6D63 CD 48 6F    2 280 call    Print_Alert                 ; print string
6D66 DD 21 F7 64 2 281 ld      ix, FILLED_FX               ; IX points to filled tone parameters address
6D6A CD DC 76    2 282 call    Sound_FX                    ; play sound fx
6D6D 3E 50       2 283 ld      a, 80                       ; set delay counter
6D6F CD 95 6D    2 284 call    Main_Delay                  ; execute delay
6D72 CD 41 6F    2 285 call    Print_Clear_Alert           ; clear alert message
6D75 18 C2       2 286 jr      Main_GetPlayer_Move         ; repeat player process until move is legal
6D77             2 288 ; ----------------------------------------------------------------------------------------------------------------------
6D77             2 289 ; Main_Search_Table: search an element in a 8x8 bytes table
6D77             2 290 ;
6D77             2 291 ; Input:    BC = element indexes (B = column, C = row)
6D77             2 292 ;           DE = table address in which to search for the element
6D77             2 293 ;
6D77             2 294 ; Output:   DE = address of first element in the C row of the table
6D77             2 295 ;           HL = address of the element in the BC indexes of the table
6D77             2 296 ;
6D77             2 297 ; Destroys: -
6D77             2 298 ; ----------------------------------------------------------------------------------------------------------------------
6D77             2 299 Main_Search_Table:
6D77 26 00       2 300 ld      h, 0                        ; first, get the C row in table
6D79 69          2 301 ld      l, c                        ; set index in HL
6D7A 29          2 302 add     hl, hl                      ; a row is 8 bytes long
6D7B 29          2 303 add     hl, hl
6D7C 29          2 304 add     hl, hl
6D7D 19          2 305 add     hl, de                      ; HL points to the address of C row 
6D7E EB          2 306 ex      de, hl                      ; DE points to the address of C row
6D7F 26 00       2 307 ld      h, 0                        ; go for to the B column
6D81 68          2 308 ld      l, b                        ; set index in HL
6D82 19          2 309 add     hl, de                      ; HL points to the address of BC indexes
6D83 C9          2 310 ret
6D84             2 312 ; ----------------------------------------------------------------------------------------------------------------------
6D84             2 313 ; Main_Board2Indexes: convert a board position into a board indexes
6D84             2 314 ;
6D84             2 315 ; Input:    L  = board position
6D84             2 316 ;
6D84             2 317 ; Output:   BC = board indexes (B = column, C = row)
6D84             2 318 ;
6D84             2 319 ; Destroys: HL
6D84             2 320 ; ----------------------------------------------------------------------------------------------------------------------
6D84             2 321 Main_Board2Indexes:
6D84 7D          2 322 ld      a, l                        ; set board position in A to compare later
6D85 21 90 62    2 324 ld      hl, BOARD_COORDINATES+64    ; HL points to last board position address (+1)
6D88 0E 07       2 325 ld      c, 7                        ; 7 rows
6D8A             2 326 Board2Indexes_Row
6D8A 06 07       2 327 ld      b, 7                        ; 7 columns
6D8C             2 328 Board2Indexes_Col
6D8C 2B          2 329 dec     hl                          ; move HL to next board position address
6D8D BE          2 330 cp      (hl)                        ; is A the position?
6D8E C8          2 331 ret     z                           ; yes, return board indexes
6D8F 10 FB       2 332 djnz    Board2Indexes_Col           ; repeat for each column
6D91 2B          2 333 dec     hl                          ; skip borders
6D92 0D          2 334 dec     c                           ; decrement row
6D93 18 F5       2 335 jr      Board2Indexes_Row           ; loop until find position
6D95             2 337 ; ----------------------------------------------------------------------------------------------------------------------
6D95             2 338 ; Main_Delay: execute a delay
6D95             2 339 ;
6D95             2 340 ; Input:    A = delay counter
6D95             2 341 ;
6D95             2 342 ; Output:   -
6D95             2 343 ;
6D95             2 344 ; Destroys: A
6D95             2 345 ; ----------------------------------------------------------------------------------------------------------------------
6D95             2 346 Main_Delay:
6D95 C5          2 347 push    bc                          ; store register
6D96             2 348 Main_Delay_Loop
6D96 0E 0A       2 349 ld      c, 10                       ; set outer loop counter
6D98             2 350 Main_Delay_Loop1
6D98 06 00       2 351 ld      b, 0                        ; set inner loop counter (256)
6D9A             2 352 Main_Delay_Loop2
6D9A 10 FE       2 353 djnz    Main_Delay_Loop2            ; repeat until B=0
6D9C 0D          2 354 dec     c                           ; decrement outer loop counter
6D9D 20 F9       2 355 jr      nz, Main_Delay_Loop1        ; repeat until C=0
6D9F 3D          2 356 dec     a                           ; decrement delay counter
6DA0 20 F4       2 357 jr      nz, Main_Delay_Loop         ; repeat until A=0
6DA2 C1          2 358 pop     bc                          ; restore register
6DA3 C9          2 359 ret

; File #3: C:\Users\Antonio Luque\source\repos\Hex\Z80CodeFiles\Draw.z80asm

6DA4             3 1 ; ----------------------------------------------------------------------------------------------------------------------
6DA4             3 2 ; Draw.z80asm
6DA4             3 3 ; Coded by Antonio Luque
6DA4             3 4 ; ----------------------------------------------------------------------------------------------------------------------
6DA4             3 6 ; ----------------------------------------------------------------------------------------------------------------------
6DA4             3 7 ; Draw_Board: draw an empty 7x7 hexagons board on the screen
6DA4             3 8 ;
6DA4             3 9 ; Input:    -
6DA4             3 10 ;
6DA4             3 11 ; Output:   -
6DA4             3 12 ;
6DA4             3 13 ; Uses:     TOKEN_COLOR (current token color)
6DA4             3 14 ;
6DA4             3 15 ; Destroys: A, BC, DE, HL, IXL
6DA4             3 16 ; ----------------------------------------------------------------------------------------------------------------------
6DA4             3 17 Draw_Board:
6DA4 3E 07       3 18 ld      a, WHITE                    ; set empty hexagon color
6DA6 32 9E 61    3 19 ld      (TOKEN_COLOR), a            ; store hexagon color
6DA9 0E 07       3 20 ld      c, 7                        ; 7 rows
6DAB             3 21 Draw_Board_Row
6DAB 06 07       3 22 ld      b, 7                        ; 7 columns
6DAD             3 23 Draw_Board_Column
6DAD CD EC 6D    3 24 call    Draw_GetHEX_Screen          ; get hexagon screen address
6DB0 CD 24 6E    3 25 call    Draw_Hexagon_Color          ; apply color to hexagon area
6DB3 11 7E 65    3 26 ld      de, HEXAGON_EMPTY           ; DE points to hexagon sprite address
6DB6 CD F6 6D    3 27 call    Draw_Sprite_Hexagon         ; draw an empty hexagon at screen address
6DB9 10 F2       3 28 djnz    Draw_Board_Column           ; repeat for each column
6DBB 0D          3 29 dec     c                           ; decrement row
6DBC 20 ED       3 30 jr      nz, Draw_Board_Row          ; repeat for each row
6DBE C9          3 31 ret
6DBF             3 33 ; ----------------------------------------------------------------------------------------------------------------------
6DBF             3 34 ; Draw_Token: animate an hexagon sprite on the screen
6DBF             3 35 ;
6DBF             3 36 ; Input:    BC = hexagon board indexes (B:column, C:row)
6DBF             3 37 ;
6DBF             3 38 ; Output:   -
6DBF             3 39 ;
6DBF             3 40 ; Uses:     TIMER_FLAG (0 = timer stopped, 1 = cyan timer on, 2 = red timer on)
6DBF             3 41 ;
6DBF             3 42 ; Destroys: A, BC, DE, HL, IX
6DBF             3 43 ; ----------------------------------------------------------------------------------------------------------------------
6DBF             3 44 Draw_Token:
6DBF 21 EB 62    3 45 ld      hl, TIMER_FLAG              ; HL points to timer flag address
6DC2 7E          3 46 ld      a, (hl)                     ; save current status
6DC3 36 00       3 47 ld      (hl), 0                     ; stop timer
6DC5 F5          3 48 push    af                          ; store previous timer status
6DC6 CD EC 6D    3 49 call    Draw_GetHex_Screen          ; get hexagon screen address
6DC9 01 04 06    3 50 ld      bc, $0604                   ; B = number of sprites, C = sprite number to change color
6DCC 11 9E 65    3 51 ld      de, HEXAGON_SPRITE          ; DE points to hexagon sprite address
6DCF             3 52 Draw_Token_Loop
6DCF E5          3 53 push    hl                          ; store hexagon screen address
6DD0 CD F6 6D    3 54 call    Draw_Sprite_Hexagon         ; draw hexagon sprite
6DD3 E1          3 55 pop     hl                          ; restore hexagon screen address
6DD4 78          3 56 ld      a, b                        ; check loop counter
6DD5 B9          3 57 cp      c                           ; is it 4?
6DD6 CC 24 6E    3 58 call    z, Draw_Hexagon_Color       ; yes, apply color to hexagon area
6DD9             3 59 Draw_Token_Delay
6DD9 3E 00       3 60 ld      a, 0                        ; set delay duration (changed before calling this routine)
6DDB CD 95 6D    3 61 call    Main_Delay                  ; execute delay
6DDE 10 EF       3 62 djnz    Draw_Token_Loop             ; repeat for each hexagon sprite
6DE0 DD 21 E7 64 3 63 ld      ix, TOKEN_FX                ; IX points to token tone parameters address
6DE4 CD DC 76    3 64 call    Sound_FX                    ; play sound effect
6DE7 F1          3 65 pop     af                          ; restore previous timer status
6DE8 32 EB 62    3 66 ld      (TIMER_FLAG), a             ; restart timer
6DEB C9          3 67 ret
6DEC             3 69 ; ----------------------------------------------------------------------------------------------------------------------
6DEC             3 70 ; Draw_GetHEX_Screen: get the screen address of an hexagon on board
6DEC             3 71 ;
6DEC             3 72 ; Input:    BC = hexagon board indexes (B:column, C:row)
6DEC             3 73 ;
6DEC             3 74 ; Output:   HL = hexagon screen address 
6DEC             3 75 ;
6DEC             3 76 ; Destroys: A, DE
6DEC             3 77 ; ----------------------------------------------------------------------------------------------------------------------
6DEC             3 78 Draw_GetHEX_Screen:
6DEC 11 98 61    3 79 ld      de, BOARD_MAP-8             ; DE points to board hexagons screen addresses table (-8)
6DEF CD 77 6D    3 80 call    Main_Search_Table           ; search the screen address of the hexagon in table
6DF2 6E          3 81 ld      l, (hl)                     ; set the low byte of the screen address in L
6DF3 1A          3 82 ld      a, (de)                     ; set the high byte of the screen address in H
6DF4 67          3 83 ld      h, a
6DF5 C9          3 84 ret
6DF6             3 86 ; ----------------------------------------------------------------------------------------------------------------------
6DF6             3 87 ; Draw_Sprite_Hexagon: draw an hexagon sprite on the screen
6DF6             3 88 ;
6DF6             3 89 ; Input:    DE = hexagon sprite address
6DF6             3 90 ;           HL = hexagon screen address
6DF6             3 91 ;
6DF6             3 92 ; Output:   DE = next hexagon sprite address
6DF6             3 93 ;
6DF6             3 94 ; Destroys: A, HL, IXL
6DF6             3 95 ; ----------------------------------------------------------------------------------------------------------------------
6DF6             3 96 Draw_Sprite_Hexagon:
6DF6 DD 2E 10    3 97 ld      ixl, 16                     ; hexagon sprite height in bytes (loop counter)
6DF9             3 98 Draw_Sprite_HeXLoop
6DF9 1A          3 99 ld      a, (de)                     ; get sprite byte
6DFA 77          3 100 ld      (hl), a                     ; put sprite byte on screen
6DFB 13          3 101 inc     de                          ; move DE to next sprite byte address
6DFC 2C          3 102 inc     l                           ; move HL to next screen column
6DFD 1A          3 103 ld      a, (de)                     ; get sprite byte
6DFE 77          3 104 ld      (hl), a                     ; put sprite byte on screen
6DFF 13          3 105 inc     de                          ; move DE to next sprite byte
6E00 2D          3 106 dec     l                           ; move HL to previous screen column
6E01 CD 15 6E    3 107 call    Draw_Down_PixelLine         ; move HL down one pixel-line
6E04 DD 2D       3 108 dec     ixl                         ; decrement sprite height
6E06 20 F1       3 109 jr      nz, Draw_Sprite_HexLoop     ; repeat for each byte in sprite
6E08 C9          3 110 ret
6E09             3 112 ; ----------------------------------------------------------------------------------------------------------------------
6E09             3 113 ; Draw_Sprite_LetterNum: draw a letter/number sprite at screen address
6E09             3 114 ;
6E09             3 115 ; Input:    DE = letter/number sprite address
6E09             3 116 ;           HL = letter/number screen address
6E09             3 117 ;
6E09             3 118 ; Output:   DE = next letter/number sprite address
6E09             3 119 ;
6E09             3 120 ; Destroys: A, C, HL
6E09             3 121 ; ----------------------------------------------------------------------------------------------------------------------
6E09             3 122 Draw_Sprite_LetterNum:
6E09 0E 0A       3 123 ld      c, 10                       ; letter/number sprite height in bytes (loop counter)
6E0B             3 124 Draw_Sprite_Loop
6E0B 1A          3 125 ld      a, (de)                     ; get sprite byte
6E0C 77          3 126 ld      (hl), a                     ; put sprite byte on screen
6E0D 13          3 127 inc     de                          ; move DE to next sprite byte address
6E0E CD 15 6E    3 128 call    Draw_Down_PixelLine         ; move HL down one pixel-line
6E11 0D          3 129 dec     c                           ; decrement sprite height
6E12 20 F7       3 130 jr      nz, Draw_Sprite_Loop        ; repeat for each byte in sprite
6E14 C9          3 131 ret
6E15             3 133 ; ----------------------------------------------------------------------------------------------------------------------
6E15             3 134 ; Draw_Down_PixelLine: move HL down one pixel-line
6E15             3 135 ; Source: https://spectrumcomputing.co.uk/forums/viewtopic.php?p=35272#p35272
6E15             3 136 ;
6E15             3 137 ; The screen address of a pixel-line is encoded as follows:
6E15             3 138 ;
6E15             3 139 ;             H           |           L
6E15             3 140 ;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
6E15             3 141 ;  07|06|05|04|03|02|01|00|07|06|05|04|03|02|01|00
6E15             3 142 ;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
6E15             3 143 ;   0| 1| 0|Y7|Y6|Y2|Y1|Y0|Y5|Y4|Y3|X4|X3|X2|X1|X0
6E15             3 144 ;
6E15             3 145 ; where:
6E15             3 146 ;   Y = pixel position: Y7,Y6,Y5,Y4,Y3,Y2,Y1,Y0 (0-191)
6E15             3 147 ;   X = byte  position:  0, 0, 0,X4,X3,X2,X1,X0 (0-31)
6E15             3 148 ;
6E15             3 149 ; Input:    HL = pixel-line address
6E15             3 150 ;
6E15             3 151 ; Output:   HL = next (down) pixel-line address
6E15             3 152 ;
6E15             3 153 ; Destroys: A
6E15             3 154 ; ----------------------------------------------------------------------------------------------------------------------
6E15             3 155 Draw_Down_PixelLine:
6E15 24          3 156 inc     h                           ; move HL down one pixel-line
6E16 7C          3 157 ld      a, h                        ; get high byte of pixel-line address
6E17 E6 07       3 158 and     %00000111                   ; is pixel-line address inside a character line?
6E19 C0          3 159 ret     nz                          ; yes, return
6E1A 7D          3 160 ld      a, l                        ; get low byte of pixel-line address (at this point Y6 = 1)
6E1B C6 20       3 161 add     a, 32                       ; add size of char line (add extra bit into Y3-Y5)
6E1D 6F          3 162 ld      l, a                        ; move HL down one character line
6E1E D8          3 163 ret     c                           ; a third was crossed? yes, return
6E1F 7C          3 164 ld      a, h                        ; get high byte of pixel-line address
6E20 D6 08       3 165 sub     8                           ; clean up the bit from Y6
6E22 67          3 166 ld      h, a                        ; HL points to next (down) pixel-line address
6E23 C9          3 167 ret
6E24             3 169 ; ----------------------------------------------------------------------------------------------------------------------
6E24             3 170 ; Draw_Hexagon_Color: color an hexagon sprite on the screen
6E24             3 171 ; Source: https://spectrumcomputing.co.uk/forums/viewtopic.php?p=42285#p42285
6E24             3 172 ;
6E24             3 173 ; This routine converts a screen address (HL) into an attribute address (IX):
6E24             3 174 ;
6E24             3 175 ;             H           |           L
6E24             3 176 ;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
6E24             3 177 ;  07|06|05|04|03|02|01|00|07|06|05|04|03|02|01|00
6E24             3 178 ;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
6E24             3 179 ;   0| 1| 0|Y7|Y6|Y2|Y1|Y0|Y5|Y4|Y3|X4|X3|X2|X1|X0      screen address
6E24             3 180 ;
6E24             3 181 ;            IXH          |          IXL
6E24             3 182 ;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
6E24             3 183 ;  07|06|05|04|03|02|01|00|07|06|05|04|03|02|01|00
6E24             3 184 ;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
6E24             3 185 ;   0| 1| 0| 1| 1| 0|Y7|Y6|Y5|Y4|Y3|X4|X3|X2|X1|X0      attribute address
6E24             3 186 ;
6E24             3 187 ; where:
6E24             3 188 ;   Y = pixel position: Y7,Y6,Y5,Y4,Y3,Y2,Y1,Y0 (0-191)
6E24             3 189 ;   X = byte  position:  0, 0, 0,X4,X3,X2,X1,X0 (0-31)
6E24             3 190 ;
6E24             3 191 ; Input:    HL = screen address of the hexagon
6E24             3 192 ;
6E24             3 193 ; Output:   IX = attribute address of the hexagon
6E24             3 194 ;
6E24             3 195 ; Uses:     TOKEN_COLOR (current token color)
6E24             3 196 ;
6E24             3 197 ; Destroys: A
6E24             3 198 ; ----------------------------------------------------------------------------------------------------------------------
6E24             3 199 Draw_Hexagon_Color:
6E24 7C          3 200 ld      a, h                        ; get high byte of screen address
6E25 F6 87       3 201 or      %10000111                   ; mask Y0-Y2 and set bit 7 on
6E27 1F          3 202 rra                                 ; shift Y7-Y6 two positions
6E28 1F          3 203 rra
6E29 CB 3F       3 204 srl     a                           ; shift Y7-Y6 to last positions and set bit 7 off
6E2B DD 67       3 205 ld      ixh, a                      ; set high byte of attribute address in IXH
6E2D 7D          3 206 ld      a, l                        ; (the low byte for attribute address doesn't change)
6E2E DD 6F       3 207 ld      ixl, a                      ; set low byte of attribute address in IXL
6E30 3A 9E 61    3 208 ld      a, (TOKEN_COLOR)            ; get current token color
6E33 DD 77 00    3 209 ld      (ix+0), a                   ; set hexagon color (4 bytes)
6E36 DD 77 01    3 210 ld      (ix+1), a
6E39 DD 77 20    3 211 ld      (ix+32), a
6E3C DD 77 21    3 212 ld      (ix+33), a
6E3F C9          3 213 ret

; File #4: C:\Users\Antonio Luque\source\repos\Hex\Z80CodeFiles\Input.z80asm

6E40             4 1 ; ----------------------------------------------------------------------------------------------------------------------
6E40             4 2 ; Input.z80asm
6E40             4 3 ; Coded by Antonio Luque
6E40             4 4 ; ----------------------------------------------------------------------------------------------------------------------
6E40             4 6 MAX_CHARS               equ     2                           ; maximum of input chars
6E40             4 8 ; ----------------------------------------------------------------------------------------------------------------------
6E40             4 9 ; Input_Move: wait for input a move from keyboard
6E40             4 10 ; Based on assembler course by sromero: https://wiki.speccy.org/cursos/ensamblador/gfx4_fuentes
6E40             4 11 ;
6E40             4 12 ; Input:    -
6E40             4 13 ;
6E40             4 14 ; Output:   HL = player move address (PLAYER_MOVE)
6E40             4 15 ;
6E40             4 16 ; Uses:     CHAR_COUNT (number of current characters in input player move)
6E40             4 17 ;           TOKEN_COLOR (current token color)
6E40             4 18 ;
6E40             4 19 ; Destroys: A, A', BC, DE, IX
6E40             4 20 ; ----------------------------------------------------------------------------------------------------------------------
6E40             4 21 Input_Move:
6E40 01 0E 62    4 22 ld      bc, PLAYER_MOVE             ; BC points to player move address
6E43 C5          4 23 push    bc                          ; store pointer to player move address
6E44 AF          4 24 xor     a                           ; A = 0
6E45 32 10 62    4 25 ld      (CHAR_COUNT), a             ; initialize char counter
6E48 DD 21 83 5A 4 27 ld      ix, $5A83                   ; IX points to attribute address of RED input text
6E4C 21 83 50    4 28 ld      hl, $5083                   ; HL points to screen address of RED input text
6E4F 3A 9E 61    4 29 ld      a, (TOKEN_COLOR)            ; check current player color
6E52 FE 02       4 30 cp      RED_COLOR                   ; is RED the current token color?
6E54 28 07       4 31 jr      z, Input_Start              ; yes, start input
6E56 DD 21 19 59 4 32 ld      ix, $5919                   ; IX points to attribute address of CYAN input text
6E5A 21 19 48    4 33 ld      hl, $4819                   ; HL points to screen address of CYAN input text
6E5D             4 34 Input_Start
6E5D 3E 5F       4 35 ld      a, '_'                      ; text input cursor
6E5F DD 36 00 C7 4 36 ld      (ix+0), WHITE_FLASH1        ; set attributes for cursor (flash)
6E63 CD 98 6F    4 37 call    Print_Char                  ; print cursor
6E66             4 38 Input_Loop
6E66 CD F8 6E    4 39 call    Input_Key_Scan              ; scan for a key pressed
6E69 FE 0D       4 40 cp      $0D                         ; is it ENTER?
6E6B 28 78       4 41 jr      z, Input_Exit               ; yes, go to the end of routine
6E6D FE 30       4 42 cp      '0'                         ; is it DELETE?
6E6F 28 45       4 43 jr      z, Input_Delete             ; yes, perform delete char
6E71 08          4 44 ex      af, af'                     ; store ASCII code in A'
6E72 3A 10 62    4 45 ld      a, (CHAR_COUNT)             ; A = number of chars inserted
6E75 FE 02       4 46 cp      MAX_CHARS                   ; chars limit reached?
6E77 28 ED       4 47 jr      z, Input_Loop               ; yes, repeat input loop (do not insert char)
6E79 B7          4 48 or      a                           ; is the first char to be inserted? (A = 0)
6E7A 28 24       4 49 jr      z, Input_First_Letter       ; yes, perform input of 1st char (column)
6E7C FE 01       4 50 cp      1                           ; is the secord char to be inserted? (A = 1)
6E7E 28 2B       4 51 jr      z, Input_First_Number       ; yes, perform input of 2nd char (row)
6E80             4 53 ; ----------------------------------------------------------------------------------------------------------------------
6E80             4 54 ; char is valid: 'a'-'g' (1st char) and '1'-'7' (2nd char)
6E80             4 55 ; ----------------------------------------------------------------------------------------------------------------------
6E80             4 56 Input_Char_OK
6E80 02          4 57 ld      (bc), a                     ; set char in ASCII move
6E81 03          4 58 inc     bc                          ; increment ASCII move position
6E82 DD 36 00 47 4 59 ld      (ix+0), WHITE_FLASH0        ; restore attributes (no flash)
6E86 CD 98 6F    4 60 call    Print_Char                  ; print key pressed
6E89 3A 10 62    4 61 ld      a, (CHAR_COUNT)             ; increment char counter
6E8C 3C          4 62 inc     a
6E8D 32 10 62    4 63 ld      (CHAR_COUNT), a
6E90 2C          4 64 inc     l                           ; increment X position of current input screen location
6E91 DD 2C       4 65 inc     ixl                         ; increment X position of current input attr location
6E93 3D          4 66 dec     a                           ; is the first char?
6E94 20 C7       4 67 jr      nz, Input_Start             ; no, get next char
6E96 3E 2D       4 68 ld      a, '-'                      ; yes, print dash
6E98 CD 98 6F    4 69 call    Print_Char                  ; print dash
6E9B 2C          4 70 inc     l                           ; increment X position of current input screen location
6E9C DD 2C       4 71 inc     ixl                         ; increment X position of current input attr location
6E9E 18 BD       4 72 jr      Input_Start                 ; get next char (do until ENTER is pressed)
6EA0             4 74 ; ----------------------------------------------------------------------------------------------------------------------
6EA0             4 75 ; restrict first char to 'a'-'g'
6EA0             4 76 ; ----------------------------------------------------------------------------------------------------------------------
6EA0             4 77 Input_First_Letter
6EA0 08          4 78 ex      af, af'                     ; restore ASCII code
6EA1 FE 61       4 79 cp      'a'                         ; is it < 'a'?
6EA3 38 C1       4 80 jr      c, Input_Loop               ; yes, repeat input loop (char is not allowed)
6EA5 FE 68       4 81 cp      'h'                         ; is it >= 'h'?
6EA7 30 BD       4 82 jr      nc, Input_Loop              ; yes, repeat input loop (char is not allowed)
6EA9 18 D5       4 83 jr      Input_Char_OK               ; char is valid
6EAB             4 85 ; ----------------------------------------------------------------------------------------------------------------------
6EAB             4 86 ; restrict second char to '1'-'7'
6EAB             4 87 ; ----------------------------------------------------------------------------------------------------------------------
6EAB             4 88 Input_First_Number
6EAB 08          4 89 ex      af, af'                     ; restore ASCII code
6EAC FE 31       4 90 cp      '1'                         ; is it < '1'?
6EAE 38 B6       4 91 jr      c, Input_Loop               ; yes, repeat input loop (char is not allowed)
6EB0 FE 38       4 92 cp      '8'                         ; is it >= '8'?
6EB2 30 B2       4 93 jr      nc, Input_Loop              ; yes, repeat input loop (char is not allowed)
6EB4 18 CA       4 94 jr      Input_Char_OK               ; char is valid
6EB6             4 96 ; ----------------------------------------------------------------------------------------------------------------------
6EB6             4 97 ; erase last char, update input screen location and string pointer
6EB6             4 98 ; ----------------------------------------------------------------------------------------------------------------------
6EB6             4 99 Input_Delete
6EB6 3A 10 62    4 100 ld      a, (CHAR_COUNT)             ; get char counter
6EB9 B7          4 101 or      a                           ; is it 0?
6EBA 28 AA       4 102 jr      z, Input_Loop               ; yes, repeat input loop (no chars to delete)
6EBC FE 02       4 103 cp      2                           ; is it 2?
6EBE 20 02       4 104 jr      nz, Input_Delete_Dash       ; no, delete dash
6EC0 18 0C       4 105 jr      Input_Decrement_Chars       ; continue delete
6EC2             4 106 Input_Delete_Dash
6EC2 3E 20       4 107 ld      a, ' '                      ; empty char
6EC4 DD 36 00 47 4 108 ld      (ix+0), WHITE_FLASH0        ; restore attributes (no flash)
6EC8 CD 98 6F    4 109 call    Print_Char                  ; delete char
6ECB 2D          4 110 dec     l                           ; decrement X position of input screen location
6ECC DD 2D       4 111 dec     ixl                         ; decrement X position of input attr location
6ECE             4 112 Input_Decrement_Chars
6ECE 3A 10 62    4 113 ld      a, (CHAR_COUNT)             ; decrement char counter
6ED1 3D          4 114 dec     a
6ED2 32 10 62    4 115 ld      (CHAR_COUNT), a
6ED5 0B          4 116 dec     bc                          ; decrement ASCII move position
6ED6 3E 20       4 117 ld      a, ' '                      ; empty char
6ED8 DD 36 00 47 4 118 ld      (ix+0), WHITE_FLASH0        ; restore attributes (no flash)
6EDC CD 98 6F    4 119 call    Print_Char                  ; delete cursor and last char
6EDF 2D          4 120 dec     l                           ; decrement X position of player input screen location
6EE0 DD 2D       4 121 dec     ixl                         ; decrement X position of player input attr location
6EE2 C3 5D 6E    4 122 jp      Input_Start                 ; get next char
6EE5             4 124 ; ----------------------------------------------------------------------------------------------------------------------
6EE5             4 125 ; player finished move (ENTER pressed)
6EE5             4 126 ; ----------------------------------------------------------------------------------------------------------------------
6EE5             4 127 Input_Exit
6EE5 3A 10 62    4 128 ld      a, (CHAR_COUNT)             ; check char counter  
6EE8 FE 02       4 129 cp      2                           ; is it < 2?
6EEA DA 66 6E    4 130 jp      c, Input_Loop               ; yes, repeat input loop (move is incomplete)
6EED 3E 20       4 131 ld      a, ' '                      ; empty char
6EEF DD 36 00 47 4 132 ld      (ix+0), WHITE_FLASH0        ; restore attributes (no flash)
6EF3 CD 98 6F    4 133 call    Print_Char                  ; delete cursor
6EF6 E1          4 134 pop     hl                          ; restore pointer to player move address
6EF7 C9          4 135 ret
6EF8             4 137 ; ----------------------------------------------------------------------------------------------------------------------
6EF8             4 138 ; Input_Key_Scan: wait for a key pressed and return its ASCII code
6EF8             4 139 ;
6EF8             4 140 ;                           Bit
6EF8             4 141 ;  Port  |   0   |   1   |   2   |   3   |   4   |
6EF8             4 142 ;  ------+-------+-------+-------+-------+-------+
6EF8             4 143 ;  $FEFE | Shift |   Z   |   X   |   C   |   V   |
6EF8             4 144 ;  $FDFE |   A   |   S   |   D   |   F   |   G   |
6EF8             4 145 ;  $FBFE |   Q   |   W   |   E   |   R   |   T   |
6EF8             4 146 ;  $F7FE |   1   |   2   |   3   |   4   |   5   |
6EF8             4 147 ;  $EFFE |   0   |   9   |   8   |   7   |   6   |
6EF8             4 148 ;  $DFFE |   P   |   O   |   I   |   U   |   Y   |
6EF8             4 149 ;  $BFFE | Enter |   L   |   K   |   J   |   H   |
6EF8             4 150 ;  $7FFE | Space |  Sym  |   M   |   N   |   B   |
6EF8             4 151 ;
6EF8             4 152 ;  Bits are set to 0 for any key that is pressed and 1 for any key that is not pressed
6EF8             4 153 ;
6EF8             4 154 ; Input:    -
6EF8             4 155 ;
6EF8             4 156 ; Output:   A = ASCII code of key pressed
6EF8             4 157 ;
6EF8             4 158 ; Destroys: DE
6EF8             4 159 ; ----------------------------------------------------------------------------------------------------------------------
6EF8             4 160 Input_Key_Scan:
6EF8 C5          4 161 push    bc                          ; store registers
6EF9 E5          4 162 push    hl
6EFA             4 163 Input_Key_Released
6EFA 01 FE FE    4 164 ld      bc, $FEFE                   ; set keyboard port (see above)
6EFD             4 165 Input_Key_Released_Line
6EFD ED 78       4 166 in      a, (c)                      ; read port
6EFF 2F          4 167 cpl                                 ; invert bits
6F00 E6 1F       4 168 and     %00011111                   ; check 0 to 4 bits
6F02 20 F6       4 169 jr      nz, Input_Key_Released      ; repeat from the beginning until no key is pressed
6F04 CB 00       4 170 rlc     b                           ; move BC to the next port
6F06 38 F5       4 171 jr      c, Input_Key_Released_Line  ; repeat for each port
6F08 11 05 00    4 172 ld      de, 5                       ; number of keys in each port (KEY_MAP displacement)
6F0B             4 173 Input_Key_Pressed_Begin
6F0B 21 D8 61    4 174 ld      hl, KEY_MAP                 ; HL points to KEY_MAP array
6F0E             4 175 Input_Key_Pressed_Line
6F0E ED 78       4 176 in      a, (c)                      ; read port
6F10 2F          4 177 cpl                                 ; invert bits
6F11 E6 1F       4 178 and     %00011111                   ; check 0 to 4 bits
6F13 20 08       4 179 jr      nz, Input_Key_Pressed       ; if any key is pressed, process it
6F15 19          4 180 add     hl, de                      ; HL points to the next KEY_MAP block
6F16 CB 00       4 181 rlc     b                           ; move BC to the next port
6F18 38 F4       4 182 jr      c, Input_Key_Pressed_Line   ; repeat for each port
6F1A 18 EF       4 183 jr      Input_Key_Pressed_Begin     ; repeat from the beginning until any key is pressed
6F1C             4 184 Input_Key_Next
6F1C 23          4 185 inc     hl                          ; move HL to the next character
6F1D             4 186 Input_Key_Pressed
6F1D 1F          4 187 rra                                 ; rotate bits of port readed
6F1E 30 FC       4 188 jr      nc, Input_Key_Next          ; repeat until find the key pressed
6F20 7E          4 189 ld      a, (hl)                     ; return key pressed (ASCII) in A
6F21 E1          4 190 pop     hl                          ; restore registers
6F22 C1          4 191 pop     bc
6F23 C9          4 192 ret

; File #5: C:\Users\Antonio Luque\source\repos\Hex\Z80CodeFiles\Print.z80asm

6F24             5 1 ; ----------------------------------------------------------------------------------------------------------------------
6F24             5 2 ; Print.z80asm
6F24             5 3 ; Coded by Antonio Luque
6F24             5 4 ; ----------------------------------------------------------------------------------------------------------------------
6F24             5 6 CHAR_SET                equ     FONT-256                    ; address of character set data, adjusted for ASCII codes
6F24             5 8 ; ----------------------------------------------------------------------------------------------------------------------
6F24             5 9 ; Print_Players: print "Player" and "Speccy" strings in the corresponding positions
6F24             5 10 ;
6F24             5 11 ; Input:    A = player color (CYAN_COLOR or RED_COLOR)
6F24             5 12 ;
6F24             5 13 ; Output:   -
6F24             5 14 ;
6F24             5 15 ; Destroys: A, BC, DE, HL
6F24             5 16 ; ----------------------------------------------------------------------------------------------------------------------
6F24             5 17 Print_Players:
6F24 11 24 62    5 18 ld      de, STR_PLAYER              ; DE points to "Player" string address
6F27 01 1D 62    5 19 ld      bc, STR_SPECCY              ; BC points to "Speccy" string address
6F2A 21 02 50    5 20 ld      hl, $5002                   ; HL points to red string screen address
6F2D FE 02       5 21 cp      RED_COLOR                   ; is player color red?
6F2F 28 06       5 22 jr      z, Print_Players_Strings    ; yes, print players strings
6F31 11 1D 62    5 23 ld      de, STR_SPECCY              ; DE points to "Speccy" string address
6F34 01 24 62    5 24 ld      bc, STR_PLAYER              ; BC points to "Player" string address
6F37             5 25 Print_Players_Strings
6F37 CD 8C 6F    5 26 call    Print_String                ; print "Player" or "Speccy"
6F3A 50          5 27 ld      d, b                        ; DE points to "Player" or "Speccy" string address
6F3B 59          5 28 ld      e, c
6F3C 21 98 40    5 29 ld      hl, $4098                   ; HL points to cyan string screen address
6F3F 18 4B       5 30 jr      Print_String                ; print "Player" or "Speccy"
6F41             5 32 ; ----------------------------------------------------------------------------------------------------------------------
6F41             5 33 ; Print_Clear_Alert: clear a printed alert message below the current player input move
6F41             5 34 ;
6F41             5 35 ; Input:    -
6F41             5 36 ; Output:   -
6F41             5 37 ; Destroys: A, BC, DE, HL, IX
6F41             5 38 ; ----------------------------------------------------------------------------------------------------------------------
6F41             5 39 Print_Clear_Alert:
6F41 11 49 62    5 40 ld      de, STR_EMPTY6              ; DE points to a 6 blanks string address
6F44 0E 47       5 41 ld      c, WHITE_FLASH0             ; set (clear) alert message color
6F46 18 02       5 42 jr      Print_Alert_XY              ; print (clear) alert string
6F48             5 44 ; ----------------------------------------------------------------------------------------------------------------------
6F48             5 45 ; Print_Alert: print an alert message below the current player input move
6F48             5 46 ;
6F48             5 47 ; Input:    DE = alert message string address
6F48             5 48 ;
6F48             5 49 ; Output:   -
6F48             5 50 ;
6F48             5 51 ; Uses:     TOKEN_COLOR (current token color)
6F48             5 52 ;
6F48             5 53 ; Destroys: A, BC, DE, HL, IX
6F48             5 54 ; ----------------------------------------------------------------------------------------------------------------------
6F48             5 55 Print_Alert:
6F48 0E C7       5 56 ld      c, WHITE_FLASH1             ; set alert message color
6F4A             5 57 Print_Alert_XY
6F4A DD 21 A2 5A 5 58 ld      ix, $5AA2                   ; IX points to red alert string attribute address
6F4E 21 A2 50    5 59 ld      hl, $50A2                   ; HL points to red alert string screen address
6F51 3A 9E 61    5 60 ld      a, (TOKEN_COLOR)            ; check current token color
6F54 FE 02       5 61 cp      RED_COLOR                   ; is token color red?
6F56 28 31       5 62 jr      z, Print_String_Color       ; yes, print alert string with color
6F58 DD 21 38 59 5 63 ld      ix, $5938                   ; IX points to cyan alert string attribute address
6F5C 21 38 48    5 64 ld      hl, $4838                   ; HL points to cyan alert string screen address
6F5F 18 28       5 65 jr      Print_String_Color          ; print alert string with color
6F61             5 67 ; ----------------------------------------------------------------------------------------------------------------------
6F61             5 68 ; Print_Wait: print "WAIT" message at current player input move location 
6F61             5 69 ;
6F61             5 70 ; Input:    -
6F61             5 71 ;
6F61             5 72 ; Output:   -
6F61             5 73 ;
6F61             5 74 ; Destroys: A, BC, DE, HL, IX
6F61             5 75 ; ----------------------------------------------------------------------------------------------------------------------
6F61             5 76 Print_Wait:
6F61 11 38 62    5 77 ld      de, STR_WAIT                ; DE points to "WAIT" string address
6F64 0E C7       5 78 ld      c, WHITE_FLASH1             ; set wait message color
6F66 18 0C       5 79 jr      Print_Move_XY               ; print wait string
6F68             5 81 ; ----------------------------------------------------------------------------------------------------------------------
6F68             5 82 ; Clear_Move: clear a printed player move at current player input move location 
6F68             5 83 ;
6F68             5 84 ; Input:    -
6F68             5 85 ;
6F68             5 86 ; Output:   -
6F68             5 87 ;
6F68             5 88 ; Destroys: A, BC, DE, HL, IX
6F68             5 89 ; ----------------------------------------------------------------------------------------------------------------------
6F68             5 90 Print_Clear_Move:
6F68 11 44 62    5 91 ld      de, STR_EMPTY4              ; DE points to a 4 blanks string address
6F6B 0E 47       5 92 ld      c, WHITE_FLASH0             ; set (clear) move string color
6F6D 18 05       5 93 jr      Print_Move_XY               ; print (clear) move string
6F6F             5 95 ; ----------------------------------------------------------------------------------------------------------------------
6F6F             5 96 ; Print_Move: print a formatted move at current player input move location 
6F6F             5 97 ;
6F6F             5 98 ; Input:    -
6F6F             5 99 ;
6F6F             5 100 ; Output:   -
6F6F             5 101 ;
6F6F             5 102 ; Uses:     TOKEN_COLOR (current token color)
6F6F             5 103 ;
6F6F             5 104 ; Destroys: A, BC, DE, HL, IX
6F6F             5 105 ; ----------------------------------------------------------------------------------------------------------------------
6F6F             5 106 Print_Move:
6F6F 11 18 62    5 107 ld      de, STR_MOVE                ; DE points to formatted move string address
6F72 0E 47       5 108 ld      c, WHITE_FLASH0             ; set string color
6F74             5 109 Print_Move_XY
6F74 DD 21 82 5A 5 110 ld      ix, $5A82                   ; IX points to red move attribute address
6F78 21 83 50    5 111 ld      hl, $5083                   ; HL points to red move screen address
6F7B 3A 9E 61    5 112 ld      a, (TOKEN_COLOR)            ; check current token color
6F7E FE 02       5 113 cp      RED_COLOR                   ; is token color red?
6F80 28 07       5 114 jr      z, Print_String_Color       ; yes, print move string with color
6F82 DD 21 18 59 5 115 ld      ix, $5918                   ; IX points to cyan move attribute address
6F86 21 19 48    5 116 ld      hl, $4819                   ; HL points to cyan move screen address
6F89             5 117 Print_String_Color
6F89 CD 7A 78    5 118 call    Screen_Apply_Color          ; apply color to string area
6F8C             5 119 ; ----------------------------------------------------------------------------------------------------------------------
6F8C             5 120 ; Print_String: print a string on the screen
6F8C             5 121 ; Based on assembler course by sromero: https://wiki.speccy.org/cursos/ensamblador/gfx4_fuentes
6F8C             5 122 ;
6F8C             5 123 ; Input:    DE = string address (ending with 0)
6F8C             5 124 ;           HL = string screen address
6F8C             5 125 ;
6F8C             5 126 ; Output:   -
6F8C             5 127 ;
6F8C             5 128 ; Destroys: A, DE, HL
6F8C             5 129 ; ----------------------------------------------------------------------------------------------------------------------
6F8C             5 130 Print_String:
6F8C 1A          5 131 ld      a, (de)                     ; get string character
6F8D B7          5 132 or      a                           ; is it 0? (end of string)
6F8E C8          5 133 ret     z                           ; yes, return
6F8F D5          5 134 push    de                          ; store pointer to string address
6F90 CD 98 6F    5 135 call    Print_Char                  ; print character
6F93 D1          5 136 pop     de                          ; restore pointer to string address
6F94 13          5 137 inc     de                          ; move DE to next string character
6F95 2C          5 138 inc     l                           ; move HL to next screen column
6F96 18 F4       5 139 jr      Print_String                ; repeat until end of string
6F98             5 141 ; ----------------------------------------------------------------------------------------------------------------------
6F98             5 142 ; Print_Char: print a character on the screen
6F98             5 143 ;
6F98             5 144 ; Input:    A  = character to print (ASCII)
6F98             5 145 ;           HL = character screen address
6F98             5 146 ;
6F98             5 147 ; Output:   -
6F98             5 148 ;
6F98             5 149 ; Destroys: A, DE
6F98             5 150 ; ----------------------------------------------------------------------------------------------------------------------
6F98             5 151 Print_Char:
6F98 11 00 68    5 152 ld      de, CHAR_SET                ; DE points to charset address
6F9B             5 153 Print_Tile:
6F9B E5          5 154 push    hl                          ; store pointer to character screen address
6F9C 26 00       5 155 ld      h, 0                        ; set character/tile index in HL
6F9E 6F          5 156 ld      l, a
6F9F 29          5 157 add     hl, hl                      ; a character/tile is 8 bytes long
6FA0 29          5 158 add     hl, hl
6FA1 29          5 159 add     hl, hl
6FA2 19          5 160 add     hl, de                      ; move HL to character/tile address
6FA3 EB          5 161 ex      de, hl                      ; DE points to character/tile address
6FA4 E1          5 162 pop     hl                          ; restore pointer to character screen address
6FA5 C5          5 163 push    bc                          ; store BC register
6FA6 06 08       5 164 ld      b, 8                        ; number of character/tile bytes (loop counter)
6FA8             5 165 Print_Tile_Pixels
6FA8 1A          5 166 ld      a, (de)                     ; get character/tile byte
6FA9 77          5 167 ld      (hl), a                     ; put character/tile byte on screen
6FAA 13          5 168 inc     de                          ; move DE to next character/tile byte
6FAB 24          5 169 inc     h                           ; move HL down one pixel-line
6FAC 10 FA       5 170 djnz    Print_Tile_Pixels           ; repeat for each character/tile bytes
6FAE C1          5 171 pop     bc                          ; restore BC register
6FAF 7C          5 172 ld      a, h                        ; get high byte of character screen address
6FB0 D6 08       5 173 sub     8                           ; subtract number of character/tile bytes
6FB2 67          5 174 ld      h, a                        ; HL points to character screen address
6FB3 C9          5 175 ret

; File #6: C:\Users\Antonio Luque\source\repos\Hex\Z80CodeFiles\Brainiac.z80asm

6FB4             6 1 ; ----------------------------------------------------------------------------------------------------------------------
6FB4             6 2 ; Brainiac.z80asm
6FB4             6 3 ; Coded by Einar Saukas: https://spectrumcomputing.co.uk/entry/31171/ZX-Spectrum/BRAINIAC
6FB4             6 4 ;
6FB4             6 5 ; Adapted for Hex game by Einar Saukas
6FB4             6 6 ; ----------------------------------------------------------------------------------------------------------------------
6FB4             6 8 MIN_VALUE               equ     0                           ; alphaBeta pruning minimum value
6FB4             6 9 MAX_VALUE               equ     255                         ; alphaBeta pruning maximum value
6FB4             6 11 ; ----------------------------------------------------------------------------------------------------------------------
6FB4             6 12 ; BRAINIAC_best_move: execute BRAINIAC algorithm to determine best choice for specified player's next move, according to
6FB4             6 13 ; specified AI difficulty level. This algorithm is implemented as recursive Minimax with alpha-beta pruning, that
6FB4             6 14 ; alternates between tree nodes maximizing score (speccy move) and minimizing it (player move) depending on recursion
6FB4             6 15 ; depth.
6FB4             6 16 ;
6FB4             6 17 ; Original source code by Einar Saukas: https://spectrumcomputing.co.uk/entry/31171/ZX-Spectrum/BRAINIAC
6FB4             6 18 ;
6FB4             6 19 ; Input:    A  = speccy side (FRIEND or ENEMY)
6FB4             6 20 ;           IX = candidates vector address
6FB4             6 21 ;
6FB4             6 22 ; Output:   E  = selected position (speccy move)
6FB4             6 23 ;
6FB4             6 24 ; Uses:     AI_PLAYER (speccy side)
6FB4             6 25 ;           AI_DEPTH (recursion depth level)
6FB4             6 26 ;
6FB4             6 27 ; Destroys: A, BC, D, HL, IX, IY
6FB4             6 28 ; ----------------------------------------------------------------------------------------------------------------------
6FB4             6 29 BRAINIAC_best_move:
6FB4 32 99 61    6 30 ld      (AI_PLAYER), a              ; save speccy side
6FB7 CD A1 74    6 32 call    PathFinder_Score            ; get board score
6FBA CD 45 75    6 33 call    PathFinder_Candidates       ; get candidates from board potentials
6FBD             6 35 ; BRAINIAC start
6FBD             6 36 AI_First_Candidate
6FBD DD 7E 00    6 37 ld      a, (ix+0)                   ; A is our first candidate
6FC0 5F          6 39 ld      e, a                        ; E = best speccy move (initialization)
6FC1 16 00       6 40 ld      d, MIN_VALUE                ; D = alphaMax
6FC3             6 42 AI_Main_Loop                                                ; for each candidate {
6FC3 D5          6 43 push    de                          ;       store alphaMax and best speccy move
6FC4 26 7D       6 45 ld      h, CYAN_POSITIONS/256       ;       get and store candidate position on board
6FC6 6F          6 46 ld      l, a
6FC7 E5          6 47 push    hl
6FC8 3A 99 61    6 49 ld      a, (AI_PLAYER)              ;       get speccy side
6FCB CD 1C 71    6 50 call    PathFinder_PutToken         ;       BRAINIAC_play
6FCE 1E FF       6 51 ld      e, MAX_VALUE                ;       E = betaMin
6FD0 CD E8 6F    6 52 call    Alphabeta_Min               ;       A = alphabeta_min(alphaMax, betaMin)
6FD3 E1          6 54 pop     hl                          ;       restore candidate position
6FD4 CD 22 71    6 55 call    PathFinder_EraseToken       ;       BRAINIAC_undo
6FD7 D1          6 57 pop     de                          ;       restore alphaMax and best player node
6FD8 BA          6 59 cp      d
6FD9 38 04       6 60 jr      c, AI_Main_Next
6FDB 28 02       6 61 jr      z, AI_Main_Next             ;       if (A <= alphaMax) continue
6FDD 57          6 63 ld      d, a                        ;       alphaMax = A
6FDE 5D          6 64 ld      e, l                        ;       best move = E
6FDF             6 66 AI_Main_Next
6FDF DD 2D       6 67 dec     ixl
6FE1 DD 7E 00    6 68 ld      a, (ix+0)                   ;       A is our next candidate
6FE4 B7          6 69 or      a                           ;       repeat until no more candidates
6FE5 20 DC       6 70 jr      nz, AI_Main_Loop            ; }
6FE7 C9          6 71 ret
6FE8             6 73 ; ----------------------------------------------------------------------------------------------------------------------
6FE8             6 74 ; Alphabeta_Min: Process a tree node of the Minimax search tree with alpha-beta pruning, when it requires MINIMIZING
6FE8             6 75 ; Speccy's score.
6FE8             6 76 ;
6FE8             6 77 ; This implementation is different from conventional alpha-beta pruning because it returns the best (lowest) betaMin
6FE8             6 78 ; value obtained so far at this subtree depth (from previous sibling nodes), when it's even lower than the best (lowest)
6FE8             6 79 ; score at this tree node only. In practice that's OK, since the existence of a lower betaMin in a previous sibling node
6FE8             6 80 ; would make parent node discard the node's betaMin value and adopt the even lower betaMin value from a previous sibling
6FE8             6 81 ; node anyway. This change was useful to allow a highly optimized Assembly implementation with a more efficient register
6FE8             6 82 ; allocation. The only drawback was that, whenever a parent node obtains the same best score from 2 child nodes, it must
6FE8             6 83 ; always choose the child node evaluated first, since the other child node node may not really have the same score and
6FE8             6 84 ; could be just reproducing the best score from its sibling.
6FE8             6 85 ;
6FE8             6 86 ; Original source code by Einar Saukas: https://spectrumcomputing.co.uk/entry/31171/ZX-Spectrum/BRAINIAC
6FE8             6 87 ;
6FE8             6 88 ; Input:    D = alphaMax
6FE8             6 89 ;           E = betaMin
6FE8             6 90 ;
6FE8             6 91 ; Output:   A = "improved" betaMin
6FE8             6 92 ;           D = alphaMax
6FE8             6 93 ;           E = "improved" betaMin
6FE8             6 94 ;
6FE8             6 95 ; Uses:     AI_PLAYER (speccy side)
6FE8             6 96 ;           AI_DEPTH (recursion depth level)
6FE8             6 97 ;
6FE8             6 98 ; Destroys: BC, HL, IX, IY
6FE8             6 99 ; ----------------------------------------------------------------------------------------------------------------------
6FE8             6 100 Alphabeta_Min:
6FE8 D5          6 101 push    de
6FE9             6 103 ; check if last speccy move is a winner one
6FE9 CD A1 74    6 105 call    PathFinder_Score            ; if (speccy won)
6FEC B7          6 106 or      a
6FED 20 07       6 107 jr      nz, Alphabeta_Min_Candidates
6FEF 3A 9A 61    6 108 ld      a, (AI_DEPTH)
6FF2 C6 C0       6 109 add     a, 192                      ;     return 192+depth
6FF4 D1          6 110 pop     de
6FF5 C9          6 111 ret
6FF6             6 113 Alphabeta_Min_Candidates
6FF6 CD 45 75    6 114 call    PathFinder_Candidates       ; find candidates for next move
6FF9 D1          6 115 pop     de
6FFA DD 7E 00    6 117 ld      a, (ix+0)                   ; A is our first candidate
6FFD 21 9A 61    6 119 ld      hl, AI_DEPTH
7000 35          6 120 dec     (hl)                        ; depth--
7001 28 3B       6 121 jr      z, Heuristic_Min            ; if (depth == 0) return heuristic_min
7003             6 123 Alphabeta_Min_Loop                                          ; for each candidate {
7003 D5          6 124 push    de                          ;       store alphaMax and betaMin
7004 26 7D       6 126 ld      h, CYAN_POSITIONS/256       ;       get and store candidate position on board
7006 6F          6 127 ld      l, a
7007 E5          6 128 push    hl
7008 3A 99 61    6 130 ld      a, (AI_PLAYER)              ;       rather to track player or speccy side
700B             6 131 ;       we get it from AI_PLAYER
700B EE 7C       6 132 xor     $7C                         ;       get player side
700D CD 1C 71    6 133 call    PathFinder_PutToken         ;       BRAINIAC_play
7010 CD 7F 70    6 134 call    Alphabeta_Max               ;       A = alphabeta_max(alphaMax, betaMin)
7013 E1          6 136 pop     hl                          ;       restore candidate position
7014 CD 22 71    6 137 call    PathFinder_EraseToken       ;       BRAINIAC_undo
7017 D1          6 139 pop     de                          ;       restore alphaMax and betaMin
7018 BB          6 141 cp      e
7019 30 06       6 142 jr      nc, Alphabeta_Min_Next      ;       if (A >= betaMin) continue
701B BA          6 144 cp      d
701C 38 11       6 145 jr      c, Alphabeta_Min_Exit
701E 28 0F       6 146 jr      z, Alphabeta_Min_Exit       ;       if (A <= alphaMax) { depth++; return A }
7020 5F          6 148 ld      e, a                        ;       betaMin = A
7021             6 150 Alphabeta_Min_Next
7021 DD 2D       6 151 dec     ixl
7023 DD 7E 00    6 152 ld      a, (ix+0)                   ;       A is our next candidate
7026 B7          6 153 or      a                           ;       repeat until no more candidates
7027 20 DA       6 154 jr      nz, Alphabeta_Min_Loop      ; }
7029 7B          6 156 ld      a, e                        ; return betaMin
702A 21 9A 61    6 158 ld      hl, AI_DEPTH
702D 34          6 159 inc     (hl)                        ; depth++
702E C9          6 160 ret
702F             6 162 Alphabeta_Min_Exit
702F 5F          6 163 ld      e, a                        ; (discard remaining candidates)
7030 AF          6 164 xor     a
7031             6 165 Alphabeta_Min_Skip
7031 DD 2D       6 166 dec     ixl
7033 DD BE 00    6 167 cp      (ix+0)
7036 20 F9       6 168 jr      nz, Alphabeta_Min_Skip
7038 7B          6 169 ld      a, e
7039 21 9A 61    6 171 ld      hl, AI_DEPTH
703C 34          6 172 inc     (hl)                        ; (depth++)
703D C9          6 173 ret
703E             6 175 ; ----------------------------------------------------------------------------------------------------------------------
703E             6 176 ; Heuristic_Min: Specialized routine to process the lowest tree node (depth zero) of the Minimax search tree with alpha-
703E             6 177 ; beta pruning, when it requires MINIMIZING Speccy's score.
703E             6 178 ;
703E             6 179 ; Technically "Heuristic_Min" works exactly like "Alphabeta_Min_Loop", except it directly evaluates board for each child
703E             6 180 ; node instead of calling "Alphabeta_Max" recursively. Although it would be easier to just let it invoke "Alphabeta_Max"
703E             6 181 ; again to obtain the evaluated board, this simple optimization is responsible for making BRAINIAC almost 2 seconds
703E             6 182 ; faster.
703E             6 183 ;
703E             6 184 ; Original source code by Einar Saukas: https://spectrumcomputing.co.uk/entry/31171/ZX-Spectrum/BRAINIAC
703E             6 185 ;
703E             6 186 ; Input:    A = first candidate
703E             6 187 ;           D = alphaMax
703E             6 188 ;           E = betaMin
703E             6 189 ;
703E             6 190 ; Output:   A = "improved" betaMin
703E             6 191 ;           D = alphaMax
703E             6 192 ;           E = "improved" betaMin
703E             6 193 ;
703E             6 194 ; Uses:     AI_PLAYER (speccy side)
703E             6 195 ;           AI_DEPTH (recursion depth level)
703E             6 196 ;
703E             6 197 ; Destroys: BC, HL, IX, IY
703E             6 198 ; ----------------------------------------------------------------------------------------------------------------------
703E             6 199 Heuristic_Min:                                              ; for each candidate {
703E D5          6 200 push    de                          ;       store alphaMax and betaMin
703F 26 7D       6 202 ld      h, CYAN_POSITIONS/256       ;       get and store candidate position on board
7041 6F          6 203 ld      l, a
7042 E5          6 204 push    hl
7043 3A 99 61    6 206 ld      a, (AI_PLAYER)              ;       get speccy side
7046 EE 7C       6 207 xor     $7C                         ;       convert to player side
7048 CD 1C 71    6 208 call    PathFinder_PutToken         ;       BRAINIAC_play
704B CD A1 74    6 210 call    PathFinder_Score            ;       if (player won)
704E FE FF       6 211 cp      DEFEAT
7050 20 02       6 212 jr      nz, Heuristic_Min_Continue
7052 3E 40       6 213 ld      a, 64                       ;           A = 64
7054             6 214 Heuristic_Min_Continue
7054 E1          6 215 pop     hl
7055 CD 22 71    6 216 call    PathFinder_EraseToken       ;       BRAINIAC_undo
7058 D1          6 218 pop     de
7059 BB          6 220 cp      e
705A 30 06       6 221 jr      nc, Heuristic_Min_Next      ;       if (A >= betaMin) continue
705C BA          6 223 cp      d
705D 38 11       6 224 jr      c, Heuristic_Min_Exit
705F 28 0F       6 225 jr      z, Heuristic_Min_Exit       ;       if (A <= alphaMax) { depth++; return A }
7061 5F          6 227 ld      e, a                        ;       betaMin = A
7062             6 229 Heuristic_Min_Next
7062 DD 2D       6 230 dec     ixl
7064 DD 7E 00    6 231 ld      a, (ix+0)                   ;       A is our next candidate
7067 B7          6 232 or      a                           ;       repeat until no more candidates
7068 20 D4       6 233 jr      nz, Heuristic_Min           ; }
706A 7B          6 235 ld      a, e                        ; return betaMin
706B 21 9A 61    6 237 ld      hl, AI_DEPTH
706E 34          6 238 inc     (hl)                        ; depth++
706F C9          6 239 ret
7070             6 241 Heuristic_Min_Exit
7070 5F          6 242 ld      e, a                        ; (discard remaining candidates)
7071 AF          6 243 xor     a
7072             6 244 Heuristic_Min_Skip
7072 DD 2D       6 245 dec     ixl
7074 DD BE 00    6 246 cp      (ix+0)
7077 20 F9       6 247 jr      nz, Heuristic_Min_Skip
7079 7B          6 248 ld      a, e
707A 21 9A 61    6 250 ld      hl, AI_DEPTH
707D 34          6 251 inc     (hl)                        ; (depth++)
707E C9          6 252 ret
707F             6 254 ; ----------------------------------------------------------------------------------------------------------------------
707F             6 255 ; Alphabeta_Max: Process a tree node of the Minimax search tree with alpha-beta pruning, when it requires MAXIMIZING
707F             6 256 ; Speccy's score.
707F             6 257 ;
707F             6 258 ; This implementation is different from conventional alpha-beta pruning because it returns the best (highest) alphaMax
707F             6 259 ; value obtained so far at this subtree depth (from previous sibling nodes), when it's even higher than the best
707F             6 260 ; (highest) score at this tree node only. In practice that's OK, since the existence of a higher alphaMax in a previous
707F             6 261 ; sibling node would make parent node discard the node's alphaMax value and adopt the even higher alphaMax value from a
707F             6 262 ; previous sibling node anyway. This change was useful to allow a highly optimized Assembly implementation with a more
707F             6 263 ; efficient register allocation. The only drawback was that, whenever a parent node obtains the same best score from 2
707F             6 264 ; child nodes, it must always choose the child node evaluated first, since the other child node node may not really have
707F             6 265 ; the same score and could be just reproducing the best score from its sibling.
707F             6 266 ;
707F             6 267 ; Original source code by Einar Saukas: https://spectrumcomputing.co.uk/entry/31171/ZX-Spectrum/BRAINIAC
707F             6 268 ;
707F             6 269 ; Input:    D = alphaMax
707F             6 270 ;           E = betaMin
707F             6 271 ;
707F             6 272 ; Output:   A = "improved" alphaMax
707F             6 273 ;           D = "improved" alphaMax
707F             6 274 ;           E = betaMin
707F             6 275 ;
707F             6 276 ; Uses:     AI_PLAYER (speccy side)
707F             6 277 ;           AI_DEPTH (recursion depth level)
707F             6 278 ;
707F             6 279 ; Destroys: BC, HL, IX, IY
707F             6 280 ; ----------------------------------------------------------------------------------------------------------------------
707F             6 281 Alphabeta_Max:
707F D5          6 282 push    de
7080             6 284 ; check if last player move is a winner one
7080 CD A1 74    6 286 call    PathFinder_Score            ; if (player won)
7083 3D          6 287 dec     a
7084 20 08       6 288 jr      nz, Alphabeta_Max_Candidates
7086 3A 9A 61    6 289 ld      a, (AI_DEPTH)
7089 2F          6 290 cpl
708A C6 41       6 291 add     a, 64+1                     ;     return 64-depth
708C D1          6 292 pop     de
708D C9          6 293 ret
708E             6 295 Alphabeta_Max_Candidates
708E CD 45 75    6 296 call    PathFinder_Candidates       ; find candidates for next move
7091 D1          6 297 pop     de
7092 DD 7E 00    6 299 ld      a, (ix+0)                   ; A is our first candidate
7095 21 9A 61    6 301 ld      hl, AI_DEPTH
7098 35          6 302 dec     (hl)                        ; depth--
7099 28 39       6 303 jr      z, Heuristic_Max            ; if (depth == 0) return heuristic_max
709B             6 305 Alphabeta_Max_Loop                                          ; for each candidate {
709B D5          6 306 push    de                          ;       store alphaMax and betaMin
709C 26 7D       6 308 ld      h, CYAN_POSITIONS/256       ;       get and store candidate position on board
709E 6F          6 309 ld      l, a
709F E5          6 310 push    hl
70A0 3A 99 61    6 312 ld      a, (AI_PLAYER)              ;       get speccy side
70A3 CD 1C 71    6 313 call    PathFinder_PutToken         ;       BRAINIAC_play
70A6 CD E8 6F    6 314 call    Alphabeta_Min               ;       A = alphabeta_min(alphaMax, betaMin)
70A9 E1          6 316 pop     hl                          ;       restore candidate position
70AA CD 22 71    6 317 call    PathFinder_EraseToken       ;       BRAINIAC_undo
70AD D1          6 319 pop     de                          ;       restore alphaMax and betaMin
70AE BA          6 321 cp      d
70AF 38 06       6 322 jr      c, Alphabeta_Max_Next
70B1 28 04       6 323 jr      z, Alphabeta_Max_Next       ;       if (A <= alphaMax) continue
70B3 BB          6 325 cp      e
70B4 30 0F       6 326 jr      nc, Alphabeta_Max_Exit      ;       if (A >= betaMin) { depth++; return A }
70B6 57          6 328 ld      d, a                        ;       alphaMax = A
70B7             6 330 Alphabeta_Max_Next
70B7 DD 2D       6 331 dec     ixl
70B9 DD 7E 00    6 332 ld      a, (ix+0)                   ;       A is our next candidate
70BC B7          6 333 or      a                           ;       repeat until no more candidates
70BD 20 DC       6 334 jr      nz, Alphabeta_Max_Loop      ; }
70BF 7A          6 336 ld      a, d                        ; return alphaMax
70C0 21 9A 61    6 338 ld      hl, AI_DEPTH
70C3 34          6 339 inc     (hl)                        ; depth++
70C4 C9          6 340 ret
70C5             6 342 Alphabeta_Max_Exit
70C5 57          6 343 ld      d, a                        ; (discard remaining candidates)
70C6 AF          6 344 xor     a
70C7             6 345 Alphabeta_Max_Skip
70C7 DD 2D       6 346 dec     ixl
70C9 DD BE 00    6 347 cp      (ix+0)
70CC 20 F9       6 348 jr      nz, Alphabeta_Max_Skip
70CE 7A          6 349 ld      a, d
70CF 21 9A 61    6 351 ld      hl, AI_DEPTH
70D2 34          6 352 inc     (hl)                        ; (depth++)
70D3 C9          6 353 ret
70D4             6 355 ; ----------------------------------------------------------------------------------------------------------------------
70D4             6 356 ; Heuristic_Max: Specialized routine to process the lowest tree node (depth zero) of the Minimax search tree with alpha-
70D4             6 357 ; beta pruning, when it requires MAXIMIZING Speccy's score.
70D4             6 358 ;
70D4             6 359 ; Technically "Heuristic_Max" works exactly like "Alphabeta_Max_Loop", except it directly evaluates board for each child
70D4             6 360 ; node instead of calling "Alphabeta_Min" recursively. Although it would be easier to just let it invoke "Alphabeta_Min"
70D4             6 361 ; again to obtain the evaluated board, this simple optimization is responsible for making BRAINIAC almost 2 seconds
70D4             6 362 ; faster.
70D4             6 363 ;
70D4             6 364 ; Original source code by Einar Saukas: https://spectrumcomputing.co.uk/entry/31171/ZX-Spectrum/BRAINIAC
70D4             6 365 ;
70D4             6 366 ; Input:    A = first candidate
70D4             6 367 ;           D = alphaMax
70D4             6 368 ;           E = betaMin
70D4             6 369 ;
70D4             6 370 ; Returns:  A = "improved" alphaMax
70D4             6 371 ;           D = "improved" alphaMax
70D4             6 372 ;           E = betaMin
70D4             6 373 ;
70D4             6 374 ; Uses:     AI_PLAYER (speccy side)
70D4             6 375 ;           AI_DEPTH (recursion depth level)
70D4             6 376 ;
70D4             6 377 ; Destroys: BC, HL, IX, IY
70D4             6 378 ; ----------------------------------------------------------------------------------------------------------------------
70D4             6 379 Heuristic_Max:                                              ; for each candidate {
70D4 D5          6 380 push    de                          ;       store alphaMax and betaMin
70D5 26 7D       6 382 ld      h, CYAN_POSITIONS/256       ;       get and store candidate position on board
70D7 6F          6 383 ld      l, a
70D8 E5          6 384 push    hl
70D9 3A 99 61    6 386 ld      a, (AI_PLAYER)              ;       get speccy side
70DC CD 1C 71    6 387 call    PathFinder_PutToken         ;       (BRAINIAC_play)
70DF CD A1 74    6 389 call    PathFinder_Score            ;       if (speccy won)
70E2 B7          6 390 or      a
70E3 20 02       6 391 jr      nz, Heuristic_Max_Continue
70E5 3E C0       6 392 ld      a, 192                      ;           A = 192
70E7             6 393 Heuristic_Max_Continue
70E7 E1          6 394 pop     hl                          ;       restore candidate position
70E8 CD 22 71    6 395 call    PathFinder_EraseToken       ;       BRAINIAC_undo
70EB D1          6 397 pop     de                          ;       restore alphaMax and betaMin
70EC BA          6 399 cp      d
70ED 38 06       6 400 jr      c, Heuristic_Max_Next
70EF 28 04       6 401 jr      z, Heuristic_Max_Next       ;       if (A <= alphaMax) continue
70F1 BB          6 403 cp      e
70F2 30 0F       6 404 jr      nc, Heuristic_Max_Exit      ;       if (A >= betaMin) { depth++; return A }
70F4 57          6 406 ld      d, a                        ;       alphaMax = A
70F5             6 408 Heuristic_Max_Next
70F5 DD 2D       6 409 dec     ixl
70F7 DD 7E 00    6 410 ld      a, (ix+0)                   ;       A is our next candidate
70FA B7          6 411 or      a                           ;       repeat until no more candidates
70FB 20 D7       6 412 jr      nz, Heuristic_Max           ; }
70FD 7A          6 414 ld      a, d                        ; return alphaMax
70FE 21 9A 61    6 416 ld      hl, AI_DEPTH
7101 34          6 417 inc     (hl)                        ; depth++
7102 C9          6 418 ret
7103             6 420 Heuristic_Max_Exit
7103 57          6 421 ld      d, a                        ; (discard remaining candidates)
7104 AF          6 422 xor     a
7105             6 423 Heuristic_Max_Skip
7105 DD 2D       6 424 dec     ixl
7107 DD BE 00    6 425 cp      (ix+0)
710A 20 F9       6 426 jr      nz, Heuristic_Max_Skip
710C 7A          6 427 ld      a, d
710D 21 9A 61    6 429 ld      hl, AI_DEPTH
7110 34          6 430 inc     (hl)                        ; (depth++)
7111 C9          6 431 ret

; File #7: C:\Users\Antonio Luque\source\repos\Hex\Z80CodeFiles\PathFinder.z80asm

7112             7 1 ; ----------------------------------------------------------------------------------------------------------------------
7112             7 2 ; PathFinder.z80asm
7112             7 3 ; Coded by Einar Saukas: https://spectrumcomputing.co.uk/entry/28178/ZX-Spectrum/PATHFINDER
7112             7 4 ;
7112             7 5 ; Adapted by Antonio Luque and Einar Saukas to be used as heuristic in Hex game.
7112             7 6 ; Based on chapter 5 of Jack van Rijswijck's thesis - https://webdocs.cs.ualberta.ca/~hayward/theses/jackmsc.pdf
7112             7 7 ; ----------------------------------------------------------------------------------------------------------------------
7112             7 9 CYAN                    equ     $01                         ; cyan side
7112             7 10 RED                     equ     $02                         ; red side
7112             7 11 WIDTH                   equ     $08                         ; distance to up-left/down-right neighbor
7112             7 12 EMPTY                   equ     $00                         ; empty positions on the board
7112             7 13 SKIPPED                 equ     $01                         ; skipped positions on the board
7112             7 14 FRIEND                  equ     $02                         ; positions occupied by friendly tokens on the board
7112             7 15 ENEMY                   equ     $7E                         ; positions occupied by opponent tokens on the board
7112             7 16 DEFEAT                  equ     $FF                         ; return value if defeat
7112             7 17 WINNER                  equ     $00                         ; return value if winner
7112             7 18 VICTORY                 equ     $03                         ; internal value if victory
7112             7 19 FRIENDLY                equ     %01000000                   ; mask to set friendly flag
7112             7 20 WIN_CONDITION           equ     VICTORY+FRIENDLY            ; return value if victory
7112             7 22 CYAN_POSITIONS          equ     $7D00                       ; a 256-aligned memory area reserved for cyan positions
7112             7 23 RED_POSITIONS           equ     $7E00                       ; a 256-aligned memory area reserved for red positions
7112             7 24 CANDIDATES              equ     $7F00                       ; a 256-aligned memory area reserved to store candidates
7112             7 26 ; ----------------------------------------------------------------------------------------------------------------------
7112             7 27 ; PathFinder_Friend: return if current player is FRIEND or ENEMY from the perspective of the cyan player
7112             7 28 ;
7112             7 29 ; Input:    -
7112             7 30 ;
7112             7 31 ; Output:   A = FRIEND, if current token color is cyan
7112             7 32 ;           A = ENEMY, if current token color is red
7112             7 33 ;
7112             7 34 ; Uses:     TOKEN_COLOR (current token color)
7112             7 35 ;
7112             7 36 ; Destroys: -
7112             7 37 ; ----------------------------------------------------------------------------------------------------------------------
7112             7 38 PathFinder_Friend:
7112 3A 9E 61    7 39 ld      a, (TOKEN_COLOR)            ; get current player color
7115 1F          7 40 rra                                 ; is current player color cyan?
7116 3E 02       7 41 ld      a, FRIEND                   ; set FRIEND in A
7118 D8          7 42 ret     c                           ; yes, return FRIEND 
7119 EE 7C       7 43 xor     $7C                         ; no, return ENEMY
711B C9          7 44 ret
711C             7 46 ; ----------------------------------------------------------------------------------------------------------------------
711C             7 47 ; PathFinder_PutToken: put a token on both CYAN_POSITIONS and RED_POSITIONS areas
711C             7 48 ;
711C             7 49 ; Input:    A  = either FRIEND or ENEMY from the perspective of cyan player
711C             7 50 ;           HL = CYAN_POSITIONS token address
711C             7 51 ;
711C             7 52 ; Output:   -
711C             7 53 ;
711C             7 54 ; Destroys: -
711C             7 55 ; ----------------------------------------------------------------------------------------------------------------------
711C             7 56 PathFinder_PutToken:
711C 77          7 57 ld      (hl), a                     ; put token at cyan position
711D 24          7 58 inc     h                           ; move HL to red position address
711E EE 7C       7 59 xor     $7C                         ; invert side
7120 77          7 60 ld      (hl), a                     ; put token at red position
7121 C9          7 61 ret
7122             7 63 ; ----------------------------------------------------------------------------------------------------------------------
7122             7 64 ; PathFinder_EraseToken: erase a token from both CYAN_POSITIONS and RED_POSITIONS areas
7122             7 65 ;
7122             7 66 ; Input:    HL = CYAN_POSITIONS token address
7122             7 67 ;
7122             7 68 ; Output:   -
7122             7 69 ;
7122             7 70 ; Destroys: -
7122             7 71 ; ----------------------------------------------------------------------------------------------------------------------
7122             7 72 PathFinder_EraseToken:
7122 36 00       7 73 ld      (hl), EMPTY                 ; erase token at cyan position
7124 24          7 74 inc     h                           ; move HL to red position address
7125 36 00       7 75 ld      (hl), EMPTY                 ; erase token at red position
7127 C9          7 76 ret
7128             7 78 ; ----------------------------------------------------------------------------------------------------------------------
7128             7 79 ; PathFinder_CopyPositions: copy from CYAN_POSITIONS or RED_POSITIONS area to its corresponding board
7128             7 80 ;
7128             7 81 ; Input:    DE = cyan or red board address (destiny)
7128             7 82 ;           HL = CYAN_POSITIONS or RED_POSITIONS address (origin)
7128             7 83 ;
7128             7 84 ; Output:   -
7128             7 85 ;
7128             7 86 ; Destroys: BC, DE, HL
7128             7 87 ; ----------------------------------------------------------------------------------------------------------------------
7128             7 88 PathFinder_CopyPositions:
7128 01 31 00    7 89 ld      bc, 7*7                     ; number of positions to be copied
712B             7 90 PathFinder_CopyLoop
712B 2C          7 91 inc     l                           ; skip borders on positions
712C 2C          7 92 inc     l
712D 1C          7 93 inc     e                           ; skip borders on board
712E 1C          7 94 inc     e
712F ED A0       7 95 ldi                                 ; copy a row of 7 positions
7131 ED A0       7 96 ldi
7133 ED A0       7 97 ldi
7135 ED A0       7 98 ldi
7137 ED A0       7 99 ldi
7139 ED A0       7 100 ldi
713B ED A0       7 101 ldi
713D EA 2B 71    7 102 jp      pe, PathFinder_CopyLoop     ; repeat for each row
7140 C9          7 103 ret
7141             7 105 ; ----------------------------------------------------------------------------------------------------------------------
7141             7 106 ; PathFinder_Update: update current board position during heuristic function evaluation
7141             7 107 ;
7141             7 108 ; This is an approach to Jack van Rijswijck's "two-distance" metric. The two-distance is defined as "one more than the
7141             7 109 ; second lowest distance of p’s neighbors to q, with the proviso that the two-distance equals 1 if p and q are directly
7141             7 110 ; adjacent".
7141             7 111 ;
7141             7 112 ; The position will be updated with a number that indicates two-distance from goal (stored in lowest 6 bits), and a flag
7141             7 113 ; that indicates a position occupied by a friendly token (stored in 6th bit). Therefore this position is updated as
7141             7 114 ; follows, depending on current content:
7141             7 115 ;
7141             7 116 ; * SKIPPED: 1 + distance of neighbor closest to goal
7141             7 117 ; * FRIEND:  distance of neighbor closest to goal
7141             7 118 ; * EMPTY:   1 + distance of neighbor closest to goal, if current distance is friendly, SKIPPED otherwise
7141             7 119 ;
7141             7 120 ; Input:    Z  = flag set when (HL) is FRIEND
7141             7 121 ;           C  = current distance (also with a flag at 6th bit that indicates a friendly position)
7141             7 122 ;           HL = current position address (on either cyan boards or red boards)
7141             7 123 ;
7141             7 124 ; Output:   -
7141             7 125 ;
7141             7 126 ; Destroys: B, DE
7141             7 127 ; ----------------------------------------------------------------------------------------------------------------------
7141             7 128 PathFinder_Update:
7141 28 12       7 129 jr      z, PathFinder_Friendly      ; if Z flag is set, update friend distance
7143 46          7 130 ld      b, (hl)                     ; check current position
7144 10 1A       7 131 djnz    PathFinder_EMPTY
7146             7 132 ; if (HL) = SKIPPED, then set (HL) = C+1 and insert HL at queue tail
7146             7 133 PathFinder_Skipped:
7146 71          7 134 ld      (hl), c                     ; save current distance in current position
7147 34          7 135 inc     (hl)                        ; increment distance of current position
7148 CB B6       7 136 res     6, (hl)                     ; reset friendly token flag
714A EB          7 137 ex      de, hl                      ; store current position in DE
714B             7 138 @Queue_Tail
714B 21 00 00    7 139 ld      hl, $0000                   ; HL points to queue tail address (changed before call)
714E 2C          7 140 inc     l                           ; move queue tail down
714F 73          7 141 ld      (hl), e                     ; store position into queue tail
7150 22 4C 71    7 142 ld      (@Queue_Tail+1), hl         ; update queue tail
7153 EB          7 143 ex      de, hl                      ; restore current position
7154 C9          7 144 ret
7155             7 145 ; if (HL) = FRIEND, then set (HL) = C and insert HL at queue head
7155             7 146 PathFinder_Friendly
7155 71          7 147 ld      (hl), c                     ; save current distance in current position
7156 CB F6       7 148 set     6, (hl)                     ; set friendly token flag
7158 45          7 149 ld      b, l                        ; save current position in B
7159 D1          7 150 pop     de                          ; preserve RET address
715A E3          7 151 ex      (sp), hl                    ; retrieve queue head
715B 70          7 152 ld      (hl), b                     ; push this position into queue head
715C 2D          7 153 dec     l                           ; move queue head up
715D E3          7 154 ex      (sp), hl                    ; update queue head
715E D5          7 155 push    de                          ; restore RET address
715F C9          7 156 ret
7160             7 157 ; if (HL) = EMPTY, then set (HL) = C+1 if current distance is friendly, set (HL) = SKIPPED otherwise
7160             7 158 PathFinder_EMPTY
7160 CB 71       7 159 bit     6, c                        ; is current distance friendly?
7162 C2 46 71    7 160 jp      nz, PathFinder_Skipped      ; yes, set (HL) = C+1 and insert HL in queue tail
7165 34          7 161 inc     (hl)                        ; set (HL) = SKIPPED to find the second lowest distance
7166 C9          7 162 ret
7167             7 164 ; ----------------------------------------------------------------------------------------------------------------------
7167             7 165 ; PathFinder_Cyan_UpDown: set up 'Path_Finder' routine to calculate CYAN two-distances from UP to DOWN edge
7167             7 166 ;
7167             7 167 ; Input:    -
7167             7 168 ;
7167             7 169 ; Output:   A = DEFEAT, if down edge couldn't be reached
7167             7 170 ;           A = WINNER, if there is chain of connected cyan tokens between the two edges
7167             7 171 ;           A = X, otherwise
7167             7 172 ;
7167             7 173 ; Uses:     @Queue_Tail (queue pointer in 'PathFinder_Update' routine)
7167             7 174 ;
7167             7 175 ; Destroys: BC, DE, HL, IY
7167             7 176 ; ----------------------------------------------------------------------------------------------------------------------
7167             7 177 PathFinder_Cyan_UpDown:
7167 21 07 7D    7 178 ld      hl, CYAN_POSITIONS+7        ; HL points to cyan positions address (up-right corner)
716A 11 07 61    7 179 ld      de, CYAN_BOARD_UP_DOWN+7    ; DE points to cyan board up-down address (up-right corner)
716D CD 28 71    7 180 call    PathFinder_CopyPositions    ; copy from cyan positions to cyan board up-down
7170             7 182 ; entry point for PathFinder_BrightPath
7170             7 183 PathFinder_Cyan_BrightPath:
7170 FD 21 00 09 7 184 ld      iy, $0900                   ; IYH = distance to check edge positions
7174             7 185 ; IYL = initialize return value of 'Path_Finder'
7174 21 00 60    7 186 ld      hl, CYAN_QUEUE_AREA         ; HL points to cyan queue area address
7177 22 4C 71    7 187 ld      (@Queue_Tail+1), hl         ; initialize cyan queue area
717A E5          7 188 push    hl                          ; store queue tail address
717B             7 190 ; set up cyan board (up-down) start positions distances
717B 21 09 61    7 192 ld      hl, CYAN_BOARD_UP_DOWN+9    ; HL points to cyan board up-down address (1st position)
717E 0E 43       7 193 ld      c, VICTORY+FRIENDLY         ; initialize start positions distance
7180 3E 02       7 194 ld      a, FRIEND                   ; set distance to compare with
7182 BE          7 195 cp      (hl)                        ; check 1st start position distance
7183 D4 41 71    7 196 call    nc, PathFinder_Update       ; if FRIEND >= distance, update distance
7186 2C          7 197 inc     l                           ; move HL to next start position address
7187 BE          7 198 cp      (hl)                        ; check 2nd start position distance
7188 D4 41 71    7 199 call    nc, PathFinder_Update       ; (repeat for each start position)
718B 2C          7 200 inc     l
718C BE          7 201 cp      (hl)                        ; check 3rd start position distance
718D D4 41 71    7 202 call    nc, PathFinder_Update
7190 2C          7 203 inc     l
7191 BE          7 204 cp      (hl)                        ; check 4th start position distance
7192 D4 41 71    7 205 call    nc, PathFinder_Update
7195 2C          7 206 inc     l
7196 BE          7 207 cp      (hl)                        ; check 5th start position distance
7197 D4 41 71    7 208 call    nc, PathFinder_Update
719A 2C          7 209 inc     l
719B BE          7 210 cp      (hl)                        ; check 6th start position distance
719C D4 41 71    7 211 call    nc, PathFinder_Update
719F 2C          7 212 inc     l
71A0 C3 8D 72    7 213 jp      Path_Finder_First           ; calculate two-distances of cyan board (up-down)
71A3             7 215 ; ----------------------------------------------------------------------------------------------------------------------
71A3             7 216 ; PathFinder_Cyan_DownUp: set up Path_Finder routine to calculate CYAN two-distance from DOWN to UP edge
71A3             7 217 ;
71A3             7 218 ; Input:    -
71A3             7 219 ;
71A3             7 220 ; Output:   A = DEFEAT, if up edge couldn't be reached
71A3             7 221 ;           A = WINNER, if there is chain of connected cyan tokens between the two edges
71A3             7 222 ;           A = X, otherwise
71A3             7 223 ;
71A3             7 224 ; Uses:     @Queue_Tail (queue pointer in 'PathFinder_Update' routine)
71A3             7 225 ;
71A3             7 226 ; Destroys: BC, DE, HL, IY
71A3             7 227 ; ----------------------------------------------------------------------------------------------------------------------
71A3             7 228 PathFinder_Cyan_DownUp:
71A3 21 07 7D    7 229 ld      hl, CYAN_POSITIONS+7        ; HL points to cyan positions address (up-right corner)
71A6 11 4F 61    7 230 ld      de, CYAN_BOARD_DOWN_UP-1    ; DE points to cyan board down-up address (up-right corner)
71A9 CD 28 71    7 231 call    PathFinder_CopyPositions    ; copy from cyan positions to cyan board down-up
71AC FD 21 00 F7 7 233 ld      iy, $F700                   ; IYH = distance to check edge positions
71B0             7 234 ; IYL = initialize return value of 'Path_Finder'
71B0 2A 4C 71    7 235 ld      hl, (@Queue_Tail+1)         ; initialize cyan queue area
71B3 E5          7 236 push    hl                          ; store Queue Tail
71B4             7 238 ; set up cyan board (down-up) start positions distances
71B4 EB          7 240 ex      de, hl                      ; (take advantage of last "CopyPositions" execution)
71B5 2D          7 241 dec     l                           ; move HL to cyan boad down-up address (last position)
71B6 0E 43       7 242 ld      c, VICTORY+FRIENDLY         ; initialize start positions distance
71B8 3E 02       7 243 ld      a, FRIEND                   ; set distance to compare with
71BA BE          7 244 cp      (hl)                        ; check 1st start position distance
71BB D4 41 71    7 245 call    nc, PathFinder_Update       ; if FRIEND >= distance, update distance
71BE 2D          7 246 dec     l                           ; move HL to next start position address
71BF BE          7 247 cp      (hl)                        ; check 2nd start position distance
71C0 D4 41 71    7 248 call    nc, PathFinder_Update       ; (repeat for each start position)
71C3 2D          7 249 dec     l
71C4 BE          7 250 cp      (hl)                        ; check 3rd start position distance
71C5 D4 41 71    7 251 call    nc, PathFinder_Update
71C8 2D          7 252 dec     l
71C9 BE          7 253 cp      (hl)                        ; check 4th start position distance
71CA D4 41 71    7 254 call    nc, PathFinder_Update
71CD 2D          7 255 dec     l
71CE BE          7 256 cp      (hl)                        ; check 5th start position distance
71CF D4 41 71    7 257 call    nc, PathFinder_Update
71D2 2D          7 258 dec     l
71D3 BE          7 259 cp      (hl)                        ; check 6th start position distance
71D4 D4 41 71    7 260 call    nc, PathFinder_Update
71D7 2D          7 261 dec     l
71D8 C3 8D 72    7 262 jp      Path_Finder_First           ; calculate two-distances of cyan board (down-up)
71DB             7 264 ; ----------------------------------------------------------------------------------------------------------------------
71DB             7 265 ; PathFinder_Red_LeftRight: set up Path_Finder routine to calculate RED two-distance from LEFT to RIGHT edge
71DB             7 266 ;
71DB             7 267 ; Input:    -
71DB             7 268 ;
71DB             7 269 ; Output:   A = DEFEAT, if right edge couldn't be reached
71DB             7 270 ;           A = WINNER, if there is chain of connected cyan tokens between the two edges
71DB             7 271 ;           A = X, otherwise
71DB             7 272 ;
71DB             7 273 ; Uses:     @Queue_Tail (queue pointer in 'PathFinder_Update' routine)
71DB             7 274 ;
71DB             7 275 ; Destroys: BC, DE, HL, IY
71DB             7 276 ; ----------------------------------------------------------------------------------------------------------------------
71DB             7 277 PathFinder_Red_LeftRight:
71DB 21 07 7E    7 278 ld      hl, RED_POSITIONS+7         ; HL points to red positions address (up-right corner)
71DE 11 07 64    7 279 ld      de, RED_BOARD_LEFT_RIGHT+7  ; DE points to red board left-right addr. (up-right corner)
71E1 CD 28 71    7 280 call    PathFinder_CopyPositions    ; copy from red positions to red board left-right
71E4             7 282 ; entry point for PathFinder_BrightPath
71E4             7 283 PathFinder_Red_BrightPath
71E4 FD 21 00 01 7 284 ld      iy, $0100                   ; IYH = distance to check edge positions
71E8             7 285 ; IYL = initialize return value of 'Path_Finder'
71E8 21 00 63    7 286 ld      hl, RED_QUEUE_AREA          ; initialize red queue area
71EB 22 4C 71    7 287 ld      (@Queue_Tail+1), hl
71EE E5          7 288 push    hl                          ; store Queue Tail
71EF             7 290 ; set up red board (left-right) start positions distances
71EF 21 09 64    7 292 ld      hl, RED_BOARD_LEFT_RIGHT+9  ; HL points to red board left-right address (1st position)
71F2 0E 43       7 293 ld      c, VICTORY+FRIENDLY         ; initialize start positions distance
71F4 3E 02       7 294 ld      a, FRIEND                   ; set distance to compare with
71F6 BE          7 295 cp      (hl)                        ; check 1st start position distance
71F7 D4 41 71    7 296 call    nc, PathFinder_Update       ; if FRIEND >= distance, update distance
71FA 2E 12       7 297 ld      l, (RED_BOARD_LEFT_RIGHT+18)%256 ; move HL to next start position address
71FC BE          7 298 cp      (hl)                        ; check 2nd start position distance
71FD D4 41 71    7 299 call    nc, PathFinder_Update       ; (repeat for each start position)
7200 2E 1B       7 300 ld      l, (RED_BOARD_LEFT_RIGHT+27)%256
7202 BE          7 301 cp      (hl)                        ; check 3rd start position distance
7203 D4 41 71    7 302 call    nc, PathFinder_Update
7206 2E 24       7 303 ld      l, (RED_BOARD_LEFT_RIGHT+36)%256
7208 BE          7 304 cp      (hl)                        ; check 4th start position distance
7209 D4 41 71    7 305 call    nc, PathFinder_Update
720C 2E 2D       7 306 ld      l, (RED_BOARD_LEFT_RIGHT+45)%256
720E BE          7 307 cp      (hl)                        ; check 5th start position distance
720F D4 41 71    7 308 call    nc, PathFinder_Update
7212 2E 36       7 309 ld      l, (RED_BOARD_LEFT_RIGHT+54)%256
7214 BE          7 310 cp      (hl)                        ; check 6th start position distance
7215 D4 41 71    7 311 call    nc, PathFinder_Update
7218 2E 3F       7 312 ld      l, (RED_BOARD_LEFT_RIGHT+63)%256
721A C3 8D 72    7 313 jp      Path_Finder_First           ; calculate two-distances of red board (left-right)
721D             7 315 ; ----------------------------------------------------------------------------------------------------------------------
721D             7 316 ; PathFinder_Red_RightLeft: set up Path_Finder routine to calculate RED two-distance from RIGHT to LEFT edge
721D             7 317 ;
721D             7 318 ; Input:    -
721D             7 319 ;
721D             7 320 ; Output:   A = DEFEAT, if left edge couldn't be reached
721D             7 321 ;           A = WINNER, if there is chain of connected cyan tokens between the two edges
721D             7 322 ;           A = X, otherwise
721D             7 323 ;
721D             7 324 ; Uses:     @Queue_Tail (queue pointer in 'PathFinder_Update' routine)
721D             7 325 ;
721D             7 326 ; Destroys: BC, DE, HL, IY
721D             7 327 ; ----------------------------------------------------------------------------------------------------------------------
721D             7 328 PathFinder_Red_RightLeft:
721D 21 07 7E    7 329 ld      hl, RED_POSITIONS+7         ; HL points to red positions address (up-right corner)
7220 11 4F 64    7 330 ld      de, RED_BOARD_RIGHT_LEFT-1  ; DE points to red board right-left addr. (up-right corner)
7223 CD 28 71    7 331 call    PathFinder_CopyPositions    ; copy from red positions to red board right-left
7226 FD 21 00 FF 7 333 ld      iy, $FF00                   ; IYH = distance to check edge positions
722A             7 334 ; IYL = initialize return value of 'Path_Finder'
722A 2A 4C 71    7 335 ld      hl, (@Queue_Tail+1)         ; initialize red queue area
722D E5          7 336 push    hl                          ; store queue tail
722E             7 338 ; set up red board (right-left) start positions distances
722E EB          7 340 ex      de, hl                      ; take advantage of last "CopyPositions" execution
722F 2D          7 341 dec     l                           ; move HL to red board right-left address (last position)
7230 0E 43       7 342 ld      c, VICTORY+FRIENDLY         ; set start positions distance (+ friendly flag)
7232 3E 02       7 343 ld      a, FRIEND                   ; set distance to compare with
7234 BE          7 344 cp      (hl)                        ; check 1st start position distance
7235 D4 41 71    7 345 call    nc, PathFinder_Update       ; if FRIEND >= distance, update distance
7238 2E 84       7 346 ld      l, (RED_BOARD_RIGHT_LEFT+52)%256 ; move HL to next start position address
723A BE          7 347 cp      (hl)                        ; check 2nd start position distance
723B D4 41 71    7 348 call    nc, PathFinder_Update       ; (repeat for each start position)
723E 2E 7B       7 349 ld      l, (RED_BOARD_RIGHT_LEFT+43)%256
7240 BE          7 350 cp      (hl)                        ; check 3rd start position distance
7241 D4 41 71    7 351 call    nc, PathFinder_Update
7244 2E 72       7 352 ld      l, (RED_BOARD_RIGHT_LEFT+34)%256
7246 BE          7 353 cp      (hl)                        ; check 4th start position distance
7247 D4 41 71    7 354 call    nc, PathFinder_Update
724A 2E 69       7 355 ld      l, (RED_BOARD_RIGHT_LEFT+25)%256
724C BE          7 356 cp      (hl)                        ; check 5th start position distance
724D D4 41 71    7 357 call    nc, PathFinder_Update
7250 2E 60       7 358 ld      l, (RED_BOARD_RIGHT_LEFT+16)%256
7252 BE          7 359 cp      (hl)                        ; check 6th start position distance
7253 D4 41 71    7 360 call    nc, PathFinder_Update
7256 2E 57       7 361 ld      l, (RED_BOARD_RIGHT_LEFT+7)%256
7258 C3 8D 72    7 362 jp      Path_Finder_First           ; calculate red two-distance (right-left)
725B             7 364 ; ----------------------------------------------------------------------------------------------------------------------
725B             7 365 ; Path_Finder: calculate two-distance metric for each board position
725B             7 366 ;
725B             7 367 ; The algorithm is implemented running PATHFINDER, starting at the corresponding side of the input board
725B             7 368 ;
725B             7 369 ; Input:    HL  = cyan or red queue area address
725B             7 370 ;           IYH = distance to check edge positions
725B             7 371 ;           IYL = 0
725B             7 372 ;
725B             7 373 ; Output:   A = DEFEAT, if corresponding edge couldn't be reached
725B             7 374 ;           A = WINNER, if there is chain of connected (color) tokens between the two edges
725B             7 375 ;           A = X, otherwise
725B             7 376 ;
725B             7 377 ; Uses:     @Queue_Tail (queue pointer in 'PathFinder_Update' routine)
725B             7 378 ;
725B             7 379 ; Destroys: DE, HL, IY
725B             7 380 ; ----------------------------------------------------------------------------------------------------------------------
725B             7 381 Path_Finder:
725B 2C          7 382 inc     l                           ; move queue head down
725C E5          7 383 push    hl                          ; preserve queue head address
725D 6E          7 384 ld      l, (hl)                     ; retrieve next position to be checked
725E 24          7 385 inc     h                           ; move HL to corresponding board address
725F 4E          7 386 ld      c, (hl)                     ; retrieve distance from this position to start
7260 45          7 387 ld      b, l                        ; store current position
7261             7 389 ; look for adjacent positions
7261 7D          7 391 ld      a, l                        ; get current position
7262 FD 84       7 392 add     a, iyh                      ; add distance to check edge positions
7264 6F          7 393 ld      l, a                        ; move HL to calculated position address
7265 CB 7E       7 394 bit     7, (hl)                     ; is it an edge?
7267 20 34       7 395 jr      nz, Path_Finder_Adjacent    ; yes, process adjacent positions
7269 3E 02       7 397 ld      a, FRIEND                   ; set distance to compare with
726B             7 398 ; return point from PathFinder_Adjacent
726B             7 399 Path_Finder_Neighbors
726B 68          7 400 ld      l, b                        ; restore current position to be checked
726C 2C          7 401 inc     l                           ; move HL to right neighbor address
726D BE          7 402 cp      (hl)                        ; check right neighbor distance
726E D4 41 71    7 403 call    nc, PathFinder_Update       ; if FRIEND >= distance, update distance
7271 2D          7 404 dec     l                           ; move HL to left neighbor address
7272 2D          7 405 dec     l
7273 BE          7 406 cp      (hl)                        ; check left neighbor distance
7274 D4 41 71    7 407 call    nc, PathFinder_Update       ; (repeat for each neighbor)
7277 11 F8 FF    7 408 ld      de, -WIDTH
727A 19          7 409 add     hl, de
727B BE          7 410 cp      (hl)                        ; check upper-left neighbor distance
727C D4 41 71    7 411 call    nc, PathFinder_Update
727F 2C          7 412 inc     l
7280 BE          7 413 cp      (hl)                        ; check upper-right neighbor distance
7281 D4 41 71    7 414 call    nc, PathFinder_Update
7284 11 10 00    7 415 ld      de, WIDTH*2
7287 19          7 416 add     hl, de
7288 BE          7 417 cp      (hl)                        ; check lower-left neighbor distance
7289 D4 41 71    7 418 call    nc, PathFinder_Update
728C 2C          7 419 inc     l
728D             7 420 Path_Finder_First
728D BE          7 421 cp      (hl)                        ; check lower-right neighbor distance
728E D4 41 71    7 422 call    nc, PathFinder_Update
7291 E1          7 423 pop     hl                          ; restore queue tail address
7292 3A 4C 71    7 424 ld      a, (@Queue_Tail+1)          ; check queue
7295 BD          7 425 cp      l                           ; is queue empty?
7296 C2 5B 72    7 426 jp      nz, Path_Finder             ; no, repeat until queue is empty
7299             7 428 ; return if corresponding edge was reached
7299 FD 7D       7 430 ld      a, iyl                      ; get last position processed by 'Path_Finder_Adjacent'
729B 3D          7 431 dec     a                           ; return A = DEFEAT, if the edge couldn't be reached
729C             7 432 ; return A = X, otherwise
729C C9          7 433 ret
729D             7 435 ; ----------------------------------------------------------------------------------------------------------------------
729D             7 436 ; Check adjacent hexagons.
729D             7 437 ;
729D             7 438 ; This is an approach to update the two-distance of adjacent positions. As explained in Jack van Rijswijck's thesis:
729D             7 439 ; "two cells are adjacent if they share a common edge on the board."
729D             7 440 ;
729D             7 441 ; Input:    B  = current position
729D             7 442 ;           C  = current distance (with a flag at 6th bit that indicates a friendly position)
729D             7 443 ;           HL = current edge position address (a flag in 7th bit indicates an edge position and the lowest 3 bits the
729D             7 444 ;                edge number)
729D             7 445 ;
729D             7 446 ; Output:   A = WINNER, if there is a chain of connected tokens of the same color between the two edges.
729D             7 447 ;           A = FRIEND, IYL = current position, otherwise.
729D             7 448 ;
729D             7 449 ; Destroys: DE, HL
729D             7 450 ; ----------------------------------------------------------------------------------------------------------------------
729D             7 451 Path_Finder_Adjacent
729D 3E 43       7 452 ld      a, WIN_CONDITION            ; A = VICTORY+FRIENDLY
729F B9          7 453 cp      c                           ; is current distance victory and friendly?
72A0 28 11       7 454 jr      z, Path_Finder_Abort        ; yes, abort path_finder
72A2 7E          7 455 ld      a, (hl)                     ; get current edge position
72A3 E6 07       7 456 and     %00000111                   ; convert to edge number (0..6)
72A5 87          7 457 add     a, a                        ; calculate vector table routine index
72A6 6F          7 458 ld      l, a                        ; set index in L
72A7 24          7 459 inc     h                           ; move HL to (cyan or red) vector table routine address
72A8 5E          7 460 ld      e, (hl)                     ; get low byte of vector table routine address
72A9 2C          7 461 inc     l                           ; move HL to high byte of vector table routine address
72AA 56          7 462 ld      d, (hl)                     ; get high byte of vector table routine address
72AB EB          7 463 ex      de, hl                      ; HL points to 'PathFinder_[COLOR]_Edge_[n]' routine address
72AC 15          7 464 dec     d                           ; move DE to cyan or red board address
72AD 58          7 465 ld      e, b                        ; restore pointer to current position address
72AE FD 68       7 466 ld      iyl, b                      ; store current position
72B0 3E 02       7 467 ld      a, FRIEND                   ; set distance to compare with
72B2 E9          7 468 jp      (hl)                        ; jump to 'PathFinder_[COLOR]_Edge_[n]' routine
72B3             7 469 Path_Finder_Abort
72B3 E1          7 470 pop     hl                          ; discard queue pointer
72B4 AF          7 471 xor     a                           ; return A = WINNER
72B5 C9          7 472 ret
72B6             7 474 ; ----------------------------------------------------------------------------------------------------------------------
72B6             7 475 ;  Check two-distance of RED adjacents
72B6             7 476 ; ----------------------------------------------------------------------------------------------------------------------
72B6             7 477 PathFinder_RED_Edge_0
72B6 EB          7 478 ex      de, hl                      ; restore pointer to current position address
72B7 11 12 00    7 479 ld      de, 9*2                     ; calculate distance to adjacent #2
72BA 19          7 480 add     hl, de                      ; move HL to adjacent #2 address
72BB BE          7 481 cp      (hl)                        ; check adjacent #2 distance
72BC D4 41 71    7 482 call    nc, PathFinder_Update       ; if FRIEND >= adjacent #2 distance, update distance
72BF 11 09 00    7 483 ld      de, 9                       ; calculate distance to adjacent #3
72C2 19          7 484 add     hl, de                      ; move HL to adjacent #3 address
72C3 BE          7 485 cp      (hl)                        ; check adjacent #3 distance
72C4 D4 41 71    7 486 call    nc, PathFinder_Update       ; (repeat for each adjacent)
72C7 11 09 00    7 487 ld      de, 9
72CA 19          7 488 add     hl, de
72CB BE          7 489 cp      (hl)                        ; check adjacent #4 distance
72CC D4 41 71    7 490 call    nc, PathFinder_Update
72CF 11 09 00    7 491 ld      de, 9
72D2 19          7 492 add     hl, de
72D3 BE          7 493 cp      (hl)                        ; check adjacent #5 distance
72D4 D4 41 71    7 494 call    nc, PathFinder_Update
72D7 11 09 00    7 495 ld      de, 9
72DA 19          7 496 add     hl, de
72DB BE          7 497 cp      (hl)                        ; check adjacent #6 distance
72DC D4 41 71    7 498 call    nc, PathFinder_Update
72DF FD 45       7 499 ld      b, iyl                      ; restore current position
72E1 C3 6B 72    7 500 jp      Path_Finder_Neighbors       ; continue processing neighbors
72E4             7 502 PathFinder_RED_Edge_1
72E4 EB          7 503 ex      de, hl                      ; restore pointer to current position address
72E5 11 12 00    7 504 ld      de, 9*2
72E8 19          7 505 add     hl, de
72E9 BE          7 506 cp      (hl)                        ; check adjacent #3 distance
72EA D4 41 71    7 507 call    nc, PathFinder_Update
72ED 11 09 00    7 508 ld      de, 9
72F0 19          7 509 add     hl, de
72F1 BE          7 510 cp      (hl)                        ; check adjacent #4 distance
72F2 D4 41 71    7 511 call    nc, PathFinder_Update
72F5 11 09 00    7 512 ld      de, 9
72F8 19          7 513 add     hl, de
72F9 BE          7 514 cp      (hl)                        ; check adjacent #5 distance
72FA D4 41 71    7 515 call    nc, PathFinder_Update
72FD 11 09 00    7 516 ld      de, 9
7300 19          7 517 add     hl, de
7301 BE          7 518 cp      (hl)                        ; check adjacent #6 distance
7302 D4 41 71    7 519 call    nc, PathFinder_Update
7305 FD 45       7 520 ld      b, iyl                      ; restore current position
7307 C3 6B 72    7 521 jp      Path_Finder_Neighbors       ; continue processing neighbors
730A             7 523 PathFinder_RED_Edge_2
730A EB          7 524 ex      de, hl                      ; restore pointer to current position address
730B 11 12 00    7 525 ld      de, 9*2
730E 19          7 526 add     hl, de
730F BE          7 527 cp      (hl)                        ; check adjacent #4 distance
7310 D4 41 71    7 528 call    nc, PathFinder_Update
7313 11 09 00    7 529 ld      de, 9
7316 19          7 530 add     hl, de
7317 BE          7 531 cp      (hl)                        ; check adjacent #5 distance
7318 D4 41 71    7 532 call    nc, PathFinder_Update
731B 11 09 00    7 533 ld      de, 9
731E 19          7 534 add     hl, de
731F BE          7 535 cp      (hl)                        ; check adjacent #6 distance
7320 D4 41 71    7 536 call    nc, PathFinder_Update
7323 11 CA FF    7 537 ld      de, -9*6
7326 19          7 538 add     hl, de
7327 BE          7 539 cp      (hl)                        ; check adjacent #0 distance
7328 D4 41 71    7 540 call    nc, PathFinder_Update
732B FD 45       7 541 ld      b, iyl                      ; restore current position
732D C3 6B 72    7 542 jp      Path_Finder_Neighbors       ; continue processing neighbors
7330             7 544 PathFinder_RED_Edge_3
7330 EB          7 545 ex      de, hl                      ; restore pointer to current position address
7331 11 E5 FF    7 546 ld      de, -9*3
7334 19          7 547 add     hl, de
7335 BE          7 548 cp      (hl)                        ; check adjacent #0 distance
7336 D4 41 71    7 549 call    nc, PathFinder_Update
7339 11 09 00    7 550 ld      de, 9
733C 19          7 551 add     hl, de
733D BE          7 552 cp      (hl)                        ; check adjacent #1 distance
733E D4 41 71    7 553 call    nc, PathFinder_Update
7341 11 24 00    7 554 ld      de, 9*4
7344 19          7 555 add     hl, de
7345 BE          7 556 cp      (hl)                        ; check adjacent #5 distance
7346 D4 41 71    7 557 call    nc, PathFinder_Update
7349 11 09 00    7 558 ld      de, 9
734C 19          7 559 add     hl, de
734D BE          7 560 cp      (hl)                        ; check adjacent #6 distance
734E D4 41 71    7 561 call    nc, PathFinder_Update
7351 FD 45       7 562 ld      b, iyl                      ; restore current position
7353 C3 6B 72    7 563 jp      Path_Finder_Neighbors       ; continue processing neighbors
7356             7 565 PathFinder_RED_Edge_4
7356 EB          7 566 ex      de, hl                      ; restore pointer to current position address
7357 11 12 00    7 567 ld      de, 9*2
735A 19          7 568 add     hl, de
735B BE          7 569 cp      (hl)                        ; check adjacent #6 distance
735C D4 41 71    7 570 call    nc, PathFinder_Update
735F 11 CA FF    7 571 ld      de, -9*6
7362 19          7 572 add     hl, de
7363 BE          7 573 cp      (hl)                        ; check adjacent #0 distance
7364 D4 41 71    7 574 call    nc, PathFinder_Update
7367 11 09 00    7 575 ld      de, 9
736A 19          7 576 add     hl, de
736B BE          7 577 cp      (hl)                        ; check adjacent #1 distance
736C D4 41 71    7 578 call    nc, PathFinder_Update
736F 11 09 00    7 579 ld      de, 9
7372 19          7 580 add     hl, de
7373 BE          7 581 cp      (hl)                        ; check adjacent #2 distance
7374 D4 41 71    7 582 call    nc, PathFinder_Update
7377 FD 45       7 583 ld      b, iyl                      ; restore current position
7379 C3 6B 72    7 584 jp      Path_Finder_Neighbors       ; continue processing neighbors
737C             7 586 PathFinder_RED_Edge_5
737C EB          7 587 ex      de, hl                      ; restore pointer to current position address
737D 11 D3 FF    7 588 ld      de, -9*5
7380 19          7 589 add     hl, de
7381 BE          7 590 cp      (hl)                        ; check adjacent #0 distance
7382 D4 41 71    7 591 call    nc, PathFinder_Update
7385 11 09 00    7 592 ld      de, 9
7388 19          7 593 add     hl, de
7389 BE          7 594 cp      (hl)                        ; check adjacent #1 distance
738A D4 41 71    7 595 call    nc, PathFinder_Update
738D 11 09 00    7 596 ld      de, 9
7390 19          7 597 add     hl, de
7391 BE          7 598 cp      (hl)                        ; check adjacent #2 distance
7392 D4 41 71    7 599 call    nc, PathFinder_Update
7395 11 09 00    7 600 ld      de, 9
7398 19          7 601 add     hl, de
7399 BE          7 602 cp      (hl)                        ; check adjacent #3 distance
739A D4 41 71    7 603 call    nc, PathFinder_Update
739D FD 45       7 604 ld      b, iyl                      ; restore current position
739F C3 6B 72    7 605 jp      Path_Finder_Neighbors       ; continue processing neighbors
73A2             7 607 PathFinder_RED_Edge_6
73A2 EB          7 608 ex      de, hl                      ; restore pointer to current position address
73A3 11 CA FF    7 609 ld      de, -9*6
73A6 19          7 610 add     hl, de
73A7 BE          7 611 cp      (hl)                        ; check adjacent #0 distance
73A8 D4 41 71    7 612 call    nc, PathFinder_Update
73AB 11 09 00    7 613 ld      de, 9
73AE 19          7 614 add     hl, de
73AF BE          7 615 cp      (hl)                        ; check adjacent #1 distance
73B0 D4 41 71    7 616 call    nc, PathFinder_Update
73B3 11 09 00    7 617 ld      de, 9
73B6 19          7 618 add     hl, de
73B7 BE          7 619 cp      (hl)                        ; check adjacent #2 distance
73B8 D4 41 71    7 620 call    nc, PathFinder_Update
73BB 11 09 00    7 621 ld      de, 9
73BE 19          7 622 add     hl, de
73BF BE          7 623 cp      (hl)                        ; check adjacent #3 distance
73C0 D4 41 71    7 624 call    nc, PathFinder_Update
73C3 11 09 00    7 625 ld      de, 9
73C6 19          7 626 add     hl, de
73C7 BE          7 627 cp      (hl)                        ; check adjacent #4 distance
73C8 D4 41 71    7 628 call    nc, PathFinder_Update
73CB FD 45       7 629 ld      b, iyl                      ; restore current position
73CD C3 6B 72    7 630 jp      Path_Finder_Neighbors       ; continue processing neighbors
73D0             7 632 ; ----------------------------------------------------------------------------------------------------------------------
73D0             7 633 ;  Check two-distance of CYAN adjacents
73D0             7 634 ; ----------------------------------------------------------------------------------------------------------------------
73D0             7 635 PathFinder_CYAN_Edge_0
73D0 EB          7 636 ex      de, hl                      ; restore pointer to current position address
73D1 2C          7 637 inc     l
73D2 2C          7 638 inc     l
73D3 BE          7 639 cp      (hl)                        ; check adjacent #2 distance
73D4 D4 41 71    7 640 call    nc, PathFinder_Update
73D7 2C          7 641 inc     l
73D8 BE          7 642 cp      (hl)                        ; check adjacent #3 distance
73D9 D4 41 71    7 643 call    nc, PathFinder_Update
73DC 2C          7 644 inc     l
73DD BE          7 645 cp      (hl)                        ; check adjacent #4 distance
73DE D4 41 71    7 646 call    nc, PathFinder_Update
73E1 2C          7 647 inc     l
73E2 BE          7 648 cp      (hl)                        ; check adjacent of edge number 5
73E3 D4 41 71    7 649 call    nc, PathFinder_Update
73E6 2C          7 650 inc     l
73E7 BE          7 651 cp      (hl)                        ; check adjacent of edge number 6
73E8 D4 41 71    7 652 call    nc, PathFinder_Update
73EB FD 45       7 653 ld      b, iyl                      ; restore current position
73ED C3 6B 72    7 654 jp      Path_Finder_Neighbors       ; continue processing neighbors
73F0             7 656 PathFinder_CYAN_Edge_1
73F0 EB          7 657 ex      de, hl                      ; restore pointer to current position address
73F1 2C          7 658 inc     l
73F2 2C          7 659 inc     l
73F3 BE          7 660 cp      (hl)                        ; check adjacent #3 distance
73F4 D4 41 71    7 661 call    nc, PathFinder_Update
73F7 2C          7 662 inc     l
73F8 BE          7 663 cp      (hl)                        ; check adjacent #4 distance
73F9 D4 41 71    7 664 call    nc, PathFinder_Update
73FC 2C          7 665 inc     l
73FD BE          7 666 cp      (hl)                        ; check adjacent #5 distance
73FE D4 41 71    7 667 call    nc, PathFinder_Update
7401 2C          7 668 inc     l
7402 BE          7 669 cp      (hl)                        ; check adjacent #6 distance
7403 D4 41 71    7 670 call    nc, PathFinder_Update
7406 FD 45       7 671 ld      b, iyl                      ; restore current position
7408 C3 6B 72    7 672 jp      Path_Finder_Neighbors       ; continue processing neighbors
740B             7 674 PathFinder_CYAN_Edge_2
740B EB          7 675 ex      de, hl                      ; restore pointer to current position address
740C 2D          7 676 dec     l
740D 2D          7 677 dec     l
740E BE          7 678 cp      (hl)                        ; check adjacent #0 distance
740F D4 41 71    7 679 call    nc, PathFinder_Update
7412 2C          7 680 inc     l
7413 2C          7 681 inc     l
7414 2C          7 682 inc     l
7415 2C          7 683 inc     l
7416 BE          7 684 cp      (hl)                        ; check adjacent #4 distance
7417 D4 41 71    7 685 call    nc, PathFinder_Update
741A 2C          7 686 inc     l
741B BE          7 687 cp      (hl)                        ; check adjacent #5 distance
741C D4 41 71    7 688 call    nc, PathFinder_Update
741F 2C          7 689 inc     l
7420 BE          7 690 cp      (hl)                        ; check adjacent #6 distance
7421 D4 41 71    7 691 call    nc, PathFinder_Update
7424 FD 45       7 692 ld      b, iyl                      ; restore current position
7426 C3 6B 72    7 693 jp      Path_Finder_Neighbors       ; continue processing neighbors
7429             7 695 PathFinder_CYAN_Edge_3
7429 EB          7 696 ex      de, hl                      ; restore pointer to current position address
742A 2D          7 697 dec     l
742B 2D          7 698 dec     l
742C 2D          7 699 dec     l
742D BE          7 700 cp      (hl)                        ; check adjacent #0 distance
742E D4 41 71    7 701 call    nc, PathFinder_Update
7431 2C          7 702 inc     l
7432 BE          7 703 cp      (hl)                        ; check adjacent #1 distance
7433 D4 41 71    7 704 call    nc, PathFinder_Update
7436 2C          7 705 inc     l
7437 2C          7 706 inc     l
7438 2C          7 707 inc     l
7439 2C          7 708 inc     l
743A BE          7 709 cp      (hl)                        ; check adjacent #5 distance
743B D4 41 71    7 710 call    nc, PathFinder_Update
743E 2C          7 711 inc     l
743F BE          7 712 cp      (hl)                        ; check adjacent #6 distance
7440 D4 41 71    7 713 call    nc, PathFinder_Update
7443 FD 45       7 714 ld      b, iyl                      ; restore current position
7445 C3 6B 72    7 715 jp      Path_Finder_Neighbors       ; continue processing neighbors
7448             7 717 PathFinder_CYAN_Edge_4
7448 EB          7 718 ex      de, hl                      ; restore pointer to current position address
7449 2C          7 719 inc     l
744A 2C          7 720 inc     l
744B BE          7 721 cp      (hl)                        ; check adjacent #6 distance
744C D4 41 71    7 722 call    nc, PathFinder_Update
744F 2D          7 723 dec     l
7450 2D          7 724 dec     l
7451 2D          7 725 dec     l
7452 2D          7 726 dec     l
7453 BE          7 727 cp      (hl)                        ; check adjacent #2 distance
7454 D4 41 71    7 728 call    nc, PathFinder_Update
7457 2D          7 729 dec     l
7458 BE          7 730 cp      (hl)                        ; check adjacent #1 distance
7459 D4 41 71    7 731 call    nc, PathFinder_Update
745C 2D          7 732 dec     l
745D BE          7 733 cp      (hl)                        ; check adjacent #0 distance
745E D4 41 71    7 734 call    nc, PathFinder_Update
7461 FD 45       7 735 ld      b, iyl                      ; restore current position
7463 C3 6B 72    7 736 jp      Path_Finder_Neighbors       ; continue processing neighbors
7466             7 738 PathFinder_CYAN_Edge_5
7466 EB          7 739 ex      de, hl                      ; restore pointer to current position address
7467 2D          7 740 dec     l
7468 2D          7 741 dec     l
7469 BE          7 742 cp      (hl)                        ; check adjacent #3 distance
746A D4 41 71    7 743 call    nc, PathFinder_Update
746D 2D          7 744 dec     l
746E BE          7 745 cp      (hl)                        ; check adjacent #2 distance
746F D4 41 71    7 746 call    nc, PathFinder_Update
7472 2D          7 747 dec     l
7473 BE          7 748 cp      (hl)                        ; check adjacent #1 distance
7474 D4 41 71    7 749 call    nc, PathFinder_Update
7477 2D          7 750 dec     l
7478 BE          7 751 cp      (hl)                        ; check adjacent #0 distance
7479 D4 41 71    7 752 call    nc, PathFinder_Update
747C FD 45       7 753 ld      b, iyl                      ; restore current position
747E C3 6B 72    7 754 jp      Path_Finder_Neighbors       ; continue processing neighbors
7481             7 756 PathFinder_CYAN_Edge_6
7481 EB          7 757 ex      de, hl                      ; restore pointer to current position address
7482 2D          7 758 dec     l
7483 2D          7 759 dec     l
7484 BE          7 760 cp      (hl)                        ; check adjacent #4 distance
7485 D4 41 71    7 761 call    nc, PathFinder_Update
7488 2D          7 762 dec     l
7489 BE          7 763 cp      (hl)                        ; check adjacent #3 distance
748A D4 41 71    7 764 call    nc, PathFinder_Update
748D 2D          7 765 dec     l
748E BE          7 766 cp      (hl)                        ; check adjacent #2 distance
748F D4 41 71    7 767 call    nc, PathFinder_Update
7492 2D          7 768 dec     l
7493 BE          7 769 cp      (hl)                        ; check adjacent #1 distance
7494 D4 41 71    7 770 call    nc, PathFinder_Update
7497 2D          7 771 dec     l
7498 BE          7 772 cp      (hl)                        ; check adjacent #0 distance
7499 D4 41 71    7 773 call    nc, PathFinder_Update
749C FD 45       7 774 ld      b, iyl                      ; restore current position
749E C3 6B 72    7 775 jp      Path_Finder_Neighbors       ; continue processing neighbors
74A1             7 777 ; ----------------------------------------------------------------------------------------------------------------------
74A1             7 778 ; PathFinder_Score: calculate board score depending on speccy color
74A1             7 779 ;
74A1             7 780 ; Input:    -
74A1             7 781 ;
74A1             7 782 ; Output:   A = DEFEAT, if speccy can't reach his opposite edge
74A1             7 783 ;           A = WINNER, if speccy has a chain of connected tokens between the two edges or if player cant reach his edge
74A1             7 784 ;           A = speccy heuristic evaluation, otherwise
74A1             7 785 ;
74A1             7 786 ; Uses:     AI_PLAYER (speccy side)
74A1             7 787 ;
74A1             7 788 ; Destroys: A', BC, DE, HL, IY
74A1             7 789 ; ----------------------------------------------------------------------------------------------------------------------
74A1             7 790 PathFinder_Score:
74A1 3A 99 61    7 791 ld      a, (AI_PLAYER)
74A4 FE 02       7 792 cp      FRIEND                      ; if speccy is FRIEND, calculate CYAN score
74A6 28 31       7 793 jr      z, PathFinder_CyanScore
74A8             7 795 ; ----------------------------------------------------------------------------------------------------------------------
74A8             7 796 ; PathFinder_RedScore: calculate red score
74A8             7 797 ;
74A8             7 798 ; Input:    -
74A8             7 799 ;
74A8             7 800 ; Output:   A = DEFEAT, if red can't reach his opposite edge
74A8             7 801 ;           A = WINNER, if there a chain of connected red tokens between the two edges or if cyan can't reach his edge
74A8             7 802 ;           A = red heuristic evaluation, otherwise
74A8             7 803 ;
74A8             7 804 ; Uses:     POTENTIALS (board potential and attack mobility)
74A8             7 805 ;
74A8             7 806 ; Destroys: A', BC, DE, HL, IY
74A8             7 807 ; ----------------------------------------------------------------------------------------------------------------------
74A8             7 808 PathFinder_RedScore
74A8 CD DB 71    7 809 call    PathFinder_Red_LeftRight    ; calculate RED two-distance from LEFT to RIGHT edge
74AB C8          7 810 ret     z                           ; if red has a chain of connected tokens, return A = WINNER
74AC 08          7 811 ex      af, af'                     ; save first result
74AD CD 1D 72    7 812 call    PathFinder_Red_RightLeft    ; calculate RED two-distance from RIGHT to LEFT edge
74B0 47          7 813 ld      b, a                        ; save second result
74B1 08          7 814 ex      af, af'                     ; restore first result
74B2 90          7 815 sub     b                           ; subtract both results
74B3 78          7 816 ld      a, b                        ; restore second result
74B4 C8          7 817 ret     z                           ; if red can't reach his opposite edge, return A = DEFEAT
74B5 CD 67 71    7 819 call    PathFinder_Cyan_UpDown      ; calculate CYAN two-distance from UP to DOWN edge
74B8 08          7 820 ex      af, af'                     ; save result
74B9 CD A3 71    7 821 call    PathFinder_Cyan_DownUp      ; calculate CYAN two-distance from DOWN to UP edge
74BC 47          7 822 ld      b, a                        ; save second result
74BD 08          7 823 ex      af, af'                     ; restore first result
74BE 90          7 824 sub     b                           ; subtract both results
74BF C8          7 825 ret     z                           ; if cyan can't reach his opposite edge, return A = WINNER
74C0 21 09 64    7 827 ld      hl, RED_BOARD_LEFT_RIGHT+9  ; HL points to red board left-right address (1st position)
74C3 11 51 64    7 828 ld      de, RED_BOARD_RIGHT_LEFT+1  ; DE points to red board right-left address (1st position)
74C6 CD 17 75    7 829 call    PathFinder_Potentials       ; calculate RED potentials
74C9 ED 43 97 61 7 830 ld      (POTENTIALS), bc            ; store RED potentials
74CD 21 09 61    7 832 ld      hl, CYAN_BOARD_UP_DOWN+9    ; HL points to cyan board up-down address (1st position)
74D0 11 51 61    7 833 ld      de, CYAN_BOARD_DOWN_UP+1    ; DE points to cyan board down-up address (1st position)
74D3 CD 17 75    7 834 call    PathFinder_Potentials       ; calculate cyan potentials
74D6 C3 07 75    7 835 jp      PathFinder_Evaluation       ; calculate heuristic evaluation
74D9             7 837 ; ----------------------------------------------------------------------------------------------------------------------
74D9             7 838 ; PathFinder_CyanScore: calculate cyan score
74D9             7 839 ;
74D9             7 840 ; Input:    -
74D9             7 841 ;
74D9             7 842 ; Output:   A = DEFEAT, if cyan can't reach his opposite edge
74D9             7 843 ;           A = WINNER, if there a chain of connected cyan tokens between the two edges or if red can't reach his edge
74D9             7 844 ;           A = cyan heuristic evaluation, otherwise
74D9             7 845 ;
74D9             7 846 ; Uses:     POTENTIALS (board potential and attack mobility)
74D9             7 847 ;
74D9             7 848 ; Destroys: A', BC, DE, HL
74D9             7 849 ; ----------------------------------------------------------------------------------------------------------------------
74D9             7 850 PathFinder_CyanScore
74D9 CD 67 71    7 851 call    PathFinder_Cyan_UpDown      ; calculate CYAN two-distance from UP to DOWN edge
74DC C8          7 852 ret     z                           ; if cyan has a chain of connected tokens, return A = WINNER
74DD 08          7 853 ex      af, af'                     ; save result
74DE CD A3 71    7 854 call    PathFinder_Cyan_DownUp      ; calculate CYAN two-distance from DOWN to UP edge
74E1 47          7 855 ld      b, a                        ; save second result
74E2 08          7 856 ex      af, af'                     ; restore first result
74E3 90          7 857 sub     b                           ; subtract both results
74E4 78          7 858 ld      a, b                        ; restore second result
74E5 C8          7 859 ret     z                           ; if cyan can't reach his opposite edge, return A = DEFEAT
74E6 CD DB 71    7 861 call    PathFinder_Red_LeftRight    ; calculate RED two-distance from LEFT to RIGHT edge
74E9 08          7 862 ex      af, af'                     ; save result
74EA CD 1D 72    7 863 call    PathFinder_Red_RightLeft    ; calculate RED two-distance from RIGHT to LEFT edge
74ED 47          7 864 ld      b, a                        ; save second result
74EE 08          7 865 ex      af, af'                     ; restore first result
74EF 90          7 866 sub     b                           ; subtract both results
74F0 C8          7 867 ret     z                           ; if red can't reach his opposite edge, return A = WINNER
74F1 21 09 61    7 869 ld      hl, CYAN_BOARD_UP_DOWN+9    ; HL points to cyan board up-down address (1st position)
74F4 11 51 61    7 870 ld      de, CYAN_BOARD_DOWN_UP+1    ; DE points to cyan board down-up address (1st position)
74F7 CD 17 75    7 871 call    PathFinder_Potentials       ; calculate cyan potentials
74FA ED 43 97 61 7 872 ld      (POTENTIALS), bc            ; save cyan potentials
74FE 21 09 64    7 874 ld      hl, RED_BOARD_LEFT_RIGHT+9  ; HL points to red board left-right address (1st position)
7501 11 51 64    7 875 ld      de, RED_BOARD_RIGHT_LEFT+1  ; DE points to red board right-left address (1st position)
7504 CD 17 75    7 876 call    PathFinder_Potentials       ; calculate red potentials
7507             7 877 ; ----------------------------------------------------------------------------------------------------------------------
7507             7 878 ; PathFinder_Evaluation: calculate heuristic evaluation.
7507             7 879 ; The original evaluation function (from cyan perspective) is described in Jack van Rijswijck's thesis as:
7507             7 880 ;
7507             7 881 ;                                       e = M (pC - pR) - (aC - aR)
7507             7 882 ; where:
7507             7 883 ;   pC = cyan board potential
7507             7 884 ;   pR = red board potential
7507             7 885 ;   aC = cyan attack mobility
7507             7 886 ;   aR = red attack mobility
7507             7 887 ;    M = a large number
7507             7 888 ;
7507             7 889 ; This adaptation uses an "invert" result to better fit BRAINIAC process.
7507             7 890 ;
7507             7 891 ; Input:    B = opponent attack mobility
7507             7 892 ;           C = opponent board potential
7507             7 893 ;
7507             7 894 ; Output:   A = heuristic evaluation
7507             7 895 ;
7507             7 896 ; Destroys: E, HL
7507             7 897 ; ----------------------------------------------------------------------------------------------------------------------
7507             7 898 PathFinder_Evaluation:
7507 21 98 61    7 899 ld      hl, POTENTIALS+1            ; HL points to color attack mobility address
750A 78          7 900 ld      a, b                        ; get opponent's attack mobility
750B 96          7 901 sub     (hl)                        ; subtract attack mobilities -> (aC - aR)
750C 5F          7 902 ld      e, a                        ; save the result in E
750D 2D          7 903 dec     l                           ; move HL to player's board potential address
750E 79          7 904 ld      a, c                        ; get opponent's board potential
750F 96          7 905 sub     (hl)                        ; subtract potentials -> (pC - pR)
7510 87          7 906 add     a, a                        ; multiply by 8 -> M (pC - pR)
7511 87          7 907 add     a, a
7512 87          7 908 add     a, a
7513 93          7 909 sub     e                           ; subtract result of attack mobilities subtraction
7514             7 910 ; -> M (pC - pR) - (aC - aR)
7514 EE 80       7 911 xor     $80                         ; invert sign for easier further comparative
7516 C9          7 912 ret                                 ; return A = -1 * (M (pC - pR) - (aC - aR))
7517             7 914 ; ----------------------------------------------------------------------------------------------------------------------
7517             7 915 ; PathFinder_Potentials: calculate board potential and attack mobility
7517             7 916 ;
7517             7 917 ; * A cell’s Cyan potential is defined as the sum of its Cyan two-distance to both cyan edges; its Red potential is the
7517             7 918 ;   sum of its Red two-distance to both red edges. The board potential is defined as the lowest potential that occurs on
7517             7 919 ;   the board.
7517             7 920 ; * The attack mobility is defined for each player as the number of cells that realize that player’s board potential.
7517             7 921 ;
7517             7 922 ; Input:    HL = cyan board or red board address
7517             7 923 ;           DE = cyan board or red board address
7517             7 924 ;
7517             7 925 ; Output:   B = attack mobility
7517             7 926 ;           C = board potential
7517             7 927 ;
7517             7 928 ; Destroys: A, DE, HL, IYL
7517             7 929 ; ----------------------------------------------------------------------------------------------------------------------
7517             7 930 PathFinder_Potentials:
7517 01 FF 00    7 931 ld      bc, $00FF                   ; initialize attack mobility and board potential
751A FD 2E 3D    7 932 ld      iyl, 61                     ; number of cells to be checked (loop counter)
751D             7 933 Potentials_Loop
751D 7E          7 934 ld      a, (hl)                     ; get cell's two-distance pointed by HL
751E FE 40       7 935 cp      $40                         ; is cell occupied or border?
7520 30 16       7 936 jr      nc, Potentials_Next         ; yes, skip to next cell 
7522 FE 04       7 937 cp      $04                         ; cell distance was not updated?
7524 38 1A       7 938 jr      c, Potentials_Infinite      ; yes, set cell potential as "infinite" and skip
7526 1A          7 939 ld      a, (de)                     ; get cell's two-distance pointed by DE
7527 FE 04       7 940 cp      $04                         ; cell distance was not updated?
7529 38 15       7 941 jr      c, Potentials_Infinite      ; yes, set cell potential as "infinite" and skip
752B 86          7 942 add     a, (hl)                     ; sum both two-distances (calculate cell potential)
752C 77          7 943 ld      (hl), a                     ; save potential in the cell pointed by HL
752D B9          7 944 cp      c                           ; is the new potential >= board potential?
752E D2 34 75    7 945 jp      nc, Potentials_Mobility     ; yes, check attack mobility
7531 4F          7 946 ld      c, a                        ; no, board potential = new potential
7532 06 01       7 947 ld      b, 1                        ; restart attack mobility
7534             7 948 Potentials_Mobility
7534 C2 38 75    7 949 jp      nz, Potentials_Next         ; if (potential <> last potential) skip to next cell
7537 04          7 950 inc     b                           ; else, increment attack mobility
7538             7 951 Potentials_Next
7538 1C          7 952 inc     e                           ; move to next cells of each board
7539 2C          7 953 inc     l
753A FD 2D       7 954 dec     iyl                         ; decrement loop counter
753C C2 1D 75    7 955 jp      nz, Potentials_Loop         ; repeat until end of boards
753F C9          7 956 ret
7540             7 957 Potentials_Infinite
7540 CB FE       7 958 set     7, (hl)                     ; set cell potential as "infinite"
7542 C3 38 75    7 959 jp      Potentials_Next             ; skip to next cell
7545             7 961 ; ----------------------------------------------------------------------------------------------------------------------
7545             7 962 ; PathFinder_Candidates: search candidates based on color score result and boards potentials
7545             7 963 ;
7545             7 964 ; Input:    A  = DEFEAT, WINNER or heuristic result
7545             7 965 ;           IX = candidates area address
7545             7 966 ;
7545             7 967 ; Output:   IX = first candidate address
7545             7 968 ;
7545             7 969 ; Uses:     AI_PLAYER (speccy side)
7545             7 970 ;           POTENTIALS (board potential and attack mobility)
7545             7 971 ;
7545             7 972 ; Destroys: A, A', BC, DE, HL
7545             7 973 ; ----------------------------------------------------------------------------------------------------------------------
7545             7 974 PathFinder_Candidates:
7545 DD 36 00 00 7 975 ld      (ix+0), 0                   ; set candidates endmarker
7549 B7          7 977 or      a                           ; A = WINNER?
754A 28 39       7 978 jr      z, Winner_Candidates        ; yes, process candidates for winner color
754C 3C          7 979 inc     a                           ; A = DEFEAT?
754D 28 40       7 980 jr      z, Defeat_Candidates        ; yes, process candidates for defeated color
754F             7 982 ; calculate total potentials
754F 21 09 61    7 984 ld      hl, CYAN_BOARD_UP_DOWN+9    ; HL points to cyan board up-down address (1st position)
7552 11 09 64    7 985 ld      de, RED_BOARD_LEFT_RIGHT+9  ; DE points to red board left-right address (1st position)
7555 CD 17 75    7 986 call    PathFinder_Potentials       ; process candidates from total potentials
7558             7 988 ; insert the second best board potentials in candidates area
7558 79          7 990 ld      a, c                        ; set board potential in A
7559 08          7 991 ex      af, af'                     ; save board potential
755A 50          7 992 ld      d, b                        ; store attack mobility 
755B DD 5D       7 993 ld      e, ixl                      ; store candidates position
755D             7 994 Search_Second_Best
755D 2E 09       7 995 ld      l, 9                        ; HL points to board potentials address (1st position)
755F 0C          7 996 inc     c                           ; increment board potential
7560 79          7 997 ld      a, c                        ; A = second best potential
7561 06 3D       7 998 ld      b, 61                       ; number of cells to be checked (loop counter)
7563             7 999 Second_Best_Loop
7563 BE          7 1000 cp      (hl)                        ; is current board potential = 2nd best board potential?
7564 C2 6C 75    7 1001 jp      nz, Second_Best_Next        ; no, skip to next potential
7567 DD 2C       7 1002 inc     ixl                         ; yes, insert candidate
7569 DD 75 00    7 1003 ld      (ix+0), l
756C             7 1004 Second_Best_Next
756C 2C          7 1005 inc     l                           ; move HL to next board potential address
756D 10 F4       7 1006 djnz    Second_Best_Loop            ; repeat for each cell
756F DD 7D       7 1007 ld      a, ixl                      ; A = current candidates position
7571 BB          7 1008 cp      e                           ; new candidates inserted?
7572 28 E9       7 1009 jr      z, Search_Second_Best       ; no, repeat until new candidates inserted
7574             7 1011 ; insert the best board potentials in candidates area
7574 42          7 1013 ld      b, d                        ; restore attack mobility
7575 08          7 1014 ex      af, af'                     ; restore board potential
7576             7 1015 Best_Candidates
7576 2E 08       7 1016 ld      l, 8                        ; HL points to board potential address (1st position -1)
7578             7 1017 Best_Candidates_Loop
7578 2C          7 1018 inc     l                           ; move HL to next board potential address
7579 BE          7 1019 cp      (hl)                        ; is current board potential equal to best board potential?
757A C2 78 75    7 1020 jp      nz, Best_Candidates_Loop    ; no, next potential
757D DD 2C       7 1021 inc     ixl                         ; yes, insert candidate
757F DD 75 00    7 1022 ld      (ix+0), l
7582 10 F4       7 1023 djnz    Best_Candidates_Loop        ; repeat for each cell
7584 C9          7 1024 ret
7585             7 1026 ; ----------------------------------------------------------------------------------------------------------------------
7585             7 1027 ; Process candidates for winner color
7585             7 1028 ; ----------------------------------------------------------------------------------------------------------------------
7585             7 1029 Winner_Candidates
7585 3A 99 61    7 1030 ld      a, (AI_PLAYER)              ; check current player
7588 FE 02       7 1031 cp      FRIEND                      ; is it friend?
758A 28 10       7 1032 jr      z, Cyan_Potentials          ; yes, process cyan potentials
758C C3 AF 75    7 1033 jp      Red_Potentials              ; process red potentials
758F             7 1035 ; ----------------------------------------------------------------------------------------------------------------------
758F             7 1036 ; Process candidates for defeated color
758F             7 1037 ; ----------------------------------------------------------------------------------------------------------------------
758F             7 1038 Defeat_Candidates
758F 3A 99 61    7 1039 ld      a, (AI_PLAYER)              ; check current player
7592 FE 02       7 1040 cp      FRIEND                      ; is it friend?
7594 28 13       7 1041 jr      z, Red_Candidates           ; yes, process red candidates
7596             7 1043 ; if RED is defeated, candidates are chosen from cyan board potentials
7596 CD 67 71    7 1045 call    PathFinder_Cyan_UpDown      ; calculate cyan two-distance from UP to DOWN edge
7599 CD A3 71    7 1046 call    PathFinder_Cyan_DownUp      ; calculate cyan two-distance from DOWN to UP edge
759C             7 1047 Cyan_Potentials
759C 21 09 61    7 1048 ld      hl, CYAN_BOARD_UP_DOWN+9    ; HL points to cyan board up-down address (1st position)
759F 11 51 61    7 1049 ld      de, CYAN_BOARD_DOWN_UP+1    ; DE points to cyan board down-up address (1st position)
75A2 CD 17 75    7 1050 call    PathFinder_Potentials       ; calculate cyan potentials
75A5 79          7 1051 ld      a, c                        ; set board potential in A
75A6 C3 76 75    7 1052 jp      Best_Candidates             ; fill only the best candidates
75A9             7 1054 ; if CYAN is defeated, candidates are chosen from red board potentials
75A9             7 1055 Red_Candidates
75A9 CD DB 71    7 1056 call    PathFinder_Red_LeftRight    ; calculate red two-distance from LEFT to RIGHT edge
75AC CD 1D 72    7 1057 call    PathFinder_Red_RightLeft    ; calculate red two-distance from RIGHT to LEFT edge
75AF             7 1058 Red_Potentials
75AF 21 09 64    7 1059 ld      hl, RED_BOARD_LEFT_RIGHT+9  ; HL points to red board left-right address (1st pos.)
75B2 11 51 64    7 1060 ld      de, RED_BOARD_RIGHT_LEFT+1  ; DE points to red board right-left address (1st position)
75B5 CD 17 75    7 1061 call    PathFinder_Potentials       ; calculate red potentials
75B8 79          7 1062 ld      a, c                        ; set board potential in A
75B9 C3 76 75    7 1063 jp      Best_Candidates             ; fill only the best candidates
75BC             7 1065 ; ----------------------------------------------------------------------------------------------------------------------
75BC             7 1066 ; PathFinder_BrightPath: animate and highlight the hexagons included in shortest path when match ends
75BC             7 1067 ;
75BC             7 1068 ; Input:    B = current position
75BC             7 1069 ;
75BC             7 1070 ; Output:   -
75BC             7 1071 ;
75BC             7 1072 ; Uses:     TOKEN_COLOR (current token color)
75BC             7 1073 ;
75BC             7 1074 ; Destroys: A, BC, DE, HL, IY
75BC             7 1075 ; ----------------------------------------------------------------------------------------------------------------------
75BC             7 1076 PathFinder_BrightPath:
75BC C5          7 1077 push    bc                          ; store current position
75BD 3A 9E 61    7 1079 ld      a, (TOKEN_COLOR)            ; get current player color
75C0 F5          7 1080 push    af                          ; store current player color
75C1 FE 05       7 1081 cp      CYAN_COLOR                  ; check current token color
75C3 28 0B       7 1082 jr      z, BrightPath_Cyan          ; prepare board if it is cyan
75C5 21 45 64    7 1084 ld      hl, RED_BOARD_LEFT_RIGHT+69 ; HL points to red board left-right address (last position)
75C8 CD 1C 76    7 1085 call    PathFinder_PrepareBoard     ; prepare RED board 
75CB CD E4 71    7 1086 call    PathFinder_Red_BrightPath   ; find RED victory path
75CE 18 09       7 1087 jr      BrightPath_Start            ; start bright path
75D0             7 1088 BrightPath_Cyan
75D0 21 45 61    7 1089 ld      hl, CYAN_BOARD_UP_DOWN+69   ; HL points to cyan board up-down address (last position)
75D3 CD 1C 76    7 1090 call    PathFinder_PrepareBoard     ; prepare CYAN board
75D6 CD 70 71    7 1091 call    PathFinder_Cyan_BrightPath  ; find CYAN victory path
75D9             7 1092 BrightPath_Start
75D9 F1          7 1093 pop     af                          ; restore current player color
75DA C6 40       7 1094 add     a, $40                      ; apply bright attribute
75DC 32 9E 61    7 1095 ld      (TOKEN_COLOR), a            ; save color
75DF C1          7 1097 pop     bc                          ; restore current position
75E0 24          7 1099 inc     h                           ; HL points to the start position of the victory path
75E1 68          7 1100 ld      l, b
75E2 4E          7 1101 ld      c, (hl)                     ; set victory path length in C
75E3 18 1E       7 1102 jr      BrightPath_Position         ; animate and highlight the hexagon position
75E5             7 1103 BrightPath_Neighbor
75E5 2C          7 1104 inc     l                           ; move HL to left neighbor address
75E6 BE          7 1105 cp      (hl)                        ; is it the same as victory path length?
75E7 28 1A       7 1106 jr      z, BrightPath_Position      ; yes, animate and highlight the hexagon position
75E9 2D          7 1107 dec     l
75EA 2D          7 1108 dec     l                           ; right neighbor
75EB BE          7 1109 cp      (hl)                        ; is it the same as victory path length?
75EC 28 15       7 1110 jr      z, BrightPath_Position      ; yes, animate and highlight the hexagon position
75EE 7D          7 1111 ld      a, l
75EF D6 08       7 1112 sub     WIDTH
75F1 6F          7 1113 ld      l, a                        ; move HL to upper-right neighbor address
75F2 79          7 1114 ld      a, c                        ; restore victory path length in A
75F3 BE          7 1115 cp      (hl)                        ; is it the same as victory path length?
75F4 28 0D       7 1116 jr      z, BrightPath_Position      ; yes, animate and highlight the hexagon position
75F6 2C          7 1117 inc     l                           ; upper-left neighbor
75F7 BE          7 1118 cp      (hl)                        ; is it the same as victory path length?
75F8 28 09       7 1119 jr      z, BrightPath_Position      ; yes, animate and highlight the hexagon position
75FA 7D          7 1120 ld      a, l
75FB C6 10       7 1121 add     a, WIDTH*2
75FD 6F          7 1122 ld      l, a                        ; move HL to lower-right neighbor address
75FE 79          7 1123 ld      a, c                        ; restore victory path length in A
75FF BE          7 1124 cp      (hl)                        ; is it the same as victory path length?
7600 28 01       7 1125 jr      z, BrightPath_Position      ; yes, animate and highlight the hexagon position
7602 2C          7 1126 inc     l                           ; move HL to lower-left neighbor address
7603             7 1127 BrightPath_Position
7603 C5          7 1128 push    bc                          ; store victory path length
7604 E5          7 1129 push    hl                          ; store current position pointer
7605 CD 84 6D    7 1130 call    Main_Board2Indexes          ; convert a board position into a board indexes
7608 CD BF 6D    7 1131 call    Draw_Token                  ; draw token
760B E1          7 1132 pop     hl                          ; restore current position pointer
760C C1          7 1133 pop     bc                          ; restore victory path length
760D 0D          7 1134 dec     c                           ; decrement victory path length
760E 79          7 1135 ld      a, c                        ; set victory path length in A
760F FE 03       7 1136 cp      VICTORY                     ; has reached victory path length?
7611 20 D2       7 1137 jr      nz, BrightPath_Neighbor     ; repeat for each neighbor until reach VICTORY length
7613 3A 9E 61    7 1139 ld      a, (TOKEN_COLOR)            ; restore token color
7616 D6 40       7 1140 sub     $40
7618 32 9E 61    7 1141 ld      (TOKEN_COLOR), a
761B C9          7 1142 ret
761C             7 1144 ; ----------------------------------------------------------------------------------------------------------------------
761C             7 1145 ; PathFinder_PrepareBoard: update '[color]_BOARD_XX_YY', changing WIN_CONDITION to 1, everything else to ENEMY.
761C             7 1146 ; Immediately after 'Path_Finder_[color]' returned VICTORY, you can execute this routine, then execute 'Path_Finder_
761C             7 1147 ; [color]' again to find a victory path.
761C             7 1148 ;
761C             7 1149 ; Coded by Einar Saukas
761C             7 1150 ;
761C             7 1151 ; Input:    HL = pointer to last position of [color]_BOARD
761C             7 1152 ;
761C             7 1153 ; Output:   -
761C             7 1154 ;
761C             7 1155 ; Destroys: A, BC, HL
761C             7 1156 ; ----------------------------------------------------------------------------------------------------------------------
761C             7 1157 PathFinder_PrepareBoard:
761C 3E 43       7 1158 ld      a, WIN_CONDITION
761E 0E 07       7 1159 ld      c, 7                        ; 7 rows
7620             7 1160 PrepareBoard_Row
7620 06 07       7 1161 ld      b, 7                        ; 7 columns
7622             7 1162 PrepareBoard_Column
7622 BE          7 1163 cp      (hl)                        ; is it win condition?
7623 36 01       7 1164 ld      (hl), 1                     ; save 1 by default
7625 28 02       7 1165 jr      z, PrepareBoard_Next        ; yes, next position
7627 36 7E       7 1166 ld      (hl), ENEMY                 ; no, save ENEMY
7629             7 1167 PrepareBoard_Next
7629 2D          7 1168 dec     l                           ; HL points to next board position
762A 10 F6       7 1169 djnz    PrepareBoard_Column         ; repeat for each column
762C 2D          7 1171 dec     l                           ; skip borders
762D 2D          7 1172 dec     l
762E 0D          7 1173 dec     c                           ; decrement rows
762F 20 EF       7 1174 jr      nz, PrepareBoard_Row        ; repeat for each row
7631 C9          7 1175 ret

; File #8: C:\Users\Antonio Luque\source\repos\Hex\Z80CodeFiles\Timer.z80asm

7632             8 1 ; ----------------------------------------------------------------------------------------------------------------------
7632             8 2 ; Timer.z80asm
7632             8 3 ; Coded by Antonio Luque
7632             8 4 ;
7632             8 5 ; Based on disassembly of "Chess" (c) 1982 Psion
7632             8 6 ; ----------------------------------------------------------------------------------------------------------------------
7632             8 8 ; ----------------------------------------------------------------------------------------------------------------------
7632             8 9 ; Timer_Interrupt: interrupt routine to manage players' timers
7632             8 10 ;
7632             8 11 ; Input:    -
7632             8 12 ;
7632             8 13 ; Output:   -
7632             8 14 ;
7632             8 15 ; Uses:     TIMER_FLAG (0 = timer stopped, 1 = cyan timer on, 2 = red timer on)
7632             8 16 ;
7632             8 17 ; Destroys: BC', DE', HL'
7632             8 18 ; ----------------------------------------------------------------------------------------------------------------------
7632             8 19 Timer_Interrupt:
7632 F5          8 20 push    af                          ; store AF register
7633 D9          8 21 exx                                 ; store BC, DE and HL registers
7634 3A EB 62    8 22 ld      a, (TIMER_FLAG)             ; check timer flag
7637 B7          8 23 or      a                           ; is timer stopped?
7638 CA 61 76    8 24 jp      z, Timer_Exit               ; yes, exit routine
763B 21 EF 62    8 25 ld      hl, RED_TIMER               ; HL points to red's interrupt counter address
763E 3D          8 26 dec     a                           ; is red timer on?
763F C2 45 76    8 27 jp      nz, Timer_Counters          ; yes, check interrupt counter 
7642 21 EC 62    8 28 ld      hl, CYAN_TIMER              ; HL points to cyan's interrupt counter address
7645             8 29 Timer_Counters
7645 35          8 30 dec     (hl)                        ; decrement interrupt counter
7646 C2 61 76    8 31 jp      nz, Timer_Exit              ; if not 0, exit routine
7649 36 32       8 32 ld      (hl), 50                    ; restart interrupt counter
764B 23          8 33 inc     hl                          ; move HL to seconds counter address
764C 3E 01       8 34 ld      a, 1                        ; increment seconds counter
764E 86          8 35 add     a, (hl)
764F 27          8 36 daa                                 ; convert to BCD (Binary-Coded-Decimal)
7650 77          8 37 ld      (hl), a                     ; store seconds
7651 FE 60       8 38 cp      $60                         ; 60 seconds reached?
7653 C2 5E 76    8 39 jp      nz, Timer_Show              ; no, show timer
7656 36 00       8 40 ld      (hl), 0                     ; restart seconds counter
7658 23          8 41 inc     hl                          ; move HL to minutes counter address
7659 3E 01       8 42 ld      a, 1                        ; increment minutes counter
765B 86          8 43 add     a, (hl)
765C 27          8 44 daa                                 ; convert to BCD (Binary-Coded-Decimal)
765D 77          8 45 ld      (hl), a                     ; store minutes
765E             8 46 Timer_Show
765E CD 65 76    8 47 call    Timer_Display               ; display timer on the screen
7661             8 48 Timer_Exit
7661 D9          8 49 exx                                 ; restore BC, DE and HL registers
7662 F1          8 50 pop     af                          ; restore AF register
7663 FB          8 51 ei                                  ; enable interrupts
7664 C9          8 52 ret
7665             8 54 ; ----------------------------------------------------------------------------------------------------------------------
7665             8 55 ; Timer_Display: display a timer on the screen
7665             8 56 ;
7665             8 57 ; Input:    -
7665             8 58 ;
7665             8 59 ; Output:   -
7665             8 60 ;
7665             8 61 ; Uses:     TIMER_FLAG (0 = timer stopped, 1 = cyan timer on, 2 = red timer on)
7665             8 62 ;
7665             8 63 ; Destroys: A, BC, DE, HL
7665             8 64 ; ----------------------------------------------------------------------------------------------------------------------
7665             8 65 Timer_Display:
7665 11 F1 62    8 66 ld      de, RED_TIMER+2             ; DE points to red's minutes counter address
7668 01 E2 48    8 67 ld      bc, $48E2                   ; BC points to red's minutes screen address
766B 3A EB 62    8 68 ld      a, (TIMER_FLAG)             ; check timer flag
766E 3D          8 69 dec     a                           ; is cyan timer on?
766F C2 78 76    8 70 jp      nz, Timer_Display_Min       ; no, jump to display minutes counter
7672 11 EE 62    8 71 ld      de, CYAN_TIMER+2            ; DE points to cyan's minutes counter address
7675 01 78 40    8 72 ld      bc, $4078                   ; BC points to cyan's minutes screen address
7678             8 73 Timer_Display_Min
7678 CD 7D 76    8 74 call    Timer_Display_MinSec        ; display minutes counter on screen
767B 1B          8 75 dec     de                          ; DE points to seconds counter address
767C 0C          8 76 inc     c                           ; BC points to seconds screen address
767D             8 77 Timer_Display_MinSec:
767D 1A          8 78 ld      a, (de)                     ; set min/sec counter in A
767E 1F          8 79 rra                                 ; move tens digit to the first 4th bits of A
767F 1F          8 80 rra
7680 1F          8 81 rra
7681 1F          8 82 rra
7682 CD 86 76    8 83 call    Timer_Display_Digit         ; display tens digit on screen
7685 1A          8 84 ld      a, (de)                     ; set min/sec counter in A 
7686             8 85 Timer_Display_Digit:
7686 E6 0F       8 86 and     %00001111                   ; discard the last 4th bits of the digit
7688 C5          8 87 push    bc                          ; store digit screen address
7689 21 97 64    8 88 ld      hl, TIMER_DIGITS            ; HL points to timer digits (graphics) address
768C 87          8 89 add     a, a                        ; a digit is 8 bytes long
768D 87          8 90 add     a, a
768E 87          8 91 add     a, a
768F 85          8 92 add     a, l                        ; set digit index in HL
7690 6F          8 93 ld      l, a
7691 7E          8 94 ld      a, (hl)                     ; get digit tile
7692 02          8 95 ld      (bc), a                     ; put it on screen address
7693 04          8 96 inc     b                           ; move BC to next pixel-line address
7694 2C          8 97 inc     l                           ; move HL to next digit tile address
7695 7E          8 98 ld      a, (hl)                     ; (repeat 7 more times)
7696 02          8 99 ld      (bc), a
7697 04          8 100 inc     b
7698 2C          8 101 inc     l
7699 7E          8 102 ld      a, (hl)
769A 02          8 103 ld      (bc), a
769B 04          8 104 inc     b
769C 2C          8 105 inc     l
769D 7E          8 106 ld      a, (hl)
769E 02          8 107 ld      (bc), a
769F 04          8 108 inc     b
76A0 2C          8 109 inc     l
76A1 7E          8 110 ld      a, (hl)
76A2 02          8 111 ld      (bc), a
76A3 04          8 112 inc     b
76A4 2C          8 113 inc     l
76A5 7E          8 114 ld      a, (hl)
76A6 02          8 115 ld      (bc), a
76A7 04          8 116 inc     b
76A8 2C          8 117 inc     l
76A9 7E          8 118 ld      a, (hl)
76AA 02          8 119 ld      (bc), a
76AB 04          8 120 inc     b
76AC 2C          8 121 inc     l
76AD 7E          8 122 ld      a, (hl)
76AE 02          8 123 ld      (bc), a
76AF C1          8 124 pop     bc                          ; restore digit screen address
76B0 0C          8 125 inc     c                           ; move screen address to next column
76B1 C9          8 126 ret
76B2             8 128 ; ----------------------------------------------------------------------------------------------------------------------
76B2             8 129 ; Timer_Display_All: display cyan and red timers
76B2             8 130 ;
76B2             8 131 ; Input:    -
76B2             8 132 ;
76B2             8 133 ; Output:   -
76B2             8 134 ;
76B2             8 135 ; Uses:     TIMER_FLAG (0 = timer stopped, 1 = cyan timer on, 2 = red timer on)
76B2             8 136 ;
76B2             8 137 ; Destroys: BC, DE, HL
76B2             8 138 ; ----------------------------------------------------------------------------------------------------------------------
76B2             8 139 Timer_Display_All:
76B2 3E 01       8 140 ld      a, 1                        ; set cyan timer on
76B4 32 EB 62    8 141 ld      (TIMER_FLAG), a
76B7 CD 65 76    8 142 call    Timer_Display               ; display cyan timer
76BA 3E 02       8 143 ld      a, 2                        ; set red timer on
76BC 32 EB 62    8 144 ld      (TIMER_FLAG), a
76BF CD 65 76    8 145 call    Timer_Display               ; display red timer
76C2 AF          8 146 xor     a                           ; stop timers
76C3 32 EB 62    8 147 ld      (TIMER_FLAG), a
76C6 C9          8 148 ret
76C7             8 150 ; ----------------------------------------------------------------------------------------------------------------------
76C7             8 151 ; Timer_Reset: initialize cyan and red timers
76C7             8 152 ;
76C7             8 153 ; Input:    -
76C7             8 154 ;
76C7             8 155 ; Output:   -
76C7             8 156 ;
76C7             8 157 ; Destroys: HL
76C7             8 158 ; ----------------------------------------------------------------------------------------------------------------------
76C7             8 159 Timer_Reset:
76C7 21 EC 62    8 160 ld      hl, CYAN_TIMER              ; HL points to cyan timer address
76CA 36 32       8 161 ld      (hl), 50                    ; set interrupt counter (1/50 seconds)
76CC 23          8 162 inc     hl                          ; move HL to cyan's seconds counter address
76CD 36 00       8 163 ld      (hl), 0                     ; reset seconds counter
76CF 23          8 164 inc     hl                          ; move HL to cyan's minutes counter address
76D0 36 00       8 165 ld      (hl), 0                     ; reset minutes counter
76D2 23          8 166 inc     hl                          ; move HL to red's interrupt counter
76D3 36 32       8 167 ld      (hl), 50                    ; set interrupt counter (1/50 seconds)
76D5 23          8 168 inc     hl                          ; move HL to red's seconds counter address
76D6 36 00       8 169 ld      (hl), 0                     ; reset seconds counter
76D8 23          8 170 inc     hl                          ; move HL to red's minutes counter address
76D9 36 00       8 171 ld      (hl), 0                     ; reset minutes counter
76DB C9          8 172 ret

; File #9: C:\Users\Antonio Luque\source\repos\Hex\Z80CodeFiles\Sound.z80asm

76DC             9 1 ; ----------------------------------------------------------------------------------------------------------------------
76DC             9 2 ; Sound.z80asm
76DC             9 3 ; Coded with BeepFX player tool by Shiru: https://opengameart.org/content/zx-spectrum-beeper-sound-effects
76DC             9 4 ;
76DC             9 5 ; Adapted for Hex game by Antonio Luque
76DC             9 6 ; ----------------------------------------------------------------------------------------------------------------------
76DC             9 8 ; ----------------------------------------------------------------------------------------------------------------------
76DC             9 9 ; Sound_FX: play a sound effect (tone) defined by many parameters
76DC             9 10 ; 
76DC             9 11 ; Input:    IX = tone parameters address
76DC             9 12 ;
76DC             9 13 ; Output:   -
76DC             9 14 ;
76DC             9 15 ; Destroys: A, BC, DE, HL, IY
76DC             9 16 ; ----------------------------------------------------------------------------------------------------------------------
76DC             9 17 Sound_FX:
76DC F3          9 18 di                                  ; disable interrupts
76DD DD 4E 00    9 19 ld      c, (ix+0)                   ; BC = frames
76E0 DD 46 01    9 20 ld      b, (ix+1)
76E3 DD 5E 02    9 21 ld      e, (ix+2)                   ; DE = frame length
76E6 DD 56 03    9 22 ld      d, (ix+3)
76E9 D5          9 23 push    de                          ; (simulate 'ld iy,de')
76EA FD E1       9 24 pop     iy                          ; store frame length in IY
76EC DD 5E 04    9 25 ld      e, (ix+4)                   ; DE = pitch
76EF DD 56 05    9 26 ld      d, (ix+5)
76F2 21 00 00    9 27 ld      hl, 0                       ; reset HL
76F5             9 28 Sound_FX_Frames
76F5 C5          9 29 push    bc                          ; store frames
76F6 FD E5       9 30 push    iy                          ; (simulate 'ld bc,iy')
76F8 C1          9 31 pop     bc                          ; restore frame length in BC
76F9             9 32 Sound_FX_FrameLength
76F9 19          9 33 add     hl, de                      ; HL = incremented pitch
76FA 7C          9 34 ld      a, h                        ; set high-byte in A
76FB FE 80       9 35 cp      128                         ; compares with duty cycle, the timbre of the tone
76FD             9 36 ; (128 for 50% square wave)
76FD 9F          9 37 sbc     a, a                        ; subtract with carry
76FE E6 10       9 38 and     16                          ; mask result
7700 D3 FE       9 39 out     (254), a                    ; play sound
7702 0B          9 40 dec     bc                          ; decrement frame length
7703 78          9 41 ld      a, b
7704 B1          9 42 or      c                           ; frame length = 0?
7705 20 F2       9 43 jr      nz, Sound_FX_FrameLength    ; no, repeat "frame length" times
7707 DD 4E 06    9 44 ld      c, (ix+6)                   ; BC = pitch slide
770A DD 46 07    9 45 ld      b, (ix+7)
770D EB          9 46 ex      de, hl                      ; HL = pitch
770E 09          9 47 add     hl, bc                      ; add pitch slide
770F EB          9 48 ex      de, hl                      ; DE = incremented pitch
7710 C1          9 49 pop     bc                          ; restore frames
7711 0B          9 50 dec     bc                          ; decrement frames
7712 78          9 51 ld      a, b
7713 B1          9 52 or      c                           ; frames = 0?
7714 20 DF       9 53 jr      nz, Sound_FX_Frames         ; no, repeat "frames" times
7716 FB          9 54 ei                                  ; enable interrupts
7717 C9          9 55 ret

; File #10: C:\Users\Antonio Luque\source\repos\Hex\Z80CodeFiles\Screen.z80asm

7718             10 1 ; ----------------------------------------------------------------------------------------------------------------------
7718             10 2 ; Screen.z80asm
7718             10 3 ; Coded by Antonio Luque
7718             10 4 ; ----------------------------------------------------------------------------------------------------------------------
7718             10 6 BLUE_INK                equ     %00000001                   ; attributes: flash 0, bright 0, paper 0, ink 1
7718             10 7 BLUE_PAPER              equ     %00001000                   ; attributes: flash 0, bright 0, paper 1, ink 0
7718             10 8 WHITE_PAPER             equ     %00111000                   ; attributes: flash 0, bright 0, paper 7, ink 0
7718             10 9 WHITE                   equ     %00000111                   ; attributes: flash 0, bright 0, paper 0, ink 7
7718             10 10 BRIGHT                  equ     %01000000                   ; mask to apply bright to attributes
7718             10 11 FLASH                   equ     %10000000                   ; mask to apply flash to attributes
7718             10 12 WHITE_FLASH0            equ     WHITE+BRIGHT                ; attributes: flash 0, bright 1, paper 0, ink 7
7718             10 13 WHITE_FLASH1            equ     WHITE+BRIGHT+FLASH          ; attributes: flash 1, bright 1, paper 0, ink 7
7718             10 15 ; ----------------------------------------------------------------------------------------------------------------------
7718             10 16 ; Screen_Clear: fill in black the whole screen area and attributes area
7718             10 17 ;
7718             10 18 ; Input:    -
7718             10 19 ;
7718             10 20 ; Output:   -
7718             10 21 ;
7718             10 22 ; Destroys: BC, DE, HL
7718             10 23 ; ----------------------------------------------------------------------------------------------------------------------
7718             10 24 Screen_Clear:
7718 21 00 40    10 25 ld      hl, $4000                   ; HL points to start of the screen address
771B 11 01 40    10 26 ld      de, $4001                   ; DE points to next byte of the screen address
771E 75          10 27 ld      (hl), l                     ; set first pixel-byte in black
771F 01 FF 1A    10 28 ld      bc, 6144-1+768              ; length of screen area (-1 already set) + attributes area 
7722 ED B0       10 29 ldir                                ; fill the rest of screen area and attributes area in black
7724 C9          10 30 ret
7725             10 32 ; ----------------------------------------------------------------------------------------------------------------------
7725             10 33 ; Screen_Letters: draw the two rows of letters on the screen (a..g)
7725             10 34 ;
7725             10 35 ; Input:    -
7725             10 36 ;
7725             10 37 ; Output:   -
7725             10 38 ;
7725             10 39 ; Destroys: A, BC, DE, HL, IX
7725             10 40 ; ----------------------------------------------------------------------------------------------------------------------
7725             10 41 Screen_Letters:
7725 21 66 45    10 42 ld      hl, $4566                   ; HL points to first letter screen address (top row)
7728 DD 21 66 58 10 43 ld      ix, $5866                   ; IX points to first letter attribute address (top row)
772C CD 36 77    10 44 call    Screen_Letters_Row          ; draw top row of letters
772F 21 6D 51    10 45 ld      hl, $516D                   ; HL points to first letter screen address (bottom row)
7732 DD 21 6D 5A 10 46 ld      ix, $5A6D                   ; IX points to first letter attribute address (bottom row)
7736             10 47 Screen_Letters_Row:
7736 11 5E 66    10 48 ld      de, LETTER_SPRITES          ; DE points to letter sprites address
7739 06 07       10 49 ld      b, 7                        ; number of letters (loop counter)
773B             10 50 Screen_Letter_Loop
773B E5          10 51 push    hl                          ; store letter screen address
773C CD 09 6E    10 52 call    Draw_Sprite_LetterNum       ; draw letter at screen address
773F E1          10 53 pop     hl                          ; restore letter screen address
7740 2C          10 54 inc     l                           ; move HL to next screen address
7741 2C          10 55 inc     l
7742 DD 36 00 05 10 56 ld      (ix+0), CYAN_COLOR          ; set letter color (2 bytes)
7746 DD 36 20 05 10 57 ld      (ix+32), CYAN_COLOR
774A DD 2C       10 58 inc     ixl                         ; move IX to next attribute address
774C DD 2C       10 59 inc     ixl
774E 10 EB       10 60 djnz    Screen_Letter_Loop          ; repeat for each letter
7750 C9          10 61 ret
7751             10 63 ; ----------------------------------------------------------------------------------------------------------------------
7751             10 64 ; Screen_Numbers: draw the two columns of numbers on the screen (1-7)
7751             10 65 ;
7751             10 66 ; Input:    -
7751             10 67 ;
7751             10 68 ; Output:   -
7751             10 69 ;
7751             10 70 ; Destroys: A, BC, DE, HL, IX, IY
7751             10 71 ; ----------------------------------------------------------------------------------------------------------------------
7751             10 72 Screen_Numbers:
7751 11 A4 66    10 73 ld      de, NUMBER_SPRITES          ; DE points to numbers sprites
7754 FD 21 F2 62 10 74 ld      iy, NUMBER_SCREEN           ; IY points to numbers screen addresses
7758 DD 21 A5 58 10 75 ld      ix, $58A5                   ; IX points to first number attribute address
775C 06 07       10 76 ld      b, 7                        ; number of numbers (loop counter)
775E             10 77 Screen_Number_Loop
775E FD 6E 00    10 78 ld      l, (iy+0)                   ; HL points to number screen address
7761 FD 66 01    10 79 ld      h, (iy+1)
7764 E5          10 80 push    hl                          ; store pointer to number screen address
7765 D5          10 81 push    de                          ; store pointer to sprite address
7766 CD 09 6E    10 82 call    Draw_Sprite_LetterNum       ; draw number at screen address
7769 D1          10 83 pop     de                          ; restore pointer to sprite address
776A E1          10 84 pop     hl                          ; restore pointer to number screen address
776B DD 36 00 02 10 85 ld      (ix+0), RED_COLOR           ; set number color (2 bytes)
776F DD 36 20 02 10 86 ld      (ix+32), RED_COLOR
7773 7D          10 87 ld      a, l                        ; move HL to screen address of the 2nd column
7774 C6 0F       10 88 add     a, 15
7776 6F          10 89 ld      l, a
7777 CD 09 6E    10 90 call    Draw_Sprite_LetterNum       ; draw number at screen address
777A DD 36 0F 02 10 91 ld      (ix+15), RED_COLOR          ; set number color (2 bytes)
777E DD 36 2F 02 10 92 ld      (ix+47), RED_COLOR
7782 78          10 93 ld      a, b                        ; save loop counter
7783 01 41 00    10 94 ld      bc, 65                      ; displacement of next attribute address
7786 DD 09       10 95 add     ix, bc                      ; move IX to next attribute address
7788 FD 23       10 96 inc     iy                          ; move IY to next number screen address
778A FD 23       10 97 inc     iy
778C 47          10 98 ld      b, a                        ; restore loop counter
778D 10 CF       10 99 djnz    Screen_Number_Loop          ; repeat for each number
778F C9          10 100 ret
7790             10 102 ; ----------------------------------------------------------------------------------------------------------------------
7790             10 103 ; Screen_Frame: draw the screen frame on the screen
7790             10 104 ;
7790             10 105 ; Input:    -
7790             10 106 ;
7790             10 107 ; Output:   -
7790             10 108 ;
7790             10 109 ; Destroys: A, BC, DE, HL, IX
7790             10 110 ; ----------------------------------------------------------------------------------------------------------------------
7790             10 111 Screen_Frame:
7790 11 2B 62    10 112 ld      de, STR_LEVELTEXT           ; DE points to "Level" string address
7793 21 09 40    10 113 ld      hl, $4009                   ; HL points to screen address of the string
7796 CD 8C 6F    10 114 call    Print_String                ; print "Level"
7799 CD D5 77    10 115 call    Screen_Vertical_Bars        ; draw the vertical bars of frame
779C 01 90 62    10 117 ld      bc, FRAME_MAP               ; BC points to the frame tiles indexes
779F 21 00 40    10 118 ld      hl, $4000                   ; HL points to the screen address of the up-border
77A2 CD A8 77    10 119 call    Screen_Frame_Border         ; draw up-border
77A5 21 E0 50    10 120 ld      hl, $50E0                   ; HL points to the screen address of the bottom-border
77A8             10 121 Screen_Frame_Border:
77A8 DD 2E 20    10 122 ld      ixl, 32                     ; border width in bytes (loop counter)
77AB             10 123 Screen_Frame_Loop
77AB 0A          10 124 ld      a, (bc)                     ; get tile index
77AC FE FF       10 125 cp      -1                          ; is it -1?
77AE 28 06       10 126 jr      z, Screen_Frame_Next        ; yes, there is no tile to print
77B0 11 0E 65    10 127 ld      de, FRAME_TILES             ; DE points to tiles array
77B3 CD 9B 6F    10 128 call    Print_Tile                  ; print frame tile
77B6             10 129 Screen_Frame_Next
77B6 2C          10 130 inc     l                           ; HL points to the next screen address (next column)
77B7 03          10 131 inc     bc                          ; BC points to the next tile index
77B8 DD 2D       10 132 dec     ixl                         ; decrement loop counter
77BA 20 EF       10 133 jr      nz, Screen_Frame_Loop       ; repeat for each tile
77BC DD 21 07 58 10 135 ld      ix, $5807                   ; IX points to the "concave left" tile screen position
77C0 DD 36 00 08 10 136 ld      (ix+0), BLUE_PAPER          ; color tile
77C4 DD 36 0A 08 10 137 ld      (ix+10), BLUE_PAPER         ; color "concave right" tile
77C8 DD 21 F1 5A 10 138 ld      ix, $5AF1                   ; IX points to the "convex left" tile screen position
77CC DD 36 00 01 10 139 ld      (ix+0), BLUE_INK            ; color tile
77D0 DD 36 04 01 10 140 ld      (ix+4), BLUE_INK            ; color "convex right" tile
77D4 C9          10 141 ret
77D5             10 143 ; ----------------------------------------------------------------------------------------------------------------------
77D5             10 144 ; Screen_Vertical_Bars: draw the vertical bars of the frame on the screen
77D5             10 145 ;
77D5             10 146 ; Input:    -
77D5             10 147 ;
77D5             10 148 ; Output:   -
77D5             10 149 ;
77D5             10 150 ; Destroys: A, BC, HL
77D5             10 151 ; ----------------------------------------------------------------------------------------------------------------------
77D5             10 152 Screen_Vertical_Bars:
77D5 21 20 40    10 153 ld      hl, $4020                   ; HL points to left bar screen address
77D8 CD DE 77    10 154 call    Screen_Vertical_Bar         ; draw left bar
77DB 21 3F 40    10 155 ld      hl, $403F                   ; HL points to right bar screen address
77DE             10 156 Screen_Vertical_Bar:
77DE 06 B0       10 157 ld      b, 176                      ; number of pixel lines (loop counter)
77E0             10 158 Screen_Vertical_Loop
77E0 36 3C       10 159 ld      (hl), %00111100             ; draw pixel byte of bar
77E2 CD 15 6E    10 160 call    Draw_Down_PixelLine         ; move HL to the next pixel-line address
77E5 10 F9       10 161 djnz    Screen_Vertical_Loop        ; repeat for each pixel line
77E7 C9          10 162 ret
77E8             10 164 ; ----------------------------------------------------------------------------------------------------------------------
77E8             10 165 ; Screen_Tokens: draw the fixed tokens on the screen
77E8             10 166 ;
77E8             10 167 ; Input:    -
77E8             10 168 ;
77E8             10 169 ; Output:   -
77E8             10 170 ;
77E8             10 171 ; Uses:     TOKEN_COLOR (current token color)
77E8             10 172 ;
77E8             10 173 ; Destroys: A, BC, DE, HL, IX
77E8             10 174 ; ----------------------------------------------------------------------------------------------------------------------
77E8             10 175 Screen_Tokens:
77E8 3E 05       10 176 ld      a, CYAN_COLOR               ; set token color
77EA 21 BA 44    10 177 ld      hl, $44BA                   ; HL points to the fixed cyan token screen address
77ED CD F5 77    10 178 call    Screen_Tokens_Draw          ; draw cyan fixed token
77F0 3E 02       10 180 ld      a, RED_COLOR                ; set token color
77F2 21 24 54    10 181 ld      hl, $5424                   ; HL points to the fixed red token screen address 
77F5             10 182 Screen_Tokens_Draw:
77F5 32 9E 61    10 183 ld      (TOKEN_COLOR), a            ; save token color
77F8 CD 24 6E    10 184 call    Draw_Hexagon_Color          ; color fixed token area
77FB DD 77 40    10 185 ld      (ix+64), a                  ; the fixed tokens are 3 bytes (attributes) high, so we have
77FE DD 77 41    10 186 ld      (ix+65), a                  ; to color the remaining 2 bytes that have not been colored
7801 11 3E 66    10 187 ld      de, HEXAGON_TOKEN           ; DE points to token sprite address
7804 C3 F6 6D    10 188 jp      Draw_Sprite_Hexagon         ; draw fixed token
7807             10 190 ; ----------------------------------------------------------------------------------------------------------------------
7807             10 191 ; Screen_Timer_Quotes: draw the timer quotes ('  '') on the screen
7807             10 192 ;
7807             10 193 ; Input:    -
7807             10 194 ;
7807             10 195 ; Output:   -
7807             10 196 ;
7807             10 197 ; Destroys: IX
7807             10 198 ; ----------------------------------------------------------------------------------------------------------------------
7807             10 199 Screen_Timer_Quotes:
7807 DD 21 7A 40 10 200 ld      ix, $407A                   ; IX points to the screen address of the cyan timer quotes 
780B DD 36 00 08 10 201 ld      (ix+0), %00001000           ; draw 1st half of simple quote (')
780F DD 36 03 0A 10 202 ld      (ix+3), %00001010           ; draw 1st half of double quotes (")
7813 DD 24       10 203 inc     ixh                         ; move IX to the next screen pixel-line
7815 DD 36 00 08 10 204 ld      (ix+0), %00001000           ; draw 2nd half of simple quote (')
7819 DD 36 03 0A 10 205 ld      (ix+3), %00001010           ; draw 2nd half of double quotes (")
781D DD 26 58    10 206 ld      ixh, $58                    ; move IX to the attribute address
7820 DD 36 00 07 10 207 ld      (ix+0), WHITE               ; color simple quote
7824 DD 36 03 07 10 208 ld      (ix+3), WHITE               ; color double quotes
7828 DD 21 E4 48 10 210 ld      ix, $48E4                   ; IX points to the screen address of the red timer quotes
782C DD 36 00 08 10 211 ld      (ix+0), %00001000           ; draw 1st half of simple quote (')
7830 DD 36 03 0A 10 212 ld      (ix+3), %00001010           ; draw 1st half of double quotes (")
7834 DD 24       10 213 inc     ixh                         ; move IX to the next screen pixel-line
7836 DD 36 00 08 10 214 ld      (ix+0), %00001000           ; draw 2nd half of simple quote (')
783A DD 36 03 0A 10 215 ld      (ix+3), %00001010           ; draw 2nd half of double quotes (")
783E DD 26 59    10 216 ld      ixh, $59                    ; move IX to the attribute address
7841 DD 36 00 07 10 217 ld      (ix+0), WHITE               ; color simple quote
7845 DD 36 03 07 10 218 ld      (ix+3), WHITE               ; color double quotes
7849 C9          10 219 ret
784A             10 221 ; ----------------------------------------------------------------------------------------------------------------------
784A             10 222 ; Screen_Color_Statics: apply color to some statics items of the screen
784A             10 223 ;
784A             10 224 ; Input:    -
784A             10 225 ;
784A             10 226 ; Output:   -
784A             10 227 ;
784A             10 228 ; Destroys: BC, IX
784A             10 229 ; ----------------------------------------------------------------------------------------------------------------------
784A             10 230 Screen_Color_Statics:
784A DD 21 78 58 10 231 ld      ix, $5878                   ; IX points to the attr. address of the cyan player timer
784E 0E 07       10 232 ld      c, WHITE                    ; set color in C
7850 CD 7A 78    10 233 call    Screen_Apply_Color          ; apply color
7853 DD 2E 98    10 234 ld      ixl, $98                    ; IX points to the attr. address of the cyan player name
7856 0E 05       10 235 ld      c, CYAN_COLOR               ; set color in C
7858 CD 7A 78    10 236 call    Screen_Apply_Color          ; apply color
785B DD 21 18 59 10 237 ld      ix, $5918                   ; IX points to the attr. address of the cyan player messages
785F 0E 47       10 238 ld      c, WHITE+BRIGHT             ; set color in C
7861 CD 7A 78    10 239 call    Screen_Apply_Color          ; apply color
7864 DD 2E E2    10 240 ld      ixl, $E2                    ; IX points to the attr. address of the red player timer
7867 0E 07       10 241 ld      c, WHITE                    ; set color in C
7869 CD 7A 78    10 242 call    Screen_Apply_Color          ; apply color
786C DD 21 02 5A 10 243 ld      ix, $5A02                   ; IX points to the attr. address of the red player name
7870 0E 02       10 244 ld      c, RED_COLOR                ; set color in C
7872 CD 7A 78    10 245 call    Screen_Apply_Color          ; apply color
7875 DD 2E 82    10 246 ld      ixl, $82                    ; IX points to the attr. address of the red player messages
7878 0E 47       10 247 ld      c, WHITE+BRIGHT             ; set color in C
787A             10 248 Screen_Apply_Color:
787A 06 06       10 249 ld      b, 6                        ; number of bytes to be colored (loop counter)
787C             10 250 Screen_Apply_Color_Loop:
787C DD 71 00    10 251 ld      (ix+0), c                   ; apply color
787F DD 2C       10 252 inc     ixl                         ; move IX to the next attribute address
7881 10 F9       10 253 djnz    Screen_Apply_Color_Loop     ; repeat for each byte
7883 C9          10 254 ret
7884             10 256 ; ----------------------------------------------------------------------------------------------------------------------
7884             10 257 ; Screen_Last_Level: show last level screen and input game level
7884             10 258 ;
7884             10 259 ; Input:    -
7884             10 260 ;
7884             10 261 ; Output:   -
7884             10 262 ;
7884             10 263 ; Uses:     GAME_LEVEL (current game level)
7884             10 264 ;
7884             10 265 ; Destroys: A, BC, DE, HL, IX, IY
7884             10 266 ; ----------------------------------------------------------------------------------------------------------------------
7884             10 267 Screen_Last_Level:
7884 11 3C 68    10 268 ld      de, STR_PRESSKEY            ; DE points to "Press any key" string address
7887 21 AD 50    10 269 ld      hl, $50AD                   ; HL points to string screen address
788A CD 8C 6F    10 270 call    Print_String                ; print "Press any key"
788D DD 21 AD 5A 10 271 ld      ix, $5AAD                   ; IX points to string attributes address
7891 01 38 0D    10 272 ld      bc, (13*256)+WHITE_PAPER    ; B = string length (loop counter), C = color attributes
7894 CD 7C 78    10 273 call    Screen_Apply_Color_Loop     ; apply color to string area
7897 CD F8 6E    10 274 call    Input_Key_Scan              ; wait for a key pressed
789A CD 18 77    10 276 call    Screen_Clear                ; fill in black the whole screen area and attributes area
789D CD 5D 7C    10 277 call    Screen_Hexagons             ; draw menu hexagons ("HEX 2")
78A0 DD 21 C7 59 10 278 ld      ix, $59C7                   ; IX points to "CONGRATULATIONS" string attributes address
78A4 01 C7 11    10 279 ld      bc, (17*256)+WHITE_FLASH1   ; B = string length (loop counter), C = color attributes
78A7 CD 7C 78    10 280 call    Screen_Apply_Color_Loop     ; apply color to string area
78AA 11 B4 68    10 281 ld      de, STR_CONGRATS            ; DE points to string address
78AD 21 C7 48    10 282 ld      hl, $48C7                   ; HL points to string screen address
78B0 CD 8C 6F    10 283 call    Print_String                ; print "CONGRATULATIONS"
78B3 DD 21 EF 64 10 284 ld      ix, WINNER_FX               ; IX points to winner tone parameters address
78B7 CD DC 76    10 285 call    Sound_FX                    ; play sound fx
78BA F3          10 287 di                                  ; disable interrupts
78BB DD 21 42 5A 10 288 ld      ix, $5A42                   ; IX points to "Well done!..." string attributes address
78BF 01 07 1C    10 289 ld      bc, (28*256)+WHITE          ; B = string length (loop counter), C = color attributes
78C2 CD 7C 78    10 290 call    Screen_Apply_Color_Loop     ; apply color to string area
78C5 11 C6 68    10 291 ld      de, STR_LAST_LEVEL          ; DE points to string address
78C8 21 42 50    10 292 ld      hl, $5042                   ; HL points to string screen address
78CB CD 8C 6F    10 293 call    Print_String                ; print "Well done!..."
78CE DD 2E 82    10 294 ld      ixl, $82                    ; IX points to "Choose..." string attributes address
78D1 06 18       10 295 ld      b, 24                       ; string length-4 (loop counter)
78D3 CD 7C 78    10 296 call    Screen_Apply_Color_Loop     ; apply color to string area
78D6 DD 36 01 78 10 297 ld      (ix+1), WHITE_PAPER+BRIGHT  ; set color for last characters ("1-4")
78DA DD 36 02 78 10 298 ld      (ix+2), WHITE_PAPER+BRIGHT
78DE DD 36 03 78 10 299 ld      (ix+3), WHITE_PAPER+BRIGHT
78E2 13          10 300 inc     de                          ; move DE to next string address
78E3 2E 82       10 301 ld      l, $82                      ; HL points to string screen address
78E5 CD 8C 6F    10 302 call    Print_String                ; print "Choose..."
78E8             10 303 Screen_Choose_Level
78E8 CD F8 6E    10 304 call    Input_Key_Scan              ; wait for a key pressed
78EB FE 31       10 305 cp      '1'                         ; is it < '1' ?
78ED 38 F9       10 306 jr      c, Screen_Choose_Level      ; yes, wait for a key pressed
78EF FE 35       10 307 cp      '5'                         ; is it >= '5' ?
78F1 30 F5       10 308 jr      nc, Screen_Choose_Level     ; yes, wait for a key pressed
78F3 D6 31       10 309 sub     $31                         ; convert ASCII into level number (-1)
78F5 21 9D 61    10 310 ld      hl, GAME_LEVEL              ; HL points to game level address
78F8 77          10 311 ld      (hl), a                     ; save chosen game level (-1)
78F9 C9          10 312 ret
78FA             10 314 ; ----------------------------------------------------------------------------------------------------------------------
78FA             10 315 ; Screen_ThreeRow: color the three-in-a-row marks according to the current three row counter
78FA             10 316 ;
78FA             10 317 ; Input:    -
78FA             10 318 ;
78FA             10 319 ; Output:   -
78FA             10 320 ;
78FA             10 321 ; Uses:     LEVEL_COLOR (current level color for frame border)
78FA             10 322 ;           THREE_ROW (three-in-a-row counter)
78FA             10 323 ;
78FA             10 324 ; Destroys: A, C, HL, IX
78FA             10 325 ; ----------------------------------------------------------------------------------------------------------------------
78FA             10 326 Screen_ThreeRow:
78FA 21 9C 61    10 327 ld      hl, LEVEL_COLOR             ; HL points to level color address
78FD 4E          10 328 ld      c, (hl)                     ; save level color in C
78FE CD 16 79    10 329 call    Screen_Clear_ThreeRow       ; clear all three-in-a-row marks
7901 3A 11 62    10 330 ld      a, (THREE_ROW)              ; A = three-in-a-row counter
7904 B7          10 331 or      a                           ; is it 0?
7905 C8          10 332 ret     z                           ; yes, return
7906 3D          10 333 dec     a                           ; is it 1?
7907 28 09       10 334 jr      z, Screen_ThreeRow_1        ; yes, color first mark
7909 3D          10 335 dec     a                           ; is it 2?
790A 28 03       10 336 jr      z, Screen_ThreeRow_2        ; yes color 2nd and 1st marks
790C DD 71 00    10 337 ld      (ix+0), c                   ; color 3rd mark
790F             10 338 Screen_ThreeRow_2
790F DD 71 01    10 339 ld      (ix+1), c                   ; color 2nd mark
7912             10 340 Screen_ThreeRow_1
7912 DD 71 02    10 341 ld      (ix+2), c                   ; color 1st mark
7915 C9          10 342 ret
7916             10 344 ; ----------------------------------------------------------------------------------------------------------------------
7916             10 345 ; Screen_Clear_ThreeRow: clear all three-in-a-row marks
7916             10 346 ;
7916             10 347 ; Input:    -
7916             10 348 ;
7916             10 349 ; Output:   IX = three-in-a-row marks attribute address
7916             10 350 ;
7916             10 351 ; Destroys: -
7916             10 352 ; ----------------------------------------------------------------------------------------------------------------------
7916             10 353 Screen_Clear_ThreeRow:
7916 DD 21 F2 5A 10 354 ld      ix, $5AF2                   ; IX points to attribute address of three-in-a-row marks
791A DD 36 00 01 10 355 ld      (ix+0), BLUE_INK            ; clear all three-in-a-row marks
791E DD 36 01 01 10 356 ld      (ix+1), BLUE_INK
7922 DD 36 02 01 10 357 ld      (ix+2), BLUE_INK
7926 C9          10 358 ret
7927             10 360 ; ----------------------------------------------------------------------------------------------------------------------
7927             10 361 ; Screen_Frame_Color: set up frame color and print level number depending on current level
7927             10 362 ;
7927             10 363 ; Input:    HL = game level address
7927             10 364 ;
7927             10 365 ; Output:   -
7927             10 366 ;
7927             10 367 ; Uses:     LEVEL_COLOR (current level color for frame border)
7927             10 368 ;
7927             10 369 ; Destroys: A, BC, DE, HL
7927             10 370 ; ----------------------------------------------------------------------------------------------------------------------
7927             10 371 Screen_Frame_Color:
7927 06 00       10 372 ld      b, 0                        ; set game level in BC
7929 4E          10 373 ld      c, (hl)
792A 3E 30       10 374 ld      a, $30                      ; convert game level number to game level character
792C 81          10 375 add     a, c
792D 21 0F 40    10 376 ld      hl, $400F                   ; HL points to screen address of game level
7930 CD 98 6F    10 377 call    Print_Char                  ; print game level
7933 21 11 62    10 378 ld      hl, ROW_COLOR_MAP-1         ; HL points to color map address (adjusted for index 0)
7936 09          10 379 add     hl, bc                      ; use BC as index for color map address
7937 7E          10 380 ld      a, (hl)                     ; A = level color
7938 CD 4D 79    10 381 call    Screen_Tiles_Color          ; color the frame according to the current level
793B E6 07       10 382 and     %00000111                   ; mask color
793D 32 9C 61    10 383 ld      (LEVEL_COLOR), a            ; save masked color
7940 17          10 384 rla                                 ; rotate to text level color
7941 17          10 385 rla
7942 17          10 386 rla
7943 21 08 58    10 387 ld      hl, $5808                   ; HL points to attribute address of level text
7946 06 09       10 388 ld      b, 9                        ; length of level text (loop counter)
7948             10 389 Screen_Level_Loop
7948 77          10 390 ld      (hl), a                     ; apply color to level text
7949 2C          10 391 inc     l                           ; HL points to attr address of next character of level text
794A 10 FC       10 392 djnz    Screen_Level_Loop           ; repeat for each character of level text
794C C9          10 393 ret
794D             10 395 ; ----------------------------------------------------------------------------------------------------------------------
794D             10 396 ; Screen_Tiles_Color: apply color to the frame tiles
794D             10 397 ;
794D             10 398 ; Input:    A = color to apply
794D             10 399 ;
794D             10 400 ; Output:   -
794D             10 401 ;
794D             10 402 ; Destroys: BC, DE, HL
794D             10 403 ; ----------------------------------------------------------------------------------------------------------------------
794D             10 404 Screen_Tiles_Color:
794D             10 405 ; color up row
794D 21 01 58    10 407 ld      hl, $5801                   ; HL points to attribute address of the the frame tile 
7950 06 06       10 408 ld      b, 6                        ; number of tiles (loop counter)
7952             10 409 Screen_Tiles_URow1
7952 77          10 410 ld      (hl), a                     ; apply color
7953 2C          10 411 inc     l                           ; move HL to the next attribute address
7954 10 FC       10 412 djnz    Screen_Tiles_URow1          ; repeat for each tile
7956 2E 12       10 413 ld      l, $12                      ; move HL to the next attribute address
7958 06 0D       10 414 ld      b, 13                       ; number of tiles (loop counter)
795A             10 415 Screen_Tiles_URow2
795A 77          10 416 ld      (hl), a                     ; apply color
795B 2C          10 417 inc     l                           ; move HL to the next attribute address
795C 10 FC       10 418 djnz    Screen_Tiles_URow2          ; repeat for each tile
795E             10 420 ; color vertical bars
795E 2E 00       10 422 ld      l, 0                        ; move HL to the next attribute address
7960 11 1F 00    10 423 ld      de, 31                      ; attribute address displacement (for each bar)
7963 0E 03       10 424 ld      c, 3                        ; number of screen thirds (outer loop counter)
7965             10 425 Screen_Tiles_VBar1
7965 06 08       10 426 ld      b, 8                        ; number of tiles (inner loop counter)
7967             10 427 Screen_Tiles_VBar2
7967 77          10 428 ld      (hl), a                     ; apply color
7968 19          10 429 add     hl, de                      ; move HL to the right column
7969 77          10 430 ld      (hl), a                     ; apply color
796A 2C          10 431 inc     l                           ; move HL to the next attribute address
796B 10 FA       10 432 djnz    Screen_Tiles_VBar2          ; repeat for each tile
796D 24          10 433 inc     h                           ; move HL to the next screen third
796E 0D          10 434 dec     c                           ; decrement number of thirds
796F 20 F4       10 435 jr      nz, Screen_Tiles_VBar1      ; repeat for each third
7971             10 437 ; color bottom row
7971 21 E1 5A    10 439 ld      hl, $5AE1                   ; HL points to attribute address of the the frame tile
7974 06 10       10 440 ld      b, 16                       ; number of tiles (loop counter)
7976             10 441 Screen_Tiles_BRow1
7976 77          10 442 ld      (hl), a                     ; apply color
7977 2C          10 443 inc     l                           ; move HL to the next attribute address
7978 10 FC       10 444 djnz    Screen_Tiles_BRow1          ; repeat for each tile
797A 2E F6       10 445 ld      l, $F6                      ; move HL to the next attribute address
797C 06 09       10 446 ld      b, 9                        ; number of tiles (loop counter)
797E             10 447 Screen_Tiles_BRow2
797E 77          10 448 ld      (hl), a                     ; apply color
797F 2C          10 449 inc     l                           ; move HL to the next attribute address
7980 10 FC       10 450 djnz    Screen_Tiles_BRow2          ; repeat for each tile
7982 C9          10 451 ret
7983             10 453 ; ----------------------------------------------------------------------------------------------------------------------
7983             10 454 ; Screen_Menu: show main menu and wait for an option
7983             10 455 ;
7983             10 456 ; Input:    -
7983             10 457 ;
7983             10 458 ; Output:   -
7983             10 459 ;
7983             10 460 ; Uses:     GAME_LEVEL (current game level)
7983             10 461 ;
7983             10 462 ; Destroys: A, BC, DE, HL, IX, IY
7983             10 463 ; ----------------------------------------------------------------------------------------------------------------------
7983             10 464 Screen_Menu:
7983 CD 18 77    10 465 call    Screen_Clear                ; fill in black the whole screen area and attributes area
7986 CD 5D 7C    10 466 call    Screen_Hexagons             ; draw menu hexagons ("HEX 2")
7989             10 467 Screen_Menu_Strings
7989 21 80 59    10 468 ld      hl, $5980                   ; HL points to menu text area attributes address
798C 11 81 59    10 469 ld      de, $5981                   ; DE points to next byte of menu text area attr. address
798F 36 00       10 470 ld      (hl), 0                     ; set first attribute text area in black
7991 01 7F 01    10 471 ld      bc, (32*12)-1               ; length of text area attributes (-1 already set)
7994 ED B0       10 472 ldir                                ; set the rest of text area attributes in black
7996 DD 21 CA 59 10 474 ld      ix, $59CA                   ; IX points to "Start new game" string attr. address (+1)
799A DD 36 FF 78 10 475 ld      (ix-1), WHITE_PAPER+BRIGHT  ; set color of first letter
799E 01 47 0D    10 476 ld      bc, (13*256)+WHITE_FLASH0   ; B = string length-1 (loop counter), C = color attributes
79A1 CD 7C 78    10 477 call    Screen_Apply_Color_Loop     ; apply color to string area
79A4 11 80 67    10 478 ld      de, STR_OPTIONS             ; DE points to string address
79A7 21 C9 48    10 479 ld      hl, $48C9                   ; HL points to string screen address
79AA CD 8C 6F    10 480 call    Print_String                ; print "Start new game"
79AD DD 21 2A 5A 10 481 ld      ix, $5A2A                   ; IX points to "How to play" string attributes address (+1)
79B1 DD 36 FF 78 10 482 ld      (ix-1), WHITE_PAPER+BRIGHT  ; set color of first letter
79B5 06 0A       10 483 ld      b, 10                       ; string length-1 (loop counter)
79B7 CD 7C 78    10 484 call    Screen_Apply_Color_Loop     ; apply color to string area
79BA 13          10 485 inc     de                          ; move DE to "How to play" string address
79BB 21 29 50    10 486 ld      hl, $5029                   ; HL points to string screen address
79BE CD 8C 6F    10 487 call    Print_String                ; print "How to play"
79C1 DD 2E 8A    10 488 ld      ixl, $8A                    ; IX points to "Credits" string attributes address (+1)
79C4 DD 36 FF 78 10 489 ld      (ix-1), WHITE_PAPER+BRIGHT  ; set color of first letter
79C8 CD 7A 78    10 490 call    Screen_Apply_Color          ; apply color to string area
79CB 13          10 491 inc     de                          ; move DE to "Credits" string address
79CC 2E 89       10 492 ld      l, $89                      ; HL points to string screen address
79CE CD 8C 6F    10 493 call    Print_String                ; print "Credits"
79D1             10 494 Screen_Menu_Options
79D1 CD F8 6E    10 495 call    Input_Key_Scan              ; wait for a key pressed
79D4 FE 73       10 496 cp      's'                         ; is it 's'?
79D6 C8          10 497 ret     z                           ; yes, return
79D7 FE 63       10 498 cp      'c'                         ; is it 'c'?
79D9 CA ED 7B    10 499 jp      z, Screen_Menu_Credits      ; yes, show credits
79DC FE 68       10 500 cp      'h'                         ; is it 'h'?
79DE 20 F1       10 501 jr      nz, Screen_Menu_Options     ; no, repeat until key pressed = 's' or 'c' or 'h'
79E0             10 503 ; ----------------------------------------------------------------------------------------------------------------------
79E0             10 504 ; Show "How to play" pages
79E0             10 505 ; ----------------------------------------------------------------------------------------------------------------------
79E0             10 506 Screen_Menu_How2Play
79E0 CD 18 77    10 507 call    Screen_Clear                ; fill in black the whole screen area and attributes area
79E3 CD 25 77    10 508 call    Screen_Letters              ; draw the two rows of letters on the screen (a..g)
79E6 CD 51 77    10 509 call    Screen_Numbers              ; draw the two columns of numbers on the screen (1..7)
79E9 CD 90 77    10 510 call    Screen_Frame                ; draw the screen frame
79EC 21 9D 61    10 512 ld      hl, GAME_LEVEL              ; HL points to game level address (needed for color frame)
79EF 34          10 513 inc     (hl)                        ; increment game level (GAME_LEVEL = 1)
79F0 CD 27 79    10 514 call    Screen_Frame_Color          ; set up frame color depending on current level
79F3 CD 16 79    10 515 call    Screen_Clear_ThreeRow       ; clear all three-in-a-row marks
79F6 11 4A 68    10 517 ld      de, STR_BUTTONS             ; DE points to "Next" string address
79F9 21 DB 50    10 518 ld      hl, $50DB                   ; HL points to string screen address
79FC CD 8C 6F    10 519 call    Print_String                ; print "Next"
79FF 13          10 520 inc     de                          ; move DE to "Back" string address
7A00 21 C1 50    10 521 ld      hl, $50C1                   ; HL points to string screen address
7A03 CD 8C 6F    10 522 call    Print_String                ; print "Back"
7A06             10 524 Screen_How2Play_RED
7A06 21 5E 58    10 525 ld      hl, $5876-24                ; HL points to cyan text area attributes address (-24)
7A09 CD 97 7C    10 526 call    Screen_Clear_Text           ; clear text area attributes
7A0C CD A4 6D    10 527 call    Draw_Board                  ; draw an empty hexagons board
7A0F             10 529 ; text for RED
7A0F DD 21 01 5A 10 531 ld      ix, $5A01                   ; IX points to "Connect" string attributes address
7A13 01 07 07    10 532 ld      bc, (7*256)+WHITE           ; B = string length (loop counter), C = color attributes
7A16 CD 7C 78    10 533 call    Screen_Apply_Color_Loop     ; apply color to string area
7A19 11 5D 68    10 534 ld      de, STR_HELP1               ; DE points to string address
7A1C 21 01 50    10 535 ld      hl, $5001                   ; HL points to string screen address
7A1F CD 8C 6F    10 536 call    Print_String                ; print "Connect"
7A22 DD 2E 21    10 537 ld      ixl, $21                    ; IX points to "left and" string attributes address
7A25 06 08       10 538 ld      b, 8                        ; string length (loop counter)
7A27 CD 7C 78    10 539 call    Screen_Apply_Color_Loop     ; apply color to string area
7A2A 13          10 540 inc     de                          ; move DE to "left and" string address
7A2B 2E 21       10 541 ld      l, $21                      ; HL points to string screen address
7A2D CD 8C 6F    10 542 call    Print_String                ; print "left and"
7A30 DD 2E 41    10 543 ld      ixl, $41                    ; IX points to "right" string attributes address
7A33 06 05       10 544 ld      b, 5                        ; set string length (loop counter)
7A35 CD 7C 78    10 545 call    Screen_Apply_Color_Loop     ; apply color to string area
7A38 11 75 68    10 546 ld      de, STR_HELP3_RED           ; DE points to "right" string address
7A3B 2E 41       10 547 ld      l, $41                      ; HL points to string screen address
7A3D CD 8C 6F    10 548 call    Print_String                ; print "right"
7A40 DD 2E 61    10 549 ld      ixl, $61                    ; IX points to "borders" string attributes address
7A43 06 07       10 550 ld      b, 7                        ; set string length (loop counter)
7A45 CD 7C 78    10 551 call    Screen_Apply_Color_Loop     ; apply color to string area
7A48 11 80 68    10 552 ld      de, STR_HELP4               ; DE points to "borders" string address
7A4B 2E 61       10 553 ld      l, $61                      ; HL points to string screen address
7A4D CD 8C 6F    10 554 call    Print_String                ; print "borders"
7A50 DD 2E 81    10 555 ld      ixl, $81                    ; IX points to "to win" string attributes address
7A53 CD 7A 78    10 556 call    Screen_Apply_Color          ; apply color to string area
7A56 13          10 557 inc     de                          ; move DE to "to win" string address
7A57 2E 81       10 558 ld      l, $81                      ; HL points to string screen address
7A59 CD 8C 6F    10 559 call    Print_String                ; print "to win"
7A5C DD 21 E3 59 10 560 ld      ix, $59E3                   ; IX points to "RED" string attributes address
7A60 01 42 03    10 561 ld      bc, (3*256)+RED_COLOR+BRIGHT; B = string length (loop counter), C = color attributes
7A63 CD 7C 78    10 562 call    Screen_Apply_Color_Loop     ; apply color to string area
7A66 11 54 68    10 563 ld      de, STR_RED                 ; DE points to "RED" string address
7A69 21 E3 48    10 564 ld      hl, $48E3                   ; HL points to string screen address
7A6C CD 8C 6F    10 565 call    Print_String                ; print "RED"
7A6F             10 567 ; draw RED sample board
7A6F FD 21 3A 67 10 569 ld      iy, SAMPLE_BOARD_RED        ; IY points to sample board (red) screen addresses
7A73 11 3E 66    10 570 ld      de, HEXAGON_TOKEN           ; DE points to token sprite address
7A76 06 07       10 571 ld      b, 7                        ; number of red+bright tokens (loop counter)
7A78 3E 42       10 572 ld      a, RED_COLOR+BRIGHT         ; set token color
7A7A 32 9E 61    10 573 ld      (TOKEN_COLOR), a            ; save token color
7A7D CD 82 7C    10 574 call    Screen_Hexagons_Loop        ; draw tokens
7A80 06 02       10 575 ld      b, 2                        ; number of red tokens (loop counter)
7A82 3E 02       10 576 ld      a, RED_COLOR                ; set token color
7A84 32 9E 61    10 577 ld      (TOKEN_COLOR), a            ; save token color
7A87 CD 82 7C    10 578 call    Screen_Hexagons_Loop        ; draw tokens
7A8A 06 09       10 579 ld      b, 9                        ; number of cyan tokens (loop counter)
7A8C 3E 05       10 580 ld      a, CYAN_COLOR               ; set token color
7A8E 32 9E 61    10 581 ld      (TOKEN_COLOR), a            ; save token color
7A91 CD 82 7C    10 582 call    Screen_Hexagons_Loop        ; draw tokens
7A94             10 584 ; wait for "Next" option pressed
7A94 DD 21 C1 5A 10 586 ld      ix, $5AC1                   ; IX points to "Back" string attribute address
7A98 01 00 04    10 587 ld      bc, $0400                   ; B = string length (loop counter), C = attributes (black)
7A9B CD 7C 78    10 588 call    Screen_Apply_Color_Loop     ; hide "Back" string
7A9E DD 2E DC    10 589 ld      ixl, $DC                    ; IX points to "Next" string attribute address (+1)
7AA1 DD 36 FF 78 10 590 ld      (ix-1), WHITE_PAPER+BRIGHT  ; set color of first letter
7AA5 01 47 03    10 591 ld      bc, (3*256)+WHITE_FLASH0    ; B = string length-1 (loop counter), C = color attributes
7AA8 CD 7C 78    10 592 call    Screen_Apply_Color_Loop     ; apply color to string area
7AAB             10 593 Screen_How2PlayRED_End
7AAB CD F8 6E    10 594 call    Input_Key_Scan              ; wait for a key pressed
7AAE FE 6E       10 595 cp      'n'                         ; is it 'n'?
7AB0 20 F9       10 596 jr      nz, Screen_How2PlayRED_End  ; no, repeat until key pressed = 'n'
7AB2             10 598 Screen_How2Play_CYAN
7AB2 21 0F 58    10 599 ld      hl, $580F                   ; HL points to level number attribute address
7AB5 CB BE       10 600 res     7, (hl)                     ; reset flash attribute
7AB7 26 40       10 601 ld      h, $40                      ; HL points to level number screen address
7AB9 3E 31       10 602 ld      a, '1'                      ; set level number (char)
7ABB CD 98 6F    10 603 call    Print_Char                  ; print '1'
7ABE CD 16 79    10 604 call    Screen_Clear_ThreeRow       ; clear all three-in-a-row marks
7AC1 21 C9 59    10 606 ld      hl, $59E1-24                ; HL points to red text area attributes address (-24)
7AC4 CD 97 7C    10 607 call    Screen_Clear_Text           ; clear text area attributes
7AC7 CD A4 6D    10 608 call    Draw_Board                  ; draw an empty hexagons board
7ACA             10 610 ; text for CYAN
7ACA DD 21 98 58 10 612 ld      ix, $5898                   ; IX points to "Connect" string attributes address
7ACE 01 07 07    10 613 ld      bc, (7*256)+WHITE           ; B = string length (loop counter), C = color attributes
7AD1 CD 7C 78    10 614 call    Screen_Apply_Color_Loop     ; apply color to string area
7AD4 11 5D 68    10 615 ld      de, STR_HELP1               ; DE points to "Connect" string address
7AD7 21 98 40    10 616 ld      hl, $4098                   ; HL points to string screen address
7ADA CD 8C 6F    10 617 call    Print_String                ; print "Connect"
7ADD DD 2E B9    10 618 ld      ixl, $B9                    ; IX points to "up and" string attributes address
7AE0 CD 7A 78    10 619 call    Screen_Apply_Color          ; apply color to string area
7AE3 11 6E 68    10 620 ld      de, STR_HELP2_CYAN          ; DE points to "up and" string address
7AE6 2E B9       10 621 ld      l, $B9                      ; HL points to string screen address
7AE8 CD 8C 6F    10 622 call    Print_String                ; print "up and"
7AEB DD 2E DB    10 623 ld      ixl, $DB                    ; IX points to "down" string attributes address
7AEE 06 04       10 624 ld      b, 4                        ; string length (loop counter)
7AF0 CD 7C 78    10 625 call    Screen_Apply_Color_Loop     ; apply color to string area
7AF3 11 7B 68    10 626 ld      de, STR_HELP3_CYAN          ; DE points to "down" string address
7AF6 2E DB       10 627 ld      l, $DB                      ; HL points to string screen address
7AF8 CD 8C 6F    10 628 call    Print_String                ; print "down"
7AFB DD 2E F8    10 629 ld      ixl, $F8                    ; IX points to "borders" string attributes address
7AFE 06 07       10 630 ld      b, 7                        ; string length (loop counter)
7B00 CD 7C 78    10 631 call    Screen_Apply_Color_Loop     ; apply color to string area
7B03 13          10 632 inc     de                          ; move DE to "borders" string address
7B04 2E F8       10 633 ld      l, $F8                      ; HL points to string screen address
7B06 CD 8C 6F    10 634 call    Print_String                ; print "borders"
7B09 DD 21 19 59 10 635 ld      ix, $5919                   ; IX points to "to win" string attributes address
7B0D CD 7A 78    10 636 call    Screen_Apply_Color          ; apply color to string area
7B10 13          10 637 inc     de                          ; move DE to "to win" string address
7B11 21 19 48    10 638 ld      hl, $4819                   ; HL points to string screen address
7B14 CD 8C 6F    10 639 call    Print_String                ; print "to win"
7B17 DD 21 7A 58 10 640 ld      ix, $587A                   ; IX points to "CYAN" string attributes address
7B1B 01 45 04    10 641 ld      bc, $0445                   ; B = string length (loop counter)
7B1E             10 642 ; C = color attributes (cyan+bright)
7B1E CD 7C 78    10 643 call    Screen_Apply_Color_Loop     ; apply color to string area
7B21 11 58 68    10 644 ld      de, STR_CYAN                ; DE points to "CYAN" string address
7B24 21 7A 40    10 645 ld      hl, $407A                   ; HL points to string screen address
7B27 CD 8C 6F    10 646 call    Print_String                ; print "CYAN"
7B2A             10 648 ; draw CYAN sample board
7B2A FD 21 5E 67 10 650 ld      iy, SAMPLE_BOARD_CYAN       ; IY points to sample board (cyan) screen addresses
7B2E 11 3E 66    10 651 ld      de, HEXAGON_TOKEN           ; DE points to token sprite address
7B31 06 07       10 652 ld      b, 7                        ; number of cyan+bright tokens (loop counter)
7B33 3E 45       10 653 ld      a, CYAN_COLOR+BRIGHT        ; set token color
7B35 32 9E 61    10 654 ld      (TOKEN_COLOR), a            ; save token color
7B38 CD 82 7C    10 655 call    Screen_Hexagons_Loop        ; draw tokens
7B3B 06 02       10 656 ld      b, 2                        ; number of cyan tokens (loop counter)
7B3D 3E 05       10 657 ld      a, CYAN_COLOR               ; set token color
7B3F 32 9E 61    10 658 ld      (TOKEN_COLOR), a            ; save token color
7B42 CD 82 7C    10 659 call    Screen_Hexagons_Loop        ; draw tokens
7B45 06 08       10 660 ld      b, 8                        ; number of red tokens (loop counter)
7B47 3E 02       10 661 ld      a, RED_COLOR                ; set token color
7B49 32 9E 61    10 662 ld      (TOKEN_COLOR), a            ; save token color
7B4C CD 82 7C    10 663 call    Screen_Hexagons_Loop        ; draw tokens
7B4F             10 665 ; wait for "Next" or "Back" options pressed
7B4F DD 21 C2 5A 10 667 ld      ix, $5AC2                   ; IX points to "Back" string attributes address (+1)
7B53 DD 36 FF 78 10 668 ld      (ix-1), WHITE_PAPER+BRIGHT  ; set color of first letter
7B57 01 47 03    10 669 ld      bc, (3*256)+WHITE_FLASH0    ; B = string length (-1), C = color attributes
7B5A CD 7C 78    10 670 call    Screen_Apply_Color_Loop     ; apply color to string area
7B5D             10 671 Screen_How2PlayCYAN_End
7B5D CD F8 6E    10 672 call    Input_Key_Scan              ; wait for a key pressed
7B60 FE 62       10 673 cp      'b'                         ; is it 'b'?
7B62 CA 06 7A    10 674 jp      z, Screen_How2Play_RED      ; yes, show RED page
7B65 FE 6E       10 675 cp      'n'                         ; is it 'n'?
7B67 20 F4       10 676 jr      nz, Screen_How2PlayCYAN_End ; no, repeat until key pressed = 'n' or 'b'
7B69             10 678 Screen_How2Play_LevelUp
7B69 21 5E 58    10 679 ld      hl, $5876-24                ; HL points to cyan text area attributes address (-24)
7B6C CD 97 7C    10 680 call    Screen_Clear_Text           ; clear text area attributes
7B6F             10 682 ; text for Level Up
7B6F DD 21 21 5A 10 684 ld      ix, $5A21                   ; IX points to "Win three" string attributes address
7B73 01 07 09    10 685 ld      bc, (9*256)+WHITE           ; B = string length (loop counter), C = color attributes
7B76 CD 7C 78    10 686 call    Screen_Apply_Color_Loop     ; apply color to string area
7B79 11 8F 68    10 687 ld      de, STR_HELP                ; DE points to "Win three" string address
7B7C 21 21 50    10 688 ld      hl, $5021                   ; HL points to string screen address
7B7F CD 8C 6F    10 689 call    Print_String                ; print "Win three"
7B82 DD 2E 41    10 690 ld      ixl, $41                    ; IX points to "times in" string attributes address
7B85 06 08       10 691 ld      b, 8                        ; string length (loop counter)
7B87 CD 7C 78    10 692 call    Screen_Apply_Color_Loop     ; apply color to string area
7B8A 13          10 693 inc     de                          ; move DE to "times in" string address
7B8B 2E 41       10 694 ld      l, $41                      ; HL points to string screen address
7B8D CD 8C 6F    10 695 call    Print_String                ; print "times in"
7B90 DD 2E 61    10 696 ld      ixl, $61                    ; IX points to "a row to" string attributes address
7B93 06 08       10 697 ld      b, 8                        ; string length (loop counter)
7B95 CD 7C 78    10 698 call    Screen_Apply_Color_Loop     ; apply color to string area
7B98 13          10 699 inc     de                          ; move DE to "a row to" string address
7B99 2E 61       10 700 ld      l, $61                      ; HL points to string screen address
7B9B CD 8C 6F    10 701 call    Print_String                ; print "a row to"
7B9E DD 2E 81    10 702 ld      ixl, $81                    ; IX points to "level up" string attributes address
7BA1 06 08       10 703 ld      b, 8                        ; string length (loop counter)
7BA3 CD 7C 78    10 704 call    Screen_Apply_Color_Loop     ; apply color to string area
7BA6 13          10 705 inc     de                          ; move DE to "level up" string address
7BA7 2E 81       10 706 ld      l, $81                      ; HL points to string screen address
7BA9 CD 8C 6F    10 707 call    Print_String                ; print "level up"
7BAC             10 709 ; reset bright of cyan tokens
7BAC FD 21 5E 67 10 711 ld      iy, SAMPLE_BOARD_CYAN       ; IY points to sample board (cyan) screen addresses
7BB0 11 3E 66    10 712 ld      de, HEXAGON_TOKEN           ; DE points to token sprite address
7BB3 06 07       10 713 ld      b, 7                        ; number of cyan+bright tokens (loop counter)
7BB5 3E 05       10 714 ld      a, CYAN_COLOR               ; set new token color
7BB7 32 9E 61    10 715 ld      (TOKEN_COLOR), a            ; save color
7BBA CD 82 7C    10 716 call    Screen_Hexagons_Loop        ; draw tokens
7BBD             10 718 ; set flash attribute of level number and three-in-a-row marks
7BBD 21 0F 58    10 720 ld      hl, $580F                   ; HL points to level number attribute address
7BC0 CB FE       10 721 set     7, (hl)                     ; set flash attribute
7BC2 21 0F 40    10 722 ld      hl, $400F                   ; HL points to level number screen address
7BC5 3E 32       10 723 ld      a, '2'                      ; set new level
7BC7 CD 98 6F    10 724 call    Print_Char                  ; print new level
7BCA DD 21 F2 5A 10 725 ld      ix, $5AF2                   ; IX points to three-in-a-row attribute address
7BCE DD 36 00 B8 10 726 ld      (ix+0), WHITE_PAPER+FLASH   ; set flash attributes
7BD2 DD 36 01 B8 10 727 ld      (ix+1), WHITE_PAPER+FLASH
7BD6 DD 36 02 B8 10 728 ld      (ix+2), WHITE_PAPER+FLASH
7BDA             10 730 ; wait for "Next" or "Back" options pressed
7BDA             10 732 Screen_How2Play_End
7BDA CD F8 6E    10 733 call    Input_Key_Scan              ; wait for a key pressed
7BDD FE 62       10 734 cp      'b'                         ; is it 'b'?
7BDF CA B2 7A    10 735 jp      z, Screen_How2Play_CYAN     ; yes, show CYAN page
7BE2 FE 6E       10 736 cp      'n'                         ; is it 'n'?
7BE4 20 F4       10 737 jr      nz, Screen_How2Play_End     ; no, repeat until key pressed = 'b' or 'n'
7BE6 21 9D 61    10 739 ld      hl, GAME_LEVEL              ; HL points to game level address
7BE9 35          10 740 dec     (hl)                        ; decrement game level (GAME_LEVEL = 0)
7BEA C3 83 79    10 741 jp      Screen_Menu                 ; return to main menu
7BED             10 743 ; ----------------------------------------------------------------------------------------------------------------------
7BED             10 744 ; Show credits
7BED             10 745 ; ----------------------------------------------------------------------------------------------------------------------
7BED             10 746 Screen_Menu_Credits
7BED DD 21 84 59 10 747 ld      ix, $5984                   ; IX points to "Design..." string attributes address
7BF1 01 47 19    10 748 ld      bc, (25*256)+WHITE_FLASH0   ; B = string length (loop counter), C = color attributes
7BF4 CD 7C 78    10 749 call    Screen_Apply_Color_Loop     ; apply color to string area
7BF7 11 A3 67    10 750 ld      de, STR_CREDITS             ; DE points to "Design..." string address
7BFA 21 84 48    10 751 ld      hl, $4884                   ; HL points to string screen address
7BFD CD 8C 6F    10 752 call    Print_String                ; print "Design..."
7C00 DD 2E C4    10 753 ld      ixl, $C4                    ; IX points to "Code..." string attributes address
7C03 06 19       10 754 ld      b, 25                       ; string length (loop counter)
7C05 CD 7C 78    10 755 call    Screen_Apply_Color_Loop     ; apply color to string area
7C08 13          10 756 inc     de                          ; move DE to to "Code..." string address
7C09 2E C4       10 757 ld      l, $C4                      ; HL points to string screen address
7C0B CD 8C 6F    10 758 call    Print_String                ; print "Code..."
7C0E DD 2E E4    10 759 ld      ixl, $E4                    ; IX points to "Einar Saukas" string attributes address
7C11 06 18       10 760 ld      b, 24                       ; string length (loop counter)
7C13 CD 7C 78    10 761 call    Screen_Apply_Color_Loop     ; apply color to string area
7C16 13          10 762 inc     de                          ; move DE to "Einar Saukas" string address
7C17 2E E4       10 763 ld      l, $E4                      ; HL points to string screen address
7C19 CD 8C 6F    10 764 call    Print_String                ; print "Einar Saukas"
7C1C DD 21 24 5A 10 765 ld      ix, $5A24                   ; IX points to "Font..." string attributes address
7C20 06 18       10 766 ld      b, 24                       ; string length (loop counter)
7C22 CD 7C 78    10 767 call    Screen_Apply_Color_Loop     ; apply color to string area
7C25 13          10 768 inc     de                          ; move DE to "Font..." string address
7C26 21 24 50    10 769 ld      hl, $5024                   ; HL points to string screen address
7C29 CD 8C 6F    10 770 call    Print_String                ; print "Font..."
7C2C DD 2E 64    10 771 ld      ixl, $64                    ; IX points to "Graphics..." string attributes address
7C2F 06 18       10 772 ld      b, 24                       ; string length (loop counter)
7C31 CD 7C 78    10 773 call    Screen_Apply_Color_Loop     ; apply color to string area
7C34 13          10 774 inc     de                          ; move DE to "Graphics..." string address
7C35 2E 64       10 775 ld      l, $64                      ; HL points to string screen address
7C37 CD 8C 6F    10 776 call    Print_String                ; print "Graphics..."
7C3A DD 2E 84    10 777 ld      ixl, $84                    ; IX points to "Antonio Luque" string attributes address
7C3D 06 19       10 778 ld      b, 25                       ; string length (loop counter)
7C3F CD 7C 78    10 779 call    Screen_Apply_Color_Loop     ; apply color to string area
7C42 13          10 780 inc     de                          ; move DE to "Antonio Luque" string address
7C43 2E 84       10 781 ld      l, $84                      ; HL points to string screen address
7C45 CD 8C 6F    10 782 call    Print_String                ; print "Antonio Luque"
7C48 DD 2E E9    10 783 ld      ixl, $E9                    ; IX points to "Press any key" string attributes address
7C4B 01 38 0D    10 784 ld      bc, (13*256)+WHITE_PAPER    ; B = string length (loop counter), C = color attributes
7C4E CD 7C 78    10 785 call    Screen_Apply_Color_Loop     ; apply color to string area
7C51 13          10 786 inc     de                          ; move DE to "Press any key" string address
7C52 2E E9       10 787 ld      l, $E9                      ; HL points to string screen address
7C54 CD 8C 6F    10 788 call    Print_String                ; print "Press any key"
7C57 CD F8 6E    10 789 call    Input_Key_Scan              ; wait for a key pressed
7C5A C3 89 79    10 790 jp      Screen_Menu_Strings         ; return to main menu
7C5D             10 792 ; ----------------------------------------------------------------------------------------------------------------------
7C5D             10 793 ; Screen_Menu_Hexagons: draw menu hexagons on screen
7C5D             10 794 ;
7C5D             10 795 ; Input:    -
7C5D             10 796 ;
7C5D             10 797 ; Output:   -
7C5D             10 798 ;
7C5D             10 799 ; Uses:     TOKEN_COLOR (current token color)
7C5D             10 800 ;
7C5D             10 801 ; Destroys: A, BC, DE, HL, IX, IY
7C5D             10 802 ; ----------------------------------------------------------------------------------------------------------------------
7C5D             10 803 Screen_Hexagons:
7C5D FD 21 EA 66 10 804 ld      iy, MENU_HEXAGONS           ; IY points to menu hexagons screen addresses
7C61 3E 07       10 805 ld      a, WHITE                    ; set hexagon color
7C63 32 9E 61    10 806 ld      (TOKEN_COLOR), a            ; save hexagon color
7C66 11 7E 65    10 807 ld      de, HEXAGON_EMPTY           ; DE points to empty hexagon sprite address
7C69 06 1C       10 808 ld      b, 28                       ; number of empty hexagons (loop counter)
7C6B CD 82 7C    10 809 call    Screen_Hexagons_Loop        ; draw empty hexagons
7C6E 3E 05       10 810 ld      a, CYAN_COLOR               ; set token color
7C70 32 9E 61    10 811 ld      (TOKEN_COLOR), a            ; save hexagon color
7C73 11 3E 66    10 812 ld      de, HEXAGON_TOKEN           ; DE points to token sprite address
7C76 06 06       10 813 ld      b, 6                        ; number of cyan tokens (loop counter)
7C78 CD 82 7C    10 814 call    Screen_Hexagons_Loop        ; draw cyan tokens
7C7B 3E 02       10 815 ld      a, RED_COLOR                ; set token color
7C7D 32 9E 61    10 816 ld      (TOKEN_COLOR), a            ; save hexagon color
7C80 06 06       10 817 ld      b, 6                        ; number of red tokens (loop counter)
7C82             10 818 Screen_Hexagons_Loop:
7C82 FD 6E 00    10 819 ld      l, (iy+0)                   ; HL points to hexagon/token screen address
7C85 FD 66 01    10 820 ld      h, (iy+1)
7C88 CD 24 6E    10 821 call    Draw_Hexagon_Color          ; apply color to hexagon/token area
7C8B D5          10 822 push    de                          ; store hexagon/token sprite address
7C8C CD F6 6D    10 823 call    Draw_Sprite_Hexagon         ; draw hexagon sprite
7C8F D1          10 824 pop     de                          ; restore hexagon/token sprite address
7C90 FD 23       10 825 inc     iy                          ; move IY to next hexagon/token screen address
7C92 FD 23       10 826 inc     iy
7C94 10 EC       10 827 djnz    Screen_Hexagons_Loop        ; repeat for each hexagon/token
7C96 C9          10 828 ret
7C97             10 830 ; ----------------------------------------------------------------------------------------------------------------------
7C97             10 831 ; Screen_Clear_Text: clean a text attributes area
7C97             10 832 ;
7C97             10 833 ; Input:    HL = text area attributes address
7C97             10 834 ;
7C97             10 835 ; Output:   -
7C97             10 836 ;
7C97             10 837 ; Destroys: BC, DE, HL
7C97             10 838 ; ----------------------------------------------------------------------------------------------------------------------
7C97             10 839 Screen_Clear_Text:
7C97 01 30 00    10 840 ld      bc, 8*6                     ; length of attributes area: width x height (in bytes)
7C9A             10 841 Screen_ClearText_Loop
7C9A 11 18 00    10 842 ld      de, 24                      ; displacement for each text row
7C9D 19          10 843 add     hl, de                      ; add displacement to text area attributes address
7C9E 54          10 844 ld      d, h                        ; DE points to text area attributes address
7C9F 5D          10 845 ld      e, l
7CA0 36 00       10 846 ld      (hl), 0                     ; set attributes color (black) for 1st byte of current row
7CA2 13          10 847 inc     de                          ; move DE to next byte attribute address
7CA3 ED A0       10 848 ldi                                 ; set attributes color for the rest of bytes of current row
7CA5 ED A0       10 849 ldi
7CA7 ED A0       10 850 ldi
7CA9 ED A0       10 851 ldi
7CAB ED A0       10 852 ldi
7CAD ED A0       10 853 ldi
7CAF ED A0       10 854 ldi
7CB1 ED A0       10 855 ldi
7CB3 EA 9A 7C    10 856 jp      pe, Screen_ClearText_Loop   ; repeat for each row
7CB6 C9          10 857 ret

; File #0: C:\Users\Antonio Luque\source\repos\Hex\Z80CodeFiles\Hex2.z80asm

7CB7             0 19 ; ----------------------------------------------------------------------------------------------------------------------
7CB7             0 20 ; Credits and acknowledgements:
7CB7             0 21 ;
7CB7             0 22 ; - Einar Saukas and his amazing BRAINIAC: https://spectrumcomputing.co.uk/entry/31171/ZX-Spectrum/BRAINIAC,
7CB7             0 23 ;   PATHFINDER adaptation: https://spectrumcomputing.co.uk/entry/28178/ZX-Spectrum/PATHFINDER, loading screen,
7CB7             0 24 ;   "King+" font and TOKEN graphics.
7CB7             0 25 ; - Greg Surma article: https://gsurma.medium.com/hex-creating-intelligent-opponents-with-minimax-driven-ai-part-1-%CE%B
7CB7             0 26 ;   1-%CE%B2-pruning-cc1df850e5bd
7CB7             0 27 ; - Jack van Rijswijck's thesis: https://webdocs.cs.ualberta.ca/~hayward/theses/jackmsc.pdf
7CB7             0 28 ; - ChibiAkumas lessons: https://www.chibiakumas.com/z80/simplesamples.php#LessonS2
7CB7             0 29 ; - Santiago Romero assembler course: https://wiki.speccy.org/cursos/ensamblador/indice
7CB7             0 30 ;
7CB7             0 31 ; - Special thanks to my wife Sonia.
7CB7             0 32 ; ----------------------------------------------------------------------------------------------------------------------
