
; File #0: C:\Users\Antonio Luque\source\Repos\Hex\Z80CodeFiles\Hex2.z80asm

8000             0 1 ; ----------------------------------------------------------------------------------------------------------------------
8000             0 2 ; Hex2.z80asm
8000             0 3 ; Coded by Antonio Luque
8000             0 4 ;
8000             0 5 ; Build file
8000             0 6 ; ----------------------------------------------------------------------------------------------------------------------

; File #1: C:\Users\Antonio Luque\source\Repos\Hex\Z80CodeFiles\Data.z80asm

8000             1 1 ; ----------------------------------------------------------------------------------------------------------------------
8000             1 2 ; Data.z80asm
8000             1 3 ; Coded by Antonio Luque
8000             1 4 ;
8000             1 5 ; Definition of data, variables and tables
8000             1 6 ; ----------------------------------------------------------------------------------------------------------------------
8000             1 8 STACK                   org     $6000
6000             1 10 ; ----------------------------------------------------------------------------------------------------------------------
6000             1 11 ; Circular queue
6000             1 12 ; ----------------------------------------------------------------------------------------------------------------------
6000 00 00 00 00 1 13 CYAN_QUEUE_AREA         defs    256                         ; 256-aligned block reserved for circular queue
6004 00 00 00 00 1 13 
6008 00 00 00 00 1 13 
600C 00 00 00 00 1 13 
6010 00 00 00 00 1 13 
6014 00 00 00 00 1 13 
6018 00 00 00 00 1 13 
601C 00 00 00 00 1 13 
6020 00 00 00 00 1 13 
6024 00 00 00 00 1 13 
6028 00 00 00 00 1 13 
602C 00 00 00 00 1 13 
6030 00 00 00 00 1 13 
6034 00 00 00 00 1 13 
6038 00 00 00 00 1 13 
603C 00 00 00 00 1 13 
6040 00 00 00 00 1 13 
6044 00 00 00 00 1 13 
6048 00 00 00 00 1 13 
604C 00 00 00 00 1 13 
6050 00 00 00 00 1 13 
6054 00 00 00 00 1 13 
6058 00 00 00 00 1 13 
605C 00 00 00 00 1 13 
6060 00 00 00 00 1 13 
6064 00 00 00 00 1 13 
6068 00 00 00 00 1 13 
606C 00 00 00 00 1 13 
6070 00 00 00 00 1 13 
6074 00 00 00 00 1 13 
6078 00 00 00 00 1 13 
607C 00 00 00 00 1 13 
6080 00 00 00 00 1 13 
6084 00 00 00 00 1 13 
6088 00 00 00 00 1 13 
608C 00 00 00 00 1 13 
6090 00 00 00 00 1 13 
6094 00 00 00 00 1 13 
6098 00 00 00 00 1 13 
609C 00 00 00 00 1 13 
60A0 00 00 00 00 1 13 
60A4 00 00 00 00 1 13 
60A8 00 00 00 00 1 13 
60AC 00 00 00 00 1 13 
60B0 00 00 00 00 1 13 
60B4 00 00 00 00 1 13 
60B8 00 00 00 00 1 13 
60BC 00 00 00 00 1 13 
60C0 00 00 00 00 1 13 
60C4 00 00 00 00 1 13 
60C8 00 00 00 00 1 13 
60CC 00 00 00 00 1 13 
60D0 00 00 00 00 1 13 
60D4 00 00 00 00 1 13 
60D8 00 00 00 00 1 13 
60DC 00 00 00 00 1 13 
60E0 00 00 00 00 1 13 
60E4 00 00 00 00 1 13 
60E8 00 00 00 00 1 13 
60EC 00 00 00 00 1 13 
60F0 00 00 00 00 1 13 
60F4 00 00 00 00 1 13 
60F8 00 00 00 00 1 13 
60FC 00 00 00 00 1 13 
6100             1 15 ; ----------------------------------------------------------------------------------------------------------------------
6100             1 16 ; CYAN BOARDS: these boards must be located immediately after cyan queue area!
6100             1 17 ; 
6100             1 18 ; These boards hold a determined position of the board from cyan perspective. They are used to calculate CYAN "two-
6100             1 19 ; distance" (Jack van Rijswijck) from UP to DOWN edges and CYAN two-distance from DOWN to UP edges. The cyan UP-DOWN
6100             1 20 ; board is also used to store CYAN potentials and TOTAL potentials.
6100             1 21 ; 
6100             1 22 ; The values of $7F form the border of the board. The UP and DOWN edges are identified with 7th bit set and the lowest 3
6100             1 23 ; bits are the edge number. The rest of bytes indicates "two-distance" from goal (stored in lowest 6 bits), and a flag
6100             1 24 ; that indicates a position occupied by a friendly token (stored in 6th bit).
6100             1 25 ; ----------------------------------------------------------------------------------------------------------------------
6100             1 26 CYAN_BOARD_UP_DOWN:
6100 7F 7F 7F 7F 1 27 defb      $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F
6104 7F 7F 7F 7F 1 27 
6108 7F 00 00 00 1 28 defb    $7F, $00, $00, $00, $00, $00, $00, $00, $7F
610C 00 00 00 00 1 28 
6110 7F          1 28 
6111 7F 00 00 00 1 29 defb       $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6115 00 00 00 00 1 29 
6119 7F          1 29 
611A 7F 00 00 00 1 30 defb          $7F, $00, $00, $00, $00, $00, $00, $00, $7F
611E 00 00 00 00 1 30 
6122 7F          1 30 
6123 7F 00 00 00 1 31 defb             $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6127 00 00 00 00 1 31 
612B 7F          1 31 
612C 7F 00 00 00 1 32 defb                $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6130 00 00 00 00 1 32 
6134 7F          1 32 
6135 7F 00 00 00 1 33 defb                   $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6139 00 00 00 00 1 33 
613D 7F          1 33 
613E 7F 00 00 00 1 34 defb                      $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6142 00 00 00 00 1 34 
6146 7F          1 34 
6147 7F 80 81 82 1 35 defb                         $7F, $80, $81, $82, $83, $84, $85, $86, $7F
614B 83 84 85 86 1 35 
614F 7F          1 35 
6150             1 36 CYAN_BOARD_DOWN_UP:
6150 7F 00 00 00 1 37 defb    $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6154 00 00 00 00 1 37 
6158 7F          1 37 
6159 7F 00 00 00 1 38 defb       $7F, $00, $00, $00, $00, $00, $00, $00, $7F
615D 00 00 00 00 1 38 
6161 7F          1 38 
6162 7F 00 00 00 1 39 defb          $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6166 00 00 00 00 1 39 
616A 7F          1 39 
616B 7F 00 00 00 1 40 defb             $7F, $00, $00, $00, $00, $00, $00, $00, $7F
616F 00 00 00 00 1 40 
6173 7F          1 40 
6174 7F 00 00 00 1 41 defb                $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6178 00 00 00 00 1 41 
617C 7F          1 41 
617D 7F 00 00 00 1 42 defb                   $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6181 00 00 00 00 1 42 
6185 7F          1 42 
6186 7F 00 00 00 1 43 defb                      $7F, $00, $00, $00, $00, $00, $00, $00, $7F
618A 00 00 00 00 1 43 
618E 7F          1 43 
618F 7F 7F 7F 7F 1 44 defb                         $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F
6193 7F 7F 7F 7F 1 44 
6197             1 46 ; ----------------------------------------------------------------------------------------------------------------------
6197             1 47 ; Variables
6197             1 48 ; ----------------------------------------------------------------------------------------------------------------------
6197             1 49 POTENTIALS:                                                 ; (must be in a 256-byte boundary)
6197 00          1 50 defb    0                           ; board potential
6198 00          1 51 defb    0                           ; attack mobility
6199 00          1 52 AI_PLAYER               defb    0                           ; speccy side (FRIEND or ENEMY)
619A 00          1 53 AI_DEPTH                defb    0                           ; recursion depth level (1-4)
619B 00          1 54 MOVE_NUMBER             defb    0                           ; current move number
619C 00          1 55 LEVEL_COLOR             defb    0                           ; current level color for frame border
619D 00          1 56 GAME_LEVEL              defb    0                           ; current game level (1-4)
619E 00          1 57 TOKEN_COLOR             defb    0                           ; current token color
619F 05          1 58 PLAYER_COLOR            defb    5                           ; current player color
61A0             1 60 ; ----------------------------------------------------------------------------------------------------------------------
61A0             1 61 ; Screen addresses look-up table for board hexagons
61A0             1 62 ;
61A0             1 63 ; The first column contains the screen addresses high byte
61A0             1 64 ; The rest of bytes are the screen addresses low byte
61A0             1 65 ; ----------------------------------------------------------------------------------------------------------------------
61A0             1 66 BOARD_MAP:
61A0 40 A6 A8 AA 1 67 defb    $40, $A6, $A8, $AA, $AC, $AE, $B0, $B2
61A4 AC AE B0 B2 1 67 
61A8 40 E7 E9 EB 1 68 defb    $40, $E7, $E9, $EB, $ED, $EF, $F1, $F3
61AC ED EF F1 F3 1 68 
61B0 48 28 2A 2C 1 69 defb    $48, $28, $2A, $2C, $2E, $30, $32, $34
61B4 2E 30 32 34 1 69 
61B8 48 69 6B 6D 1 70 defb    $48, $69, $6B, $6D, $6F, $71, $73, $75
61BC 6F 71 73 75 1 70 
61C0 48 AA AC AE 1 71 defb    $48, $AA, $AC, $AE, $B0, $B2, $B4, $B6
61C4 B0 B2 B4 B6 1 71 
61C8 48 EB ED EF 1 72 defb    $48, $EB, $ED, $EF, $F1, $F3, $F5, $F7
61CC F1 F3 F5 F7 1 72 
61D0 50 2C 2E 30 1 73 defb    $50, $2C, $2E, $30, $32, $34, $36, $38
61D4 32 34 36 38 1 73 
61D8             1 75 ; ----------------------------------------------------------------------------------------------------------------------
61D8             1 76 ; Keyboard array map
61D8             1 77 ; ----------------------------------------------------------------------------------------------------------------------
61D8 20 7A 78 63 1 78 KEY_MAP                 defm    " zxcvasdfgqwert1234509876poiuy\x0Dlkjh  mnb"
61DC 76 61 73 64 1 78 
61E0 66 67 71 77 1 78 
61E4 65 72 74 31 1 78 
61E8 32 33 34 35 1 78 
61EC 30 39 38 37 1 78 
61F0 36 70 6F 69 1 78 
61F4 75 79 0D 6C 1 78 
61F8 6B 6A 68 20 1 78 
61FC 20 6D 6E 62 1 78 
6200             1 80 ;org     $6200
6200             1 81 ; ----------------------------------------------------------------------------------------------------------------------
6200             1 82 ; Vector table of routines (must be aligned at the next page of cyan board arrays)
6200             1 83 ; ----------------------------------------------------------------------------------------------------------------------
6200             1 84 CYAN_VECTOR_TABLE:
6200 A9 73       1 85 defw    PathFinder_CYAN_Edge_0
6202 C9 73       1 86 defw    PathFinder_CYAN_Edge_1
6204 E4 73       1 87 defw    PathFinder_CYAN_Edge_2
6206 02 74       1 88 defw    PathFinder_CYAN_Edge_3
6208 21 74       1 89 defw    PathFinder_CYAN_Edge_4
620A 3F 74       1 90 defw    PathFinder_CYAN_Edge_5
620C 5A 74       1 91 defw    PathFinder_CYAN_Edge_6
620E             1 93 ; ----------------------------------------------------------------------------------------------------------------------
620E             1 94 ; Variables and strings
620E             1 95 ; ----------------------------------------------------------------------------------------------------------------------
620E             1 96 PLAYER_MOVE:                                                ; player move in ASCII format
620E 00          1 97 defb    0                           ; column ('a'..'g')
620F 00          1 98 defb    0                           ; row ('1'..'7')
6210 00          1 99 CHAR_COUNT              defb    0                           ; number of current characters in input player move
6211 00          1 100 THREE_ROW               defb    0                           ; three-in-a-row counter
6212 0F 0E 0C 0B 1 101 ROW_COLOR_MAP           defb    15, 14, 12, 11, 13, 10      ; level-color map for frame border
6216 0D 0A       1 101 
6218 00 2D 30 00 1 102 STR_MOVE                defb    0, '-', '0', 0, '\0'        ; formatted move string
621C 00          1 102 
621D 53 70 65 63 1 103 STR_SPECCY              defm    "Speccy\0"
6221 63 79 00    1 103 
6224 50 6C 61 79 1 104 STR_PLAYER              defm    "Player\0"
6228 65 72 00    1 104 
622B 4C 65 76 65 1 105 STR_LEVELTEXT           defm    "Level\0"
622F 6C 00       1 105 
6231 46 49 4C 4C 1 106 STR_FILLED              defm    "FILLED\0"
6235 45 44 00    1 106 
6238 57 41 49 54 1 107 STR_WAIT                defm    "WAIT\0"
623C 00          1 107 
623D 20 57 49 4E 1 108 STR_WINNER              defm    " WINS \0"
6241 53 20 00    1 108 
6244 20 20 20 20 1 109 STR_EMPTY4              defm    "    \0"
6248 00          1 109 
6249 20 20 20 20 1 110 STR_EMPTY6              defm    "      \0"
624D 20 20 00    1 110 
6250             1 112 ; ----------------------------------------------------------------------------------------------------------------------
6250             1 113 ; Conversion table: from position to XY board indexes
6250             1 114 ; ----------------------------------------------------------------------------------------------------------------------
6250             1 115 BOARD_COORDINATES:
6250 00 00 00 00 1 116 defb    $00, $00, $00, $00, $00, $00, $00, $00
6254 00 00 00 00 1 116 
6258 00 09 0A 0B 1 117 defb    $00, $09, $0A, $0B, $0C, $0D, $0E, $0F
625C 0C 0D 0E 0F 1 117 
6260 00 12 13 14 1 118 defb    $00, $12, $13, $14, $15, $16, $17, $18
6264 15 16 17 18 1 118 
6268 00 1B 1C 1D 1 119 defb    $00, $1B, $1C, $1D, $1E, $1F, $20, $21
626C 1E 1F 20 21 1 119 
6270 00 24 25 26 1 120 defb    $00, $24, $25, $26, $27, $28, $29, $2A
6274 27 28 29 2A 1 120 
6278 00 2D 2E 2F 1 121 defb    $00, $2D, $2E, $2F, $30, $31, $32, $33
627C 30 31 32 33 1 121 
6280 00 36 37 38 1 122 defb    $00, $36, $37, $38, $39, $3A, $3B, $3C
6284 39 3A 3B 3C 1 122 
6288 00 3F 40 41 1 123 defb    $00, $3F, $40, $41, $42, $43, $44, $45
628C 42 43 44 45 1 123 
6290             1 125 ; ----------------------------------------------------------------------------------------------------------------------
6290             1 126 ; Graphics map indexes for the frame tiles
6290             1 127 ; ----------------------------------------------------------------------------------------------------------------------
6290             1 128 FRAME_MAP:
6290 00 01 01 01 1 129 defb      0,   1,   1,   1,   1,   1,   2,   3
6294 01 01 02 03 1 129 
6298 04 FF FF FF 1 130 defb      4,  -1,  -1,  -1,  -1,  -1,  -1,  -1
629C FF FF FF FF 1 130 
62A0 05 06 07 01 1 131 defb      5,   6,   7,   1,   1,   1,   1,   1
62A4 01 01 01 01 1 131 
62A8 01 01 01 01 1 132 defb      1,   1,   1,   1,   1,   1,   1,   8
62AC 01 01 01 08 1 132 
62B0 09 01 01 01 1 133 defb      9,   1,   1,   1,   1,   1,   1,   1
62B4 01 01 01 01 1 133 
62B8 01 01 01 01 1 134 defb      1,   1,   1,   1,   1,   1,   1,   1
62BC 01 01 01 01 1 134 
62C0 0A 06 0D 0D 1 135 defb     10,   6,  13,  13,  13,   3,  11,   1
62C4 0D 03 0B 01 1 135 
62C8 01 01 01 01 1 136 defb      1,   1,   1,   1,   1,   1,   1,  12
62CC 01 01 01 0C 1 136 
62D0             1 138 ; ----------------------------------------------------------------------------------------------------------------------
62D0             1 139 ; Definition of a small "Opening Book" for speccy first move
62D0             1 140 ; ----------------------------------------------------------------------------------------------------------------------
62D0             1 141 OPENINGS:
62D0 0F 14 16 17 1 142 defb    $0F, $14, $16, $17, $18, $1C, $1D
62D4 18 1C 1D    1 142 
62D7 1E 1F 20 24 1 143 defb    $1E, $1F, $20, $24, $25, $26, $27
62DB 25 26 27    1 143 
62DE 28 29 2A 2E 1 144 defb    $28, $29, $2A, $2E, $2F, $30, $31
62E2 2F 30 31    1 144 
62E5 32 36 37 38 1 145 defb    $32, $36, $37, $38, $3A, $3F
62E9 3A 3F       1 145 
62EB             1 147 ; ----------------------------------------------------------------------------------------------------------------------
62EB             1 148 ; Timer variables
62EB             1 149 ; ----------------------------------------------------------------------------------------------------------------------
62EB 00          1 150 TIMER_FLAG              defb    0                           ; 0 = timer stopped, 1 = cyan timer on, 2 = red timer on
62EC             1 151 ; for each timer:
62EC             1 152 ;   1st byte = interrupt counter (incremented each 1/50 seconds)
62EC             1 153 ;   2nd byte = seconds counter
62EC             1 154 ;   3th byte = minutes counter
62EC 32 00 00    1 155 CYAN_TIMER              defb    50, 0, 0
62EF 32 00 00    1 156 RED_TIMER               defb    50, 0, 0
62F2             1 158 ; ----------------------------------------------------------------------------------------------------------------------
62F2             1 159 ; Screen addresses look-up array for board numbers
62F2             1 160 ; ----------------------------------------------------------------------------------------------------------------------
62F2             1 161 NUMBER_SCREEN:
62F2 A5 43 E6 43 1 162 defw    $43A5, $43E6, $4B27, $4B68, $4BA9, $4BEA, $532B
62F6 27 4B 68 4B 1 162 
62FA A9 4B EA 4B 1 162 
62FE 2B 53       1 162 
6300             1 164 ;org     $6300
6300             1 165 ; ----------------------------------------------------------------------------------------------------------------------
6300             1 166 ; Circular queue
6300             1 167 ; ----------------------------------------------------------------------------------------------------------------------
6300 00 00 00 00 1 168 RED_QUEUE_AREA          defs    256                         ; 256-aligned block reserved for circular queue
6304 00 00 00 00 1 168 
6308 00 00 00 00 1 168 
630C 00 00 00 00 1 168 
6310 00 00 00 00 1 168 
6314 00 00 00 00 1 168 
6318 00 00 00 00 1 168 
631C 00 00 00 00 1 168 
6320 00 00 00 00 1 168 
6324 00 00 00 00 1 168 
6328 00 00 00 00 1 168 
632C 00 00 00 00 1 168 
6330 00 00 00 00 1 168 
6334 00 00 00 00 1 168 
6338 00 00 00 00 1 168 
633C 00 00 00 00 1 168 
6340 00 00 00 00 1 168 
6344 00 00 00 00 1 168 
6348 00 00 00 00 1 168 
634C 00 00 00 00 1 168 
6350 00 00 00 00 1 168 
6354 00 00 00 00 1 168 
6358 00 00 00 00 1 168 
635C 00 00 00 00 1 168 
6360 00 00 00 00 1 168 
6364 00 00 00 00 1 168 
6368 00 00 00 00 1 168 
636C 00 00 00 00 1 168 
6370 00 00 00 00 1 168 
6374 00 00 00 00 1 168 
6378 00 00 00 00 1 168 
637C 00 00 00 00 1 168 
6380 00 00 00 00 1 168 
6384 00 00 00 00 1 168 
6388 00 00 00 00 1 168 
638C 00 00 00 00 1 168 
6390 00 00 00 00 1 168 
6394 00 00 00 00 1 168 
6398 00 00 00 00 1 168 
639C 00 00 00 00 1 168 
63A0 00 00 00 00 1 168 
63A4 00 00 00 00 1 168 
63A8 00 00 00 00 1 168 
63AC 00 00 00 00 1 168 
63B0 00 00 00 00 1 168 
63B4 00 00 00 00 1 168 
63B8 00 00 00 00 1 168 
63BC 00 00 00 00 1 168 
63C0 00 00 00 00 1 168 
63C4 00 00 00 00 1 168 
63C8 00 00 00 00 1 168 
63CC 00 00 00 00 1 168 
63D0 00 00 00 00 1 168 
63D4 00 00 00 00 1 168 
63D8 00 00 00 00 1 168 
63DC 00 00 00 00 1 168 
63E0 00 00 00 00 1 168 
63E4 00 00 00 00 1 168 
63E8 00 00 00 00 1 168 
63EC 00 00 00 00 1 168 
63F0 00 00 00 00 1 168 
63F4 00 00 00 00 1 168 
63F8 00 00 00 00 1 168 
63FC 00 00 00 00 1 168 
6400             1 170 ; ----------------------------------------------------------------------------------------------------------------------
6400             1 171 ; RED BOARDS: these boards must be located immediately after red queue area!
6400             1 172 ; 
6400             1 173 ; These boards hold a determined position of the board from red perspective. They are used to calculate RED "two-
6400             1 174 ; distance" (Jack van Rijswijck) from LEFT to RIGHT edges and RED two-distance from RIGHT to LEFT edges. The red
6400             1 175 ; LEFT-RIGHT board is also used to store RED potentials.
6400             1 176 ; 
6400             1 177 ; The values of $7F form the border of the board. The LEFT-RIGHT edges are identified with Bit 7 set and the lowest 3
6400             1 178 ; bits are the edge number. The rest of bytes indicates "two-distance" from goal (stored in lowest 6 bits), and a flag
6400             1 179 ; that indicates a position occupied by a friendly token (stored in 6th bit).
6400             1 180 ; ----------------------------------------------------------------------------------------------------------------------
6400             1 181 RED_BOARD_LEFT_RIGHT:
6400 7F 7F 7F 7F 1 182 defb      $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F
6404 7F 7F 7F 7F 1 182 
6408 7F 00 00 00 1 183 defb    $7F, $00, $00, $00, $00, $00, $00, $00, $80
640C 00 00 00 00 1 183 
6410 80          1 183 
6411 7F 00 00 00 1 184 defb       $7F, $00, $00, $00, $00, $00, $00, $00, $81
6415 00 00 00 00 1 184 
6419 81          1 184 
641A 7F 00 00 00 1 185 defb          $7F, $00, $00, $00, $00, $00, $00, $00, $82
641E 00 00 00 00 1 185 
6422 82          1 185 
6423 7F 00 00 00 1 186 defb             $7F, $00, $00, $00, $00, $00, $00, $00, $83
6427 00 00 00 00 1 186 
642B 83          1 186 
642C 7F 00 00 00 1 187 defb                $7F, $00, $00, $00, $00, $00, $00, $00, $84
6430 00 00 00 00 1 187 
6434 84          1 187 
6435 7F 00 00 00 1 188 defb                   $7F, $00, $00, $00, $00, $00, $00, $00, $85
6439 00 00 00 00 1 188 
643D 85          1 188 
643E 7F 00 00 00 1 189 defb                      $7F, $00, $00, $00, $00, $00, $00, $00, $86
6442 00 00 00 00 1 189 
6446 86          1 189 
6447 7F 7F 7F 7F 1 190 defb                         $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F
644B 7F 7F 7F 7F 1 190 
644F 7F          1 190 
6450             1 191 RED_BOARD_RIGHT_LEFT:
6450 80 00 00 00 1 192 defb    $80, $00, $00, $00, $00, $00, $00, $00, $7F
6454 00 00 00 00 1 192 
6458 7F          1 192 
6459 81 00 00 00 1 193 defb       $81, $00, $00, $00, $00, $00, $00, $00, $7F
645D 00 00 00 00 1 193 
6461 7F          1 193 
6462 82 00 00 00 1 194 defb          $82, $00, $00, $00, $00, $00, $00, $00, $7F
6466 00 00 00 00 1 194 
646A 7F          1 194 
646B 83 00 00 00 1 195 defb             $83, $00, $00, $00, $00, $00, $00, $00, $7F
646F 00 00 00 00 1 195 
6473 7F          1 195 
6474 84 00 00 00 1 196 defb                $84, $00, $00, $00, $00, $00, $00, $00, $7F
6478 00 00 00 00 1 196 
647C 7F          1 196 
647D 85 00 00 00 1 197 defb                   $85, $00, $00, $00, $00, $00, $00, $00, $7F
6481 00 00 00 00 1 197 
6485 7F          1 197 
6486 86 00 00 00 1 198 defb                      $86, $00, $00, $00, $00, $00, $00, $00, $7F
648A 00 00 00 00 1 198 
648E 7F          1 198 
648F 7F 7F 7F 7F 1 199 defb                         $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F
6493 7F 7F 7F 7F 1 199 
6497             1 201 ; ----------------------------------------------------------------------------------------------------------------------
6497             1 202 ; Timer digits graphics. Must be in a 256 bytes boundary
6497             1 203 ; ----------------------------------------------------------------------------------------------------------------------
6497             1 204 TIMER_DIGITS:
6497 00 0F 0B 0B 1 205 defb    $00, $0F, $0B, $0B, $0B, $0F, $00, $00
649B 0B 0F 00 00 1 205 
649F 00 06 0E 06 1 206 defb    $00, $06, $0E, $06, $06, $06, $00, $00
64A3 06 06 00 00 1 206 
64A7 00 0F 03 0F 1 207 defb    $00, $0F, $03, $0F, $08, $0F, $00, $00
64AB 08 0F 00 00 1 207 
64AF 00 0F 03 07 1 208 defb    $00, $0F, $03, $07, $03, $0F, $00, $00
64B3 03 0F 00 00 1 208 
64B7 00 0B 0B 0F 1 209 defb    $00, $0B, $0B, $0F, $03, $03, $00, $00
64BB 03 03 00 00 1 209 
64BF 00 0F 08 0F 1 210 defb    $00, $0F, $08, $0F, $03, $0F, $00, $00
64C3 03 0F 00 00 1 210 
64C7 00 0F 0C 0F 1 211 defb    $00, $0F, $0C, $0F, $0D, $0F, $00, $00
64CB 0D 0F 00 00 1 211 
64CF 00 0F 03 03 1 212 defb    $00, $0F, $03, $03, $03, $03, $00, $00
64D3 03 03 00 00 1 212 
64D7 00 0F 0B 0F 1 213 defb    $00, $0F, $0B, $0F, $0B, $0F, $00, $00
64DB 0B 0F 00 00 1 213 
64DF 00 0F 0B 0F 1 214 defb    $00, $0F, $0B, $0F, $03, $0F, $00, $00
64E3 03 0F 00 00 1 214 
64E7             1 216 ; ----------------------------------------------------------------------------------------------------------------------
64E7             1 217 ; Tone parameters for sound effects
64E7             1 218 ; ----------------------------------------------------------------------------------------------------------------------
64E7             1 219 ; for each tone (from left to right):
64E7             1 220 ;   - number of frames in the block, slide changes applied once per frame (1..65536)
64E7             1 221 ;   - length of a frame (1..65536)
64E7             1 222 ;   - tone pitch, lower numbers for lower tone (1..65536)
64E7             1 223 ;   - pitch slide, this value is added to pitch every frame (-32767..32768)
64E7             1 224 ; ----------------------------------------------------------------------------------------------------------------------
64E7 01 00 E8 03 1 225 TOKEN_FX                defw       1, 1000, 1400,   0
64EB 78 05 00 00 1 225 
64EF 05 00 88 13 1 226 WINNER_FX               defw       5, 5000,  200, 100
64F3 C8 00 64 00 1 226 
64F7 E8 03 0A 00 1 227 FILLED_FX               defw    1000,   10,  100,   0
64FB 64 00 00 00 1 227 
64FF FF          1 229 FILLER                  defb    $FF                         ; filler to align next block (not used)
6500             1 231 ;org     $6500
6500             1 232 ; ----------------------------------------------------------------------------------------------------------------------
6500             1 233 ; Vector table of routines (must be aligned at the next page of red board arrays)
6500             1 234 ; ----------------------------------------------------------------------------------------------------------------------
6500             1 235 RED_VECTOR_TABLE:
6500 8F 72       1 236 defw    PathFinder_RED_Edge_0
6502 BD 72       1 237 defw    PathFinder_RED_Edge_1
6504 E3 72       1 238 defw    PathFinder_RED_Edge_2
6506 09 73       1 239 defw    PathFinder_RED_Edge_3
6508 2F 73       1 240 defw    PathFinder_RED_Edge_4
650A 55 73       1 241 defw    PathFinder_RED_Edge_5
650C 7B 73       1 242 defw    PathFinder_RED_Edge_6
650E             1 244 ; ----------------------------------------------------------------------------------------------------------------------
650E             1 245 ; Graphics for the screen frame
650E             1 246 ; ----------------------------------------------------------------------------------------------------------------------
650E             1 247 FRAME_TILES:
650E 00 00 1F 3F 1 248 defb    $00, $00, $1F, $3F, $3F, $3F, $3C, $3C
6512 3F 3F 3C 3C 1 248 
6516 00 00 FF FF 1 249 defb    $00, $00, $FF, $FF, $FF, $FF, $00, $00
651A FF FF 00 00 1 249 
651E 00 00 FF FE 1 250 defb    $00, $00, $FF, $FE, $FE, $FF, $00, $00
6522 FE FF 00 00 1 250 
6526 03 07 0F 0F 1 251 defb    $03, $07, $0F, $0F, $0F, $0F, $07, $03
652A 0F 0F 07 03 1 251 
652E FF FE FC FC 1 252 defb    $FF, $FE, $FC, $FC, $FC, $FC, $FE, $FF
6532 FC FC FE FF 1 252 
6536 FF 7F 3F 3F 1 253 defb    $FF, $7F, $3F, $3F, $3F, $3F, $7F, $FF
653A 3F 3F 7F FF 1 253 
653E C0 E0 F0 F0 1 254 defb    $C0, $E0, $F0, $F0, $F0, $F0, $E0, $C0
6542 F0 F0 E0 C0 1 254 
6546 00 00 FF 7F 1 255 defb    $00, $00, $FF, $7F, $7F, $FF, $00, $00
654A 7F FF 00 00 1 255 
654E 00 00 F8 FC 1 256 defb    $00, $00, $F8, $FC, $FC, $FC, $3C, $3C
6552 FC FC 3C 3C 1 256 
6556 3C 3C 3F 3F 1 257 defb    $3C, $3C, $3F, $3F, $3F, $1F, $00, $00
655A 3F 1F 00 00 1 257 
655E 00 00 FE FF 1 258 defb    $00, $00, $FE, $FF, $FF, $FE, $00, $00
6562 FF FE 00 00 1 258 
6566 00 00 7F FF 1 259 defb    $00, $00, $7F, $FF, $FF, $7F, $00, $00
656A FF 7F 00 00 1 259 
656E 3C 3C FC FC 1 260 defb    $3C, $3C, $FC, $FC, $FC, $F8, $00, $00
6572 FC F8 00 00 1 260 
6576 00 00 38 7C 1 261 defb    $00, $00, $38, $7C, $7C, $38, $00, $00
657A 7C 38 00 00 1 261 
657E             1 263 ; ----------------------------------------------------------------------------------------------------------------------
657E             1 264 ; Hexagon sprites
657E             1 265 ; ----------------------------------------------------------------------------------------------------------------------
657E             1 266 HEXAGON_EMPTY:
657E 07 E0 18 18 1 267 defb    $07, $E0, $18, $18, $20, $04, $24, $04
6582 20 04 24 04 1 267 
6586 48 02 48 02 1 268 defb    $48, $02, $48, $02, $40, $02, $40, $02
658A 40 02 40 02 1 268 
658E 40 02 40 02 1 269 defb    $40, $02, $40, $02, $40, $12, $40, $12
6592 40 12 40 12 1 269 
6596 20 24 20 04 1 270 defb    $20, $24, $20, $04, $18, $18, $07, $E0
659A 18 18 07 E0 1 270 
659E             1 271 HEXAGON_SPRITE:
659E 03 C0 0C 30 1 272 defb    $03, $C0, $0C, $30, $10, $08, $12, $08
65A2 10 08 12 08 1 272 
65A6 24 04 24 04 1 273 defb    $24, $04, $24, $04, $20, $04, $20, $04
65AA 20 04 20 04 1 273 
65AE 20 04 20 04 1 274 defb    $20, $04, $20, $04, $20, $24, $20, $24
65B2 20 24 20 24 1 274 
65B6 10 48 10 08 1 275 defb    $10, $48, $10, $08, $0C, $30, $03, $C0
65BA 0C 30 03 C0 1 275 
65BE 01 80 02 40 1 277 defb    $01, $80, $02, $40, $04, $20, $09, $10
65C2 04 20 09 10 1 277 
65C6 0A 10 0A 10 1 278 defb    $0A, $10, $0A, $10, $08, $10, $08, $10
65CA 08 10 08 10 1 278 
65CE 08 10 08 10 1 279 defb    $08, $10, $08, $10, $08, $50, $08, $50
65D2 08 50 08 50 1 279 
65D6 08 90 04 20 1 280 defb    $08, $90, $04, $20, $02, $40, $01, $80
65DA 02 40 01 80 1 280 
65DE 00 80 00 80 1 282 defb    $00, $80, $00, $80, $00, $80, $00, $80
65E2 00 80 00 80 1 282 
65E6 00 80 00 80 1 283 defb    $00, $80, $00, $80, $00, $80, $00, $80
65EA 00 80 00 80 1 283 
65EE 00 80 00 80 1 284 defb    $00, $80, $00, $80, $00, $80, $00, $80
65F2 00 80 00 80 1 284 
65F6 00 80 00 80 1 285 defb    $00, $80, $00, $80, $00, $80, $00, $80
65FA 00 80 00 80 1 285 
65FE 01 80 02 40 1 287 defb    $01, $80, $02, $40, $05, $A0, $0B, $D0
6602 05 A0 0B D0 1 287 
6606 0B D0 0B D0 1 288 defb    $0B, $D0, $0B, $D0, $0B, $D0, $0B, $D0
660A 0B D0 0B D0 1 288 
660E 0B D0 0B D0 1 289 defb    $0B, $D0, $0B, $D0, $0B, $D0, $0B, $D0
6612 0B D0 0B D0 1 289 
6616 0B D0 05 A0 1 290 defb    $0B, $D0, $05, $A0, $02, $40, $01, $80
661A 02 40 01 80 1 290 
661E 03 C0 0C 30 1 292 defb    $03, $C0, $0C, $30, $13, $C8, $17, $E8
6622 13 C8 17 E8 1 292 
6626 2F F4 2F F4 1 293 defb    $2F, $F4, $2F, $F4, $2F, $F4, $2F, $F4
662A 2F F4 2F F4 1 293 
662E 2F F4 2F F4 1 294 defb    $2F, $F4, $2F, $F4, $2F, $F4, $2F, $F4
6632 2F F4 2F F4 1 294 
6636 17 E8 13 C8 1 295 defb    $17, $E8, $13, $C8, $0C, $30, $03, $C0
663A 0C 30 03 C0 1 295 
663E             1 296 HEXAGON_TOKEN:
663E 07 E0 18 18 1 297 defb    $07, $E0, $18, $18, $27, $E4, $2F, $F4
6642 27 E4 2F F4 1 297 
6646 5F FA 5F FA 1 298 defb    $5F, $FA, $5F, $FA, $5F, $FA, $5F, $FA
664A 5F FA 5F FA 1 298 
664E 5F FA 5F FA 1 299 defb    $5F, $FA, $5F, $FA, $5F, $FA, $5F, $FA
6652 5F FA 5F FA 1 299 
6656 2F F4 27 E4 1 300 defb    $2F, $F4, $27, $E4, $18, $18, $07, $E0
665A 18 18 07 E0 1 300 
665E             1 302 ; ----------------------------------------------------------------------------------------------------------------------
665E             1 303 ; Board letter sprites
665E             1 304 ; ----------------------------------------------------------------------------------------------------------------------
665E             1 305 LETTER_SPRITES:
665E 3C 7E FF C3 1 306 defb    $3C, $7E, $FF, $C3, $F3, $C3, $D3, $C3, $7E, $3C
6662 F3 C3 D3 C3 1 306 
6666 7E 3C       1 306 
6668 3C 7E CF CF 1 307 defb    $3C, $7E, $CF, $CF, $C3, $CB, $CB, $C3, $7E, $3C
666C C3 CB CB C3 1 307 
6670 7E 3C       1 307 
6672 3C 7E FF E3 1 308 defb    $3C, $7E, $FF, $E3, $CF, $CF, $CF, $E3, $7E, $3C
6676 CF CF CF E3 1 308 
667A 7E 3C       1 308 
667C 3C 7E F3 F3 1 309 defb    $3C, $7E, $F3, $F3, $C3, $D3, $D3, $C3, $7E, $3C
6680 C3 D3 D3 C3 1 309 
6684 7E 3C       1 309 
6686 3C 7E FF E3 1 310 defb    $3C, $7E, $FF, $E3, $CB, $C3, $CF, $E3, $7E, $3C
668A CB C3 CF E3 1 310 
668E 7E 3C       1 310 
6690 3C 7E E3 CF 1 311 defb    $3C, $7E, $E3, $CF, $C7, $CF, $CF, $CF, $7E, $3C
6694 C7 CF CF CF 1 311 
6698 7E 3C       1 311 
669A 3C 7E FF E3 1 312 defb    $3C, $7E, $FF, $E3, $D3, $D3, $E3, $F3, $46, $3C
669E D3 D3 E3 F3 1 312 
66A2 46 3C       1 312 
66A4             1 314 ; ----------------------------------------------------------------------------------------------------------------------
66A4             1 315 ; Board number sprites
66A4             1 316 ; ----------------------------------------------------------------------------------------------------------------------
66A4             1 317 NUMBER_SPRITES:
66A4 3C 7E E7 C7 1 318 defb    $3C, $7E, $E7, $C7, $E7, $E7, $E7, $E7, $7E, $3C
66A8 E7 E7 E7 E7 1 318 
66AC 7E 3C       1 318 
66AE 3C 7E E7 D3 1 319 defb    $3C, $7E, $E7, $D3, $F3, $E7, $CF, $C3, $7E, $3C
66B2 F3 E7 CF C3 1 319 
66B6 7E 3C       1 319 
66B8 3C 7E C7 F3 1 320 defb    $3C, $7E, $C7, $F3, $E3, $F3, $F3, $C7, $7E, $3C
66BC E3 F3 F3 C7 1 320 
66C0 7E 3C       1 320 
66C2 3C 7E D3 D3 1 321 defb    $3C, $7E, $D3, $D3, $C3, $F3, $F3, $F3, $7E, $3C
66C6 C3 F3 F3 F3 1 321 
66CA 7E 3C       1 321 
66CC 3C 7E C3 CF 1 322 defb    $3C, $7E, $C3, $CF, $C7, $F3, $F3, $C7, $7E, $3C
66D0 C7 F3 F3 C7 1 322 
66D4 7E 3C       1 322 
66D6 3C 7E E3 CF 1 323 defb    $3C, $7E, $E3, $CF, $C3, $CB, $CB, $C3, $7E, $3C
66DA C3 CB CB C3 1 323 
66DE 7E 3C       1 323 
66E0 3C 7E C3 F3 1 324 defb    $3C, $7E, $C3, $F3, $F3, $E7, $E7, $E7, $7E, $3C
66E4 F3 E7 E7 E7 1 324 
66E8 7E 3C       1 324 
66EA             1 326 ; ----------------------------------------------------------------------------------------------------------------------
66EA             1 327 ; Screen addresses for menu hexagons
66EA             1 328 ; ----------------------------------------------------------------------------------------------------------------------
66EA             1 329 MENU_HEXAGONS:
66EA 01 40 05 40 1 330 defw    $4001, $4005, $4008, $400C, $400F, $4013, $401A
66EE 08 40 0C 40 1 330 
66F2 0F 40 13 40 1 330 
66F6 1A 40       1 330 
66F8 45 40 48 40 1 331 defw    $4045, $4048, $4052, $405D, $4081, $4083, $4085
66FC 52 40 5D 40 1 331 
6700 81 40 83 40 1 331 
6704 85 40       1 331 
6706 88 40 8A 40 1 332 defw    $4088, $408A, $4091, $409D, $40C1, $40D0, $40D9
670A 91 40 9D 40 1 332 
670E C1 40 D0 40 1 332 
6712 D9 40       1 332 
6714 05 48 08 48 1 333 defw    $4805, $4808, $480A, $4813, $4819, $481B, $481D
6718 0A 48 13 48 1 333 
671C 19 48 1B 48 1 333 
6720 1D 48       1 333 
6722 0A 40 59 40 1 334 defw    $400A, $4059, $40BB, $40C5, $40D2, $480C, $401C
6726 BB 40 C5 40 1 334 
672A D2 40 0C 48 1 334 
672E 1C 40       1 334 
6730 41 40 50 40 1 335 defw    $4041, $4050, $40C8, $4801, $480F
6734 C8 40 01 48 1 335 
6738 0F 48       1 335 
673A             1 336 SAMPLE_BOARD_RED:
673A 69 48 6B 48 1 337 defw    $4869, $486B, $482C, $482E, $40EF, $40F1, $40B2
673E 2C 48 2E 48 1 337 
6742 EF 40 F1 40 1 337 
6746 B2 40       1 337 
6748 E9 40 6F 48 1 338 defw    $40E9, $486F, $4830, $40F3, $48AA, $40AC, $48EF
674C 30 48 F3 40 1 338 
6750 AA 48 AC 40 1 338 
6754 EF 48       1 338 
6756 2A 48 6D 48 1 339 defw    $482A, $486D, $40ED, $48AE
675A ED 40 AE 48 1 339 
675E             1 340 SAMPLE_BOARD_CYAN:
675E AE 40 EF 40 1 341 defw    $40AE, $40EF, $4830, $486F, $48AE, $48EF, $502E
6762 30 48 6F 48 1 341 
6766 AE 48 EF 48 1 341 
676A 2E 50       1 341 
676C AC 48 B4 48 1 342 defw    $48AC, $48B4, $486B, $486D, $482E, $40F1, $40F3
6770 6B 48 6D 48 1 342 
6774 2E 48 F1 40 1 342 
6778 F3 40       1 342 
677A 73 48 B2 48 1 343 defw    $4873, $48B2, $5030
677E 30 50       1 343 
6780             1 345 ; ----------------------------------------------------------------------------------------------------------------------
6780             1 346 ; Strings
6780             1 347 ; ----------------------------------------------------------------------------------------------------------------------
6780             1 348 STR_OPTIONS:
6780 53 74 61 72 1 349 defm    "Start new game\0"
6784 74 20 6E 65 1 349 
6788 77 20 67 61 1 349 
678C 6D 65 00    1 349 
678F 48 6F 77 20 1 350 defm    "How to play\0"
6793 74 6F 20 70 1 350 
6797 6C 61 79 00 1 350 
679B 43 72 65 64 1 351 defm    "Credits\0"
679F 69 74 73 00 1 351 
67A3             1 352 STR_CREDITS:
67A3 44 65 73 69 1 353 defm    "Design:     Antonio Luque\0"
67A7 67 6E 3A 20 1 353 
67AB 20 20 20 20 1 353 
67AF 41 6E 74 6F 1 353 
67B3 6E 69 6F 20 1 353 
67B7 4C 75 71 75 1 353 
67BB 65 00       1 353 
67BD 43 6F 64 65 1 354 defm    "Code:       Antonio Luque\0"
67C1 3A 20 20 20 1 354 
67C5 20 20 20 20 1 354 
67C9 41 6E 74 6F 1 354 
67CD 6E 69 6F 20 1 354 
67D1 4C 75 71 75 1 354 
67D5 65 00       1 354 
67D7 20 20 20 20 1 355 defm    "            Einar Saukas\0"
67DB 20 20 20 20 1 355 
67DF 20 20 20 20 1 355 
67E3 45 69 6E 61 1 355 
67E7 72 20 53 61 1 355 
67EB 75 6B 61 73 1 355 
67EF 00          1 355 
67F0 46 6F 6E 74 1 356 defm    "Font:       Einar Saukas\0"
67F4 3A 20 20 20 1 356 
67F8 20 20 20 20 1 356 
67FC 45 69 6E 61 1 356 
6800 72 20 53 61 1 356 
6804 75 6B 61 73 1 356 
6808 00          1 356 
6809 47 72 61 70 1 357 defm    "Graphics:   Einar Saukas\0"
680D 68 69 63 73 1 357 
6811 3A 20 20 20 1 357 
6815 45 69 6E 61 1 357 
6819 72 20 53 61 1 357 
681D 75 6B 61 73 1 357 
6821 00          1 357 
6822 20 20 20 20 1 358 defm    "            Antonio Luque\0"
6826 20 20 20 20 1 358 
682A 20 20 20 20 1 358 
682E 41 6E 74 6F 1 358 
6832 6E 69 6F 20 1 358 
6836 4C 75 71 75 1 358 
683A 65 00       1 358 
683C 50 72 65 73 1 359 STR_PRESSKEY            defm    "Press any key\0"
6840 73 20 61 6E 1 359 
6844 79 20 6B 65 1 359 
6848 79 00       1 359 
684A             1 360 STR_BUTTONS:
684A 4E 65 78 74 1 361 defm    "Next\0"
684E 00          1 361 
684F 42 61 63 6B 1 362 defm    "Back\0"
6853 00          1 362 
6854 52 45 44 00 1 363 STR_RED                 defm    "RED\0"
6858 43 59 41 4E 1 364 STR_CYAN                defm    "CYAN\0"
685C 00          1 364 
685D 43 6F 6E 6E 1 365 STR_HELP1               defm    "Connect\0"
6861 65 63 74 00 1 365 
6865 6C 65 66 74 1 366 STR_HELP2_RED           defm    "left and\0"
6869 20 61 6E 64 1 366 
686D 00          1 366 
686E 75 70 20 61 1 367 STR_HELP2_CYAN          defm    "up and\0"
6872 6E 64 00    1 367 
6875 72 69 67 68 1 368 STR_HELP3_RED           defm    "right\0"
6879 74 00       1 368 
687B 64 6F 77 6E 1 369 STR_HELP3_CYAN          defm    "down\0"
687F 00          1 369 
6880 62 6F 72 64 1 370 STR_HELP4               defm    "borders\0"
6884 65 72 73 00 1 370 
6888 74 6F 20 77 1 371 STR_HELP5               defm    "to win\0"
688C 69 6E 00    1 371 
688F             1 372 STR_HELP:
688F 57 69 6E 20 1 373 defm    "Win three\0"
6893 74 68 72 65 1 373 
6897 65 00       1 373 
6899 74 69 6D 65 1 374 defm    "times in\0"
689D 73 20 69 6E 1 374 
68A1 00          1 374 
68A2 61 20 72 6F 1 375 defm    "a row to\0"
68A6 77 20 74 6F 1 375 
68AA 00          1 375 
68AB 6C 65 76 65 1 376 defm    "level up\0"
68AF 6C 20 75 70 1 376 
68B3 00          1 376 
68B4 20 43 4F 4E 1 377 STR_CONGRATS            defm    " CONGRATULATIONS \0"
68B8 47 52 41 54 1 377 
68BC 55 4C 41 54 1 377 
68C0 49 4F 4E 53 1 377 
68C4 20 00       1 377 
68C6             1 378 STR_LAST_LEVEL:
68C6 57 65 6C 6C 1 379 defm    "Well done! Last level passed\0"
68CA 20 64 6F 6E 1 379 
68CE 65 21 20 4C 1 379 
68D2 61 73 74 20 1 379 
68D6 6C 65 76 65 1 379 
68DA 6C 20 70 61 1 379 
68DE 73 73 65 64 1 379 
68E2 00          1 379 
68E3 43 68 6F 6F 1 380 defm    "Choose level to restart, 1-4\0"
68E7 73 65 20 6C 1 380 
68EB 65 76 65 6C 1 380 
68EF 20 74 6F 20 1 380 
68F3 72 65 73 74 1 380 
68F7 61 72 74 2C 1 380 
68FB 20 31 2D 34 1 380 
68FF 00          1 380 
6900             1 382 ; ----------------------------------------------------------------------------------------------------------------------
6900             1 383 ; Based on "King" font https://spectrumcomputing.co.uk/entry/25245/ZX-Spectrum/ZX-ALFA
6900             1 384 ; this font was designed by Einar Saukas for Hex game
6900             1 385 ; ----------------------------------------------------------------------------------------------------------------------
6900             1 386 FONT:
6900 00 00 00 00 1 387 includebin "King+.bin"
6904 00 00 00 00 1 387 
6908 00 18 18 18 1 387 
690C 00 18 18 00 1 387 
6910 00 24 24 00 1 387 
6914 00 00 00 00 1 387 
6918 00 24 7E 24 1 387 
691C 24 7E 24 00 1 387 
6920 00 08 3E 28 1 387 
6924 3E 0A 3E 08 1 387 
6928 00 62 64 08 1 387 
692C 10 26 46 00 1 387 
6930 00 10 28 10 1 387 
6934 2A 44 3A 00 1 387 
6938 00 18 30 00 1 387 
693C 00 00 00 00 1 387 
6940 06 0C 08 08 1 387 
6944 08 0C 06 00 1 387 
6948 60 30 10 10 1 387 
694C 10 30 60 00 1 387 
6950 00 00 14 08 1 387 
6954 3E 08 14 00 1 387 
6958 00 00 08 08 1 387 
695C 3E 08 08 00 1 387 
6960 00 00 00 00 1 387 
6964 00 0C 18 30 1 387 
6968 00 00 00 7E 1 387 
696C 7E 00 00 00 1 387 
6970 00 00 00 00 1 387 
6974 30 70 70 00 1 387 
6978 02 06 0C 18 1 387 
697C 30 60 40 00 1 387 
6980 00 7E 62 62 1 387 
6984 62 62 7E 00 1 387 
6988 00 18 38 18 1 387 
698C 18 18 3C 00 1 387 
6990 00 38 4C 4C 1 387 
6994 18 30 7C 00 1 387 
6998 00 3C 62 0C 1 387 
699C 06 66 3C 00 1 387 
69A0 00 30 30 30 1 387 
69A4 30 34 3E 04 1 387 
69A8 00 7E 60 7E 1 387 
69AC 06 66 3C 00 1 387 
69B0 00 30 60 7C 1 387 
69B4 66 66 3C 00 1 387 
69B8 00 7E 46 0C 1 387 
69BC 18 30 60 00 1 387 
69C0 00 3C 66 3C 1 387 
69C4 66 66 3C 00 1 387 
69C8 00 3C 66 66 1 387 
69CC 3E 06 3C 00 1 387 
69D0 00 00 08 18 1 387 
69D4 00 08 18 00 1 387 
69D8 00 00 04 0C 1 387 
69DC 00 0C 18 30 1 387 
69E0 00 00 04 08 1 387 
69E4 10 08 04 00 1 387 
69E8 00 00 00 3E 1 387 
69EC 00 3E 00 00 1 387 
69F0 00 00 10 08 1 387 
69F4 04 08 10 00 1 387 
69F8 00 3C 42 04 1 387 
69FC 08 00 08 00 1 387 
6A00 00 3C 4A 56 1 387 
6A04 5E 40 3C 00 1 387 
6A08 00 7E 46 46 1 387 
6A0C 7E 46 46 00 1 387 
6A10 00 7C 62 7C 1 387 
6A14 62 62 7C 00 1 387 
6A18 00 7E 66 60 1 387 
6A1C 60 66 7E 00 1 387 
6A20 00 7C 46 46 1 387 
6A24 46 46 7C 00 1 387 
6A28 00 7E 60 7C 1 387 
6A2C 60 60 7E 00 1 387 
6A30 00 7E 60 7C 1 387 
6A34 60 60 60 00 1 387 
6A38 00 3E 62 60 1 387 
6A3C 66 66 3E 00 1 387 
6A40 00 62 62 7E 1 387 
6A44 62 62 62 00 1 387 
6A48 00 18 18 18 1 387 
6A4C 18 18 18 00 1 387 
6A50 00 0C 0C 0C 1 387 
6A54 0C 4C 38 00 1 387 
6A58 00 66 64 68 1 387 
6A5C 7E 46 66 00 1 387 
6A60 00 60 60 60 1 387 
6A64 60 60 7E 00 1 387 
6A68 00 7E 56 56 1 387 
6A6C 56 56 56 00 1 387 
6A70 00 7E 46 46 1 387 
6A74 46 46 46 00 1 387 
6A78 00 7E 62 62 1 387 
6A7C 62 62 7E 00 1 387 
6A80 00 7E 62 62 1 387 
6A84 7E 60 60 00 1 387 
6A88 00 7C 64 64 1 387 
6A8C 64 64 7E 00 1 387 
6A90 00 7C 62 64 1 387 
6A94 7C 46 46 00 1 387 
6A98 00 7E 60 7E 1 387 
6A9C 06 06 7E 00 1 387 
6AA0 00 7E 18 18 1 387 
6AA4 18 18 18 00 1 387 
6AA8 00 62 62 62 1 387 
6AAC 62 62 7E 00 1 387 
6AB0 00 62 62 62 1 387 
6AB4 62 34 18 00 1 387 
6AB8 00 6A 6A 6A 1 387 
6ABC 6A 6A 7E 00 1 387 
6AC0 00 62 62 34 1 387 
6AC4 4E 46 46 00 1 387 
6AC8 00 62 62 7E 1 387 
6ACC 18 18 18 00 1 387 
6AD0 00 7E 06 1C 1 387 
6AD4 38 60 7E 00 1 387 
6AD8 00 0E 08 08 1 387 
6ADC 08 08 0E 00 1 387 
6AE0 00 00 40 20 1 387 
6AE4 10 08 04 00 1 387 
6AE8 00 70 10 10 1 387 
6AEC 10 10 70 00 1 387 
6AF0 00 08 1C 2A 1 387 
6AF4 08 08 08 08 1 387 
6AF8 00 00 00 00 1 387 
6AFC 00 00 00 FF 1 387 
6B00 0C 12 10 38 1 387 
6B04 10 10 3E 00 1 387 
6B08 00 00 3C 06 1 387 
6B0C 7E 46 7E 00 1 387 
6B10 00 60 60 7E 1 387 
6B14 62 62 7E 00 1 387 
6B18 00 00 7E 62 1 387 
6B1C 60 62 7E 00 1 387 
6B20 00 06 06 7E 1 387 
6B24 46 46 7E 00 1 387 
6B28 00 00 7E 46 1 387 
6B2C 7E 60 7E 00 1 387 
6B30 00 1E 30 3C 1 387 
6B34 30 30 30 00 1 387 
6B38 00 00 7E 46 1 387 
6B3C 46 3E 06 3E 1 387 
6B40 00 60 60 7C 1 387 
6B44 66 66 66 00 1 387 
6B48 00 18 00 38 1 387 
6B4C 18 18 3C 00 1 387 
6B50 00 0C 00 0C 1 387 
6B54 0C 0C 4C 38 1 387 
6B58 00 20 2C 38 1 387 
6B5C 38 2C 26 00 1 387 
6B60 00 18 18 18 1 387 
6B64 18 18 0E 00 1 387 
6B68 00 00 6C 56 1 387 
6B6C 56 56 46 00 1 387 
6B70 00 00 7C 46 1 387 
6B74 46 46 46 00 1 387 
6B78 00 00 3C 46 1 387 
6B7C 46 46 3C 00 1 387 
6B80 00 00 7C 66 1 387 
6B84 66 7C 60 60 1 387 
6B88 00 00 3E 46 1 387 
6B8C 46 3E 06 06 1 387 
6B90 00 00 3C 62 1 387 
6B94 60 60 60 00 1 387 
6B98 00 00 3C 60 1 387 
6B9C 3C 06 3C 00 1 387 
6BA0 00 30 78 30 1 387 
6BA4 30 30 1C 00 1 387 
6BA8 00 00 46 46 1 387 
6BAC 46 46 3C 00 1 387 
6BB0 00 00 46 46 1 387 
6BB4 2C 3C 18 00 1 387 
6BB8 00 00 46 56 1 387 
6BBC 56 56 2C 00 1 387 
6BC0 00 00 46 2C 1 387 
6BC4 18 2C 46 00 1 387 
6BC8 00 00 46 46 1 387 
6BCC 46 3E 06 3C 1 387 
6BD0 00 00 7E 0C 1 387 
6BD4 18 30 7E 00 1 387 
6BD8 00 0E 08 30 1 387 
6BDC 08 08 0E 00 1 387 
6BE0 00 08 08 08 1 387 
6BE4 08 2A 1C 08 1 387 
6BE8 00 70 10 0C 1 387 
6BEC 10 10 70 00 1 387 
6BF0 00 14 28 00 1 387 
6BF4 00 00 00 00 1 387 

; File #2: C:\Users\Antonio Luque\source\Repos\Hex\Z80CodeFiles\Main.z80asm

6BF8             2 1 ; ----------------------------------------------------------------------------------------------------------------------
6BF8             2 2 ; Main.z80asm
6BF8             2 3 ; Coded by Antonio Luque
6BF8             2 4 ; ----------------------------------------------------------------------------------------------------------------------
6BF8             2 6 CYAN_COLOR              equ     %00000101                   ; attributes: flash 0, bright 0, paper 0, ink 5
6BF8             2 7 RED_COLOR               equ     %00000010                   ; attributes: flash 0, bright 0, paper 0, ink 2
6BF8             2 9 ; ----------------------------------------------------------------------------------------------------------------------
6BF8             2 10 ; Entry point of the program - Initialization
6BF8             2 11 ; ----------------------------------------------------------------------------------------------------------------------
6BF8             2 12 Main                    ent     $
6BF8 F3          2 14 di                                  ; disable interrupts
6BF9             2 16 ; allocate jump to interrupt routine at address $5CA1 (pointed by IY+103)
6BF9 21 1C 76    2 18 ld      hl, Timer_Interrupt         ; HL points to interrupt routine address
6BFC FD 36 67 C3 2 19 ld      (iy+103), $C3               ; 'jp' opcode
6C00 FD 75 68    2 20 ld      (iy+104), l                 ; Low byte of interrupt routine address
6C03 FD 74 69    2 21 ld      (iy+105), h                 ; High byte of interrupt routine address
6C06 3E 2E       2 22 ld      a, $2E                      ; High byte of interrupt vector address
6C08 ED 47       2 23 ld      i, a                        ; set interrupt vector address
6C0A ED 5E       2 24 im      2                           ; set interrupt mode 2
6C0C             2 26 ; When the ULA triggers an interrupt it doesn't put any device ID in the data bus. When no value
6C0C             2 27 ; is placed on the Spectrum's data bus, this acquires the value of 8 signals one ($FF). So, the
6C0C             2 28 ; resultant vector address is formed as follows:
6C0C             2 29 ;
6C0C             2 30 ;                           ( I * $100 ) + $FF = $2E00 + $FF = $2EFF
6C0C             2 31 ; Source: 
6C0C             2 32 ; https://wiki.speccy.org/cursos/ensamblador/interrupciones#curiosidades-y-consideraciones
6C0C             2 33 ;
6C0C             2 34 ; The value pointed at ROM address $2EFF is $5CA1. This address belongs to the calculator's
6C0C             2 35 ; memory area and it is used by some ROM routines, but none of them are called by HEX2 program.
6C0C 31 00 60    2 37 ld      sp, STACK                   ; move stack
6C0F AF          2 39 xor     a                           ; A = 0
6C10 D3 FE       2 40 out     ($FE), a                    ; set border color (black)
6C12 CD 83 79    2 41 call    Screen_Menu                 ; show main menu and wait for an option
6C15             2 43 ; ----------------------------------------------------------------------------------------------------------------------
6C15             2 44 ; Start new game
6C15             2 45 ; ----------------------------------------------------------------------------------------------------------------------
6C15             2 46 Main_Start
6C15 CD 18 77    2 47 call    Screen_Clear                ; fill in black the whole screen area and attributes area
6C18 CD 25 77    2 48 call    Screen_Letters              ; draw the two rows of letters on the screen (a..g)
6C1B CD 51 77    2 49 call    Screen_Numbers              ; draw the two columns of numbers on the screen (1..7)
6C1E CD 90 77    2 50 call    Screen_Frame                ; draw the screen frame
6C21 CD E8 77    2 51 call    Screen_Tokens               ; draw the fixed tokens on the screen
6C24 CD 07 78    2 52 call    Screen_Timer_Quotes         ; draw the timer quotes (' ") on the screen
6C27 CD 4A 78    2 53 call    Screen_Color_Statics        ; apply color to statics items of the screen
6C2A FB          2 55 ei                                  ; enable interrupts
6C2B             2 57 ; ----------------------------------------------------------------------------------------------------------------------
6C2B             2 58 ; New level
6C2B             2 59 ; ----------------------------------------------------------------------------------------------------------------------
6C2B             2 60 Main_New_Level
6C2B 3E 04       2 61 ld      a, 4                        ; maximum level
6C2D 21 9D 61    2 62 ld      hl, GAME_LEVEL              ; HL points to game level address
6C30 BE          2 63 cp      (hl)                        ; level 4 achieved?
6C31 20 05       2 64 jr      nz, Main_Increment_Level    ; no, increment game level
6C33 CD 84 78    2 65 call    Screen_Last_Level           ; show last level screen and input game level
6C36 18 DD       2 66 jr      Main_Start                  ; start a new game
6C38             2 67 Main_Increment_Level
6C38 34          2 68 inc     (hl)                        ; increment game level
6C39 CD 27 79    2 69 call    Screen_Frame_Color          ; set up frame color depending on current level
6C3C CD 16 79    2 70 call    Screen_Clear_ThreeRow       ; clear all three-in-a-row marks
6C3F AF          2 71 xor     a                           ; A = 0
6C40 32 11 62    2 72 ld      (THREE_ROW), a              ; initialize three-in-a-row counter
6C43             2 74 ; ----------------------------------------------------------------------------------------------------------------------
6C43             2 75 ; Start new match
6C43             2 76 ; ----------------------------------------------------------------------------------------------------------------------
6C43             2 77 Main_Start_Match
6C43             2 78 ; set up timers and clear last messages
6C43 CD B1 76    2 80 call    Timer_Reset                 ; reset timers
6C46 CD 9C 76    2 81 call    Timer_Display_All           ; display timers
6C49 CD 0D 6F    2 82 call    Print_Clear_Alert           ; clear last alert
6C4C 3E 02       2 83 ld      a, RED_COLOR                ; set red color in A
6C4E 32 9E 61    2 84 ld      (TOKEN_COLOR), a            ; save token color
6C51 CD 34 6F    2 85 call    Print_Clear_Move            ; clear red player last move
6C54             2 87 ; swap players' colors
6C54 3A 9F 61    2 89 ld      a, (PLAYER_COLOR)           ; get current player color
6C57 EE 07       2 90 xor     %00000111                   ; swap color
6C59 32 9F 61    2 91 ld      (PLAYER_COLOR), a           ; save swapped player color
6C5C CD F0 6E    2 92 call    Print_Players               ; print "Player" and "Speccy" strings
6C5F             2 94 ; initialize positions
6C5F 21 00 7D    2 96 ld      hl, CYAN_POSITIONS          ; HL points to cyan positions address
6C62 11 01 7D    2 97 ld      de, CYAN_POSITIONS+1        ; DE points to cyan positions (+1) address
6C65 36 00       2 98 ld      (hl), EMPTY                 ; set first position as empty
6C67 01 FF 01    2 99 ld      bc, 256*2-1                 ; length of cyan + red positions areas (-1 already set)
6C6A ED B0       2 100 ldir                                ; fill the rest of positions as empty
6C6C CD A0 6D    2 102 call    Draw_Board                  ; draw an empty hexagons board
6C6F 3E 0A       2 104 ld      a, 10
6C71 32 CF 6D    2 105 ld      (Draw_Token_Delay+1), a     ; set delay duration for animate hexagons
6C74 3E 01       2 106 ld      a, 1
6C76 32 9B 61    2 107 ld      (MOVE_NUMBER), a            ; initialize move number
6C79 32 EB 62    2 108 ld      (TIMER_FLAG), a             ; set cyan timer on
6C7C 3E 05       2 109 ld      a, CYAN_COLOR               ; first player token color
6C7E             2 111 ; ----------------------------------------------------------------------------------------------------------------------
6C7E             2 112 ; Process players moves - Match loop
6C7E             2 113 ; ----------------------------------------------------------------------------------------------------------------------
6C7E             2 114 Main_Match_Loop
6C7E             2 115 ; check player turn
6C7E 32 9E 61    2 117 ld      (TOKEN_COLOR), a            ; save current token color
6C81 21 9F 61    2 118 ld      hl, PLAYER_COLOR            ; HL points to player color address
6C84 BE          2 119 cp      (hl)                        ; is player color = current token color?
6C85 28 05       2 120 jr      z, Main_Player_Move         ; yes, process player move
6C87 CD F5 6C    2 122 call    Main_GetSpeccy_Move         ; get the speccy move
6C8A 18 03       2 123 jr      Main_Update_Board           ; update board position
6C8C             2 124 Main_Player_Move
6C8C CD 3A 6D    2 125 call    Main_GetPlayer_Move         ; get a legal (empty position) player move 
6C8F             2 126 Main_Update_Board
6C8F             2 127 ; update positions with player/speccy move
6C8F CD EC 70    2 129 call    PathFinder_Friend           ; get player/speccy side
6C92 CD F6 70    2 130 call    PathFinder_PutToken         ; put token on cyan and red positions
6C95             2 132 ; draw token on the board
6C95 CD C6 76    2 134 call    Timer_Pause                 ; pause current timer
6C98 CD BB 6D    2 135 call    Draw_Token                  ; animate hexagon sprite on the screen
6C9B DD 21 E7 64 2 136 ld      ix, TOKEN_FX                ; IX points to token tone parameters address
6C9F CD D6 76    2 137 call    Sound_FX                    ; play sound effect
6CA2 CD D0 76    2 138 call    Timer_Restart               ; restart current timer
6CA5             2 140 ; check for a winner
6CA5 CD 9F 75    2 142 call    PathFinder_VictoryPath      ; check current player victory path
6CA8 3C          2 143 inc     a                           ; is there a victory path?
6CA9 20 13       2 144 jr      nz, Main_Match_End          ; yes, match ends
6CAB 21 9B 61    2 146 ld      hl, MOVE_NUMBER             ; HL points to move number address
6CAE 34          2 147 inc     (hl)                        ; increment move number
6CAF             2 149 ; swap players' timers and token color
6CAF 3A EB 62    2 151 ld      a, (TIMER_FLAG)             ; get current timer flag
6CB2 EE 03       2 152 xor     %00000011                   ; swap timer flag
6CB4 32 EB 62    2 153 ld      (TIMER_FLAG), a             ; save swapped timer flag
6CB7 3A 9E 61    2 155 ld      a, (TOKEN_COLOR)            ; get current token color
6CBA EE 07       2 156 xor     %00000111                   ; swap token color
6CBC 18 C0       2 157 jr      Main_Match_Loop             ; repeat match loop
6CBE             2 159 ; ----------------------------------------------------------------------------------------------------------------------
6CBE             2 160 ; Current player wins the match
6CBE             2 161 ; ----------------------------------------------------------------------------------------------------------------------
6CBE             2 162 Main_Match_End
6CBE 47          2 163 ld      b, a                        ; set start position of victory path
6CBF AF          2 164 xor     a                           ; stop timers
6CC0 32 EB 62    2 165 ld      (TIMER_FLAG), a
6CC3 3E 04       2 166 ld      a, 4                        ; set delay duration for animate hexagons
6CC5 32 CF 6D    2 167 ld      (Draw_Token_Delay+1), a
6CC8 CD D4 75    2 169 call    PathFinder_BrightPath       ; animate and highlight the winner path
6CCB 11 3D 62    2 171 ld      de, STR_WINNER              ; DE points to "WINS" string address
6CCE CD 14 6F    2 172 call    Print_Alert                 ; print string
6CD1 3A 9E 61    2 174 ld      a, (TOKEN_COLOR)            ; get current token color
6CD4 21 9F 61    2 175 ld      hl, PLAYER_COLOR            ; get player color
6CD7 BE          2 176 cp      (hl)                        ; is player color = current token color?
6CD8 21 11 62    2 177 ld      hl, THREE_ROW               ; HL points to three-in-a-row counter
6CDB 28 04       2 178 jr      z, Main_ThreeRow_Increment  ; yes, go to increment three-in-a-row counter
6CDD 35          2 179 dec     (hl)                        ; decrement three-in-a-row counter
6CDE F2 E2 6C    2 180 jp      p, Main_ThreeRow_Show       ; if not negative (-1), show marks
6CE1             2 181 Main_ThreeRow_Increment
6CE1 34          2 182 inc     (hl)                        ; increment three-in-a-row counter
6CE2             2 183 Main_ThreeRow_Show
6CE2 CD FA 78    2 184 call    Screen_ThreeRow             ; show three-in-a-row marks
6CE5 3E FF       2 185 ld      a, 255                      ; set delay duration
6CE7 CD 91 6D    2 186 call    Main_Delay                  ; execute delay
6CEA 3A 11 62    2 187 ld      a, (THREE_ROW)              ; check three row counter
6CED FE 03       2 188 cp      3                           ; is it 3?
6CEF CA 2B 6C    2 189 jp      z, Main_New_Level           ; yes, start a new level
6CF2 C3 43 6C    2 190 jp      Main_Start_Match            ; start a new match
6CF5             2 192 ; ----------------------------------------------------------------------------------------------------------------------
6CF5             2 193 ; Main_GetSpeccy_Move: get the speccy move
6CF5             2 194 ;
6CF5             2 195 ; Input:    -
6CF5             2 196 ;
6CF5             2 197 ; Output:   BC = hexagon board indexes (B:column, C:row)
6CF5             2 198 ;           HL = CYAN_POSITIONS move address
6CF5             2 199 ;
6CF5             2 200 ; Uses:     MOVE_NUMBER (current move number)
6CF5             2 201 ;           GAME_LEVEL (current game level)
6CF5             2 202 ;           AI_DEPTH (recursion depth level)
6CF5             2 203 ;           STR_MOVE (formatted move string)
6CF5             2 204 ;
6CF5             2 205 ; Destroys: A, DE, IX, IY
6CF5             2 206 ; ----------------------------------------------------------------------------------------------------------------------
6CF5             2 207 Main_GetSpeccy_Move:
6CF5 CD 2D 6F    2 208 call    Print_Wait                  ; print "WAIT" message
6CF8 3A 9B 61    2 210 ld      a, (MOVE_NUMBER)            ; get move number
6CFB 3D          2 211 dec     a                           ; is it cyan first move?
6CFC 28 2A       2 212 jr      z, Main_GetSpeccy_Book      ; yes, get move from opening book
6CFE DD 21 00 7F 2 214 ld      ix, CANDIDATES              ; IX points to candidates list address
6D02 3A 9D 61    2 215 ld      a, (GAME_LEVEL)             ; get game level
6D05 32 9A 61    2 216 ld      (AI_DEPTH), a               ; save recursion depth level
6D08 CD EC 70    2 217 call    PathFinder_Friend           ; get speccy side
6D0B CD 7E 6F    2 218 call    BRAINIAC_best_move          ; get speccy best move
6D0E 6B          2 219 ld      l, e                        ; set node index in L
6D0F             2 220 Main_GetSpeccy_Positions
6D0F 26 7D       2 221 ld      h, CYAN_POSITIONS/256       ; HL points to CYAN_POSITIONS move address
6D11 E5          2 222 push    hl                          ; store CYAN_POSITIONS move address
6D12 CD 80 6D    2 223 call    Main_Board2Indexes          ; convert board position to indexes
6D15 78          2 224 ld      a, b                        ; get 1..7 column
6D16 C6 60       2 225 add     a, $60                      ; adjust to charset ('a'..'g')
6D18 32 18 62    2 226 ld      (STR_MOVE+0), a             ; put it on formatted move string
6D1B 79          2 227 ld      a, c                        ; get 1..7 row
6D1C C6 30       2 228 add     a, $30                      ; adjust to charset ('1'..'7')
6D1E 32 1B 62    2 229 ld      (STR_MOVE+3), a             ; put it on formatted move string
6D21 C5          2 230 push    bc                          ; store hexagon board indexes
6D22 CD 3B 6F    2 231 call    Print_Move                  ; print Speccy move
6D25 C1          2 232 pop     bc                          ; restore hexagon board indexes
6D26 E1          2 233 pop     hl                          ; restore CYAN_POSITIONS move address
6D27 C9          2 234 ret
6D28             2 235 Main_GetSpeccy_Book
6D28 ED 5F       2 236 ld      a, r                        ; get a pseudo-random number (0..127)
6D2A E6 1F       2 237 and     %00011111                   ; number is in range (0..31)
6D2C FE 1B       2 238 cp      27                          ; is it >= 27?
6D2E 30 F8       2 239 jr      nc, Main_GetSpeccy_Book     ; yes, repeat until range is (0..26)
6D30 21 D0 62    2 240 ld      hl, OPENINGS                ; HL points to opening book address
6D33 16 00       2 241 ld      d, 0                        ; set index in DE
6D35 5F          2 242 ld      e, a
6D36 19          2 243 add     hl, de                      ; HL points to move index address
6D37 6E          2 244 ld      l, (hl)                     ; get move from opening book
6D38 18 D5       2 245 jr      Main_GetSpeccy_Positions    ; get speccy move positions
6D3A             2 247 ; ----------------------------------------------------------------------------------------------------------------------
6D3A             2 248 ; Main_GetPlayer_Move: get a legal (empty hexagon) move from player
6D3A             2 249 ;
6D3A             2 250 ; Input:    -
6D3A             2 251 ;
6D3A             2 252 ; Output:   BC = hexagon board indexes (B:column, C:row)
6D3A             2 253 ;           HL = CYAN_POSITIONS move address
6D3A             2 254 ;
6D3A             2 255 ; Uses:     STR_MOVE (formatted move string)
6D3A             2 256 ;
6D3A             2 257 ; Destroys: A, DE, IX
6D3A             2 258 ; ----------------------------------------------------------------------------------------------------------------------
6D3A             2 259 Main_GetPlayer_Move:
6D3A CD 34 6F    2 260 call    Print_Clear_Move            ; clear player last move
6D3D CD 2A 6E    2 261 call    Input_Move                  ; wait for input player move
6D40 CD 3B 6F    2 262 call    Print_Move                  ; print player move
6D43 3A 18 62    2 264 ld      a, (STR_MOVE+0)             ; get column ('a'..'g')
6D46 D6 60       2 265 sub     $60                         ; convert to number (1..7)
6D48 47          2 266 ld      b, a                        ; set column index in B
6D49 3A 1B 62    2 267 ld      a, (STR_MOVE+3)             ; get row ('1'..'7')
6D4C D6 30       2 268 sub     $30                         ; convert to number (1..7)
6D4E 4F          2 269 ld      c, a                        ; set row index in C
6D4F 11 50 62    2 270 ld      de, BOARD_COORDINATES       ; DE points to board coordinates address
6D52 CD 73 6D    2 271 call    Main_Search_Table           ; search board position in board coordinates
6D55 6E          2 272 ld      l, (hl)                     ; set board position of player move
6D56 26 7D       2 273 ld      h, CYAN_POSITIONS/256       ; HL points to CYAN_POSITIONS move address
6D58 3E 00       2 274 ld      a, EMPTY                    ; check position
6D5A BE          2 275 cp      (hl)                        ; is position empty?
6D5B C8          2 276 ret     z                           ; yes, return
6D5C             2 278 ; illegal player move (position not empty)
6D5C 11 31 62    2 280 ld      de, STR_FILLED              ; DE points to "FILLED" string address
6D5F CD 14 6F    2 281 call    Print_Alert                 ; print string
6D62 DD 21 F7 64 2 282 ld      ix, FILLED_FX               ; IX points to filled tone parameters address
6D66 CD D6 76    2 283 call    Sound_FX                    ; play sound fx
6D69 3E 50       2 284 ld      a, 80                       ; set delay counter
6D6B CD 91 6D    2 285 call    Main_Delay                  ; execute delay
6D6E CD 0D 6F    2 286 call    Print_Clear_Alert           ; clear alert message
6D71 18 C7       2 287 jr      Main_GetPlayer_Move         ; repeat player process until move is legal
6D73             2 289 ; ----------------------------------------------------------------------------------------------------------------------
6D73             2 290 ; Main_Search_Table: search an element in a 8x8 bytes table
6D73             2 291 ;
6D73             2 292 ; Input:    BC = element indexes (B = column, C = row)
6D73             2 293 ;           DE = table address in which to search for the element
6D73             2 294 ;
6D73             2 295 ; Output:   DE = address of first element in the C row of the table
6D73             2 296 ;           HL = address of the element in the BC indexes of the table
6D73             2 297 ;
6D73             2 298 ; Destroys: -
6D73             2 299 ; ----------------------------------------------------------------------------------------------------------------------
6D73             2 300 Main_Search_Table:
6D73 26 00       2 301 ld      h, 0                        ; first, get the C row in table
6D75 69          2 302 ld      l, c                        ; set index in HL
6D76 29          2 303 add     hl, hl                      ; a row is 8 bytes long
6D77 29          2 304 add     hl, hl
6D78 29          2 305 add     hl, hl
6D79 19          2 306 add     hl, de                      ; HL points to the address of C row 
6D7A EB          2 307 ex      de, hl                      ; DE points to the address of C row
6D7B 26 00       2 308 ld      h, 0                        ; go for to the B column
6D7D 68          2 309 ld      l, b                        ; set index in HL
6D7E 19          2 310 add     hl, de                      ; HL points to the address of BC indexes
6D7F C9          2 311 ret
6D80             2 313 ; ----------------------------------------------------------------------------------------------------------------------
6D80             2 314 ; Main_Board2Indexes: convert a board position into a board indexes
6D80             2 315 ;
6D80             2 316 ; Input:    L  = board position
6D80             2 317 ;
6D80             2 318 ; Output:   BC = board indexes (B = column, C = row)
6D80             2 319 ;
6D80             2 320 ; Destroys: HL
6D80             2 321 ; ----------------------------------------------------------------------------------------------------------------------
6D80             2 322 Main_Board2Indexes:
6D80 7D          2 323 ld      a, l                        ; set board position in A to compare later
6D81 21 90 62    2 325 ld      hl, BOARD_COORDINATES+64    ; HL points to last board position address (+1)
6D84 0E 07       2 326 ld      c, 7                        ; 7 rows
6D86             2 327 Main_Board2Indexes_Row
6D86 06 07       2 328 ld      b, 7                        ; 7 columns
6D88             2 329 Main_Board2Indexes_Col
6D88 2B          2 330 dec     hl                          ; move HL to next board position address
6D89 BE          2 331 cp      (hl)                        ; is A the position?
6D8A C8          2 332 ret     z                           ; yes, return board indexes
6D8B 10 FB       2 333 djnz    Main_Board2Indexes_Col      ; repeat for each column
6D8D 2B          2 334 dec     hl                          ; skip borders
6D8E 0D          2 335 dec     c                           ; decrement row
6D8F 18 F5       2 336 jr      Main_Board2Indexes_Row      ; loop until find position
6D91             2 338 ; ----------------------------------------------------------------------------------------------------------------------
6D91             2 339 ; Main_Delay: execute a delay
6D91             2 340 ;
6D91             2 341 ; Input:    A = delay counter
6D91             2 342 ;
6D91             2 343 ; Output:   -
6D91             2 344 ;
6D91             2 345 ; Destroys: A
6D91             2 346 ; ----------------------------------------------------------------------------------------------------------------------
6D91             2 347 Main_Delay:
6D91 C5          2 348 push    bc                          ; store register
6D92             2 349 Main_Delay_Loop
6D92 0E 0A       2 350 ld      c, 10                       ; set outer loop counter
6D94             2 351 Main_Delay_Loop1
6D94 06 00       2 352 ld      b, 0                        ; set inner loop counter (256)
6D96             2 353 Main_Delay_Loop2
6D96 10 FE       2 354 djnz    Main_Delay_Loop2            ; repeat until B=0
6D98 0D          2 355 dec     c                           ; decrement outer loop counter
6D99 20 F9       2 356 jr      nz, Main_Delay_Loop1        ; repeat until C=0
6D9B 3D          2 357 dec     a                           ; decrement delay counter
6D9C 20 F4       2 358 jr      nz, Main_Delay_Loop         ; repeat until A=0
6D9E C1          2 359 pop     bc                          ; restore register
6D9F C9          2 360 ret

; File #3: C:\Users\Antonio Luque\source\Repos\Hex\Z80CodeFiles\Draw.z80asm

6DA0             3 1 ; ----------------------------------------------------------------------------------------------------------------------
6DA0             3 2 ; Draw.z80asm
6DA0             3 3 ; Coded by Antonio Luque
6DA0             3 4 ; ----------------------------------------------------------------------------------------------------------------------
6DA0             3 6 ; ----------------------------------------------------------------------------------------------------------------------
6DA0             3 7 ; Draw_Board: draw an empty 7x7 hexagons board on the screen
6DA0             3 8 ;
6DA0             3 9 ; Input:    -
6DA0             3 10 ;
6DA0             3 11 ; Output:   -
6DA0             3 12 ;
6DA0             3 13 ; Uses:     TOKEN_COLOR (current token color)
6DA0             3 14 ;
6DA0             3 15 ; Destroys: A, BC, DE, HL, IXL
6DA0             3 16 ; ----------------------------------------------------------------------------------------------------------------------
6DA0             3 17 Draw_Board:
6DA0 3E 07       3 18 ld      a, WHITE                    ; set empty hexagon color
6DA2 32 9E 61    3 19 ld      (TOKEN_COLOR), a            ; store hexagon color
6DA5 0E 07       3 20 ld      c, 7                        ; 7 rows
6DA7             3 21 Draw_Board_Row
6DA7 06 07       3 22 ld      b, 7                        ; 7 columns
6DA9             3 23 Draw_Board_Column
6DA9 CD D6 6D    3 24 call    Draw_GetHEX_Screen          ; get hexagon screen address
6DAC CD 0E 6E    3 25 call    Draw_Hexagon_Color          ; apply color to hexagon area
6DAF 11 7E 65    3 26 ld      de, HEXAGON_EMPTY           ; DE points to hexagon sprite address
6DB2 CD E0 6D    3 27 call    Draw_Sprite_Hexagon         ; draw an empty hexagon at screen address
6DB5 10 F2       3 28 djnz    Draw_Board_Column           ; repeat for each column
6DB7 0D          3 29 dec     c                           ; decrement row
6DB8 20 ED       3 30 jr      nz, Draw_Board_Row          ; repeat for each row
6DBA C9          3 31 ret
6DBB             3 33 ; ----------------------------------------------------------------------------------------------------------------------
6DBB             3 34 ; Draw_Token: animate an hexagon sprite on the screen
6DBB             3 35 ;
6DBB             3 36 ; Input:    BC = hexagon board indexes (B:column, C:row)
6DBB             3 37 ;
6DBB             3 38 ; Output:   -
6DBB             3 39 ;
6DBB             3 40 ; Destroys: A, BC, DE, HL, IXL
6DBB             3 41 ; ----------------------------------------------------------------------------------------------------------------------
6DBB             3 42 Draw_Token:
6DBB CD D6 6D    3 43 call    Draw_GetHEX_Screen          ; get hexagon screen address
6DBE 01 04 06    3 44 ld      bc, $0604                   ; B = number of sprites, C = sprite number to change color
6DC1 11 9E 65    3 45 ld      de, HEXAGON_SPRITE          ; DE points to hexagon sprite address
6DC4             3 46 Draw_Token_Loop
6DC4 E5          3 47 push    hl                          ; store hexagon screen address
6DC5 CD E0 6D    3 48 call    Draw_Sprite_Hexagon         ; draw hexagon sprite
6DC8 E1          3 49 pop     hl                          ; restore hexagon screen address
6DC9 78          3 50 ld      a, b                        ; check loop counter
6DCA B9          3 51 cp      c                           ; is it 4?
6DCB CC 0E 6E    3 52 call    z, Draw_Hexagon_Color       ; yes, apply color to hexagon area
6DCE             3 53 Draw_Token_Delay
6DCE 3E 00       3 54 ld      a, 0                        ; set delay duration (changed before calling this routine)
6DD0 CD 91 6D    3 55 call    Main_Delay                  ; execute delay
6DD3 10 EF       3 56 djnz    Draw_Token_Loop             ; repeat for each hexagon sprite
6DD5 C9          3 57 ret
6DD6             3 59 ; ----------------------------------------------------------------------------------------------------------------------
6DD6             3 60 ; Draw_GetHEX_Screen: get the screen address of an hexagon on board
6DD6             3 61 ;
6DD6             3 62 ; Input:    BC = hexagon board indexes (B:column, C:row)
6DD6             3 63 ;
6DD6             3 64 ; Output:   HL = hexagon screen address 
6DD6             3 65 ;
6DD6             3 66 ; Destroys: A, DE
6DD6             3 67 ; ----------------------------------------------------------------------------------------------------------------------
6DD6             3 68 Draw_GetHEX_Screen:
6DD6 11 98 61    3 69 ld      de, BOARD_MAP-8             ; DE points to board hexagons screen addresses table (-8)
6DD9 CD 73 6D    3 70 call    Main_Search_Table           ; search the screen address of the hexagon in table
6DDC 6E          3 71 ld      l, (hl)                     ; set the low byte of the screen address in L
6DDD 1A          3 72 ld      a, (de)                     ; set the high byte of the screen address in H
6DDE 67          3 73 ld      h, a
6DDF C9          3 74 ret
6DE0             3 76 ; ----------------------------------------------------------------------------------------------------------------------
6DE0             3 77 ; Draw_Sprite_Hexagon: draw an hexagon sprite on the screen
6DE0             3 78 ;
6DE0             3 79 ; Input:    DE = hexagon sprite address
6DE0             3 80 ;           HL = hexagon screen address
6DE0             3 81 ;
6DE0             3 82 ; Output:   DE = next hexagon sprite address
6DE0             3 83 ;
6DE0             3 84 ; Destroys: A, HL, IXL
6DE0             3 85 ; ----------------------------------------------------------------------------------------------------------------------
6DE0             3 86 Draw_Sprite_Hexagon:
6DE0 DD 2E 10    3 87 ld      ixl, 16                     ; hexagon sprite height in bytes (loop counter)
6DE3             3 88 Draw_Sprite_HexLoop
6DE3 1A          3 89 ld      a, (de)                     ; get sprite byte
6DE4 77          3 90 ld      (hl), a                     ; put sprite byte on screen
6DE5 13          3 91 inc     de                          ; move DE to next sprite byte address
6DE6 2C          3 92 inc     l                           ; move HL to next screen column
6DE7 1A          3 93 ld      a, (de)                     ; get sprite byte
6DE8 77          3 94 ld      (hl), a                     ; put sprite byte on screen
6DE9 13          3 95 inc     de                          ; move DE to next sprite byte
6DEA 2D          3 96 dec     l                           ; move HL to previous screen column
6DEB CD FF 6D    3 97 call    Draw_Down_PixelLine         ; move HL down one pixel-line
6DEE DD 2D       3 98 dec     ixl                         ; decrement sprite height
6DF0 20 F1       3 99 jr      nz, Draw_Sprite_HexLoop     ; repeat for each byte in sprite
6DF2 C9          3 100 ret
6DF3             3 102 ; ----------------------------------------------------------------------------------------------------------------------
6DF3             3 103 ; Draw_Sprite_LetterNum: draw a letter/number sprite at screen address
6DF3             3 104 ;
6DF3             3 105 ; Input:    DE = letter/number sprite address
6DF3             3 106 ;           HL = letter/number screen address
6DF3             3 107 ;
6DF3             3 108 ; Output:   DE = next letter/number sprite address
6DF3             3 109 ;
6DF3             3 110 ; Destroys: A, C, HL
6DF3             3 111 ; ----------------------------------------------------------------------------------------------------------------------
6DF3             3 112 Draw_Sprite_LetterNum:
6DF3 0E 0A       3 113 ld      c, 10                       ; letter/number sprite height in bytes (loop counter)
6DF5             3 114 Draw_Sprite_Loop
6DF5 1A          3 115 ld      a, (de)                     ; get sprite byte
6DF6 77          3 116 ld      (hl), a                     ; put sprite byte on screen
6DF7 13          3 117 inc     de                          ; move DE to next sprite byte address
6DF8 CD FF 6D    3 118 call    Draw_Down_PixelLine         ; move HL down one pixel-line
6DFB 0D          3 119 dec     c                           ; decrement sprite height
6DFC 20 F7       3 120 jr      nz, Draw_Sprite_Loop        ; repeat for each byte in sprite
6DFE C9          3 121 ret
6DFF             3 123 ; ----------------------------------------------------------------------------------------------------------------------
6DFF             3 124 ; Draw_Down_PixelLine: move HL down one pixel-line
6DFF             3 125 ; Source: https://spectrumcomputing.co.uk/forums/viewtopic.php?p=35272#p35272
6DFF             3 126 ;
6DFF             3 127 ; The screen address of a pixel-line is encoded as follows:
6DFF             3 128 ;
6DFF             3 129 ;             H           |           L
6DFF             3 130 ;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
6DFF             3 131 ;  07|06|05|04|03|02|01|00|07|06|05|04|03|02|01|00
6DFF             3 132 ;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
6DFF             3 133 ;   0| 1| 0|Y7|Y6|Y2|Y1|Y0|Y5|Y4|Y3|X4|X3|X2|X1|X0
6DFF             3 134 ;
6DFF             3 135 ; where:
6DFF             3 136 ;   Y = pixel position: Y7,Y6,Y5,Y4,Y3,Y2,Y1,Y0 (0-191)
6DFF             3 137 ;   X = byte  position:  0, 0, 0,X4,X3,X2,X1,X0 (0-31)
6DFF             3 138 ;
6DFF             3 139 ; Input:    HL = pixel-line address
6DFF             3 140 ;
6DFF             3 141 ; Output:   HL = next (down) pixel-line address
6DFF             3 142 ;
6DFF             3 143 ; Destroys: A
6DFF             3 144 ; ----------------------------------------------------------------------------------------------------------------------
6DFF             3 145 Draw_Down_PixelLine:
6DFF 24          3 146 inc     h                           ; move HL down one pixel-line
6E00 7C          3 147 ld      a, h                        ; get high byte of pixel-line address
6E01 E6 07       3 148 and     %00000111                   ; is pixel-line address inside a character line?
6E03 C0          3 149 ret     nz                          ; yes, return
6E04 7D          3 150 ld      a, l                        ; get low byte of pixel-line address (at this point Y6 = 1)
6E05 C6 20       3 151 add     a, 32                       ; add size of char line (add extra bit into Y3-Y5)
6E07 6F          3 152 ld      l, a                        ; move HL down one character line
6E08 D8          3 153 ret     c                           ; a third was crossed? yes, return
6E09 7C          3 154 ld      a, h                        ; get high byte of pixel-line address
6E0A D6 08       3 155 sub     8                           ; clean up the bit from Y6
6E0C 67          3 156 ld      h, a                        ; HL points to next (down) pixel-line address
6E0D C9          3 157 ret
6E0E             3 159 ; ----------------------------------------------------------------------------------------------------------------------
6E0E             3 160 ; Draw_Hexagon_Color: color an hexagon sprite on the screen
6E0E             3 161 ; Source: https://spectrumcomputing.co.uk/forums/viewtopic.php?p=42285#p42285
6E0E             3 162 ;
6E0E             3 163 ; This routine converts a screen address (HL) into an attribute address (IX):
6E0E             3 164 ;
6E0E             3 165 ;             H           |           L
6E0E             3 166 ;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
6E0E             3 167 ;  07|06|05|04|03|02|01|00|07|06|05|04|03|02|01|00
6E0E             3 168 ;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
6E0E             3 169 ;   0| 1| 0|Y7|Y6|Y2|Y1|Y0|Y5|Y4|Y3|X4|X3|X2|X1|X0      screen address
6E0E             3 170 ;
6E0E             3 171 ;            IXH          |          IXL
6E0E             3 172 ;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
6E0E             3 173 ;  07|06|05|04|03|02|01|00|07|06|05|04|03|02|01|00
6E0E             3 174 ;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
6E0E             3 175 ;   0| 1| 0| 1| 1| 0|Y7|Y6|Y5|Y4|Y3|X4|X3|X2|X1|X0      attribute address
6E0E             3 176 ;
6E0E             3 177 ; where:
6E0E             3 178 ;   Y = pixel position: Y7,Y6,Y5,Y4,Y3,Y2,Y1,Y0 (0-191)
6E0E             3 179 ;   X = byte  position:  0, 0, 0,X4,X3,X2,X1,X0 (0-31)
6E0E             3 180 ;
6E0E             3 181 ; Input:    HL = screen address of the hexagon
6E0E             3 182 ;
6E0E             3 183 ; Output:   IX = attribute address of the hexagon
6E0E             3 184 ;
6E0E             3 185 ; Uses:     TOKEN_COLOR (current token color)
6E0E             3 186 ;
6E0E             3 187 ; Destroys: A
6E0E             3 188 ; ----------------------------------------------------------------------------------------------------------------------
6E0E             3 189 Draw_Hexagon_Color:
6E0E 7C          3 190 ld      a, h                        ; get high byte of screen address
6E0F F6 87       3 191 or      %10000111                   ; mask Y0-Y2 and set bit 7 on
6E11 1F          3 192 rra                                 ; shift Y7-Y6 two positions
6E12 1F          3 193 rra
6E13 CB 3F       3 194 srl     a                           ; shift Y7-Y6 to last positions and set bit 7 off
6E15 DD 67       3 195 ld      ixh, a                      ; set high byte of attribute address in IXH
6E17 7D          3 196 ld      a, l                        ; (the low byte for attribute address doesn't change)
6E18 DD 6F       3 197 ld      ixl, a                      ; set low byte of attribute address in IXL
6E1A 3A 9E 61    3 198 ld      a, (TOKEN_COLOR)            ; get current token color
6E1D DD 77 00    3 199 ld      (ix+0), a                   ; set hexagon color (4 bytes)
6E20 DD 77 01    3 200 ld      (ix+1), a
6E23 DD 77 20    3 201 ld      (ix+32), a
6E26 DD 77 21    3 202 ld      (ix+33), a
6E29 C9          3 203 ret

; File #4: C:\Users\Antonio Luque\source\Repos\Hex\Z80CodeFiles\Input.z80asm

6E2A             4 1 ; ----------------------------------------------------------------------------------------------------------------------
6E2A             4 2 ; Input.z80asm
6E2A             4 3 ; Coded by Antonio Luque
6E2A             4 4 ; ----------------------------------------------------------------------------------------------------------------------
6E2A             4 6 MAX_CHARS               equ     2                           ; maximum of input chars
6E2A             4 8 ; ----------------------------------------------------------------------------------------------------------------------
6E2A             4 9 ; Input_Move: wait for input a move from keyboard
6E2A             4 10 ; Based on assembler course by sromero: https://wiki.speccy.org/cursos/ensamblador/gfx4_fuentes
6E2A             4 11 ;
6E2A             4 12 ; Input:    -
6E2A             4 13 ;
6E2A             4 14 ; Output:   -
6E2A             4 15 ;
6E2A             4 16 ; Uses:     TOKEN_COLOR (current token color)
6E2A             4 17 ;           STR_MOVE (formatted move string)
6E2A             4 18 ;
6E2A             4 19 ; Destroys: A, A', BC, DE, HL, IX
6E2A             4 20 ; ----------------------------------------------------------------------------------------------------------------------
6E2A             4 21 Input_Move:
6E2A 01 00 02    4 22 ld      bc, MAX_CHARS*256           ; B = maximum of input chars, C = chars counter
6E2D DD 21 83 5A 4 24 ld      ix, $5A83                   ; IX points to attribute address of RED input text
6E31 21 83 50    4 25 ld      hl, $5083                   ; HL points to screen address of RED input text
6E34 3A 9E 61    4 26 ld      a, (TOKEN_COLOR)            ; check current player color
6E37 FE 02       4 27 cp      RED_COLOR                   ; is RED the current token color?
6E39 28 07       4 28 jr      z, Input_Start              ; yes, start input
6E3B DD 21 19 59 4 29 ld      ix, $5919                   ; IX points to attribute address of CYAN input text
6E3F 21 19 48    4 30 ld      hl, $4819                   ; HL points to screen address of CYAN input text
6E42             4 31 Input_Start
6E42 DD 36 00 C7 4 32 ld      (ix+0), WHITE_FLASH1        ; set attributes for cursor (flash)
6E46 3E 5F       4 33 ld      a, '_'                      ; text input cursor
6E48 CD 64 6F    4 34 call    Print_Char                  ; print cursor
6E4B             4 35 Input_Loop
6E4B CD C4 6E    4 36 call    Input_Key_Scan              ; scan for a key pressed
6E4E FE 0D       4 38 cp      $0D                         ; is it ENTER?
6E50 28 64       4 39 jr      z, Input_Enter              ; yes, perform enter pressed
6E52 FE 30       4 40 cp      '0'                         ; is it "delete"? (char '0' acts as delete, without Shift)
6E54 28 42       4 41 jr      z, Input_Delete             ; yes, perform delete char
6E56 08          4 42 ex      af, af'                     ; store char in A'
6E57 79          4 43 ld      a, c                        ; check number of chars inserted
6E58 B8          4 44 cp      b                           ; chars limit reached?
6E59 28 F0       4 45 jr      z, Input_Loop               ; yes, repeat input loop
6E5B B7          4 47 or      a                           ; is it the first char?
6E5C 20 21       4 48 jr      nz, Input_Numbers           ; no, perform input of 2nd char
6E5E             4 50 ; restrict first char to 'a'-'g'
6E5E 08          4 52 ex      af, af'                     ; restore char
6E5F FE 61       4 53 cp      'a'                         ; is it < 'a'?
6E61 38 E8       4 54 jr      c, Input_Loop               ; yes, repeat input loop (char is not allowed)
6E63 FE 68       4 55 cp      'h'                         ; is it >= 'g'?
6E65 30 E4       4 56 jr      nc, Input_Loop              ; yes, repeat input loop (char is not allowed)
6E67             4 58 ; char is valid as column
6E67 32 18 62    4 60 ld      (STR_MOVE+0), a             ; save char in player move
6E6A DD 36 00 47 4 61 ld      (ix+0), WHITE_FLASH0        ; restore attributes (no flash)
6E6E CD 64 6F    4 62 call    Print_Char                  ; print key pressed
6E71 0C          4 63 inc     c                           ; increment chars counter
6E72 2C          4 64 inc     l                           ; increment X position of current input screen location
6E73 DD 2C       4 65 inc     ixl                         ; increment X position of current input attr location
6E75 3E 2D       4 66 ld      a, '-'                      ; set dash char
6E77 CD 64 6F    4 67 call    Print_Char                  ; print key pressed
6E7A 2C          4 68 inc     l                           ; increment X position of current input screen location
6E7B DD 2C       4 69 inc     ixl                         ; increment X position of current input attr location
6E7D 18 C3       4 70 jr      Input_Start                 ; get next char (do until ENTER is pressed)
6E7F             4 71 Input_Numbers
6E7F             4 72 ; restrict second char to '1'-'7'
6E7F 08          4 74 ex      af, af'                     ; restore char
6E80 FE 31       4 75 cp      '1'                         ; is it < '1'?
6E82 38 C7       4 76 jr      c, Input_Loop               ; yes, repeat input loop (char is not allowed)
6E84 FE 38       4 77 cp      '8'                         ; is it >= '8'?
6E86 30 C3       4 78 jr      nc, Input_Loop              ; yes, repeat input loop (char is not allowed)
6E88             4 80 ; char is valid as row
6E88 32 1B 62    4 82 ld      (STR_MOVE+3), a             ; save char in player move
6E8B DD 36 00 47 4 83 ld      (ix+0), WHITE_FLASH0        ; restore attributes (no flash)
6E8F CD 64 6F    4 84 call    Print_Char                  ; print key pressed
6E92 0C          4 85 inc     c                           ; increment chars counter
6E93 2C          4 86 inc     l                           ; increment X position of current input screen location
6E94 DD 2C       4 87 inc     ixl                         ; increment X position of current input attr location
6E96 18 AA       4 88 jr      Input_Start                 ; get next char (do until ENTER is pressed)
6E98             4 90 ; player pressed "delete" (char '0')
6E98             4 91 Input_Delete
6E98 79          4 92 ld      a, c                        ; get char counter
6E99 B7          4 93 or      a                           ; is it 0?
6E9A 28 AF       4 94 jr      z, Input_Loop               ; repeat input loop (no chars to delete)
6E9C DD 36 00 47 4 96 ld      (ix+0), WHITE_FLASH0        ; restore attributes (no flash)
6EA0 B8          4 97 cp      b                           ; is it the first char?
6EA1 28 08       4 98 jr      z, Input_Delete_Char        ; yes, continue delete
6EA3 3E 20       4 99 ld      a, ' '                      ; empty char
6EA5 CD 64 6F    4 100 call    Print_Char                  ; delete cursor and last char
6EA8 2D          4 101 dec     l                           ; decrement X position of input screen location
6EA9 DD 2D       4 102 dec     ixl                         ; decrement X position of input attr location
6EAB             4 103 Input_Delete_Char
6EAB 0D          4 104 dec     c                           ; decrement char counter
6EAC 3E 20       4 105 ld      a, ' '                      ; empty char
6EAE CD 64 6F    4 106 call    Print_Char                  ; delete cursor and last char
6EB1 2D          4 107 dec     l                           ; decrement X position of player input screen location
6EB2 DD 2D       4 108 dec     ixl                         ; decrement X position of player input attr location
6EB4 18 8C       4 109 jr      Input_Start                 ; get next char
6EB6             4 111 ; player pressed ENTER
6EB6             4 112 Input_Enter
6EB6 79          4 113 ld      a, c                        ; check char counter  
6EB7 B8          4 114 cp      b                           ; is it < MAX_CHARS?
6EB8 38 91       4 115 jr      c, Input_Loop               ; yes, repeat input loop (move is incomplete)
6EBA DD 36 00 47 4 117 ld      (ix+0), WHITE_FLASH0        ; restore attributes (no flash)
6EBE 3E 20       4 118 ld      a, ' '                      ; empty char
6EC0 CD 64 6F    4 119 call    Print_Char                  ; delete cursor
6EC3 C9          4 120 ret
6EC4             4 122 ; ----------------------------------------------------------------------------------------------------------------------
6EC4             4 123 ; Input_Key_Scan: wait for a key pressed and return its ASCII code
6EC4             4 124 ;
6EC4             4 125 ;                           Bit
6EC4             4 126 ;  Port  |   0   |   1   |   2   |   3   |   4   |
6EC4             4 127 ;  ------+-------+-------+-------+-------+-------+
6EC4             4 128 ;  $FEFE | Shift |   Z   |   X   |   C   |   V   |
6EC4             4 129 ;  $FDFE |   A   |   S   |   D   |   F   |   G   |
6EC4             4 130 ;  $FBFE |   Q   |   W   |   E   |   R   |   T   |
6EC4             4 131 ;  $F7FE |   1   |   2   |   3   |   4   |   5   |
6EC4             4 132 ;  $EFFE |   0   |   9   |   8   |   7   |   6   |
6EC4             4 133 ;  $DFFE |   P   |   O   |   I   |   U   |   Y   |
6EC4             4 134 ;  $BFFE | Enter |   L   |   K   |   J   |   H   |
6EC4             4 135 ;  $7FFE | Space |  Sym  |   M   |   N   |   B   |
6EC4             4 136 ;
6EC4             4 137 ;  Bits are set to 0 for any key that is pressed and 1 for any key that is not pressed
6EC4             4 138 ;
6EC4             4 139 ; Input:    -
6EC4             4 140 ;
6EC4             4 141 ; Output:   A = ASCII code of key pressed
6EC4             4 142 ;
6EC4             4 143 ; Destroys: DE
6EC4             4 144 ; ----------------------------------------------------------------------------------------------------------------------
6EC4             4 145 Input_Key_Scan:
6EC4 C5          4 146 push    bc                          ; store registers
6EC5 E5          4 147 push    hl
6EC6             4 148 Input_Key_Released
6EC6 01 FE FE    4 149 ld      bc, $FEFE                   ; set keyboard port (see above)
6EC9             4 150 Input_Key_Released_Line
6EC9 ED 78       4 151 in      a, (c)                      ; read port
6ECB 2F          4 152 cpl                                 ; invert bits
6ECC E6 1F       4 153 and     %00011111                   ; check 0 to 4 bits
6ECE 20 F6       4 154 jr      nz, Input_Key_Released      ; repeat from the beginning until no key is pressed
6ED0 CB 00       4 155 rlc     b                           ; move BC to the next port
6ED2 38 F5       4 156 jr      c, Input_Key_Released_Line  ; repeat for each port
6ED4 11 05 00    4 157 ld      de, 5                       ; number of keys in each port (KEY_MAP displacement)
6ED7             4 158 Input_Key_Pressed_Begin
6ED7 21 D8 61    4 159 ld      hl, KEY_MAP                 ; HL points to KEY_MAP array
6EDA             4 160 Input_Key_Pressed_Line
6EDA ED 78       4 161 in      a, (c)                      ; read port
6EDC 2F          4 162 cpl                                 ; invert bits
6EDD E6 1F       4 163 and     %00011111                   ; check 0 to 4 bits
6EDF 20 08       4 164 jr      nz, Input_Key_Pressed       ; if any key is pressed, process it
6EE1 19          4 165 add     hl, de                      ; HL points to the next KEY_MAP block
6EE2 CB 00       4 166 rlc     b                           ; move BC to the next port
6EE4 38 F4       4 167 jr      c, Input_Key_Pressed_Line   ; repeat for each port
6EE6 18 EF       4 168 jr      Input_Key_Pressed_Begin     ; repeat from the beginning until any key is pressed
6EE8             4 169 Input_Key_Next
6EE8 23          4 170 inc     hl                          ; move HL to the next character
6EE9             4 171 Input_Key_Pressed
6EE9 1F          4 172 rra                                 ; rotate bits of port readed
6EEA 30 FC       4 173 jr      nc, Input_Key_Next          ; repeat until find the key pressed
6EEC 7E          4 174 ld      a, (hl)                     ; return key pressed (ASCII) in A
6EED E1          4 175 pop     hl                          ; restore registers
6EEE C1          4 176 pop     bc
6EEF C9          4 177 ret

; File #5: C:\Users\Antonio Luque\source\Repos\Hex\Z80CodeFiles\Print.z80asm

6EF0             5 1 ; ----------------------------------------------------------------------------------------------------------------------
6EF0             5 2 ; Print.z80asm
6EF0             5 3 ; Coded by Antonio Luque
6EF0             5 4 ; ----------------------------------------------------------------------------------------------------------------------
6EF0             5 6 CHAR_SET                equ     FONT-256                    ; address of character set data, adjusted for ASCII codes
6EF0             5 8 ; ----------------------------------------------------------------------------------------------------------------------
6EF0             5 9 ; Print_Players: print "Player" and "Speccy" strings in the corresponding positions
6EF0             5 10 ;
6EF0             5 11 ; Input:    A = player color (CYAN_COLOR or RED_COLOR)
6EF0             5 12 ;
6EF0             5 13 ; Output:   -
6EF0             5 14 ;
6EF0             5 15 ; Destroys: A, BC, DE, HL
6EF0             5 16 ; ----------------------------------------------------------------------------------------------------------------------
6EF0             5 17 Print_Players:
6EF0 11 24 62    5 18 ld      de, STR_PLAYER              ; DE points to "Player" string address
6EF3 01 1D 62    5 19 ld      bc, STR_SPECCY              ; BC points to "Speccy" string address
6EF6 21 02 50    5 20 ld      hl, $5002                   ; HL points to red string screen address
6EF9 FE 02       5 21 cp      RED_COLOR                   ; is player color red?
6EFB 28 06       5 22 jr      z, Print_Players_Strings    ; yes, print players strings
6EFD 11 1D 62    5 23 ld      de, STR_SPECCY              ; DE points to "Speccy" string address
6F00 01 24 62    5 24 ld      bc, STR_PLAYER              ; BC points to "Player" string address
6F03             5 25 Print_Players_Strings
6F03 CD 58 6F    5 26 call    Print_String                ; print "Player" or "Speccy"
6F06 50          5 27 ld      d, b                        ; DE points to "Player" or "Speccy" string address
6F07 59          5 28 ld      e, c
6F08 21 98 40    5 29 ld      hl, $4098                   ; HL points to cyan string screen address
6F0B 18 4B       5 30 jr      Print_String                ; print "Player" or "Speccy"
6F0D             5 32 ; ----------------------------------------------------------------------------------------------------------------------
6F0D             5 33 ; Print_Clear_Alert: clear a printed alert message below the current player input move
6F0D             5 34 ;
6F0D             5 35 ; Input:    -
6F0D             5 36 ; Output:   -
6F0D             5 37 ; Destroys: A, BC, DE, HL, IX
6F0D             5 38 ; ----------------------------------------------------------------------------------------------------------------------
6F0D             5 39 Print_Clear_Alert:
6F0D 11 49 62    5 40 ld      de, STR_EMPTY6              ; DE points to a 6 blanks string address
6F10 0E 47       5 41 ld      c, WHITE_FLASH0             ; set (clear) alert message color
6F12 18 02       5 42 jr      Print_Alert_XY              ; print (clear) alert string
6F14             5 44 ; ----------------------------------------------------------------------------------------------------------------------
6F14             5 45 ; Print_Alert: print an alert message below the current player input move
6F14             5 46 ;
6F14             5 47 ; Input:    DE = alert message string address
6F14             5 48 ;
6F14             5 49 ; Output:   -
6F14             5 50 ;
6F14             5 51 ; Uses:     TOKEN_COLOR (current token color)
6F14             5 52 ;
6F14             5 53 ; Destroys: A, BC, DE, HL, IX
6F14             5 54 ; ----------------------------------------------------------------------------------------------------------------------
6F14             5 55 Print_Alert:
6F14 0E C7       5 56 ld      c, WHITE_FLASH1             ; set alert message color
6F16             5 57 Print_Alert_XY
6F16 DD 21 A2 5A 5 58 ld      ix, $5AA2                   ; IX points to red alert string attribute address
6F1A 21 A2 50    5 59 ld      hl, $50A2                   ; HL points to red alert string screen address
6F1D 3A 9E 61    5 60 ld      a, (TOKEN_COLOR)            ; check current token color
6F20 FE 02       5 61 cp      RED_COLOR                   ; is token color red?
6F22 28 31       5 62 jr      z, Print_String_Color       ; yes, print alert string with color
6F24 DD 21 38 59 5 63 ld      ix, $5938                   ; IX points to cyan alert string attribute address
6F28 21 38 48    5 64 ld      hl, $4838                   ; HL points to cyan alert string screen address
6F2B 18 28       5 65 jr      Print_String_Color          ; print alert string with color
6F2D             5 67 ; ----------------------------------------------------------------------------------------------------------------------
6F2D             5 68 ; Print_Wait: print "WAIT" message at current player input move location 
6F2D             5 69 ;
6F2D             5 70 ; Input:    -
6F2D             5 71 ;
6F2D             5 72 ; Output:   -
6F2D             5 73 ;
6F2D             5 74 ; Destroys: A, BC, DE, HL, IX
6F2D             5 75 ; ----------------------------------------------------------------------------------------------------------------------
6F2D             5 76 Print_Wait:
6F2D 11 38 62    5 77 ld      de, STR_WAIT                ; DE points to "WAIT" string address
6F30 0E C7       5 78 ld      c, WHITE_FLASH1             ; set wait message color
6F32 18 0C       5 79 jr      Print_Move_XY               ; print wait string
6F34             5 81 ; ----------------------------------------------------------------------------------------------------------------------
6F34             5 82 ; Clear_Move: clear a printed player move at current player input move location 
6F34             5 83 ;
6F34             5 84 ; Input:    -
6F34             5 85 ;
6F34             5 86 ; Output:   -
6F34             5 87 ;
6F34             5 88 ; Destroys: A, BC, DE, HL, IX
6F34             5 89 ; ----------------------------------------------------------------------------------------------------------------------
6F34             5 90 Print_Clear_Move:
6F34 11 44 62    5 91 ld      de, STR_EMPTY4              ; DE points to a 4 blanks string address
6F37 0E 47       5 92 ld      c, WHITE_FLASH0             ; set (clear) move string color
6F39 18 05       5 93 jr      Print_Move_XY               ; print (clear) move string
6F3B             5 95 ; ----------------------------------------------------------------------------------------------------------------------
6F3B             5 96 ; Print_Move: print a formatted move at current player input move location 
6F3B             5 97 ;
6F3B             5 98 ; Input:    -
6F3B             5 99 ;
6F3B             5 100 ; Output:   -
6F3B             5 101 ;
6F3B             5 102 ; Uses:     TOKEN_COLOR (current token color)
6F3B             5 103 ;
6F3B             5 104 ; Destroys: A, BC, DE, HL, IX
6F3B             5 105 ; ----------------------------------------------------------------------------------------------------------------------
6F3B             5 106 Print_Move:
6F3B 11 18 62    5 107 ld      de, STR_MOVE                ; DE points to formatted move string address
6F3E 0E 47       5 108 ld      c, WHITE_FLASH0             ; set string color
6F40             5 109 Print_Move_XY
6F40 DD 21 82 5A 5 110 ld      ix, $5A82                   ; IX points to red move attribute address
6F44 21 83 50    5 111 ld      hl, $5083                   ; HL points to red move screen address
6F47 3A 9E 61    5 112 ld      a, (TOKEN_COLOR)            ; check current token color
6F4A FE 02       5 113 cp      RED_COLOR                   ; is token color red?
6F4C 28 07       5 114 jr      z, Print_String_Color       ; yes, print move string with color
6F4E DD 21 18 59 5 115 ld      ix, $5918                   ; IX points to cyan move attribute address
6F52 21 19 48    5 116 ld      hl, $4819                   ; HL points to cyan move screen address
6F55             5 117 Print_String_Color
6F55 CD 7A 78    5 118 call    Screen_Apply_Color          ; apply color to string area
6F58             5 119 ; ----------------------------------------------------------------------------------------------------------------------
6F58             5 120 ; Print_String: print a string on the screen
6F58             5 121 ; Based on assembler course by sromero: https://wiki.speccy.org/cursos/ensamblador/gfx4_fuentes
6F58             5 122 ;
6F58             5 123 ; Input:    DE = string address (ending with 0)
6F58             5 124 ;           HL = string screen address
6F58             5 125 ;
6F58             5 126 ; Output:   -
6F58             5 127 ;
6F58             5 128 ; Destroys: A, DE, HL
6F58             5 129 ; ----------------------------------------------------------------------------------------------------------------------
6F58             5 130 Print_String:
6F58 1A          5 131 ld      a, (de)                     ; get string character
6F59 B7          5 132 or      a                           ; is it 0? (end of string)
6F5A C8          5 133 ret     z                           ; yes, return
6F5B D5          5 134 push    de                          ; store pointer to string address
6F5C CD 64 6F    5 135 call    Print_Char                  ; print character
6F5F D1          5 136 pop     de                          ; restore pointer to string address
6F60 13          5 137 inc     de                          ; move DE to next string character
6F61 2C          5 138 inc     l                           ; move HL to next screen column
6F62 18 F4       5 139 jr      Print_String                ; repeat until end of string
6F64             5 141 ; ----------------------------------------------------------------------------------------------------------------------
6F64             5 142 ; Print_Char: print a character on the screen
6F64             5 143 ;
6F64             5 144 ; Input:    A  = character to print (ASCII)
6F64             5 145 ;           HL = character screen address
6F64             5 146 ;
6F64             5 147 ; Output:   -
6F64             5 148 ;
6F64             5 149 ; Destroys: A, DE
6F64             5 150 ; ----------------------------------------------------------------------------------------------------------------------
6F64             5 151 Print_Char:
6F64 11 00 68    5 152 ld      de, CHAR_SET                ; DE points to charset address
6F67             5 153 Print_Tile:
6F67 E5          5 154 push    hl                          ; store pointer to character/tile screen address
6F68 26 00       5 155 ld      h, 0                        ; set character/tile index in HL
6F6A 6F          5 156 ld      l, a
6F6B 29          5 157 add     hl, hl                      ; a character/tile is 8 bytes long
6F6C 29          5 158 add     hl, hl
6F6D 29          5 159 add     hl, hl
6F6E 19          5 160 add     hl, de                      ; move HL to character/tile address
6F6F EB          5 161 ex      de, hl                      ; DE points to character/tile address
6F70 E1          5 162 pop     hl                          ; restore pointer to character/tile screen address
6F71 C5          5 163 push    bc                          ; store BC register
6F72 4C          5 164 ld      c, h                        ; save high byte of character/tile screen address
6F73 06 08       5 165 ld      b, 8                        ; number of character/tile bytes (loop counter)
6F75             5 166 Print_Tile_Pixels
6F75 1A          5 167 ld      a, (de)                     ; get character/tile byte
6F76 77          5 168 ld      (hl), a                     ; put character/tile byte on screen
6F77 13          5 169 inc     de                          ; move DE to next character/tile byte
6F78 24          5 170 inc     h                           ; move HL down one pixel-line
6F79 10 FA       5 171 djnz    Print_Tile_Pixels           ; repeat for each character/tile bytes
6F7B 61          5 172 ld      h, c                        ; restore high byte of character/tile screen address
6F7C C1          5 173 pop     bc                          ; restore BC register
6F7D C9          5 174 ret

; File #6: C:\Users\Antonio Luque\source\Repos\Hex\Z80CodeFiles\Brainiac.z80asm

6F7E             6 1 ; ----------------------------------------------------------------------------------------------------------------------
6F7E             6 2 ; Brainiac.z80asm
6F7E             6 3 ; Coded by Einar Saukas: https://spectrumcomputing.co.uk/entry/31171/ZX-Spectrum/BRAINIAC
6F7E             6 4 ;
6F7E             6 5 ; Adapted for Hex game by Einar Saukas
6F7E             6 6 ; ----------------------------------------------------------------------------------------------------------------------
6F7E             6 8 MIN_VALUE               equ     0                           ; alphaBeta pruning minimum value
6F7E             6 9 MAX_VALUE               equ     255                         ; alphaBeta pruning maximum value
6F7E             6 11 ; ----------------------------------------------------------------------------------------------------------------------
6F7E             6 12 ; BRAINIAC_best_move: execute BRAINIAC algorithm to determine best choice for specified player's next move, according to
6F7E             6 13 ; specified AI difficulty level. This algorithm is implemented as recursive Minimax with alpha-beta pruning, that
6F7E             6 14 ; alternates between tree nodes maximizing score (speccy move) and minimizing it (player move) depending on recursion
6F7E             6 15 ; depth.
6F7E             6 16 ;
6F7E             6 17 ; Original source code by Einar Saukas: https://spectrumcomputing.co.uk/entry/31171/ZX-Spectrum/BRAINIAC
6F7E             6 18 ;
6F7E             6 19 ; Input:    A  = speccy side (FRIEND or ENEMY)
6F7E             6 20 ;           IX = candidates vector address
6F7E             6 21 ;
6F7E             6 22 ; Output:   E  = selected position (speccy move)
6F7E             6 23 ;
6F7E             6 24 ; Uses:     AI_PLAYER (speccy side)
6F7E             6 25 ;           AI_DEPTH (recursion depth level)
6F7E             6 26 ;
6F7E             6 27 ; Destroys: A, A', BC, D, HL, IX, IY
6F7E             6 28 ; ----------------------------------------------------------------------------------------------------------------------
6F7E             6 29 BRAINIAC_best_move:
6F7E 32 99 61    6 30 ld      (AI_PLAYER), a              ; save speccy side
6F81 CD 7A 74    6 32 call    PathFinder_Score            ; get board score
6F84 CD 23 75    6 33 call    PathFinder_Candidates       ; get candidates from board potentials
6F87             6 35 ; BRAINIAC start
6F87             6 36 AI_First_Candidate
6F87 DD 7E 00    6 37 ld      a, (ix+0)                   ; A is our first candidate
6F8A 5F          6 39 ld      e, a                        ; E = best speccy move (initialization)
6F8B 16 00       6 40 ld      d, MIN_VALUE                ; D = alphaMax
6F8D             6 42 AI_Main_Loop                                                ; for each candidate {
6F8D D5          6 43 push    de                          ;       store alphaMax and best speccy move
6F8E 26 7D       6 45 ld      h, CYAN_POSITIONS/256       ;       get and store candidate position on board
6F90 6F          6 46 ld      l, a
6F91 E5          6 47 push    hl
6F92 3A 99 61    6 49 ld      a, (AI_PLAYER)              ;       get speccy side
6F95 CD F6 70    6 50 call    PathFinder_PutToken         ;       BRAINIAC_play
6F98 1E FF       6 51 ld      e, MAX_VALUE                ;       E = betaMin
6F9A CD B3 6F    6 52 call    Alphabeta_Min               ;       A = alphabeta_min(alphaMax, betaMin)
6F9D E1          6 54 pop     hl                          ;       restore candidate position
6F9E CD FC 70    6 55 call    PathFinder_EraseToken       ;       BRAINIAC_undo
6FA1 D1          6 57 pop     de                          ;       restore alphaMax and best player node
6FA2 BA          6 59 cp      d
6FA3 38 04       6 60 jr      c, AI_Main_Next
6FA5 28 02       6 61 jr      z, AI_Main_Next             ;       if (A <= alphaMax) continue
6FA7 57          6 63 ld      d, a                        ;       alphaMax = A
6FA8 5D          6 64 ld      e, l                        ;       best move = E
6FA9             6 66 AI_Main_Next
6FA9 DD 2D       6 67 dec     ixl
6FAB DD 7E 00    6 68 ld      a, (ix+0)                   ;       A is our next candidate
6FAE B7          6 69 or      a                           ;       repeat until no more candidates
6FAF C2 8D 6F    6 70 jp      nz, AI_Main_Loop            ; }
6FB2 C9          6 71 ret
6FB3             6 73 ; ----------------------------------------------------------------------------------------------------------------------
6FB3             6 74 ; Alphabeta_Min: Process a tree node of the Minimax search tree with alpha-beta pruning, when it requires MINIMIZING
6FB3             6 75 ; Speccy's score.
6FB3             6 76 ;
6FB3             6 77 ; This implementation is different from conventional alpha-beta pruning because it returns the best (lowest) betaMin
6FB3             6 78 ; value obtained so far at this subtree depth (from previous sibling nodes), when it's even lower than the best (lowest)
6FB3             6 79 ; score at this tree node only. In practice that's OK, since the existence of a lower betaMin in a previous sibling node
6FB3             6 80 ; would make parent node discard the node's betaMin value and adopt the even lower betaMin value from a previous sibling
6FB3             6 81 ; node anyway. This change was useful to allow a highly optimized Assembly implementation with a more efficient register
6FB3             6 82 ; allocation. The only drawback was that, whenever a parent node obtains the same best score from 2 child nodes, it must
6FB3             6 83 ; always choose the child node evaluated first, since the other child node node may not really have the same score and
6FB3             6 84 ; could be just reproducing the best score from its sibling.
6FB3             6 85 ;
6FB3             6 86 ; Original source code by Einar Saukas: https://spectrumcomputing.co.uk/entry/31171/ZX-Spectrum/BRAINIAC
6FB3             6 87 ;
6FB3             6 88 ; Input:    D = alphaMax
6FB3             6 89 ;           E = betaMin
6FB3             6 90 ;
6FB3             6 91 ; Output:   A = "improved" betaMin
6FB3             6 92 ;           D = alphaMax
6FB3             6 93 ;           E = "improved" betaMin
6FB3             6 94 ;
6FB3             6 95 ; Uses:     AI_PLAYER (speccy side)
6FB3             6 96 ;           AI_DEPTH (recursion depth level)
6FB3             6 97 ;
6FB3             6 98 ; Destroys: BC, HL, IX, IY
6FB3             6 99 ; ----------------------------------------------------------------------------------------------------------------------
6FB3             6 100 Alphabeta_Min:
6FB3 D5          6 101 push    de
6FB4             6 103 ; check if last speccy move is a winner one
6FB4 CD 7A 74    6 105 call    PathFinder_Score            ; if (speccy won)
6FB7 B7          6 106 or      a
6FB8 C2 C2 6F    6 107 jp      nz, Alphabeta_Min_Candidates
6FBB 3A 9A 61    6 108 ld      a, (AI_DEPTH)
6FBE C6 C0       6 109 add     a, 192                      ;     return 192+depth
6FC0 D1          6 110 pop     de
6FC1 C9          6 111 ret
6FC2             6 113 Alphabeta_Min_Candidates
6FC2 CD 23 75    6 114 call    PathFinder_Candidates       ; find candidates for next move
6FC5 D1          6 115 pop     de
6FC6 DD 7E 00    6 117 ld      a, (ix+0)                   ; A is our first candidate
6FC9 21 9A 61    6 119 ld      hl, AI_DEPTH
6FCC 35          6 120 dec     (hl)                        ; depth--
6FCD CA 0D 70    6 121 jp      z, Heuristic_Min            ; if (depth == 0) return heuristic_min
6FD0             6 123 Alphabeta_Min_Loop                                          ; for each candidate {
6FD0 D5          6 124 push    de                          ;       store alphaMax and betaMin
6FD1 26 7D       6 126 ld      h, CYAN_POSITIONS/256       ;       get and store candidate position on board
6FD3 6F          6 127 ld      l, a
6FD4 E5          6 128 push    hl
6FD5 3A 99 61    6 130 ld      a, (AI_PLAYER)              ;       get speccy side
6FD8 EE 7C       6 131 xor     $7C                         ;       switch to player side
6FDA CD F6 70    6 132 call    PathFinder_PutToken         ;       BRAINIAC_play
6FDD CD 51 70    6 133 call    Alphabeta_Max               ;       A = alphabeta_max(alphaMax, betaMin)
6FE0 E1          6 135 pop     hl                          ;       restore candidate position
6FE1 CD FC 70    6 136 call    PathFinder_EraseToken       ;       BRAINIAC_undo
6FE4 D1          6 138 pop     de                          ;       restore alphaMax and betaMin
6FE5 BB          6 140 cp      e
6FE6 30 06       6 141 jr      nc, Alphabeta_Min_Next      ;       if (A >= betaMin) continue
6FE8 BA          6 143 cp      d
6FE9 38 12       6 144 jr      c, Alphabeta_Min_Exit
6FEB 28 10       6 145 jr      z, Alphabeta_Min_Exit       ;       if (A <= alphaMax) { depth++; return A }
6FED 5F          6 147 ld      e, a                        ;       betaMin = A
6FEE             6 149 Alphabeta_Min_Next
6FEE DD 2D       6 150 dec     ixl
6FF0 DD 7E 00    6 151 ld      a, (ix+0)                   ;       A is our next candidate
6FF3 B7          6 152 or      a                           ;       repeat until no more candidates
6FF4 C2 D0 6F    6 153 jp      nz, Alphabeta_Min_Loop      ; }
6FF7 7B          6 155 ld      a, e                        ; return betaMin
6FF8 21 9A 61    6 157 ld      hl, AI_DEPTH
6FFB 34          6 158 inc     (hl)                        ; depth++
6FFC C9          6 159 ret
6FFD             6 161 Alphabeta_Min_Exit
6FFD 5F          6 162 ld      e, a                        ; (discard remaining candidates)
6FFE AF          6 163 xor     a
6FFF             6 164 Alphabeta_Min_Skip
6FFF DD 2D       6 165 dec     ixl
7001 DD BE 00    6 166 cp      (ix+0)
7004 C2 FF 6F    6 167 jp      nz, Alphabeta_Min_Skip
7007 7B          6 168 ld      a, e
7008 21 9A 61    6 170 ld      hl, AI_DEPTH
700B 34          6 171 inc     (hl)                        ; (depth++)
700C C9          6 172 ret
700D             6 174 ; ----------------------------------------------------------------------------------------------------------------------
700D             6 175 ; Heuristic_Min: Specialized routine to process the lowest tree node (depth zero) of the Minimax search tree with alpha-
700D             6 176 ; beta pruning, when it requires MINIMIZING Speccy's score.
700D             6 177 ;
700D             6 178 ; Technically "Heuristic_Min" works exactly like "Alphabeta_Min_Loop", except it directly evaluates board for each child
700D             6 179 ; node instead of calling "Alphabeta_Max" recursively. Although it would be easier to just let it invoke "Alphabeta_Max"
700D             6 180 ; again to obtain the evaluated board, this simple optimization is responsible for making BRAINIAC almost 2 seconds
700D             6 181 ; faster.
700D             6 182 ;
700D             6 183 ; Original source code by Einar Saukas: https://spectrumcomputing.co.uk/entry/31171/ZX-Spectrum/BRAINIAC
700D             6 184 ;
700D             6 185 ; Input:    A = first candidate
700D             6 186 ;           D = alphaMax
700D             6 187 ;           E = betaMin
700D             6 188 ;
700D             6 189 ; Output:   A = "improved" betaMin
700D             6 190 ;           D = alphaMax
700D             6 191 ;           E = "improved" betaMin
700D             6 192 ;
700D             6 193 ; Uses:     AI_PLAYER (speccy side)
700D             6 194 ;           AI_DEPTH (recursion depth level)
700D             6 195 ;
700D             6 196 ; Destroys: BC, HL, IX, IY
700D             6 197 ; ----------------------------------------------------------------------------------------------------------------------
700D             6 198 Heuristic_Min:                                              ; for each candidate {
700D D5          6 199 push    de                          ;       store alphaMax and betaMin
700E 26 7D       6 201 ld      h, CYAN_POSITIONS/256       ;       get and store candidate position on board
7010 6F          6 202 ld      l, a
7011 E5          6 203 push    hl
7012 3A 99 61    6 205 ld      a, (AI_PLAYER)              ;       get speccy side
7015 EE 7C       6 206 xor     $7C                         ;       switch to player side
7017 CD F6 70    6 207 call    PathFinder_PutToken         ;       BRAINIAC_play
701A CD 7A 74    6 209 call    PathFinder_Score            ;       if (player won)
701D FE FF       6 210 cp      -1
701F C2 24 70    6 211 jp      nz, Heuristic_Min_Continue
7022 3E 40       6 212 ld      a, 64                       ;           A = 64
7024             6 213 Heuristic_Min_Continue
7024 E1          6 214 pop     hl
7025 CD FC 70    6 215 call    PathFinder_EraseToken       ;       BRAINIAC_undo
7028 D1          6 217 pop     de
7029 BB          6 219 cp      e
702A 30 06       6 220 jr      nc, Heuristic_Min_Next      ;       if (A >= betaMin) continue
702C BA          6 222 cp      d
702D 38 12       6 223 jr      c, Heuristic_Min_Exit
702F 28 10       6 224 jr      z, Heuristic_Min_Exit       ;       if (A <= alphaMax) { depth++; return A }
7031 5F          6 226 ld      e, a                        ;       betaMin = A
7032             6 228 Heuristic_Min_Next
7032 DD 2D       6 229 dec     ixl
7034 DD 7E 00    6 230 ld      a, (ix+0)                   ;       A is our next candidate
7037 B7          6 231 or      a                           ;       repeat until no more candidates
7038 C2 0D 70    6 232 jp      nz, Heuristic_Min           ; }
703B 7B          6 234 ld      a, e                        ; return betaMin
703C 21 9A 61    6 236 ld      hl, AI_DEPTH
703F 34          6 237 inc     (hl)                        ; depth++
7040 C9          6 238 ret
7041             6 240 Heuristic_Min_Exit
7041 5F          6 241 ld      e, a                        ; (discard remaining candidates)
7042 AF          6 242 xor     a
7043             6 243 Heuristic_Min_Skip
7043 DD 2D       6 244 dec     ixl
7045 DD BE 00    6 245 cp      (ix+0)
7048 C2 43 70    6 246 jp      nz, Heuristic_Min_Skip
704B 7B          6 247 ld      a, e
704C 21 9A 61    6 249 ld      hl, AI_DEPTH
704F 34          6 250 inc     (hl)                        ; (depth++)
7050 C9          6 251 ret
7051             6 253 ; ----------------------------------------------------------------------------------------------------------------------
7051             6 254 ; Alphabeta_Max: Process a tree node of the Minimax search tree with alpha-beta pruning, when it requires MAXIMIZING
7051             6 255 ; Speccy's score.
7051             6 256 ;
7051             6 257 ; This implementation is different from conventional alpha-beta pruning because it returns the best (highest) alphaMax
7051             6 258 ; value obtained so far at this subtree depth (from previous sibling nodes), when it's even higher than the best
7051             6 259 ; (highest) score at this tree node only. In practice that's OK, since the existence of a higher alphaMax in a previous
7051             6 260 ; sibling node would make parent node discard the node's alphaMax value and adopt the even higher alphaMax value from a
7051             6 261 ; previous sibling node anyway. This change was useful to allow a highly optimized Assembly implementation with a more
7051             6 262 ; efficient register allocation. The only drawback was that, whenever a parent node obtains the same best score from 2
7051             6 263 ; child nodes, it must always choose the child node evaluated first, since the other child node node may not really have
7051             6 264 ; the same score and could be just reproducing the best score from its sibling.
7051             6 265 ;
7051             6 266 ; Original source code by Einar Saukas: https://spectrumcomputing.co.uk/entry/31171/ZX-Spectrum/BRAINIAC
7051             6 267 ;
7051             6 268 ; Input:    D = alphaMax
7051             6 269 ;           E = betaMin
7051             6 270 ;
7051             6 271 ; Output:   A = "improved" alphaMax
7051             6 272 ;           D = "improved" alphaMax
7051             6 273 ;           E = betaMin
7051             6 274 ;
7051             6 275 ; Uses:     AI_PLAYER (speccy side)
7051             6 276 ;           AI_DEPTH (recursion depth level)
7051             6 277 ;
7051             6 278 ; Destroys: BC, HL, IX, IY
7051             6 279 ; ----------------------------------------------------------------------------------------------------------------------
7051             6 280 Alphabeta_Max:
7051 D5          6 281 push    de
7052             6 283 ; check if last player move is a winner one
7052 CD 7A 74    6 285 call    PathFinder_Score            ; if (player won)
7055 FE FF       6 286 cp      -1
7057 C2 62 70    6 287 jp      nz, Alphabeta_Max_Candidates
705A 3A 9A 61    6 288 ld      a, (AI_DEPTH)
705D 2F          6 289 cpl
705E C6 41       6 290 add     a, 64+1                     ;     return 64-depth
7060 D1          6 291 pop     de
7061 C9          6 292 ret
7062             6 294 Alphabeta_Max_Candidates
7062 CD 23 75    6 295 call    PathFinder_Candidates       ; find candidates for next move
7065 D1          6 296 pop     de
7066 DD 7E 00    6 298 ld      a, (ix+0)                   ; A is our first candidate
7069 21 9A 61    6 300 ld      hl, AI_DEPTH
706C 35          6 301 dec     (hl)                        ; depth--
706D CA AB 70    6 302 jp      z, Heuristic_Max            ; if (depth == 0) return heuristic_max
7070             6 304 Alphabeta_Max_Loop                                          ; for each candidate {
7070 D5          6 305 push    de                          ;       store alphaMax and betaMin
7071 26 7D       6 307 ld      h, CYAN_POSITIONS/256       ;       get and store candidate position on board
7073 6F          6 308 ld      l, a
7074 E5          6 309 push    hl
7075 3A 99 61    6 311 ld      a, (AI_PLAYER)              ;       get speccy side
7078 CD F6 70    6 312 call    PathFinder_PutToken         ;       BRAINIAC_play
707B CD B3 6F    6 313 call    Alphabeta_Min               ;       A = alphabeta_min(alphaMax, betaMin)
707E E1          6 315 pop     hl                          ;       restore candidate position
707F CD FC 70    6 316 call    PathFinder_EraseToken       ;       BRAINIAC_undo
7082 D1          6 318 pop     de                          ;       restore alphaMax and betaMin
7083 BA          6 320 cp      d
7084 38 06       6 321 jr      c, Alphabeta_Max_Next
7086 28 04       6 322 jr      z, Alphabeta_Max_Next       ;       if (A <= alphaMax) continue
7088 BB          6 324 cp      e
7089 30 10       6 325 jr      nc, Alphabeta_Max_Exit      ;       if (A >= betaMin) { depth++; return A }
708B 57          6 327 ld      d, a                        ;       alphaMax = A
708C             6 329 Alphabeta_Max_Next
708C DD 2D       6 330 dec     ixl
708E DD 7E 00    6 331 ld      a, (ix+0)                   ;       A is our next candidate
7091 B7          6 332 or      a                           ;       repeat until no more candidates
7092 C2 70 70    6 333 jp      nz, Alphabeta_Max_Loop      ; }
7095 7A          6 335 ld      a, d                        ; return alphaMax
7096 21 9A 61    6 337 ld      hl, AI_DEPTH
7099 34          6 338 inc     (hl)                        ; depth++
709A C9          6 339 ret
709B             6 341 Alphabeta_Max_Exit
709B 57          6 342 ld      d, a                        ; (discard remaining candidates)
709C AF          6 343 xor     a
709D             6 344 Alphabeta_Max_Skip
709D DD 2D       6 345 dec     ixl
709F DD BE 00    6 346 cp      (ix+0)
70A2 C2 9D 70    6 347 jp      nz, Alphabeta_Max_Skip
70A5 7A          6 348 ld      a, d
70A6 21 9A 61    6 350 ld      hl, AI_DEPTH
70A9 34          6 351 inc     (hl)                        ; (depth++)
70AA C9          6 352 ret
70AB             6 354 ; ----------------------------------------------------------------------------------------------------------------------
70AB             6 355 ; Heuristic_Max: Specialized routine to process the lowest tree node (depth zero) of the Minimax search tree with alpha-
70AB             6 356 ; beta pruning, when it requires MAXIMIZING Speccy's score.
70AB             6 357 ;
70AB             6 358 ; Technically "Heuristic_Max" works exactly like "Alphabeta_Max_Loop", except it directly evaluates board for each child
70AB             6 359 ; node instead of calling "Alphabeta_Min" recursively. Although it would be easier to just let it invoke "Alphabeta_Min"
70AB             6 360 ; again to obtain the evaluated board, this simple optimization is responsible for making BRAINIAC almost 2 seconds
70AB             6 361 ; faster.
70AB             6 362 ;
70AB             6 363 ; Original source code by Einar Saukas: https://spectrumcomputing.co.uk/entry/31171/ZX-Spectrum/BRAINIAC
70AB             6 364 ;
70AB             6 365 ; Input:    A = first candidate
70AB             6 366 ;           D = alphaMax
70AB             6 367 ;           E = betaMin
70AB             6 368 ;
70AB             6 369 ; Returns:  A = "improved" alphaMax
70AB             6 370 ;           D = "improved" alphaMax
70AB             6 371 ;           E = betaMin
70AB             6 372 ;
70AB             6 373 ; Uses:     AI_PLAYER (speccy side)
70AB             6 374 ;           AI_DEPTH (recursion depth level)
70AB             6 375 ;
70AB             6 376 ; Destroys: BC, HL, IX, IY
70AB             6 377 ; ----------------------------------------------------------------------------------------------------------------------
70AB             6 378 Heuristic_Max:                                              ; for each candidate {
70AB D5          6 379 push    de                          ;       store alphaMax and betaMin
70AC 26 7D       6 381 ld      h, CYAN_POSITIONS/256       ;       get and store candidate position on board
70AE 6F          6 382 ld      l, a
70AF E5          6 383 push    hl
70B0 3A 99 61    6 385 ld      a, (AI_PLAYER)              ;       get speccy side
70B3 CD F6 70    6 386 call    PathFinder_PutToken         ;       (BRAINIAC_play)
70B6 CD 7A 74    6 388 call    PathFinder_Score            ;       if (speccy won)
70B9 B7          6 389 or      a
70BA C2 BF 70    6 390 jp      nz, Heuristic_Max_Continue
70BD 3E C0       6 391 ld      a, 192                      ;           A = 192
70BF             6 392 Heuristic_Max_Continue
70BF E1          6 393 pop     hl                          ;       restore candidate position
70C0 CD FC 70    6 394 call    PathFinder_EraseToken       ;       BRAINIAC_undo
70C3 D1          6 396 pop     de                          ;       restore alphaMax and betaMin
70C4 BA          6 398 cp      d
70C5 38 06       6 399 jr      c, Heuristic_Max_Next
70C7 28 04       6 400 jr      z, Heuristic_Max_Next       ;       if (A <= alphaMax) continue
70C9 BB          6 402 cp      e
70CA 30 10       6 403 jr      nc, Heuristic_Max_Exit      ;       if (A >= betaMin) { depth++; return A }
70CC 57          6 405 ld      d, a                        ;       alphaMax = A
70CD             6 407 Heuristic_Max_Next
70CD DD 2D       6 408 dec     ixl
70CF DD 7E 00    6 409 ld      a, (ix+0)                   ;       A is our next candidate
70D2 B7          6 410 or      a                           ;       repeat until no more candidates
70D3 C2 AB 70    6 411 jp      nz, Heuristic_Max           ; }
70D6 7A          6 413 ld      a, d                        ; return alphaMax
70D7 21 9A 61    6 415 ld      hl, AI_DEPTH
70DA 34          6 416 inc     (hl)                        ; depth++
70DB C9          6 417 ret
70DC             6 419 Heuristic_Max_Exit
70DC 57          6 420 ld      d, a                        ; (discard remaining candidates)
70DD AF          6 421 xor     a
70DE             6 422 Heuristic_Max_Skip
70DE DD 2D       6 423 dec     ixl
70E0 DD BE 00    6 424 cp      (ix+0)
70E3 C2 DE 70    6 425 jp      nz, Heuristic_Max_Skip
70E6 7A          6 426 ld      a, d
70E7 21 9A 61    6 428 ld      hl, AI_DEPTH
70EA 34          6 429 inc     (hl)                        ; (depth++)
70EB C9          6 430 ret

; File #7: C:\Users\Antonio Luque\source\Repos\Hex\Z80CodeFiles\PathFinder.z80asm

70EC             7 1 ; ----------------------------------------------------------------------------------------------------------------------
70EC             7 2 ; PathFinder.z80asm
70EC             7 3 ; Coded by Einar Saukas: https://spectrumcomputing.co.uk/entry/28178/ZX-Spectrum/PATHFINDER
70EC             7 4 ;
70EC             7 5 ; Adapted by Antonio Luque and Einar Saukas to be used as heuristic in Hex game.
70EC             7 6 ; Based on chapter 5 of Jack van Rijswijck's thesis - https://webdocs.cs.ualberta.ca/~hayward/theses/jackmsc.pdf
70EC             7 7 ; ----------------------------------------------------------------------------------------------------------------------
70EC             7 9 CYAN                    equ     $01                         ; cyan side
70EC             7 10 RED                     equ     $02                         ; red side
70EC             7 11 WIDTH                   equ     $08                         ; distance to up-left/down-right neighbor
70EC             7 12 EMPTY                   equ     $00                         ; empty positions on the board
70EC             7 13 SKIPPED                 equ     $01                         ; skipped positions on the board
70EC             7 14 FRIEND                  equ     $02                         ; positions occupied by friendly tokens on the board
70EC             7 15 VICTORY                 equ     $03                         ; internal value if victory
70EC             7 16 ENEMY                   equ     $7E                         ; positions occupied by opponent tokens on the board
70EC             7 18 CYAN_POSITIONS          equ     $7D00                       ; a 256-aligned memory area reserved for cyan positions
70EC             7 19 RED_POSITIONS           equ     $7E00                       ; a 256-aligned memory area reserved for red positions
70EC             7 20 CANDIDATES              equ     $7F00                       ; a 256-aligned memory area reserved to store candidates
70EC             7 22 ; ----------------------------------------------------------------------------------------------------------------------
70EC             7 23 ; PathFinder_Friend: return if current player is FRIEND or ENEMY from the perspective of the cyan player
70EC             7 24 ;
70EC             7 25 ; Input:    -
70EC             7 26 ;
70EC             7 27 ; Output:   A = FRIEND, if current token color is cyan
70EC             7 28 ;           A = ENEMY, if current token color is red
70EC             7 29 ;
70EC             7 30 ; Uses:     TOKEN_COLOR (current token color)
70EC             7 31 ;
70EC             7 32 ; Destroys: -
70EC             7 33 ; ----------------------------------------------------------------------------------------------------------------------
70EC             7 34 PathFinder_Friend:
70EC 3A 9E 61    7 35 ld      a, (TOKEN_COLOR)            ; get current player color
70EF 1F          7 36 rra                                 ; is current player color cyan?
70F0 3E 02       7 37 ld      a, FRIEND                   ; set FRIEND in A
70F2 D8          7 38 ret     c                           ; yes, return FRIEND 
70F3 EE 7C       7 39 xor     $7C                         ; no, return ENEMY
70F5 C9          7 40 ret
70F6             7 42 ; ----------------------------------------------------------------------------------------------------------------------
70F6             7 43 ; PathFinder_PutToken: put a token on both CYAN_POSITIONS and RED_POSITIONS areas
70F6             7 44 ;
70F6             7 45 ; Input:    A  = either FRIEND or ENEMY from the perspective of cyan player
70F6             7 46 ;           HL = CYAN_POSITIONS token address
70F6             7 47 ;
70F6             7 48 ; Output:   -
70F6             7 49 ;
70F6             7 50 ; Destroys: -
70F6             7 51 ; ----------------------------------------------------------------------------------------------------------------------
70F6             7 52 PathFinder_PutToken:
70F6 77          7 53 ld      (hl), a                     ; put token at cyan position
70F7 24          7 54 inc     h                           ; move HL to red position address
70F8 EE 7C       7 55 xor     $7C                         ; invert side
70FA 77          7 56 ld      (hl), a                     ; put token at red position
70FB C9          7 57 ret
70FC             7 59 ; ----------------------------------------------------------------------------------------------------------------------
70FC             7 60 ; PathFinder_EraseToken: erase a token from both CYAN_POSITIONS and RED_POSITIONS areas
70FC             7 61 ;
70FC             7 62 ; Input:    HL = CYAN_POSITIONS token address
70FC             7 63 ;
70FC             7 64 ; Output:   -
70FC             7 65 ;
70FC             7 66 ; Destroys: -
70FC             7 67 ; ----------------------------------------------------------------------------------------------------------------------
70FC             7 68 PathFinder_EraseToken:
70FC 36 00       7 69 ld      (hl), EMPTY                 ; erase token at cyan position
70FE 24          7 70 inc     h                           ; move HL to red position address
70FF 36 00       7 71 ld      (hl), EMPTY                 ; erase token at red position
7101 C9          7 72 ret
7102             7 74 ; ----------------------------------------------------------------------------------------------------------------------
7102             7 75 ; PathFinder_CopyPositions: copy from CYAN_POSITIONS or RED_POSITIONS area to its corresponding board
7102             7 76 ;
7102             7 77 ; Input:    DE = cyan or red board address (destiny)
7102             7 78 ;           HL = CYAN_POSITIONS or RED_POSITIONS address (origin)
7102             7 79 ;
7102             7 80 ; Output:   -
7102             7 81 ;
7102             7 82 ; Destroys: BC, DE, HL
7102             7 83 ; ----------------------------------------------------------------------------------------------------------------------
7102             7 84 PathFinder_CopyPositions:
7102 01 31 00    7 85 ld      bc, 7*7                     ; number of positions to be copied
7105             7 86 PathFinder_CopyLoop
7105 2C          7 87 inc     l                           ; skip borders on positions
7106 2C          7 88 inc     l
7107 1C          7 89 inc     e                           ; skip borders on board
7108 1C          7 90 inc     e
7109 ED A0       7 91 ldi                                 ; copy a row of 7 positions
710B ED A0       7 92 ldi
710D ED A0       7 93 ldi
710F ED A0       7 94 ldi
7111 ED A0       7 95 ldi
7113 ED A0       7 96 ldi
7115 ED A0       7 97 ldi
7117 EA 05 71    7 98 jp      pe, PathFinder_CopyLoop     ; repeat for each row
711A C9          7 99 ret
711B             7 101 ; ----------------------------------------------------------------------------------------------------------------------
711B             7 102 ; PathFinder_Update: update current board position during heuristic function evaluation
711B             7 103 ;
711B             7 104 ; This is an approach to Jack van Rijswijck's "two-distance" metric. The two-distance is defined as "one more than the
711B             7 105 ; second lowest distance of p's neighbors to q, with the proviso that the two-distance equals 1 if p and q are directly
711B             7 106 ; adjacent".
711B             7 107 ;
711B             7 108 ; The position will be updated with a number that indicates two-distance from goal (stored in lowest 6 bits), and a flag
711B             7 109 ; that indicates a position occupied by a friendly token (stored in 6th bit). Therefore this position is updated as
711B             7 110 ; follows, depending on current content:
711B             7 111 ;
711B             7 112 ; * SKIPPED: 1 + distance of neighbor closest to goal
711B             7 113 ; * FRIEND:  distance of neighbor closest to goal
711B             7 114 ; * EMPTY:   1 + distance of neighbor closest to goal, if current distance is friendly, SKIPPED otherwise
711B             7 115 ;
711B             7 116 ; Input:    Z  = flag set when (HL) is FRIEND
711B             7 117 ;           C  = current distance (also with a flag at 6th bit that indicates a friendly position)
711B             7 118 ;           HL = current position address (on either cyan boards or red boards)
711B             7 119 ;
711B             7 120 ; Output:   -
711B             7 121 ;
711B             7 122 ; Destroys: B, DE
711B             7 123 ; ----------------------------------------------------------------------------------------------------------------------
711B             7 124 PathFinder_Update:
711B 28 12       7 125 jr      z, PathFinder_Friendly      ; if Z flag is set, update friend distance
711D 46          7 126 ld      b, (hl)                     ; check current position
711E 10 1A       7 127 djnz    PathFinder_EMPTY
7120             7 128 ; if (HL) = SKIPPED, then set (HL) = C+1 and insert HL at queue tail
7120             7 129 PathFinder_Skipped:
7120 71          7 130 ld      (hl), c                     ; save current distance in current position
7121 34          7 131 inc     (hl)                        ; increment distance of current position
7122 CB B6       7 132 res     6, (hl)                     ; reset friendly token flag
7124 EB          7 133 ex      de, hl                      ; store current position in DE
7125             7 134 @Queue_Tail
7125 21 00 00    7 135 ld      hl, $0000                   ; HL points to queue tail address (changed before call)
7128 2C          7 136 inc     l                           ; move queue tail down
7129 73          7 137 ld      (hl), e                     ; store position into queue tail
712A 22 26 71    7 138 ld      (@Queue_Tail+1), hl         ; update queue tail
712D EB          7 139 ex      de, hl                      ; restore current position
712E C9          7 140 ret
712F             7 141 ; if (HL) = FRIEND, then set (HL) = C and insert HL at queue head
712F             7 142 PathFinder_Friendly
712F 71          7 143 ld      (hl), c                     ; save current distance in current position
7130 CB F6       7 144 set     6, (hl)                     ; set friendly token flag
7132 45          7 145 ld      b, l                        ; save current position in B
7133 D1          7 146 pop     de                          ; preserve RET address
7134 E3          7 147 ex      (sp), hl                    ; retrieve queue head
7135 70          7 148 ld      (hl), b                     ; push this position into queue head
7136 2D          7 149 dec     l                           ; move queue head up
7137 E3          7 150 ex      (sp), hl                    ; update queue head
7138 D5          7 151 push    de                          ; restore RET address
7139 C9          7 152 ret
713A             7 153 ; if (HL) = EMPTY, then set (HL) = C+1 if current distance is friendly, set (HL) = SKIPPED otherwise
713A             7 154 PathFinder_EMPTY
713A CB 71       7 155 bit     6, c                        ; is current distance friendly?
713C 20 E2       7 156 jr      nz, PathFinder_Skipped      ; yes, set (HL) = C+1 and insert HL in queue tail
713E 34          7 157 inc     (hl)                        ; set (HL) = SKIPPED to find the second lowest distance
713F C9          7 158 ret
7140             7 160 ; ----------------------------------------------------------------------------------------------------------------------
7140             7 161 ; PathFinder_Cyan_UpDown: set up 'Path_Finder' routine to calculate CYAN two-distances from UP to DOWN edge
7140             7 162 ;
7140             7 163 ; Input:    -
7140             7 164 ;
7140             7 165 ; Output:   A = -1, if down edge couldn't be reached
7140             7 166 ;           A =  0, if there is chain of connected cyan tokens between the two edges
7140             7 167 ;           A = last edge position visited (-1), otherwise
7140             7 168 ;
7140             7 169 ; Uses:     @Queue_Tail (queue pointer in 'PathFinder_Update' routine)
7140             7 170 ;
7140             7 171 ; Destroys: BC, DE, HL, IY
7140             7 172 ; ----------------------------------------------------------------------------------------------------------------------
7140             7 173 PathFinder_Cyan_UpDown:
7140 21 07 7D    7 174 ld      hl, CYAN_POSITIONS+7        ; HL points to cyan positions address (up-right corner)
7143 11 07 61    7 175 ld      de, CYAN_BOARD_UP_DOWN+7    ; DE points to cyan board up-down address (up-right corner)
7146 CD 02 71    7 176 call    PathFinder_CopyPositions    ; copy from cyan positions to cyan board up-down
7149             7 178 ; entry point for PathFinder_VictoryPath
7149             7 179 PathFinder_Cyan_CheckPath:
7149 FD 21 00 09 7 180 ld      iy, $0900                   ; IYH = distance to check edge positions
714D             7 181 ; IYL = last edge position visited
714D 21 00 60    7 182 ld      hl, CYAN_QUEUE_AREA         ; HL points to cyan queue area address
7150 22 26 71    7 183 ld      (@Queue_Tail+1), hl         ; initialize cyan queue tail
7153 E5          7 184 push    hl                          ; store cyan queue head
7154             7 186 ; set up cyan board (up-down) start positions distances
7154 21 09 61    7 188 ld      hl, CYAN_BOARD_UP_DOWN+9    ; HL points to cyan board up-down address (1st position)
7157 0E 43       7 189 ld      c, VICTORY+$40              ; set start positions distance + friendly flag
7159 3E 02       7 190 ld      a, FRIEND                   ; set distance to compare with
715B BE          7 191 cp      (hl)                        ; check 1st start position distance
715C D4 1B 71    7 192 call    nc, PathFinder_Update       ; if FRIEND >= distance, update distance
715F 2C          7 193 inc     l                           ; move HL to next start position address
7160 BE          7 194 cp      (hl)                        ; check 2nd start position distance
7161 D4 1B 71    7 195 call    nc, PathFinder_Update       ; (repeat for each start position)
7164 2C          7 196 inc     l
7165 BE          7 197 cp      (hl)                        ; check 3rd start position distance
7166 D4 1B 71    7 198 call    nc, PathFinder_Update
7169 2C          7 199 inc     l
716A BE          7 200 cp      (hl)                        ; check 4th start position distance
716B D4 1B 71    7 201 call    nc, PathFinder_Update
716E 2C          7 202 inc     l
716F BE          7 203 cp      (hl)                        ; check 5th start position distance
7170 D4 1B 71    7 204 call    nc, PathFinder_Update
7173 2C          7 205 inc     l
7174 BE          7 206 cp      (hl)                        ; check 6th start position distance
7175 D4 1B 71    7 207 call    nc, PathFinder_Update
7178 2C          7 208 inc     l
7179 C3 66 72    7 209 jp      Path_Finder_First           ; calculate two-distances of cyan board (up-down)
717C             7 211 ; ----------------------------------------------------------------------------------------------------------------------
717C             7 212 ; PathFinder_Cyan_DownUp: set up Path_Finder routine to calculate CYAN two-distance from DOWN to UP edge
717C             7 213 ;
717C             7 214 ; Input:    -
717C             7 215 ;
717C             7 216 ; Output:   A = -1, if up edge couldn't be reached
717C             7 217 ;           A =  0, if there is chain of connected cyan tokens between the two edges
717C             7 218 ;           A = last edge position visited (-1), otherwise
717C             7 219 ;
717C             7 220 ; Uses:     @Queue_Tail (queue pointer in 'PathFinder_Update' routine)
717C             7 221 ;
717C             7 222 ; Destroys: BC, DE, HL, IY
717C             7 223 ; ----------------------------------------------------------------------------------------------------------------------
717C             7 224 PathFinder_Cyan_DownUp:
717C 21 07 7D    7 225 ld      hl, CYAN_POSITIONS+7        ; HL points to cyan positions address (up-right corner)
717F 11 4F 61    7 226 ld      de, CYAN_BOARD_DOWN_UP-1    ; DE points to cyan board down-up address (up-right corner)
7182 CD 02 71    7 227 call    PathFinder_CopyPositions    ; copy from cyan positions to cyan board down-up
7185 FD 21 00 F7 7 229 ld      iy, $F700                   ; IYH = distance to check edge positions
7189             7 230 ; IYL = last edge position visited
7189 2A 26 71    7 231 ld      hl, (@Queue_Tail+1)         ; retreive cyan queue tail
718C E5          7 232 push    hl                          ; initialize cyan queue head
718D             7 234 ; set up cyan board (down-up) start positions distances
718D EB          7 236 ex      de, hl                      ; (take advantage of last "CopyPositions" execution)
718E 2D          7 237 dec     l                           ; move HL to cyan boad down-up address (last position)
718F 0E 43       7 238 ld      c, VICTORY+$40              ; set start positions distance + friendly flag
7191 3E 02       7 239 ld      a, FRIEND                   ; set distance to compare with
7193 BE          7 240 cp      (hl)                        ; check 1st start position distance
7194 D4 1B 71    7 241 call    nc, PathFinder_Update       ; if FRIEND >= distance, update distance
7197 2D          7 242 dec     l                           ; move HL to next start position address
7198 BE          7 243 cp      (hl)                        ; check 2nd start position distance
7199 D4 1B 71    7 244 call    nc, PathFinder_Update       ; (repeat for each start position)
719C 2D          7 245 dec     l
719D BE          7 246 cp      (hl)                        ; check 3rd start position distance
719E D4 1B 71    7 247 call    nc, PathFinder_Update
71A1 2D          7 248 dec     l
71A2 BE          7 249 cp      (hl)                        ; check 4th start position distance
71A3 D4 1B 71    7 250 call    nc, PathFinder_Update
71A6 2D          7 251 dec     l
71A7 BE          7 252 cp      (hl)                        ; check 5th start position distance
71A8 D4 1B 71    7 253 call    nc, PathFinder_Update
71AB 2D          7 254 dec     l
71AC BE          7 255 cp      (hl)                        ; check 6th start position distance
71AD D4 1B 71    7 256 call    nc, PathFinder_Update
71B0 2D          7 257 dec     l
71B1 C3 66 72    7 258 jp      Path_Finder_First           ; calculate two-distances of cyan board (down-up)
71B4             7 260 ; ----------------------------------------------------------------------------------------------------------------------
71B4             7 261 ; PathFinder_Red_LeftRight: set up Path_Finder routine to calculate RED two-distance from LEFT to RIGHT edge
71B4             7 262 ;
71B4             7 263 ; Input:    -
71B4             7 264 ;
71B4             7 265 ; Output:   A = -1, if right edge couldn't be reached
71B4             7 266 ;           A =  0, if there is chain of connected cyan tokens between the two edges
71B4             7 267 ;           A = last edge position visited (-1), otherwise
71B4             7 268 ;
71B4             7 269 ; Uses:     @Queue_Tail (queue pointer in 'PathFinder_Update' routine)
71B4             7 270 ;
71B4             7 271 ; Destroys: BC, DE, HL, IY
71B4             7 272 ; ----------------------------------------------------------------------------------------------------------------------
71B4             7 273 PathFinder_Red_LeftRight:
71B4 21 07 7E    7 274 ld      hl, RED_POSITIONS+7         ; HL points to red positions address (up-right corner)
71B7 11 07 64    7 275 ld      de, RED_BOARD_LEFT_RIGHT+7  ; DE points to red board left-right addr. (up-right corner)
71BA CD 02 71    7 276 call    PathFinder_CopyPositions    ; copy from red positions to red board left-right
71BD             7 278 ; entry point for PathFinder_VictoryPath
71BD             7 279 PathFinder_Red_CheckPath
71BD FD 21 00 01 7 280 ld      iy, $0100                   ; IYH = distance to check edge positions
71C1             7 281 ; IYL = last edge position visited
71C1 21 00 63    7 282 ld      hl, RED_QUEUE_AREA          ; HL points to red queue area address
71C4 22 26 71    7 283 ld      (@Queue_Tail+1), hl         ; initialize red queue tail
71C7 E5          7 284 push    hl                          ; store red queue head
71C8             7 286 ; set up red board (left-right) start positions distances
71C8 21 09 64    7 288 ld      hl, RED_BOARD_LEFT_RIGHT+9  ; HL points to red board left-right address (1st position)
71CB 0E 43       7 289 ld      c, VICTORY+$40              ; set start positions distance + friendly flag
71CD 3E 02       7 290 ld      a, FRIEND                   ; set distance to compare with
71CF BE          7 291 cp      (hl)                        ; check 1st start position distance
71D0 D4 1B 71    7 292 call    nc, PathFinder_Update       ; if FRIEND >= distance, update distance
71D3 2E 12       7 293 ld      l, (RED_BOARD_LEFT_RIGHT+18)%256
71D5 BE          7 294 cp      (hl)                        ; check 2nd start position distance
71D6 D4 1B 71    7 295 call    nc, PathFinder_Update       ; (repeat for each start position)
71D9 2E 1B       7 296 ld      l, (RED_BOARD_LEFT_RIGHT+27)%256
71DB BE          7 297 cp      (hl)                        ; check 3rd start position distance
71DC D4 1B 71    7 298 call    nc, PathFinder_Update
71DF 2E 24       7 299 ld      l, (RED_BOARD_LEFT_RIGHT+36)%256
71E1 BE          7 300 cp      (hl)                        ; check 4th start position distance
71E2 D4 1B 71    7 301 call    nc, PathFinder_Update
71E5 2E 2D       7 302 ld      l, (RED_BOARD_LEFT_RIGHT+45)%256
71E7 BE          7 303 cp      (hl)                        ; check 5th start position distance
71E8 D4 1B 71    7 304 call    nc, PathFinder_Update
71EB 2E 36       7 305 ld      l, (RED_BOARD_LEFT_RIGHT+54)%256
71ED BE          7 306 cp      (hl)                        ; check 6th start position distance
71EE D4 1B 71    7 307 call    nc, PathFinder_Update
71F1 2E 3F       7 308 ld      l, (RED_BOARD_LEFT_RIGHT+63)%256
71F3 C3 66 72    7 309 jp      Path_Finder_First           ; calculate two-distances of red board (left-right)
71F6             7 311 ; ----------------------------------------------------------------------------------------------------------------------
71F6             7 312 ; PathFinder_Red_RightLeft: set up Path_Finder routine to calculate RED two-distance from RIGHT to LEFT edge
71F6             7 313 ;
71F6             7 314 ; Input:    -
71F6             7 315 ;
71F6             7 316 ; Output:   A = -1, if left edge couldn't be reached
71F6             7 317 ;           A =  0, if there is chain of connected cyan tokens between the two edges
71F6             7 318 ;           A = last edge position visited (-1), otherwise
71F6             7 319 ;
71F6             7 320 ; Uses:     @Queue_Tail (queue pointer in 'PathFinder_Update' routine)
71F6             7 321 ;
71F6             7 322 ; Destroys: BC, DE, HL, IY
71F6             7 323 ; ----------------------------------------------------------------------------------------------------------------------
71F6             7 324 PathFinder_Red_RightLeft:
71F6 21 07 7E    7 325 ld      hl, RED_POSITIONS+7         ; HL points to red positions address (up-right corner)
71F9 11 4F 64    7 326 ld      de, RED_BOARD_RIGHT_LEFT-1  ; DE points to red board right-left addr. (up-right corner)
71FC CD 02 71    7 327 call    PathFinder_CopyPositions    ; copy from red positions to red board right-left
71FF FD 21 00 FF 7 329 ld      iy, $FF00                   ; IYH = distance to check edge positions
7203             7 330 ; IYL = last edge position visited
7203 2A 26 71    7 331 ld      hl, (@Queue_Tail+1)         ; retreive red queue tail
7206 E5          7 332 push    hl                          ; initialize red queue head
7207             7 334 ; set up red board (right-left) start positions distances
7207 EB          7 336 ex      de, hl                      ; take advantage of last "CopyPositions" execution
7208 2D          7 337 dec     l                           ; move HL to red board right-left address (last position)
7209 0E 43       7 338 ld      c, VICTORY+$40              ; set start positions distance + friendly flag
720B 3E 02       7 339 ld      a, FRIEND                   ; set distance to compare with
720D BE          7 340 cp      (hl)                        ; check 1st start position distance
720E D4 1B 71    7 341 call    nc, PathFinder_Update       ; if FRIEND >= distance, update distance
7211 2E 84       7 342 ld      l, (RED_BOARD_RIGHT_LEFT+52)%256
7213 BE          7 343 cp      (hl)                        ; check 2nd start position distance
7214 D4 1B 71    7 344 call    nc, PathFinder_Update       ; (repeat for each start position)
7217 2E 7B       7 345 ld      l, (RED_BOARD_RIGHT_LEFT+43)%256
7219 BE          7 346 cp      (hl)                        ; check 3rd start position distance
721A D4 1B 71    7 347 call    nc, PathFinder_Update
721D 2E 72       7 348 ld      l, (RED_BOARD_RIGHT_LEFT+34)%256
721F BE          7 349 cp      (hl)                        ; check 4th start position distance
7220 D4 1B 71    7 350 call    nc, PathFinder_Update
7223 2E 69       7 351 ld      l, (RED_BOARD_RIGHT_LEFT+25)%256
7225 BE          7 352 cp      (hl)                        ; check 5th start position distance
7226 D4 1B 71    7 353 call    nc, PathFinder_Update
7229 2E 60       7 354 ld      l, (RED_BOARD_RIGHT_LEFT+16)%256
722B BE          7 355 cp      (hl)                        ; check 6th start position distance
722C D4 1B 71    7 356 call    nc, PathFinder_Update
722F 2E 57       7 357 ld      l, (RED_BOARD_RIGHT_LEFT+7)%256
7231 C3 66 72    7 358 jp      Path_Finder_First           ; calculate red two-distance (right-left)
7234             7 360 ; ----------------------------------------------------------------------------------------------------------------------
7234             7 361 ; Path_Finder: calculate two-distance metric for each board position
7234             7 362 ;
7234             7 363 ; The algorithm is implemented running PATHFINDER, starting at the corresponding side of the input board
7234             7 364 ;
7234             7 365 ; Input:    HL  = cyan or red queue area address
7234             7 366 ;           IYH = distance to check edge positions
7234             7 367 ;           IYL = 0
7234             7 368 ;
7234             7 369 ; Output:   A = -1, if corresponding edge couldn't be reached
7234             7 370 ;           A =  0, if there is chain of connected (color) tokens between the two edges
7234             7 371 ;           A = last edge position visited (-1), otherwise
7234             7 372 ;
7234             7 373 ; Uses:     @Queue_Tail (queue pointer in 'PathFinder_Update' routine)
7234             7 374 ;
7234             7 375 ; Destroys: DE, HL, IY
7234             7 376 ; ----------------------------------------------------------------------------------------------------------------------
7234             7 377 Path_Finder:
7234 2C          7 378 inc     l                           ; move queue head down
7235 E5          7 379 push    hl                          ; preserve queue head address
7236 6E          7 380 ld      l, (hl)                     ; retrieve next position to be checked
7237 24          7 381 inc     h                           ; move HL to corresponding board address
7238 4E          7 382 ld      c, (hl)                     ; retrieve distance from this position to start
7239 45          7 383 ld      b, l                        ; store current position
723A             7 385 ; look for adjacent positions
723A 7D          7 387 ld      a, l                        ; get current position
723B FD 84       7 388 add     a, iyh                      ; add distance to check edge positions
723D 6F          7 389 ld      l, a                        ; move HL to calculated position address
723E CB 7E       7 390 bit     7, (hl)                     ; is it an edge?
7240 20 34       7 391 jr      nz, Path_Finder_Adjacent    ; yes, process adjacent positions
7242 3E 02       7 393 ld      a, FRIEND                   ; set distance to compare with
7244             7 394 ; return point from PathFinder_Adjacent
7244             7 395 Path_Finder_Neighbors
7244 68          7 396 ld      l, b                        ; restore current position to be checked
7245 2C          7 397 inc     l                           ; move HL to right neighbor address
7246 BE          7 398 cp      (hl)                        ; check right neighbor distance
7247 D4 1B 71    7 399 call    nc, PathFinder_Update       ; if FRIEND >= distance, update distance
724A 2D          7 400 dec     l                           ; move HL to left neighbor address
724B 2D          7 401 dec     l
724C BE          7 402 cp      (hl)                        ; check left neighbor distance
724D D4 1B 71    7 403 call    nc, PathFinder_Update       ; (repeat for each neighbor)
7250 11 F8 FF    7 404 ld      de, -WIDTH
7253 19          7 405 add     hl, de
7254 BE          7 406 cp      (hl)                        ; check upper-left neighbor distance
7255 D4 1B 71    7 407 call    nc, PathFinder_Update
7258 2C          7 408 inc     l
7259 BE          7 409 cp      (hl)                        ; check upper-right neighbor distance
725A D4 1B 71    7 410 call    nc, PathFinder_Update
725D 11 10 00    7 411 ld      de, WIDTH*2
7260 19          7 412 add     hl, de
7261 BE          7 413 cp      (hl)                        ; check lower-left neighbor distance
7262 D4 1B 71    7 414 call    nc, PathFinder_Update
7265 2C          7 415 inc     l
7266             7 416 Path_Finder_First
7266 BE          7 417 cp      (hl)                        ; check lower-right neighbor distance
7267 D4 1B 71    7 418 call    nc, PathFinder_Update
726A E1          7 419 pop     hl                          ; retreive queue head address
726B 3A 26 71    7 420 ld      a, (@Queue_Tail+1)          ; get queue tail address (low-byte)
726E BD          7 421 cp      l                           ; is queue empty?
726F C2 34 72    7 422 jp      nz, Path_Finder             ; no, repeat until queue is empty
7272 FD 7D       7 424 ld      a, iyl                      ; get last edge position visited
7274 3D          7 425 dec     a                           ; return A = -1, if the edge couldn't be reached
7275 C9          7 426 ret
7276             7 428 ; ----------------------------------------------------------------------------------------------------------------------
7276             7 429 ; Check adjacent hexagons.
7276             7 430 ;
7276             7 431 ; This is an approach to update the two-distance of adjacent positions. As explained in Jack van Rijswijck's thesis:
7276             7 432 ; "two cells are adjacent if they share a common edge on the board."
7276             7 433 ;
7276             7 434 ; Input:    B  = current position
7276             7 435 ;           C  = current distance (with a flag at 6th bit that indicates a friendly position)
7276             7 436 ;           HL = current edge position address (a flag in 7th bit indicates an edge position and the lowest 3 bits the
7276             7 437 ;                edge number)
7276             7 438 ;
7276             7 439 ; Output:   A = 0, if there is a chain of connected tokens of the same color between the two edges.
7276             7 440 ;           A = FRIEND, IYL = current position, otherwise.
7276             7 441 ;
7276             7 442 ; Destroys: DE, HL
7276             7 443 ; ----------------------------------------------------------------------------------------------------------------------
7276             7 444 Path_Finder_Adjacent
7276 3E 43       7 445 ld      a, VICTORY+$40              ; set victory distance + friendly flag
7278 B9          7 446 cp      c                           ; is current distance victory and friendly?
7279 28 11       7 447 jr      z, Path_Finder_Abort        ; yes, abort path_finder
727B 7E          7 449 ld      a, (hl)                     ; get current edge position
727C E6 07       7 450 and     %00000111                   ; convert to edge number (0..6)
727E 87          7 451 add     a, a                        ; calculate vector table routine index
727F 6F          7 452 ld      l, a                        ; set index in L
7280 24          7 453 inc     h                           ; move HL to (cyan or red) vector table routine address
7281 5E          7 454 ld      e, (hl)                     ; get low byte of vector table routine address
7282 2C          7 455 inc     l                           ; move HL to high byte of vector table routine address
7283 56          7 456 ld      d, (hl)                     ; get high byte of vector table routine address
7284 EB          7 457 ex      de, hl                      ; HL points to 'PathFinder_[COLOR]_Edge_[n]' routine address
7285 15          7 458 dec     d                           ; move DE to cyan or red board address
7286 58          7 459 ld      e, b                        ; restore pointer to current position
7287 FD 68       7 460 ld      iyl, b                      ; last edge position visited = current position
7289 3E 02       7 461 ld      a, FRIEND                   ; set distance to compare with
728B E9          7 462 jp      (hl)                        ; jump to 'PathFinder_[COLOR]_Edge_[n]' routine
728C             7 463 Path_Finder_Abort
728C E1          7 464 pop     hl                          ; restore queue head address
728D AF          7 465 xor     a                           ; return A = 0
728E C9          7 466 ret
728F             7 468 ; ----------------------------------------------------------------------------------------------------------------------
728F             7 469 ;  Check two-distance of RED adjacents
728F             7 470 ; ----------------------------------------------------------------------------------------------------------------------
728F             7 471 PathFinder_RED_Edge_0
728F EB          7 472 ex      de, hl                      ; restore pointer to current position address
7290 11 12 00    7 473 ld      de, 9*2                     ; calculate distance to adjacent #2
7293 19          7 474 add     hl, de                      ; move HL to adjacent #2 address
7294 BE          7 475 cp      (hl)                        ; check adjacent #2 distance
7295 D4 1B 71    7 476 call    nc, PathFinder_Update       ; if FRIEND >= adjacent #2 distance, update distance
7298 11 09 00    7 477 ld      de, 9                       ; calculate distance to adjacent #3
729B 19          7 478 add     hl, de                      ; move HL to adjacent #3 address
729C BE          7 479 cp      (hl)                        ; check adjacent #3 distance
729D D4 1B 71    7 480 call    nc, PathFinder_Update       ; (repeat for each adjacent)
72A0 11 09 00    7 481 ld      de, 9
72A3 19          7 482 add     hl, de
72A4 BE          7 483 cp      (hl)                        ; check adjacent #4 distance
72A5 D4 1B 71    7 484 call    nc, PathFinder_Update
72A8 11 09 00    7 485 ld      de, 9
72AB 19          7 486 add     hl, de
72AC BE          7 487 cp      (hl)                        ; check adjacent #5 distance
72AD D4 1B 71    7 488 call    nc, PathFinder_Update
72B0 11 09 00    7 489 ld      de, 9
72B3 19          7 490 add     hl, de
72B4 BE          7 491 cp      (hl)                        ; check adjacent #6 distance
72B5 D4 1B 71    7 492 call    nc, PathFinder_Update
72B8 FD 45       7 493 ld      b, iyl                      ; restore current position
72BA C3 44 72    7 494 jp      Path_Finder_Neighbors       ; continue processing neighbors
72BD             7 496 PathFinder_RED_Edge_1
72BD EB          7 497 ex      de, hl                      ; restore pointer to current position address
72BE 11 12 00    7 498 ld      de, 9*2
72C1 19          7 499 add     hl, de
72C2 BE          7 500 cp      (hl)                        ; check adjacent #3 distance
72C3 D4 1B 71    7 501 call    nc, PathFinder_Update
72C6 11 09 00    7 502 ld      de, 9
72C9 19          7 503 add     hl, de
72CA BE          7 504 cp      (hl)                        ; check adjacent #4 distance
72CB D4 1B 71    7 505 call    nc, PathFinder_Update
72CE 11 09 00    7 506 ld      de, 9
72D1 19          7 507 add     hl, de
72D2 BE          7 508 cp      (hl)                        ; check adjacent #5 distance
72D3 D4 1B 71    7 509 call    nc, PathFinder_Update
72D6 11 09 00    7 510 ld      de, 9
72D9 19          7 511 add     hl, de
72DA BE          7 512 cp      (hl)                        ; check adjacent #6 distance
72DB D4 1B 71    7 513 call    nc, PathFinder_Update
72DE FD 45       7 514 ld      b, iyl                      ; restore current position
72E0 C3 44 72    7 515 jp      Path_Finder_Neighbors       ; continue processing neighbors
72E3             7 517 PathFinder_RED_Edge_2
72E3 EB          7 518 ex      de, hl                      ; restore pointer to current position address
72E4 11 12 00    7 519 ld      de, 9*2
72E7 19          7 520 add     hl, de
72E8 BE          7 521 cp      (hl)                        ; check adjacent #4 distance
72E9 D4 1B 71    7 522 call    nc, PathFinder_Update
72EC 11 09 00    7 523 ld      de, 9
72EF 19          7 524 add     hl, de
72F0 BE          7 525 cp      (hl)                        ; check adjacent #5 distance
72F1 D4 1B 71    7 526 call    nc, PathFinder_Update
72F4 11 09 00    7 527 ld      de, 9
72F7 19          7 528 add     hl, de
72F8 BE          7 529 cp      (hl)                        ; check adjacent #6 distance
72F9 D4 1B 71    7 530 call    nc, PathFinder_Update
72FC 11 CA FF    7 531 ld      de, -9*6
72FF 19          7 532 add     hl, de
7300 BE          7 533 cp      (hl)                        ; check adjacent #0 distance
7301 D4 1B 71    7 534 call    nc, PathFinder_Update
7304 FD 45       7 535 ld      b, iyl                      ; restore current position
7306 C3 44 72    7 536 jp      Path_Finder_Neighbors       ; continue processing neighbors
7309             7 538 PathFinder_RED_Edge_3
7309 EB          7 539 ex      de, hl                      ; restore pointer to current position address
730A 11 E5 FF    7 540 ld      de, -9*3
730D 19          7 541 add     hl, de
730E BE          7 542 cp      (hl)                        ; check adjacent #0 distance
730F D4 1B 71    7 543 call    nc, PathFinder_Update
7312 11 09 00    7 544 ld      de, 9
7315 19          7 545 add     hl, de
7316 BE          7 546 cp      (hl)                        ; check adjacent #1 distance
7317 D4 1B 71    7 547 call    nc, PathFinder_Update
731A 11 24 00    7 548 ld      de, 9*4
731D 19          7 549 add     hl, de
731E BE          7 550 cp      (hl)                        ; check adjacent #5 distance
731F D4 1B 71    7 551 call    nc, PathFinder_Update
7322 11 09 00    7 552 ld      de, 9
7325 19          7 553 add     hl, de
7326 BE          7 554 cp      (hl)                        ; check adjacent #6 distance
7327 D4 1B 71    7 555 call    nc, PathFinder_Update
732A FD 45       7 556 ld      b, iyl                      ; restore current position
732C C3 44 72    7 557 jp      Path_Finder_Neighbors       ; continue processing neighbors
732F             7 559 PathFinder_RED_Edge_4
732F EB          7 560 ex      de, hl                      ; restore pointer to current position address
7330 11 12 00    7 561 ld      de, 9*2
7333 19          7 562 add     hl, de
7334 BE          7 563 cp      (hl)                        ; check adjacent #6 distance
7335 D4 1B 71    7 564 call    nc, PathFinder_Update
7338 11 CA FF    7 565 ld      de, -9*6
733B 19          7 566 add     hl, de
733C BE          7 567 cp      (hl)                        ; check adjacent #0 distance
733D D4 1B 71    7 568 call    nc, PathFinder_Update
7340 11 09 00    7 569 ld      de, 9
7343 19          7 570 add     hl, de
7344 BE          7 571 cp      (hl)                        ; check adjacent #1 distance
7345 D4 1B 71    7 572 call    nc, PathFinder_Update
7348 11 09 00    7 573 ld      de, 9
734B 19          7 574 add     hl, de
734C BE          7 575 cp      (hl)                        ; check adjacent #2 distance
734D D4 1B 71    7 576 call    nc, PathFinder_Update
7350 FD 45       7 577 ld      b, iyl                      ; restore current position
7352 C3 44 72    7 578 jp      Path_Finder_Neighbors       ; continue processing neighbors
7355             7 580 PathFinder_RED_Edge_5
7355 EB          7 581 ex      de, hl                      ; restore pointer to current position address
7356 11 D3 FF    7 582 ld      de, -9*5
7359 19          7 583 add     hl, de
735A BE          7 584 cp      (hl)                        ; check adjacent #0 distance
735B D4 1B 71    7 585 call    nc, PathFinder_Update
735E 11 09 00    7 586 ld      de, 9
7361 19          7 587 add     hl, de
7362 BE          7 588 cp      (hl)                        ; check adjacent #1 distance
7363 D4 1B 71    7 589 call    nc, PathFinder_Update
7366 11 09 00    7 590 ld      de, 9
7369 19          7 591 add     hl, de
736A BE          7 592 cp      (hl)                        ; check adjacent #2 distance
736B D4 1B 71    7 593 call    nc, PathFinder_Update
736E 11 09 00    7 594 ld      de, 9
7371 19          7 595 add     hl, de
7372 BE          7 596 cp      (hl)                        ; check adjacent #3 distance
7373 D4 1B 71    7 597 call    nc, PathFinder_Update
7376 FD 45       7 598 ld      b, iyl                      ; restore current position
7378 C3 44 72    7 599 jp      Path_Finder_Neighbors       ; continue processing neighbors
737B             7 601 PathFinder_RED_Edge_6
737B EB          7 602 ex      de, hl                      ; restore pointer to current position address
737C 11 CA FF    7 603 ld      de, -9*6
737F 19          7 604 add     hl, de
7380 BE          7 605 cp      (hl)                        ; check adjacent #0 distance
7381 D4 1B 71    7 606 call    nc, PathFinder_Update
7384 11 09 00    7 607 ld      de, 9
7387 19          7 608 add     hl, de
7388 BE          7 609 cp      (hl)                        ; check adjacent #1 distance
7389 D4 1B 71    7 610 call    nc, PathFinder_Update
738C 11 09 00    7 611 ld      de, 9
738F 19          7 612 add     hl, de
7390 BE          7 613 cp      (hl)                        ; check adjacent #2 distance
7391 D4 1B 71    7 614 call    nc, PathFinder_Update
7394 11 09 00    7 615 ld      de, 9
7397 19          7 616 add     hl, de
7398 BE          7 617 cp      (hl)                        ; check adjacent #3 distance
7399 D4 1B 71    7 618 call    nc, PathFinder_Update
739C 11 09 00    7 619 ld      de, 9
739F 19          7 620 add     hl, de
73A0 BE          7 621 cp      (hl)                        ; check adjacent #4 distance
73A1 D4 1B 71    7 622 call    nc, PathFinder_Update
73A4 FD 45       7 623 ld      b, iyl                      ; restore current position
73A6 C3 44 72    7 624 jp      Path_Finder_Neighbors       ; continue processing neighbors
73A9             7 626 ; ----------------------------------------------------------------------------------------------------------------------
73A9             7 627 ;  Check two-distance of CYAN adjacents
73A9             7 628 ; ----------------------------------------------------------------------------------------------------------------------
73A9             7 629 PathFinder_CYAN_Edge_0
73A9 EB          7 630 ex      de, hl                      ; restore pointer to current position address
73AA 2C          7 631 inc     l
73AB 2C          7 632 inc     l
73AC BE          7 633 cp      (hl)                        ; check adjacent #2 distance
73AD D4 1B 71    7 634 call    nc, PathFinder_Update
73B0 2C          7 635 inc     l
73B1 BE          7 636 cp      (hl)                        ; check adjacent #3 distance
73B2 D4 1B 71    7 637 call    nc, PathFinder_Update
73B5 2C          7 638 inc     l
73B6 BE          7 639 cp      (hl)                        ; check adjacent #4 distance
73B7 D4 1B 71    7 640 call    nc, PathFinder_Update
73BA 2C          7 641 inc     l
73BB BE          7 642 cp      (hl)                        ; check adjacent of edge number 5
73BC D4 1B 71    7 643 call    nc, PathFinder_Update
73BF 2C          7 644 inc     l
73C0 BE          7 645 cp      (hl)                        ; check adjacent of edge number 6
73C1 D4 1B 71    7 646 call    nc, PathFinder_Update
73C4 FD 45       7 647 ld      b, iyl                      ; restore current position
73C6 C3 44 72    7 648 jp      Path_Finder_Neighbors       ; continue processing neighbors
73C9             7 650 PathFinder_CYAN_Edge_1
73C9 EB          7 651 ex      de, hl                      ; restore pointer to current position address
73CA 2C          7 652 inc     l
73CB 2C          7 653 inc     l
73CC BE          7 654 cp      (hl)                        ; check adjacent #3 distance
73CD D4 1B 71    7 655 call    nc, PathFinder_Update
73D0 2C          7 656 inc     l
73D1 BE          7 657 cp      (hl)                        ; check adjacent #4 distance
73D2 D4 1B 71    7 658 call    nc, PathFinder_Update
73D5 2C          7 659 inc     l
73D6 BE          7 660 cp      (hl)                        ; check adjacent #5 distance
73D7 D4 1B 71    7 661 call    nc, PathFinder_Update
73DA 2C          7 662 inc     l
73DB BE          7 663 cp      (hl)                        ; check adjacent #6 distance
73DC D4 1B 71    7 664 call    nc, PathFinder_Update
73DF FD 45       7 665 ld      b, iyl                      ; restore current position
73E1 C3 44 72    7 666 jp      Path_Finder_Neighbors       ; continue processing neighbors
73E4             7 668 PathFinder_CYAN_Edge_2
73E4 EB          7 669 ex      de, hl                      ; restore pointer to current position address
73E5 2D          7 670 dec     l
73E6 2D          7 671 dec     l
73E7 BE          7 672 cp      (hl)                        ; check adjacent #0 distance
73E8 D4 1B 71    7 673 call    nc, PathFinder_Update
73EB 2C          7 674 inc     l
73EC 2C          7 675 inc     l
73ED 2C          7 676 inc     l
73EE 2C          7 677 inc     l
73EF BE          7 678 cp      (hl)                        ; check adjacent #4 distance
73F0 D4 1B 71    7 679 call    nc, PathFinder_Update
73F3 2C          7 680 inc     l
73F4 BE          7 681 cp      (hl)                        ; check adjacent #5 distance
73F5 D4 1B 71    7 682 call    nc, PathFinder_Update
73F8 2C          7 683 inc     l
73F9 BE          7 684 cp      (hl)                        ; check adjacent #6 distance
73FA D4 1B 71    7 685 call    nc, PathFinder_Update
73FD FD 45       7 686 ld      b, iyl                      ; restore current position
73FF C3 44 72    7 687 jp      Path_Finder_Neighbors       ; continue processing neighbors
7402             7 689 PathFinder_CYAN_Edge_3
7402 EB          7 690 ex      de, hl                      ; restore pointer to current position address
7403 2D          7 691 dec     l
7404 2D          7 692 dec     l
7405 2D          7 693 dec     l
7406 BE          7 694 cp      (hl)                        ; check adjacent #0 distance
7407 D4 1B 71    7 695 call    nc, PathFinder_Update
740A 2C          7 696 inc     l
740B BE          7 697 cp      (hl)                        ; check adjacent #1 distance
740C D4 1B 71    7 698 call    nc, PathFinder_Update
740F 2C          7 699 inc     l
7410 2C          7 700 inc     l
7411 2C          7 701 inc     l
7412 2C          7 702 inc     l
7413 BE          7 703 cp      (hl)                        ; check adjacent #5 distance
7414 D4 1B 71    7 704 call    nc, PathFinder_Update
7417 2C          7 705 inc     l
7418 BE          7 706 cp      (hl)                        ; check adjacent #6 distance
7419 D4 1B 71    7 707 call    nc, PathFinder_Update
741C FD 45       7 708 ld      b, iyl                      ; restore current position
741E C3 44 72    7 709 jp      Path_Finder_Neighbors       ; continue processing neighbors
7421             7 711 PathFinder_CYAN_Edge_4
7421 EB          7 712 ex      de, hl                      ; restore pointer to current position address
7422 2C          7 713 inc     l
7423 2C          7 714 inc     l
7424 BE          7 715 cp      (hl)                        ; check adjacent #6 distance
7425 D4 1B 71    7 716 call    nc, PathFinder_Update
7428 2D          7 717 dec     l
7429 2D          7 718 dec     l
742A 2D          7 719 dec     l
742B 2D          7 720 dec     l
742C BE          7 721 cp      (hl)                        ; check adjacent #2 distance
742D D4 1B 71    7 722 call    nc, PathFinder_Update
7430 2D          7 723 dec     l
7431 BE          7 724 cp      (hl)                        ; check adjacent #1 distance
7432 D4 1B 71    7 725 call    nc, PathFinder_Update
7435 2D          7 726 dec     l
7436 BE          7 727 cp      (hl)                        ; check adjacent #0 distance
7437 D4 1B 71    7 728 call    nc, PathFinder_Update
743A FD 45       7 729 ld      b, iyl                      ; restore current position
743C C3 44 72    7 730 jp      Path_Finder_Neighbors       ; continue processing neighbors
743F             7 732 PathFinder_CYAN_Edge_5
743F EB          7 733 ex      de, hl                      ; restore pointer to current position address
7440 2D          7 734 dec     l
7441 2D          7 735 dec     l
7442 BE          7 736 cp      (hl)                        ; check adjacent #3 distance
7443 D4 1B 71    7 737 call    nc, PathFinder_Update
7446 2D          7 738 dec     l
7447 BE          7 739 cp      (hl)                        ; check adjacent #2 distance
7448 D4 1B 71    7 740 call    nc, PathFinder_Update
744B 2D          7 741 dec     l
744C BE          7 742 cp      (hl)                        ; check adjacent #1 distance
744D D4 1B 71    7 743 call    nc, PathFinder_Update
7450 2D          7 744 dec     l
7451 BE          7 745 cp      (hl)                        ; check adjacent #0 distance
7452 D4 1B 71    7 746 call    nc, PathFinder_Update
7455 FD 45       7 747 ld      b, iyl                      ; restore current position
7457 C3 44 72    7 748 jp      Path_Finder_Neighbors       ; continue processing neighbors
745A             7 750 PathFinder_CYAN_Edge_6
745A EB          7 751 ex      de, hl                      ; restore pointer to current position address
745B 2D          7 752 dec     l
745C 2D          7 753 dec     l
745D BE          7 754 cp      (hl)                        ; check adjacent #4 distance
745E D4 1B 71    7 755 call    nc, PathFinder_Update
7461 2D          7 756 dec     l
7462 BE          7 757 cp      (hl)                        ; check adjacent #3 distance
7463 D4 1B 71    7 758 call    nc, PathFinder_Update
7466 2D          7 759 dec     l
7467 BE          7 760 cp      (hl)                        ; check adjacent #2 distance
7468 D4 1B 71    7 761 call    nc, PathFinder_Update
746B 2D          7 762 dec     l
746C BE          7 763 cp      (hl)                        ; check adjacent #1 distance
746D D4 1B 71    7 764 call    nc, PathFinder_Update
7470 2D          7 765 dec     l
7471 BE          7 766 cp      (hl)                        ; check adjacent #0 distance
7472 D4 1B 71    7 767 call    nc, PathFinder_Update
7475 FD 45       7 768 ld      b, iyl                      ; restore current position
7477 C3 44 72    7 769 jp      Path_Finder_Neighbors       ; continue processing neighbors
747A             7 771 ; ----------------------------------------------------------------------------------------------------------------------
747A             7 772 ; PathFinder_Score: calculate board score depending on speccy color
747A             7 773 ;
747A             7 774 ; Input:    -
747A             7 775 ;
747A             7 776 ; Output:   A = -1, if speccy can't reach his opposite edge
747A             7 777 ;           A =  0, if speccy has a chain of connected tokens between the two edges or if player cant reach his edge
747A             7 778 ;           A = speccy heuristic evaluation, otherwise
747A             7 779 ;
747A             7 780 ; Uses:     AI_PLAYER (speccy side)
747A             7 781 ;
747A             7 782 ; Destroys: A', BC, DE, HL, IY
747A             7 783 ; ----------------------------------------------------------------------------------------------------------------------
747A             7 784 PathFinder_Score:
747A 3A 99 61    7 785 ld      a, (AI_PLAYER)              ; get speecy side
747D FE 02       7 786 cp      FRIEND                      ; is it FRIEND?
747F 28 31       7 787 jr      z, PathFinder_CyanScore     ; yes, calculate CYAN score
7481             7 789 ; ----------------------------------------------------------------------------------------------------------------------
7481             7 790 ; PathFinder_RedScore: calculate red score
7481             7 791 ;
7481             7 792 ; Input:    -
7481             7 793 ;
7481             7 794 ; Output:   A = -1, if red can't reach his opposite edge
7481             7 795 ;           A =  0, if there a chain of connected red tokens between the two edges or if cyan can't reach his edge
7481             7 796 ;           A = red heuristic evaluation, otherwise
7481             7 797 ;
7481             7 798 ; Uses:     POTENTIALS (board potential and attack mobility)
7481             7 799 ;
7481             7 800 ; Destroys: A', BC, DE, HL, IY
7481             7 801 ; ----------------------------------------------------------------------------------------------------------------------
7481             7 802 PathFinder_RedScore
7481 CD B4 71    7 803 call    PathFinder_Red_LeftRight    ; calculate RED two-distance from LEFT to RIGHT edge
7484 C8          7 804 ret     z                           ; if red has a chain of connected tokens, return A = 0
7485 08          7 805 ex      af, af'                     ; save first result
7486 CD F6 71    7 806 call    PathFinder_Red_RightLeft    ; calculate RED two-distance from RIGHT to LEFT edge
7489 47          7 807 ld      b, a                        ; save second result
748A 08          7 808 ex      af, af'                     ; restore first result
748B 90          7 809 sub     b                           ; subtract both results
748C 78          7 810 ld      a, b                        ; restore second result
748D C8          7 811 ret     z                           ; if red can't reach his opposite edge, return A = -1
748E CD 40 71    7 813 call    PathFinder_Cyan_UpDown      ; calculate CYAN two-distance from UP to DOWN edge
7491 08          7 814 ex      af, af'                     ; save result
7492 CD 7C 71    7 815 call    PathFinder_Cyan_DownUp      ; calculate CYAN two-distance from DOWN to UP edge
7495 47          7 816 ld      b, a                        ; save second result
7496 08          7 817 ex      af, af'                     ; restore first result
7497 90          7 818 sub     b                           ; subtract both results
7498 C8          7 819 ret     z                           ; if cyan can't reach his opposite edge, return A = 0
7499 21 09 64    7 821 ld      hl, RED_BOARD_LEFT_RIGHT+9  ; HL points to red board left-right address (1st position)
749C 11 51 64    7 822 ld      de, RED_BOARD_RIGHT_LEFT+1  ; DE points to red board right-left address (1st position)
749F CD F0 74    7 823 call    PathFinder_Potentials       ; calculate RED potentials
74A2 ED 43 97 61 7 824 ld      (POTENTIALS), bc            ; store RED potentials
74A6 21 09 61    7 826 ld      hl, CYAN_BOARD_UP_DOWN+9    ; HL points to cyan board up-down address (1st position)
74A9 11 51 61    7 827 ld      de, CYAN_BOARD_DOWN_UP+1    ; DE points to cyan board down-up address (1st position)
74AC CD F0 74    7 828 call    PathFinder_Potentials       ; calculate cyan potentials
74AF C3 E0 74    7 829 jp      PathFinder_Evaluation       ; calculate heuristic evaluation
74B2             7 831 ; ----------------------------------------------------------------------------------------------------------------------
74B2             7 832 ; PathFinder_CyanScore: calculate cyan score
74B2             7 833 ;
74B2             7 834 ; Input:    -
74B2             7 835 ;
74B2             7 836 ; Output:   A = -1, if cyan can't reach his opposite edge
74B2             7 837 ;           A =  0, if there a chain of connected cyan tokens between the two edges or if red can't reach his edge
74B2             7 838 ;           A = cyan heuristic evaluation, otherwise
74B2             7 839 ;
74B2             7 840 ; Uses:     POTENTIALS (board potential and attack mobility)
74B2             7 841 ;
74B2             7 842 ; Destroys: A', BC, DE, HL
74B2             7 843 ; ----------------------------------------------------------------------------------------------------------------------
74B2             7 844 PathFinder_CyanScore
74B2 CD 40 71    7 845 call    PathFinder_Cyan_UpDown      ; calculate CYAN two-distance from UP to DOWN edge
74B5 C8          7 846 ret     z                           ; if cyan has a chain of connected tokens, return A = 0
74B6 08          7 847 ex      af, af'                     ; save result
74B7 CD 7C 71    7 848 call    PathFinder_Cyan_DownUp      ; calculate CYAN two-distance from DOWN to UP edge
74BA 47          7 849 ld      b, a                        ; save second result
74BB 08          7 850 ex      af, af'                     ; restore first result
74BC 90          7 851 sub     b                           ; subtract both results
74BD 78          7 852 ld      a, b                        ; restore second result
74BE C8          7 853 ret     z                           ; if cyan can't reach his opposite edge, return A = -1
74BF CD B4 71    7 855 call    PathFinder_Red_LeftRight    ; calculate RED two-distance from LEFT to RIGHT edge
74C2 08          7 856 ex      af, af'                     ; save result
74C3 CD F6 71    7 857 call    PathFinder_Red_RightLeft    ; calculate RED two-distance from RIGHT to LEFT edge
74C6 47          7 858 ld      b, a                        ; save second result
74C7 08          7 859 ex      af, af'                     ; restore first result
74C8 90          7 860 sub     b                           ; subtract both results
74C9 C8          7 861 ret     z                           ; if red can't reach his opposite edge, return A = 0
74CA 21 09 61    7 863 ld      hl, CYAN_BOARD_UP_DOWN+9    ; HL points to cyan board up-down address (1st position)
74CD 11 51 61    7 864 ld      de, CYAN_BOARD_DOWN_UP+1    ; DE points to cyan board down-up address (1st position)
74D0 CD F0 74    7 865 call    PathFinder_Potentials       ; calculate cyan potentials
74D3 ED 43 97 61 7 866 ld      (POTENTIALS), bc            ; save cyan potentials
74D7 21 09 64    7 868 ld      hl, RED_BOARD_LEFT_RIGHT+9  ; HL points to red board left-right address (1st position)
74DA 11 51 64    7 869 ld      de, RED_BOARD_RIGHT_LEFT+1  ; DE points to red board right-left address (1st position)
74DD CD F0 74    7 870 call    PathFinder_Potentials       ; calculate red potentials
74E0             7 871 ; ----------------------------------------------------------------------------------------------------------------------
74E0             7 872 ; PathFinder_Evaluation: calculate heuristic evaluation.
74E0             7 873 ; The original evaluation function (from cyan perspective) is described in Jack van Rijswijck's thesis as:
74E0             7 874 ;
74E0             7 875 ;                                       e = M (pC - pR) - (aC - aR)
74E0             7 876 ; where:
74E0             7 877 ;   pC = cyan board potential
74E0             7 878 ;   pR = red board potential
74E0             7 879 ;   aC = cyan attack mobility
74E0             7 880 ;   aR = red attack mobility
74E0             7 881 ;    M = a large number
74E0             7 882 ;
74E0             7 883 ; This adaptation uses an "invert" result to better fit BRAINIAC process.
74E0             7 884 ;
74E0             7 885 ; Input:    B = opponent attack mobility
74E0             7 886 ;           C = opponent board potential
74E0             7 887 ;
74E0             7 888 ; Output:   A = heuristic evaluation
74E0             7 889 ;
74E0             7 890 ; Destroys: E, HL
74E0             7 891 ; ----------------------------------------------------------------------------------------------------------------------
74E0             7 892 PathFinder_Evaluation:
74E0 21 98 61    7 893 ld      hl, POTENTIALS+1            ; HL points to color attack mobility address
74E3 78          7 894 ld      a, b                        ; get opponent's attack mobility
74E4 96          7 895 sub     (hl)                        ; subtract attack mobilities -> (aC - aR)
74E5 5F          7 896 ld      e, a                        ; save the result in E
74E6 2D          7 897 dec     l                           ; move HL to player's board potential address
74E7 79          7 898 ld      a, c                        ; get opponent's board potential
74E8 96          7 899 sub     (hl)                        ; subtract potentials -> (pC - pR)
74E9 87          7 900 add     a, a                        ; multiply by 8 -> M (pC - pR)
74EA 87          7 901 add     a, a
74EB 87          7 902 add     a, a
74EC 93          7 903 sub     e                           ; subtract result of attack mobilities subtraction
74ED             7 904 ; -> M (pC - pR) - (aC - aR)
74ED EE 80       7 905 xor     $80                         ; invert sign for easier further comparative
74EF C9          7 906 ret                                 ; return A = -1 * (M (pC - pR) - (aC - aR))
74F0             7 908 ; ----------------------------------------------------------------------------------------------------------------------
74F0             7 909 ; PathFinder_Potentials: calculate board potential and attack mobility
74F0             7 910 ;
74F0             7 911 ; * A cell's Cyan potential is defined as the sum of its Cyan two-distance to both cyan edges; its Red potential is the
74F0             7 912 ;   sum of its Red two-distance to both red edges. The board potential is defined as the lowest potential that occurs on
74F0             7 913 ;   the board.
74F0             7 914 ; * The attack mobility is defined for each player as the number of cells that realize that player's board potential.
74F0             7 915 ;
74F0             7 916 ; Input:    HL = cyan board or red board address
74F0             7 917 ;           DE = cyan board or red board address
74F0             7 918 ;
74F0             7 919 ; Output:   B = attack mobility
74F0             7 920 ;           C = board potential
74F0             7 921 ;
74F0             7 922 ; Destroys: A, DE, HL, IYL
74F0             7 923 ; ----------------------------------------------------------------------------------------------------------------------
74F0             7 924 PathFinder_Potentials:
74F0 01 FF 00    7 925 ld      bc, $00FF                   ; initialize attack mobility and board potential
74F3 FD 2E 3D    7 926 ld      iyl, 61                     ; number of cells to be checked (loop counter)
74F6             7 927 Potentials_Loop
74F6 7E          7 928 ld      a, (hl)                     ; get cell's two-distance pointed by HL
74F7 FE 40       7 929 cp      $40                         ; is cell occupied or border?
74F9 30 16       7 930 jr      nc, Potentials_Next         ; yes, skip to next cell
74FB FE 04       7 931 cp      $04                         ; cell distance was not updated?
74FD 38 1A       7 932 jr      c, Potentials_Infinite      ; yes, set cell potential as "infinite" and skip
74FF 1A          7 933 ld      a, (de)                     ; get cell's two-distance pointed by DE
7500 FE 04       7 934 cp      $04                         ; cell distance was not updated?
7502 38 15       7 935 jr      c, Potentials_Infinite      ; yes, set cell potential as "infinite" and skip
7504 86          7 936 add     a, (hl)                     ; sum both two-distances (calculate cell potential)
7505 77          7 937 ld      (hl), a                     ; save potential in the cell pointed by HL
7506 B9          7 938 cp      c                           ; is the new potential >= board potential?
7507 D2 0D 75    7 939 jp      nc, Potentials_Mobility     ; yes, check attack mobility
750A 4F          7 940 ld      c, a                        ; no, board potential = new potential
750B 06 01       7 941 ld      b, 1                        ; restart attack mobility
750D             7 942 Potentials_Mobility
750D C2 11 75    7 943 jp      nz, Potentials_Next         ; if (potential <> last potential) skip to next cell
7510 04          7 944 inc     b                           ; else, increment attack mobility
7511             7 945 Potentials_Next
7511 1C          7 946 inc     e                           ; move to next cell of each board
7512 2C          7 947 inc     l
7513 FD 2D       7 948 dec     iyl                         ; decrement loop counter
7515 C2 F6 74    7 949 jp      nz, Potentials_Loop         ; repeat until end of boards
7518 C9          7 950 ret
7519             7 951 Potentials_Infinite
7519 CB FE       7 952 set     7, (hl)                     ; set cell potential as "infinite"
751B 1C          7 953 inc     e                           ; move to next cell of each board
751C 2C          7 954 inc     l
751D FD 2D       7 955 dec     iyl                         ; decrement loop counter
751F C2 F6 74    7 956 jp      nz, Potentials_Loop         ; repeat until end of boards
7522 C9          7 957 ret
7523             7 959 ; ----------------------------------------------------------------------------------------------------------------------
7523             7 960 ; PathFinder_Candidates: search candidates based on score result and boards potentials
7523             7 961 ;
7523             7 962 ; Input:    A  = -1, 0 or heuristic result
7523             7 963 ;           IX = candidates area address
7523             7 964 ;
7523             7 965 ; Output:   IX = first candidate address
7523             7 966 ;
7523             7 967 ; Uses:     AI_PLAYER (speccy side)
7523             7 968 ;
7523             7 969 ; Destroys: A, A', BC, DE, HL
7523             7 970 ; ----------------------------------------------------------------------------------------------------------------------
7523             7 971 PathFinder_Candidates:
7523 DD 36 00 00 7 972 ld      (ix+0), 0                   ; set candidates endmarker
7527 B7          7 974 or      a                           ; A = 0?
7528 28 3D       7 975 jr      z, Candidates_Winner        ; yes, fill candidates for winner color
752A 3C          7 976 inc     a                           ; A = -1?
752B 28 45       7 977 jr      z, Candidates_Defeat        ; yes, fill candidates for defeated color
752D             7 979 ; if score is not -1 nor 0, fill candidates from total potentials
752D 21 09 61    7 981 ld      hl, CYAN_BOARD_UP_DOWN+9    ; HL points to cyan board up-down address (1st position)
7530 11 09 64    7 982 ld      de, RED_BOARD_LEFT_RIGHT+9  ; DE points to red board left-right address (1st position)
7533 CD F0 74    7 983 call    PathFinder_Potentials       ; process candidates from total potentials
7536 79          7 985 ld      a, c                        ; set board potential in A
7537 08          7 986 ex      af, af'                     ; save board potential
7538 50          7 987 ld      d, b                        ; store attack mobility
7539 DD 5D       7 988 ld      e, ixl                      ; store candidates position
753B             7 990 ; insert the second best board potentials in candidates area
753B             7 991 Candidates_2ndBest
753B 2E 09       7 992 ld      l, 9                        ; HL points to board potentials address (1st position)
753D 0C          7 993 inc     c                           ; increment board potential
753E 79          7 994 ld      a, c                        ; A = second best potential
753F FE 20       7 995 cp      $20                         ; is potential >= $20? (2nd best max potential)
7541 30 13       7 996 jr      nc, Candidates_2ndBest_Exit ; yes, stop searching 2nd best potential
7543 06 3D       7 997 ld      b, 61                       ; number of cells to be checked (loop counter)
7545             7 998 Candidates_2ndBest_Loop
7545 BE          7 999 cp      (hl)                        ; is current board potential = 2nd best board potential?
7546 C2 4E 75    7 1000 jp      nz, Candidates_2ndBest_Next ; no, skip to next potential
7549 DD 2C       7 1001 inc     ixl                         ; yes, insert candidate
754B DD 75 00    7 1002 ld      (ix+0), l
754E             7 1003 Candidates_2ndBest_Next
754E 2C          7 1004 inc     l                           ; move HL to next board potential address
754F 10 F4       7 1005 djnz    Candidates_2ndBest_Loop     ; repeat for each cell
7551 DD 7D       7 1006 ld      a, ixl                      ; A = current candidates position
7553 BB          7 1007 cp      e                           ; new candidates inserted?
7554 28 E5       7 1008 jr      z, Candidates_2ndBest       ; no, repeat until new candidates inserted
7556             7 1009 Candidates_2ndBest_Exit
7556 42          7 1010 ld      b, d                        ; restore attack mobility
7557 08          7 1011 ex      af, af'                     ; restore board potential
7558             7 1013 ; insert the best board potentials in candidates area
7558             7 1014 Candidates_Best
7558 2E 08       7 1015 ld      l, 8                        ; HL points to board potential address (1st position -1)
755A             7 1016 Candidates_Best_Loop
755A 2C          7 1017 inc     l                           ; move HL to next board potential address
755B BE          7 1018 cp      (hl)                        ; is current board potential equal to best board potential?
755C C2 5A 75    7 1019 jp      nz, Candidates_Best_Loop    ; no, next potential
755F DD 2C       7 1020 inc     ixl                         ; yes, insert candidate
7561 DD 75 00    7 1021 ld      (ix+0), l
7564 10 F4       7 1022 djnz    Candidates_Best_Loop        ; repeat for each cell
7566 C9          7 1023 ret
7567             7 1025 ; ----------------------------------------------------------------------------------------------------------------------
7567             7 1026 ; Fill candidates for winner color
7567             7 1027 ; ----------------------------------------------------------------------------------------------------------------------
7567             7 1028 Candidates_Winner
7567 3A 99 61    7 1029 ld      a, (AI_PLAYER)              ; check speccy side
756A FE 02       7 1030 cp      FRIEND                      ; is it friend?
756C CA 7F 75    7 1031 jp      z, Candidates_Cyan_Potential; yes, fill candidates from cyan potentials
756F C3 92 75    7 1032 jp      Candidates_Red_Potential    ; no, fill candidates from red potentials
7572             7 1034 ; ----------------------------------------------------------------------------------------------------------------------
7572             7 1035 ; Fill candidates for defeated color
7572             7 1036 ; ----------------------------------------------------------------------------------------------------------------------
7572             7 1037 Candidates_Defeat
7572 3A 99 61    7 1038 ld      a, (AI_PLAYER)              ; check speccy side
7575 FE 02       7 1039 cp      FRIEND                      ; is it friend?
7577 28 13       7 1040 jr      z, Candidates_Red           ; yes, fill candidates from red potentials
7579             7 1042 ; if RED is defeated, candidates are chosen from cyan board potentials
7579 CD 40 71    7 1044 call    PathFinder_Cyan_UpDown      ; calculate cyan two-distance from UP to DOWN edge
757C CD 7C 71    7 1045 call    PathFinder_Cyan_DownUp      ; calculate cyan two-distance from DOWN to UP edge
757F             7 1046 Candidates_Cyan_Potential
757F 21 09 61    7 1047 ld      hl, CYAN_BOARD_UP_DOWN+9    ; HL points to cyan board up-down address (1st position)
7582 11 51 61    7 1048 ld      de, CYAN_BOARD_DOWN_UP+1    ; DE points to cyan board down-up address (1st position)
7585 CD F0 74    7 1049 call    PathFinder_Potentials       ; calculate cyan potentials
7588 79          7 1051 ld      a, c                        ; set board potential in A
7589 C3 58 75    7 1052 jp      Candidates_Best             ; fill only the best candidates
758C             7 1054 ; if CYAN is defeated, candidates are chosen from red board potentials
758C             7 1055 Candidates_Red
758C CD B4 71    7 1056 call    PathFinder_Red_LeftRight    ; calculate red two-distance from LEFT to RIGHT edge
758F CD F6 71    7 1057 call    PathFinder_Red_RightLeft    ; calculate red two-distance from RIGHT to LEFT edge
7592             7 1058 Candidates_Red_Potential
7592 21 09 64    7 1059 ld      hl, RED_BOARD_LEFT_RIGHT+9  ; HL points to red board left-right address (1st pos.)
7595 11 51 64    7 1060 ld      de, RED_BOARD_RIGHT_LEFT+1  ; DE points to red board right-left address (1st position)
7598 CD F0 74    7 1061 call    PathFinder_Potentials       ; calculate red potentials
759B 79          7 1063 ld      a, c                        ; set board potential in A
759C C3 58 75    7 1064 jp      Candidates_Best             ; fill only the best candidates
759F             7 1066 ; ----------------------------------------------------------------------------------------------------------------------
759F             7 1067 ; PathFinder_VictoryPath: calculate current player victory path
759F             7 1068 ;
759F             7 1069 ; Input:    -
759F             7 1070 ;
759F             7 1071 ; Output:   A = -1, if there isn't a victory path
759F             7 1072 ;           A = start position (-1) of the victory path, otherwise
759F             7 1073 ;
759F             7 1074 ; Uses:     TOKEN_COLOR (current token color)
759F             7 1075 ;
759F             7 1076 ; Destroys: BC, DE, HL, IY
759F             7 1077 ; ----------------------------------------------------------------------------------------------------------------------
759F             7 1078 PathFinder_VictoryPath:
759F 3A 9E 61    7 1079 ld      a, (TOKEN_COLOR)            ; get current token color
75A2 FE 05       7 1080 cp      CYAN_COLOR                  ; if it is cyan, check victory path for cyan player
75A4 28 0C       7 1081 jr      z, PathFinder_VictoryPath_Cyan
75A6 CD B4 71    7 1083 call    PathFinder_Red_LeftRight    ; execute Path_Finder RED two-distance from LEFT to RIGHT
75A9 21 45 64    7 1084 ld      hl, RED_BOARD_LEFT_RIGHT+69 ; HL points to red board left-right address (last position)
75AC CD BE 75    7 1085 call    PathFinder_PrepareBoard     ; prepare board to calculate victory path
75AF C3 BD 71    7 1086 jp      PathFinder_Red_CheckPath    ; calculate RED victory path
75B2             7 1088 PathFinder_VictoryPath_Cyan
75B2 CD 40 71    7 1089 call    PathFinder_Cyan_UpDown      ; execute Path_Finder CYAN two-distance from UP to DOWN
75B5 21 45 61    7 1090 ld      hl, CYAN_BOARD_UP_DOWN+69   ; HL points to cyan board up-down address (last position)
75B8 CD BE 75    7 1091 call    PathFinder_PrepareBoard     ; prepare board to calculate victory path
75BB C3 49 71    7 1092 jp      PathFinder_Cyan_CheckPath   ; calculate CYAN victory path
75BE             7 1094 ; ----------------------------------------------------------------------------------------------------------------------
75BE             7 1095 ; PathFinder_PrepareBoard: update '[color]_BOARD_XX_YY', changing VICTORY+$40 to 1, everything else to ENEMY.
75BE             7 1096 ; Immediately after 'Path_Finder_[color]' returned VICTORY, you can execute this routine, then execute 'Path_Finder_
75BE             7 1097 ; [color]' again to find a victory path.
75BE             7 1098 ;
75BE             7 1099 ; Coded by Einar Saukas
75BE             7 1100 ;
75BE             7 1101 ; Input:    HL = pointer to last position of [color]_BOARD
75BE             7 1102 ;
75BE             7 1103 ; Output:   -
75BE             7 1104 ;
75BE             7 1105 ; Destroys: A, BC, HL
75BE             7 1106 ; ----------------------------------------------------------------------------------------------------------------------
75BE             7 1107 PathFinder_PrepareBoard:
75BE 3E 43       7 1108 ld      a, VICTORY+$40              ; set victory distance + friendly flag
75C0 0E 07       7 1109 ld      c, 7                        ; 7 rows
75C2             7 1110 PrepareBoard_Row
75C2 06 07       7 1111 ld      b, 7                        ; 7 columns
75C4             7 1112 PrepareBoard_Column
75C4 BE          7 1113 cp      (hl)                        ; is it win condition?
75C5 36 01       7 1114 ld      (hl), 1                     ; save 1 by default
75C7 28 02       7 1115 jr      z, PrepareBoard_Next        ; yes, next position
75C9 36 7E       7 1116 ld      (hl), ENEMY                 ; no, save ENEMY
75CB             7 1117 PrepareBoard_Next
75CB 2D          7 1118 dec     l                           ; HL points to next board position
75CC 10 F6       7 1119 djnz    PrepareBoard_Column         ; repeat for each column
75CE 2D          7 1121 dec     l                           ; skip borders
75CF 2D          7 1122 dec     l
75D0 0D          7 1123 dec     c                           ; decrement rows
75D1 20 EF       7 1124 jr      nz, PrepareBoard_Row        ; repeat for each row
75D3 C9          7 1125 ret
75D4             7 1127 ; ----------------------------------------------------------------------------------------------------------------------
75D4             7 1128 ; PathFinder_BrightPath: animate and highlight the hexagons included in shortest path when match ends
75D4             7 1129 ;
75D4             7 1130 ; Input:    B  = start position of the victory path
75D4             7 1131 ;           HL = [color]_QUEUE_AREA address
75D4             7 1132 ;
75D4             7 1133 ; Output:   -
75D4             7 1134 ;
75D4             7 1135 ; Uses:     TOKEN_COLOR (current token color)
75D4             7 1136 ;
75D4             7 1137 ; Destroys: A, BC, DE, HL, IX
75D4             7 1138 ; ----------------------------------------------------------------------------------------------------------------------
75D4             7 1139 PathFinder_BrightPath:
75D4 3A 9E 61    7 1140 ld      a, (TOKEN_COLOR)            ; get current token color
75D7 F5          7 1141 push    af                          ; store current token color
75D8 C6 40       7 1142 add     a, $40                      ; apply bright attribute
75DA 32 9E 61    7 1143 ld      (TOKEN_COLOR), a            ; save color
75DD 24          7 1145 inc     h                           ; move HL to the start position of the victory path
75DE 68          7 1146 ld      l, b
75DF 4E          7 1147 ld      c, (hl)                     ; set victory path length in C
75E0 18 1E       7 1148 jr      BrightPath_Position         ; animate and highlight the hexagon position
75E2             7 1149 BrightPath_Neighbor
75E2 2C          7 1150 inc     l                           ; move HL to left neighbor address
75E3 BE          7 1151 cp      (hl)                        ; is it the same as victory path length?
75E4 28 1A       7 1152 jr      z, BrightPath_Position      ; yes, animate and highlight the hexagon position
75E6 2D          7 1153 dec     l
75E7 2D          7 1154 dec     l                           ; right neighbor
75E8 BE          7 1155 cp      (hl)                        ; is it the same as victory path length?
75E9 28 15       7 1156 jr      z, BrightPath_Position      ; yes, animate and highlight the hexagon position
75EB 7D          7 1157 ld      a, l
75EC D6 08       7 1158 sub     WIDTH
75EE 6F          7 1159 ld      l, a                        ; move HL to upper-right neighbor address
75EF 79          7 1160 ld      a, c                        ; restore victory path length in A
75F0 BE          7 1161 cp      (hl)                        ; is it the same as victory path length?
75F1 28 0D       7 1162 jr      z, BrightPath_Position      ; yes, animate and highlight the hexagon position
75F3 2C          7 1163 inc     l                           ; upper-left neighbor
75F4 BE          7 1164 cp      (hl)                        ; is it the same as victory path length?
75F5 28 09       7 1165 jr      z, BrightPath_Position      ; yes, animate and highlight the hexagon position
75F7 7D          7 1166 ld      a, l
75F8 C6 10       7 1167 add     a, WIDTH*2
75FA 6F          7 1168 ld      l, a                        ; move HL to lower-right neighbor address
75FB 79          7 1169 ld      a, c                        ; restore victory path length in A
75FC BE          7 1170 cp      (hl)                        ; is it the same as victory path length?
75FD 28 01       7 1171 jr      z, BrightPath_Position      ; yes, animate and highlight the hexagon position
75FF 2C          7 1172 inc     l                           ; move HL to lower-left neighbor address
7600             7 1173 BrightPath_Position
7600 C5          7 1174 push    bc                          ; store victory path length
7601 E5          7 1175 push    hl                          ; store current position pointer
7602 CD 80 6D    7 1176 call    Main_Board2Indexes          ; convert a board position into a board indexes
7605 CD BB 6D    7 1177 call    Draw_Token                  ; animate hexagon sprite on the screen
7608 DD 21 E7 64 7 1178 ld      ix, TOKEN_FX                ; IX points to token tone parameters address
760C CD D6 76    7 1179 call    Sound_FX                    ; play sound effect
760F E1          7 1180 pop     hl                          ; restore current position pointer
7610 C1          7 1181 pop     bc                          ; restore victory path length
7611 0D          7 1182 dec     c                           ; decrement victory path length
7612 79          7 1183 ld      a, c                        ; set victory path length in A
7613 FE 03       7 1184 cp      VICTORY                     ; has reached victory path length?
7615 20 CB       7 1185 jr      nz, BrightPath_Neighbor     ; repeat for each neighbor until reach VICTORY length
7617 F1          7 1187 pop     af                          ; restore current token color
7618 32 9E 61    7 1188 ld      (TOKEN_COLOR), a
761B C9          7 1189 ret

; File #8: C:\Users\Antonio Luque\source\Repos\Hex\Z80CodeFiles\Timer.z80asm

761C             8 1 ; ----------------------------------------------------------------------------------------------------------------------
761C             8 2 ; Timer.z80asm
761C             8 3 ; Coded by Antonio Luque
761C             8 4 ;
761C             8 5 ; Based on disassembly of "Chess" (c) 1982 Psion
761C             8 6 ; ----------------------------------------------------------------------------------------------------------------------
761C             8 8 ; ----------------------------------------------------------------------------------------------------------------------
761C             8 9 ; Timer_Interrupt: interrupt routine to manage players' timers
761C             8 10 ;
761C             8 11 ; Input:    -
761C             8 12 ;
761C             8 13 ; Output:   -
761C             8 14 ;
761C             8 15 ; Uses:     TIMER_FLAG (0 = timer stopped, 1 = cyan timer on, 2 = red timer on)
761C             8 16 ;
761C             8 17 ; Destroys: BC', DE', HL'
761C             8 18 ; ----------------------------------------------------------------------------------------------------------------------
761C             8 19 Timer_Interrupt:
761C F5          8 20 push    af                          ; store AF register
761D D9          8 21 exx                                 ; store BC, DE and HL registers
761E 3A EB 62    8 23 ld      a, (TIMER_FLAG)             ; check timer flag
7621 B7          8 24 or      a                           ; is timer stopped?
7622 CA 4B 76    8 25 jp      z, Timer_Exit               ; yes, exit routine
7625 21 EF 62    8 27 ld      hl, RED_TIMER               ; HL points to red's interrupt counter address
7628 3D          8 28 dec     a                           ; is red timer on?
7629 C2 2F 76    8 29 jp      nz, Timer_Counters          ; yes, check interrupt counter 
762C 21 EC 62    8 30 ld      hl, CYAN_TIMER              ; HL points to cyan's interrupt counter address
762F             8 31 Timer_Counters
762F 35          8 32 dec     (hl)                        ; decrement interrupt counter
7630 C2 4B 76    8 33 jp      nz, Timer_Exit              ; if not 0, exit routine
7633 36 32       8 35 ld      (hl), 50                    ; restart interrupt counter
7635 23          8 36 inc     hl                          ; move HL to seconds counter address
7636 3E 01       8 37 ld      a, 1                        ; increment seconds counter
7638 86          8 38 add     a, (hl)
7639 27          8 39 daa                                 ; convert to BCD (Binary-Coded-Decimal)
763A 77          8 40 ld      (hl), a                     ; store seconds
763B FE 60       8 41 cp      $60                         ; 60 seconds reached?
763D C2 48 76    8 42 jp      nz, Timer_Show              ; no, show timer
7640 36 00       8 43 ld      (hl), 0                     ; restart seconds counter
7642 23          8 44 inc     hl                          ; move HL to minutes counter address
7643 3E 01       8 45 ld      a, 1                        ; increment minutes counter
7645 86          8 46 add     a, (hl)
7646 27          8 47 daa                                 ; convert to BCD (Binary-Coded-Decimal)
7647 77          8 48 ld      (hl), a                     ; store minutes
7648             8 49 Timer_Show
7648 CD 4F 76    8 50 call    Timer_Display               ; display timer on the screen
764B             8 51 Timer_Exit
764B D9          8 52 exx                                 ; restore BC, DE and HL registers
764C F1          8 53 pop     af                          ; restore AF register
764D FB          8 55 ei                                  ; enable interrupts
764E C9          8 56 ret
764F             8 58 ; ----------------------------------------------------------------------------------------------------------------------
764F             8 59 ; Timer_Display: display a timer on the screen
764F             8 60 ;
764F             8 61 ; Input:    -
764F             8 62 ;
764F             8 63 ; Output:   -
764F             8 64 ;
764F             8 65 ; Uses:     TIMER_FLAG (0 = timer stopped, 1 = cyan timer on, 2 = red timer on)
764F             8 66 ;
764F             8 67 ; Destroys: A, BC, DE, HL
764F             8 68 ; ----------------------------------------------------------------------------------------------------------------------
764F             8 69 Timer_Display:
764F 11 F1 62    8 70 ld      de, RED_TIMER+2             ; DE points to red's minutes counter address
7652 01 E2 48    8 71 ld      bc, $48E2                   ; BC points to red's minutes screen address
7655 3A EB 62    8 72 ld      a, (TIMER_FLAG)             ; check timer flag
7658 3D          8 73 dec     a                           ; is cyan timer on?
7659 C2 62 76    8 74 jp      nz, Timer_Display_Min       ; no, jump to display minutes counter
765C 11 EE 62    8 75 ld      de, CYAN_TIMER+2            ; DE points to cyan's minutes counter address
765F 01 78 40    8 76 ld      bc, $4078                   ; BC points to cyan's minutes screen address
7662             8 77 Timer_Display_Min
7662 CD 67 76    8 78 call    Timer_Display_MinSec        ; display minutes counter on screen
7665 1B          8 79 dec     de                          ; DE points to seconds counter address
7666 0C          8 80 inc     c                           ; BC points to seconds screen address
7667             8 81 Timer_Display_MinSec:
7667 1A          8 82 ld      a, (de)                     ; set min/sec counter in A
7668 1F          8 83 rra                                 ; move tens digit to the first 4th bits of A
7669 1F          8 84 rra
766A 1F          8 85 rra
766B 1F          8 86 rra
766C CD 70 76    8 87 call    Timer_Display_Digit         ; display tens digit on screen
766F 1A          8 88 ld      a, (de)                     ; set min/sec counter in A 
7670             8 89 Timer_Display_Digit:
7670 E6 0F       8 90 and     %00001111                   ; discard the last 4th bits of the digit
7672 C5          8 91 push    bc                          ; store digit screen address
7673 21 97 64    8 93 ld      hl, TIMER_DIGITS            ; HL points to timer digits (graphics) address
7676 87          8 94 add     a, a                        ; a digit is 8 bytes long
7677 87          8 95 add     a, a
7678 87          8 96 add     a, a
7679 85          8 97 add     a, l                        ; set digit index in HL
767A 6F          8 98 ld      l, a
767B 7E          8 100 ld      a, (hl)                     ; get digit tile
767C 02          8 101 ld      (bc), a                     ; put it on screen address
767D 04          8 102 inc     b                           ; move BC to next pixel-line address
767E 2C          8 103 inc     l                           ; move HL to next digit tile address
767F 7E          8 104 ld      a, (hl)                     ; (repeat 7 more times)
7680 02          8 105 ld      (bc), a
7681 04          8 106 inc     b
7682 2C          8 107 inc     l
7683 7E          8 108 ld      a, (hl)
7684 02          8 109 ld      (bc), a
7685 04          8 110 inc     b
7686 2C          8 111 inc     l
7687 7E          8 112 ld      a, (hl)
7688 02          8 113 ld      (bc), a
7689 04          8 114 inc     b
768A 2C          8 115 inc     l
768B 7E          8 116 ld      a, (hl)
768C 02          8 117 ld      (bc), a
768D 04          8 118 inc     b
768E 2C          8 119 inc     l
768F 7E          8 120 ld      a, (hl)
7690 02          8 121 ld      (bc), a
7691 04          8 122 inc     b
7692 2C          8 123 inc     l
7693 7E          8 124 ld      a, (hl)
7694 02          8 125 ld      (bc), a
7695 04          8 126 inc     b
7696 2C          8 127 inc     l
7697 7E          8 128 ld      a, (hl)
7698 02          8 129 ld      (bc), a
7699 C1          8 131 pop     bc                          ; restore digit screen address
769A 0C          8 132 inc     c                           ; move screen address to next column
769B C9          8 133 ret
769C             8 135 ; ----------------------------------------------------------------------------------------------------------------------
769C             8 136 ; Timer_Display_All: display cyan and red timers
769C             8 137 ;
769C             8 138 ; Input:    -
769C             8 139 ;
769C             8 140 ; Output:   -
769C             8 141 ;
769C             8 142 ; Uses:     TIMER_FLAG (0 = timer stopped, 1 = cyan timer on, 2 = red timer on)
769C             8 143 ;
769C             8 144 ; Destroys: BC, DE, HL
769C             8 145 ; ----------------------------------------------------------------------------------------------------------------------
769C             8 146 Timer_Display_All:
769C 3E 01       8 147 ld      a, 1                        ; set cyan timer on
769E 32 EB 62    8 148 ld      (TIMER_FLAG), a
76A1 CD 4F 76    8 149 call    Timer_Display               ; display cyan timer
76A4 3E 02       8 151 ld      a, 2                        ; set red timer on
76A6 32 EB 62    8 152 ld      (TIMER_FLAG), a
76A9 CD 4F 76    8 153 call    Timer_Display               ; display red timer
76AC AF          8 155 xor     a                           ; stop timers
76AD 32 EB 62    8 156 ld      (TIMER_FLAG), a
76B0 C9          8 157 ret
76B1             8 159 ; ----------------------------------------------------------------------------------------------------------------------
76B1             8 160 ; Timer_Reset: initialize cyan and red timers
76B1             8 161 ;
76B1             8 162 ; Input:    -
76B1             8 163 ;
76B1             8 164 ; Output:   -
76B1             8 165 ;
76B1             8 166 ; Destroys: HL
76B1             8 167 ; ----------------------------------------------------------------------------------------------------------------------
76B1             8 168 Timer_Reset:
76B1 21 EC 62    8 169 ld      hl, CYAN_TIMER              ; HL points to cyan timer address
76B4 36 32       8 171 ld      (hl), 50                    ; set interrupt counter (1/50 seconds)
76B6 23          8 172 inc     hl                          ; move HL to cyan's seconds counter address
76B7 36 00       8 173 ld      (hl), 0                     ; reset seconds counter
76B9 23          8 174 inc     hl                          ; move HL to cyan's minutes counter address
76BA 36 00       8 175 ld      (hl), 0                     ; reset minutes counter
76BC 23          8 176 inc     hl                          ; move HL to red's interrupt counter
76BD 36 32       8 178 ld      (hl), 50                    ; set interrupt counter (1/50 seconds)
76BF 23          8 179 inc     hl                          ; move HL to red's seconds counter address
76C0 36 00       8 180 ld      (hl), 0                     ; reset seconds counter
76C2 23          8 181 inc     hl                          ; move HL to red's minutes counter address
76C3 36 00       8 182 ld      (hl), 0                     ; reset minutes counter
76C5 C9          8 183 ret
76C6             8 185 ; ----------------------------------------------------------------------------------------------------------------------
76C6             8 186 ; Timer_Pause: pause the current timer
76C6             8 187 ;
76C6             8 188 ; Input:    -
76C6             8 189 ;
76C6             8 190 ; Output:   -
76C6             8 191 ;
76C6             8 192 ; Uses:     TIMER_FLAG (0 = timer stopped, 1 = cyan timer on, 2 = red timer on)
76C6             8 193 ;
76C6             8 194 ; Destroys: A, HL
76C6             8 195 ; ----------------------------------------------------------------------------------------------------------------------
76C6             8 196 Timer_Pause:
76C6 21 EB 62    8 197 ld      hl, TIMER_FLAG              ; HL points to timer flag address
76C9 7E          8 198 ld      a, (hl)                     ; set timer flag in A
76CA 36 00       8 199 ld      (hl), 0                     ; stop timers
76CC 32 D1 76    8 200 ld      (Timer_Restart+1), a        ; save timer flag for later restart
76CF C9          8 201 ret
76D0             8 203 ; ----------------------------------------------------------------------------------------------------------------------
76D0             8 204 ; Timer_Restart: restart the current timer
76D0             8 205 ;
76D0             8 206 ; Input:    -
76D0             8 207 ;
76D0             8 208 ; Output:   -
76D0             8 209 ;
76D0             8 210 ; Uses:     TIMER_FLAG (0 = timer stopped, 1 = cyan timer on, 2 = red timer on)
76D0             8 211 ;
76D0             8 212 ; Destroys: A
76D0             8 213 ; ----------------------------------------------------------------------------------------------------------------------
76D0             8 214 Timer_Restart:
76D0 3E 00       8 215 ld      a, 0                        ; restore paused timer flag (saved by 'Timer_Pause')
76D2 32 EB 62    8 216 ld      (TIMER_FLAG), a             ; restart timer
76D5 C9          8 217 ret

; File #9: C:\Users\Antonio Luque\source\Repos\Hex\Z80CodeFiles\Sound.z80asm

76D6             9 1 ; ----------------------------------------------------------------------------------------------------------------------
76D6             9 2 ; Sound.z80asm
76D6             9 3 ; Coded with BeepFX player tool by Shiru: https://shiru.untergrund.net/software.shtml
76D6             9 4 ;
76D6             9 5 ; Adapted for Hex game by Antonio Luque
76D6             9 6 ; ----------------------------------------------------------------------------------------------------------------------
76D6             9 8 ; ----------------------------------------------------------------------------------------------------------------------
76D6             9 9 ; Sound_FX: play a sound effect (tone) defined by many parameters
76D6             9 10 ; 
76D6             9 11 ; Input:    IX = tone parameters address
76D6             9 12 ;
76D6             9 13 ; Output:   -
76D6             9 14 ;
76D6             9 15 ; Destroys: A, BC, DE, HL, IY
76D6             9 16 ; ----------------------------------------------------------------------------------------------------------------------
76D6             9 17 Sound_FX:
76D6 F3          9 18 di                                  ; disable interrupts
76D7 DD 4E 00    9 20 ld      c, (ix+0)                   ; BC = frames
76DA DD 46 01    9 21 ld      b, (ix+1)
76DD DD 5E 02    9 22 ld      e, (ix+2)                   ; DE = frame length
76E0 DD 56 03    9 23 ld      d, (ix+3)
76E3 D5          9 24 push    de                          ; store frame length in IY
76E4 FD E1       9 25 pop     iy
76E6 DD 5E 04    9 26 ld      e, (ix+4)                   ; DE = pitch
76E9 DD 56 05    9 27 ld      d, (ix+5)
76EC 21 00 00    9 28 ld      hl, 0                       ; reset HL
76EF             9 30 Sound_FX_Frames
76EF C5          9 31 push    bc                          ; store frames
76F0 FD E5       9 32 push    iy                          ; restore frame length in BC
76F2 C1          9 33 pop     bc
76F3             9 34 Sound_FX_FrameLength
76F3 19          9 35 add     hl, de                      ; HL = incremented pitch
76F4 7C          9 36 ld      a, h                        ; compares with fixed duty cycle ($80 for 50% square wave)
76F5 FE 80       9 37 cp      $80                         ; if (incremented pitch < duty cycle)
76F7 9F          9 38 sbc     a, a                        ;    { A = %11111111 } else { A = %00000000 }
76F8 E6 10       9 39 and     %00010000                   ; toggling bit 4 controls the internal speaker
76FA F6 00       9 40 or      0                           ; keep border unchanged, dummy (7t)
76FC D3 FE       9 41 out     ($FE), a                    ; send bit to internal speaker
76FE 3A 00 00    9 42 ld      a, (0)                      ; dummy (13t)
7701 0B          9 43 dec     bc                          ; decrement frame length
7702 78          9 44 ld      a, b                        ; check frame length
7703 B1          9 45 or      c                           ; frame length = 0?
7704 C2 F3 76    9 46 jp      nz, Sound_FX_FrameLength    ; no, repeat "frame length" times (loop = 88t)
7707 DD 4E 06    9 48 ld      c, (ix+6)                   ; BC = pitch slide
770A DD 46 07    9 49 ld      b, (ix+7)
770D EB          9 50 ex      de, hl                      ; HL = current pitch
770E 09          9 51 add     hl, bc                      ; increment pitch with pitch slide
770F EB          9 52 ex      de, hl                      ; DE = new pitch
7710 C1          9 54 pop     bc                          ; restore frames
7711 0B          9 55 dec     bc                          ; decrement frames
7712 78          9 56 ld      a, b                        ; check frames
7713 B1          9 57 or      c                           ; frames = 0?
7714 20 D9       9 58 jr      nz, Sound_FX_Frames         ; no, repeat "frames" times
7716 FB          9 60 ei                                  ; enable interrupts
7717 C9          9 61 ret

; File #10: C:\Users\Antonio Luque\source\Repos\Hex\Z80CodeFiles\Screen.z80asm

7718             10 1 ; ----------------------------------------------------------------------------------------------------------------------
7718             10 2 ; Screen.z80asm
7718             10 3 ; Coded by Antonio Luque
7718             10 4 ; ----------------------------------------------------------------------------------------------------------------------
7718             10 6 BLUE_INK                equ     %00000001                   ; attributes: flash 0, bright 0, paper 0, ink 1
7718             10 7 BLUE_PAPER              equ     %00001000                   ; attributes: flash 0, bright 0, paper 1, ink 0
7718             10 8 WHITE_PAPER             equ     %00111000                   ; attributes: flash 0, bright 0, paper 7, ink 0
7718             10 9 WHITE                   equ     %00000111                   ; attributes: flash 0, bright 0, paper 0, ink 7
7718             10 10 BRIGHT                  equ     %01000000                   ; mask to apply bright to attributes
7718             10 11 FLASH                   equ     %10000000                   ; mask to apply flash to attributes
7718             10 12 WHITE_FLASH0            equ     WHITE+BRIGHT                ; attributes: flash 0, bright 1, paper 0, ink 7
7718             10 13 WHITE_FLASH1            equ     WHITE+BRIGHT+FLASH          ; attributes: flash 1, bright 1, paper 0, ink 7
7718             10 15 ; ----------------------------------------------------------------------------------------------------------------------
7718             10 16 ; Screen_Clear: fill in black the whole screen area and attributes area
7718             10 17 ;
7718             10 18 ; Input:    -
7718             10 19 ;
7718             10 20 ; Output:   -
7718             10 21 ;
7718             10 22 ; Destroys: BC, DE, HL
7718             10 23 ; ----------------------------------------------------------------------------------------------------------------------
7718             10 24 Screen_Clear:
7718 21 00 40    10 25 ld      hl, $4000                   ; HL points to start of the screen address
771B 11 01 40    10 26 ld      de, $4001                   ; DE points to next byte of the screen address
771E 75          10 27 ld      (hl), l                     ; set first pixel-byte in black
771F 01 FF 1A    10 28 ld      bc, 6144-1+768              ; length of screen area (-1 already set) + attributes area 
7722 ED B0       10 29 ldir                                ; fill the rest of screen area and attributes area in black
7724 C9          10 30 ret
7725             10 32 ; ----------------------------------------------------------------------------------------------------------------------
7725             10 33 ; Screen_Letters: draw the two rows of letters on the screen (a..g)
7725             10 34 ;
7725             10 35 ; Input:    -
7725             10 36 ;
7725             10 37 ; Output:   -
7725             10 38 ;
7725             10 39 ; Destroys: A, BC, DE, HL, IX
7725             10 40 ; ----------------------------------------------------------------------------------------------------------------------
7725             10 41 Screen_Letters:
7725 21 66 45    10 42 ld      hl, $4566                   ; HL points to first letter screen address (top row)
7728 DD 21 66 58 10 43 ld      ix, $5866                   ; IX points to first letter attribute address (top row)
772C CD 36 77    10 44 call    Screen_Letters_Row          ; draw top row of letters
772F 21 6D 51    10 45 ld      hl, $516D                   ; HL points to first letter screen address (bottom row)
7732 DD 21 6D 5A 10 46 ld      ix, $5A6D                   ; IX points to first letter attribute address (bottom row)
7736             10 47 Screen_Letters_Row:
7736 11 5E 66    10 48 ld      de, LETTER_SPRITES          ; DE points to letter sprites address
7739 06 07       10 49 ld      b, 7                        ; number of letters (loop counter)
773B             10 50 Screen_Letter_Loop
773B E5          10 51 push    hl                          ; store letter screen address
773C CD F3 6D    10 52 call    Draw_Sprite_LetterNum       ; draw letter at screen address
773F E1          10 53 pop     hl                          ; restore letter screen address
7740 2C          10 54 inc     l                           ; move HL to next screen address
7741 2C          10 55 inc     l
7742 DD 36 00 05 10 56 ld      (ix+0), CYAN_COLOR          ; set letter color (2 bytes)
7746 DD 36 20 05 10 57 ld      (ix+32), CYAN_COLOR
774A DD 2C       10 58 inc     ixl                         ; move IX to next attribute address
774C DD 2C       10 59 inc     ixl
774E 10 EB       10 60 djnz    Screen_Letter_Loop          ; repeat for each letter
7750 C9          10 61 ret
7751             10 63 ; ----------------------------------------------------------------------------------------------------------------------
7751             10 64 ; Screen_Numbers: draw the two columns of numbers on the screen (1-7)
7751             10 65 ;
7751             10 66 ; Input:    -
7751             10 67 ;
7751             10 68 ; Output:   -
7751             10 69 ;
7751             10 70 ; Destroys: A, BC, DE, HL, IX, IY
7751             10 71 ; ----------------------------------------------------------------------------------------------------------------------
7751             10 72 Screen_Numbers:
7751 11 A4 66    10 73 ld      de, NUMBER_SPRITES          ; DE points to numbers sprites
7754 FD 21 F2 62 10 74 ld      iy, NUMBER_SCREEN           ; IY points to numbers screen addresses
7758 DD 21 A5 58 10 75 ld      ix, $58A5                   ; IX points to first number attribute address
775C 06 07       10 76 ld      b, 7                        ; number of numbers (loop counter)
775E             10 77 Screen_Number_Loop
775E FD 6E 00    10 78 ld      l, (iy+0)                   ; HL points to number screen address
7761 FD 66 01    10 79 ld      h, (iy+1)
7764 E5          10 80 push    hl                          ; store pointer to number screen address
7765 D5          10 81 push    de                          ; store pointer to sprite address
7766 CD F3 6D    10 82 call    Draw_Sprite_LetterNum       ; draw number at screen address
7769 D1          10 83 pop     de                          ; restore pointer to sprite address
776A E1          10 84 pop     hl                          ; restore pointer to number screen address
776B DD 36 00 02 10 85 ld      (ix+0), RED_COLOR           ; set number color (2 bytes)
776F DD 36 20 02 10 86 ld      (ix+32), RED_COLOR
7773 7D          10 87 ld      a, l                        ; move HL to screen address of the 2nd column
7774 C6 0F       10 88 add     a, 15
7776 6F          10 89 ld      l, a
7777 CD F3 6D    10 90 call    Draw_Sprite_LetterNum       ; draw number at screen address
777A DD 36 0F 02 10 91 ld      (ix+15), RED_COLOR          ; set number color (2 bytes)
777E DD 36 2F 02 10 92 ld      (ix+47), RED_COLOR
7782 78          10 93 ld      a, b                        ; save loop counter
7783 01 41 00    10 94 ld      bc, 65                      ; displacement of next attribute address
7786 DD 09       10 95 add     ix, bc                      ; move IX to next attribute address
7788 FD 23       10 96 inc     iy                          ; move IY to next number screen address
778A FD 23       10 97 inc     iy
778C 47          10 98 ld      b, a                        ; restore loop counter
778D 10 CF       10 99 djnz    Screen_Number_Loop          ; repeat for each number
778F C9          10 100 ret
7790             10 102 ; ----------------------------------------------------------------------------------------------------------------------
7790             10 103 ; Screen_Frame: draw the screen frame on the screen
7790             10 104 ;
7790             10 105 ; Input:    -
7790             10 106 ;
7790             10 107 ; Output:   -
7790             10 108 ;
7790             10 109 ; Destroys: A, BC, DE, HL, IX
7790             10 110 ; ----------------------------------------------------------------------------------------------------------------------
7790             10 111 Screen_Frame:
7790 11 2B 62    10 112 ld      de, STR_LEVELTEXT           ; DE points to "Level" string address
7793 21 09 40    10 113 ld      hl, $4009                   ; HL points to screen address of the string
7796 CD 58 6F    10 114 call    Print_String                ; print "Level"
7799 CD D5 77    10 115 call    Screen_Vertical_Bars        ; draw the vertical bars of frame
779C 01 90 62    10 117 ld      bc, FRAME_MAP               ; BC points to the frame tiles indexes
779F 21 00 40    10 118 ld      hl, $4000                   ; HL points to the screen address of the up-border
77A2 CD A8 77    10 119 call    Screen_Frame_Border         ; draw up-border
77A5 21 E0 50    10 120 ld      hl, $50E0                   ; HL points to the screen address of the bottom-border
77A8             10 121 Screen_Frame_Border:
77A8 DD 2E 20    10 122 ld      ixl, 32                     ; border width in bytes (loop counter)
77AB             10 123 Screen_Frame_Loop
77AB 0A          10 124 ld      a, (bc)                     ; get tile index
77AC FE FF       10 125 cp      -1                          ; is it -1?
77AE 28 06       10 126 jr      z, Screen_Frame_Next        ; yes, there is no tile to print
77B0 11 0E 65    10 127 ld      de, FRAME_TILES             ; DE points to tiles array
77B3 CD 67 6F    10 128 call    Print_Tile                  ; print frame tile
77B6             10 129 Screen_Frame_Next
77B6 2C          10 130 inc     l                           ; HL points to the next screen address (next column)
77B7 03          10 131 inc     bc                          ; BC points to the next tile index
77B8 DD 2D       10 132 dec     ixl                         ; decrement loop counter
77BA 20 EF       10 133 jr      nz, Screen_Frame_Loop       ; repeat for each tile
77BC DD 21 07 58 10 135 ld      ix, $5807                   ; IX points to the "concave left" tile screen position
77C0 DD 36 00 08 10 136 ld      (ix+0), BLUE_PAPER          ; color tile
77C4 DD 36 0A 08 10 137 ld      (ix+10), BLUE_PAPER         ; color "concave right" tile
77C8 DD 21 F1 5A 10 138 ld      ix, $5AF1                   ; IX points to the "convex left" tile screen position
77CC DD 36 00 01 10 139 ld      (ix+0), BLUE_INK            ; color tile
77D0 DD 36 04 01 10 140 ld      (ix+4), BLUE_INK            ; color "convex right" tile
77D4 C9          10 141 ret
77D5             10 143 ; ----------------------------------------------------------------------------------------------------------------------
77D5             10 144 ; Screen_Vertical_Bars: draw the vertical bars of the frame on the screen
77D5             10 145 ;
77D5             10 146 ; Input:    -
77D5             10 147 ;
77D5             10 148 ; Output:   -
77D5             10 149 ;
77D5             10 150 ; Destroys: A, BC, HL
77D5             10 151 ; ----------------------------------------------------------------------------------------------------------------------
77D5             10 152 Screen_Vertical_Bars:
77D5 21 20 40    10 153 ld      hl, $4020                   ; HL points to left bar screen address
77D8 CD DE 77    10 154 call    Screen_Vertical_Bar         ; draw left bar
77DB 21 3F 40    10 155 ld      hl, $403F                   ; HL points to right bar screen address
77DE             10 156 Screen_Vertical_Bar:
77DE 06 B0       10 157 ld      b, 176                      ; number of pixel lines (loop counter)
77E0             10 158 Screen_Vertical_Loop
77E0 36 3C       10 159 ld      (hl), %00111100             ; draw pixel byte of bar
77E2 CD FF 6D    10 160 call    Draw_Down_PixelLine         ; move HL to the next pixel-line address
77E5 10 F9       10 161 djnz    Screen_Vertical_Loop        ; repeat for each pixel line
77E7 C9          10 162 ret
77E8             10 164 ; ----------------------------------------------------------------------------------------------------------------------
77E8             10 165 ; Screen_Tokens: draw the fixed tokens on the screen
77E8             10 166 ;
77E8             10 167 ; Input:    -
77E8             10 168 ;
77E8             10 169 ; Output:   -
77E8             10 170 ;
77E8             10 171 ; Uses:     TOKEN_COLOR (current token color)
77E8             10 172 ;
77E8             10 173 ; Destroys: A, BC, DE, HL, IX
77E8             10 174 ; ----------------------------------------------------------------------------------------------------------------------
77E8             10 175 Screen_Tokens:
77E8 3E 05       10 176 ld      a, CYAN_COLOR               ; set token color
77EA 21 BA 44    10 177 ld      hl, $44BA                   ; HL points to the fixed cyan token screen address
77ED CD F5 77    10 178 call    Screen_Tokens_Draw          ; draw cyan fixed token
77F0 3E 02       10 180 ld      a, RED_COLOR                ; set token color
77F2 21 24 54    10 181 ld      hl, $5424                   ; HL points to the fixed red token screen address 
77F5             10 182 Screen_Tokens_Draw:
77F5 32 9E 61    10 183 ld      (TOKEN_COLOR), a            ; save token color
77F8 CD 0E 6E    10 184 call    Draw_Hexagon_Color          ; color fixed token area
77FB DD 77 40    10 185 ld      (ix+64), a                  ; the fixed tokens are 3 bytes (attributes) high, so we have
77FE DD 77 41    10 186 ld      (ix+65), a                  ; to color the remaining 2 bytes that have not been colored
7801 11 3E 66    10 187 ld      de, HEXAGON_TOKEN           ; DE points to token sprite address
7804 C3 E0 6D    10 188 jp      Draw_Sprite_Hexagon         ; draw fixed token
7807             10 190 ; ----------------------------------------------------------------------------------------------------------------------
7807             10 191 ; Screen_Timer_Quotes: draw the timer quotes ('  '') on the screen
7807             10 192 ;
7807             10 193 ; Input:    -
7807             10 194 ;
7807             10 195 ; Output:   -
7807             10 196 ;
7807             10 197 ; Destroys: IX
7807             10 198 ; ----------------------------------------------------------------------------------------------------------------------
7807             10 199 Screen_Timer_Quotes:
7807 DD 21 7A 40 10 200 ld      ix, $407A                   ; IX points to the screen address of the cyan timer quotes 
780B DD 36 00 08 10 201 ld      (ix+0), %00001000           ; draw 1st half of simple quote (')
780F DD 36 03 0A 10 202 ld      (ix+3), %00001010           ; draw 1st half of double quotes (")
7813 DD 24       10 203 inc     ixh                         ; move IX to the next screen pixel-line
7815 DD 36 00 08 10 204 ld      (ix+0), %00001000           ; draw 2nd half of simple quote (')
7819 DD 36 03 0A 10 205 ld      (ix+3), %00001010           ; draw 2nd half of double quotes (")
781D DD 26 58    10 206 ld      ixh, $58                    ; move IX to the attribute address
7820 DD 36 00 07 10 207 ld      (ix+0), WHITE               ; color simple quote
7824 DD 36 03 07 10 208 ld      (ix+3), WHITE               ; color double quotes
7828 DD 21 E4 48 10 210 ld      ix, $48E4                   ; IX points to the screen address of the red timer quotes
782C DD 36 00 08 10 211 ld      (ix+0), %00001000           ; draw 1st half of simple quote (')
7830 DD 36 03 0A 10 212 ld      (ix+3), %00001010           ; draw 1st half of double quotes (")
7834 DD 24       10 213 inc     ixh                         ; move IX to the next screen pixel-line
7836 DD 36 00 08 10 214 ld      (ix+0), %00001000           ; draw 2nd half of simple quote (')
783A DD 36 03 0A 10 215 ld      (ix+3), %00001010           ; draw 2nd half of double quotes (")
783E DD 26 59    10 216 ld      ixh, $59                    ; move IX to the attribute address
7841 DD 36 00 07 10 217 ld      (ix+0), WHITE               ; color simple quote
7845 DD 36 03 07 10 218 ld      (ix+3), WHITE               ; color double quotes
7849 C9          10 219 ret
784A             10 221 ; ----------------------------------------------------------------------------------------------------------------------
784A             10 222 ; Screen_Color_Statics: apply color to some statics items of the screen
784A             10 223 ;
784A             10 224 ; Input:    -
784A             10 225 ;
784A             10 226 ; Output:   -
784A             10 227 ;
784A             10 228 ; Destroys: BC, IX
784A             10 229 ; ----------------------------------------------------------------------------------------------------------------------
784A             10 230 Screen_Color_Statics:
784A DD 21 78 58 10 231 ld      ix, $5878                   ; IX points to the attr. address of the cyan player timer
784E 0E 07       10 232 ld      c, WHITE                    ; set color in C
7850 CD 7A 78    10 233 call    Screen_Apply_Color          ; apply color
7853 DD 2E 98    10 234 ld      ixl, $98                    ; IX points to the attr. address of the cyan player name
7856 0E 05       10 235 ld      c, CYAN_COLOR               ; set color in C
7858 CD 7A 78    10 236 call    Screen_Apply_Color          ; apply color
785B DD 21 18 59 10 237 ld      ix, $5918                   ; IX points to the attr. address of the cyan player messages
785F 0E 47       10 238 ld      c, WHITE+BRIGHT             ; set color in C
7861 CD 7A 78    10 239 call    Screen_Apply_Color          ; apply color
7864 DD 2E E2    10 240 ld      ixl, $E2                    ; IX points to the attr. address of the red player timer
7867 0E 07       10 241 ld      c, WHITE                    ; set color in C
7869 CD 7A 78    10 242 call    Screen_Apply_Color          ; apply color
786C DD 21 02 5A 10 243 ld      ix, $5A02                   ; IX points to the attr. address of the red player name
7870 0E 02       10 244 ld      c, RED_COLOR                ; set color in C
7872 CD 7A 78    10 245 call    Screen_Apply_Color          ; apply color
7875 DD 2E 82    10 246 ld      ixl, $82                    ; IX points to the attr. address of the red player messages
7878 0E 47       10 247 ld      c, WHITE+BRIGHT             ; set color in C
787A             10 248 Screen_Apply_Color:
787A 06 06       10 249 ld      b, 6                        ; number of bytes to be colored (loop counter)
787C             10 250 Screen_Apply_Color_Loop:
787C DD 71 00    10 251 ld      (ix+0), c                   ; apply color
787F DD 2C       10 252 inc     ixl                         ; move IX to the next attribute address
7881 10 F9       10 253 djnz    Screen_Apply_Color_Loop     ; repeat for each byte
7883 C9          10 254 ret
7884             10 256 ; ----------------------------------------------------------------------------------------------------------------------
7884             10 257 ; Screen_Last_Level: show last level screen and input game level
7884             10 258 ;
7884             10 259 ; Input:    -
7884             10 260 ;
7884             10 261 ; Output:   -
7884             10 262 ;
7884             10 263 ; Uses:     GAME_LEVEL (current game level)
7884             10 264 ;
7884             10 265 ; Destroys: A, BC, DE, HL, IX, IY
7884             10 266 ; ----------------------------------------------------------------------------------------------------------------------
7884             10 267 Screen_Last_Level:
7884 11 3C 68    10 268 ld      de, STR_PRESSKEY            ; DE points to "Press any key" string address
7887 21 AD 50    10 269 ld      hl, $50AD                   ; HL points to string screen address
788A CD 58 6F    10 270 call    Print_String                ; print "Press any key"
788D DD 21 AD 5A 10 271 ld      ix, $5AAD                   ; IX points to string attributes address
7891 01 38 0D    10 272 ld      bc, 13*256+WHITE_PAPER      ; B = string length (loop counter), C = color attributes
7894 CD 7C 78    10 273 call    Screen_Apply_Color_Loop     ; apply color to string area
7897 CD C4 6E    10 274 call    Input_Key_Scan              ; wait for a key pressed
789A CD 18 77    10 276 call    Screen_Clear                ; fill in black the whole screen area and attributes area
789D CD 5D 7C    10 277 call    Screen_Hexagons             ; draw menu hexagons ("HEX 2")
78A0 DD 21 C7 59 10 278 ld      ix, $59C7                   ; IX points to "CONGRATULATIONS" string attributes address
78A4 01 C7 11    10 279 ld      bc, 17*256+WHITE_FLASH1     ; B = string length (loop counter), C = color attributes
78A7 CD 7C 78    10 280 call    Screen_Apply_Color_Loop     ; apply color to string area
78AA 11 B4 68    10 281 ld      de, STR_CONGRATS            ; DE points to string address
78AD 21 C7 48    10 282 ld      hl, $48C7                   ; HL points to string screen address
78B0 CD 58 6F    10 283 call    Print_String                ; print "CONGRATULATIONS"
78B3 DD 21 EF 64 10 284 ld      ix, WINNER_FX               ; IX points to winner tone parameters address
78B7 CD D6 76    10 285 call    Sound_FX                    ; play sound fx
78BA F3          10 287 di                                  ; disable interrupts
78BB DD 21 42 5A 10 288 ld      ix, $5A42                   ; IX points to "Well done!..." string attributes address
78BF 01 07 1C    10 289 ld      bc, 28*256+WHITE            ; B = string length (loop counter), C = color attributes
78C2 CD 7C 78    10 290 call    Screen_Apply_Color_Loop     ; apply color to string area
78C5 11 C6 68    10 291 ld      de, STR_LAST_LEVEL          ; DE points to string address
78C8 21 42 50    10 292 ld      hl, $5042                   ; HL points to string screen address
78CB CD 58 6F    10 293 call    Print_String                ; print "Well done!..."
78CE DD 2E 82    10 294 ld      ixl, $82                    ; IX points to "Choose..." string attributes address
78D1 06 18       10 295 ld      b, 24                       ; string length-4 (loop counter)
78D3 CD 7C 78    10 296 call    Screen_Apply_Color_Loop     ; apply color to string area
78D6 DD 36 01 78 10 297 ld      (ix+1), WHITE_PAPER+BRIGHT  ; set color for last characters ("1-4")
78DA DD 36 02 78 10 298 ld      (ix+2), WHITE_PAPER+BRIGHT
78DE DD 36 03 78 10 299 ld      (ix+3), WHITE_PAPER+BRIGHT
78E2 13          10 300 inc     de                          ; move DE to next string address
78E3 2E 82       10 301 ld      l, $82                      ; HL points to string screen address
78E5 CD 58 6F    10 302 call    Print_String                ; print "Choose..."
78E8             10 303 Screen_Choose_Level
78E8 CD C4 6E    10 304 call    Input_Key_Scan              ; wait for a key pressed
78EB FE 31       10 305 cp      '1'                         ; is it < '1' ?
78ED 38 F9       10 306 jr      c, Screen_Choose_Level      ; yes, wait for a key pressed
78EF FE 35       10 307 cp      '5'                         ; is it >= '5' ?
78F1 30 F5       10 308 jr      nc, Screen_Choose_Level     ; yes, wait for a key pressed
78F3 D6 31       10 309 sub     $31                         ; convert ASCII into level number (-1)
78F5 21 9D 61    10 310 ld      hl, GAME_LEVEL              ; HL points to game level address
78F8 77          10 311 ld      (hl), a                     ; save chosen game level (-1)
78F9 C9          10 312 ret
78FA             10 314 ; ----------------------------------------------------------------------------------------------------------------------
78FA             10 315 ; Screen_ThreeRow: color the three-in-a-row marks according to the current three row counter
78FA             10 316 ;
78FA             10 317 ; Input:    -
78FA             10 318 ;
78FA             10 319 ; Output:   -
78FA             10 320 ;
78FA             10 321 ; Uses:     LEVEL_COLOR (current level color for frame border)
78FA             10 322 ;           THREE_ROW (three-in-a-row counter)
78FA             10 323 ;
78FA             10 324 ; Destroys: A, C, HL, IX
78FA             10 325 ; ----------------------------------------------------------------------------------------------------------------------
78FA             10 326 Screen_ThreeRow:
78FA 21 9C 61    10 327 ld      hl, LEVEL_COLOR             ; HL points to level color address
78FD 4E          10 328 ld      c, (hl)                     ; save level color in C
78FE CD 16 79    10 329 call    Screen_Clear_ThreeRow       ; clear all three-in-a-row marks
7901 3A 11 62    10 330 ld      a, (THREE_ROW)              ; A = three-in-a-row counter
7904 B7          10 331 or      a                           ; is it 0?
7905 C8          10 332 ret     z                           ; yes, return
7906 3D          10 333 dec     a                           ; is it 1?
7907 28 09       10 334 jr      z, Screen_ThreeRow_1        ; yes, color first mark
7909 3D          10 335 dec     a                           ; is it 2?
790A 28 03       10 336 jr      z, Screen_ThreeRow_2        ; yes color 2nd and 1st marks
790C DD 71 00    10 337 ld      (ix+0), c                   ; color 3rd mark
790F             10 338 Screen_ThreeRow_2
790F DD 71 01    10 339 ld      (ix+1), c                   ; color 2nd mark
7912             10 340 Screen_ThreeRow_1
7912 DD 71 02    10 341 ld      (ix+2), c                   ; color 1st mark
7915 C9          10 342 ret
7916             10 344 ; ----------------------------------------------------------------------------------------------------------------------
7916             10 345 ; Screen_Clear_ThreeRow: clear all three-in-a-row marks
7916             10 346 ;
7916             10 347 ; Input:    -
7916             10 348 ;
7916             10 349 ; Output:   IX = three-in-a-row marks attribute address
7916             10 350 ;
7916             10 351 ; Destroys: -
7916             10 352 ; ----------------------------------------------------------------------------------------------------------------------
7916             10 353 Screen_Clear_ThreeRow:
7916 DD 21 F2 5A 10 354 ld      ix, $5AF2                   ; IX points to attribute address of three-in-a-row marks
791A DD 36 00 01 10 355 ld      (ix+0), BLUE_INK            ; clear all three-in-a-row marks
791E DD 36 01 01 10 356 ld      (ix+1), BLUE_INK
7922 DD 36 02 01 10 357 ld      (ix+2), BLUE_INK
7926 C9          10 358 ret
7927             10 360 ; ----------------------------------------------------------------------------------------------------------------------
7927             10 361 ; Screen_Frame_Color: set up frame color and print level number depending on current level
7927             10 362 ;
7927             10 363 ; Input:    HL = game level address
7927             10 364 ;
7927             10 365 ; Output:   -
7927             10 366 ;
7927             10 367 ; Uses:     LEVEL_COLOR (current level color for frame border)
7927             10 368 ;
7927             10 369 ; Destroys: A, BC, DE, HL
7927             10 370 ; ----------------------------------------------------------------------------------------------------------------------
7927             10 371 Screen_Frame_Color:
7927 06 00       10 372 ld      b, 0                        ; set game level in BC
7929 4E          10 373 ld      c, (hl)
792A 3E 30       10 374 ld      a, $30                      ; convert game level number to game level character
792C 81          10 375 add     a, c
792D 21 0F 40    10 376 ld      hl, $400F                   ; HL points to screen address of game level
7930 CD 64 6F    10 377 call    Print_Char                  ; print game level
7933 21 11 62    10 378 ld      hl, ROW_COLOR_MAP-1         ; HL points to color map address (adjusted for index 0)
7936 09          10 379 add     hl, bc                      ; use BC as index for color map address
7937 7E          10 380 ld      a, (hl)                     ; A = level color
7938 CD 4D 79    10 381 call    Screen_Tiles_Color          ; color the frame according to the current level
793B E6 07       10 382 and     %00000111                   ; mask color
793D 32 9C 61    10 383 ld      (LEVEL_COLOR), a            ; save masked color
7940 17          10 384 rla                                 ; rotate to text level color
7941 17          10 385 rla
7942 17          10 386 rla
7943 21 08 58    10 387 ld      hl, $5808                   ; HL points to attribute address of level text
7946 06 09       10 388 ld      b, 9                        ; length of level text (loop counter)
7948             10 389 Screen_Level_Loop
7948 77          10 390 ld      (hl), a                     ; apply color to level text
7949 2C          10 391 inc     l                           ; HL points to attr address of next character of level text
794A 10 FC       10 392 djnz    Screen_Level_Loop           ; repeat for each character of level text
794C C9          10 393 ret
794D             10 395 ; ----------------------------------------------------------------------------------------------------------------------
794D             10 396 ; Screen_Tiles_Color: apply color to the frame tiles
794D             10 397 ;
794D             10 398 ; Input:    A = color to apply
794D             10 399 ;
794D             10 400 ; Output:   -
794D             10 401 ;
794D             10 402 ; Destroys: BC, DE, HL
794D             10 403 ; ----------------------------------------------------------------------------------------------------------------------
794D             10 404 Screen_Tiles_Color:
794D             10 405 ; color up row
794D 21 01 58    10 407 ld      hl, $5801                   ; HL points to attribute address of the the frame tile 
7950 06 06       10 408 ld      b, 6                        ; number of tiles (loop counter)
7952             10 409 Screen_Tiles_URow1
7952 77          10 410 ld      (hl), a                     ; apply color
7953 2C          10 411 inc     l                           ; move HL to the next attribute address
7954 10 FC       10 412 djnz    Screen_Tiles_URow1          ; repeat for each tile
7956 2E 12       10 413 ld      l, $12                      ; move HL to the next attribute address
7958 06 0D       10 414 ld      b, 13                       ; number of tiles (loop counter)
795A             10 415 Screen_Tiles_URow2
795A 77          10 416 ld      (hl), a                     ; apply color
795B 2C          10 417 inc     l                           ; move HL to the next attribute address
795C 10 FC       10 418 djnz    Screen_Tiles_URow2          ; repeat for each tile
795E             10 420 ; color vertical bars
795E 2E 00       10 422 ld      l, 0                        ; move HL to the next attribute address
7960 11 1F 00    10 423 ld      de, 31                      ; attribute address displacement (for each bar)
7963 0E 03       10 424 ld      c, 3                        ; number of screen thirds (outer loop counter)
7965             10 425 Screen_Tiles_VBar1
7965 06 08       10 426 ld      b, 8                        ; number of tiles (inner loop counter)
7967             10 427 Screen_Tiles_VBar2
7967 77          10 428 ld      (hl), a                     ; apply color
7968 19          10 429 add     hl, de                      ; move HL to the right column
7969 77          10 430 ld      (hl), a                     ; apply color
796A 2C          10 431 inc     l                           ; move HL to the next attribute address
796B 10 FA       10 432 djnz    Screen_Tiles_VBar2          ; repeat for each tile
796D 24          10 433 inc     h                           ; move HL to the next screen third
796E 0D          10 434 dec     c                           ; decrement number of thirds
796F 20 F4       10 435 jr      nz, Screen_Tiles_VBar1      ; repeat for each third
7971             10 437 ; color bottom row
7971 21 E1 5A    10 439 ld      hl, $5AE1                   ; HL points to attribute address of the the frame tile
7974 06 10       10 440 ld      b, 16                       ; number of tiles (loop counter)
7976             10 441 Screen_Tiles_BRow1
7976 77          10 442 ld      (hl), a                     ; apply color
7977 2C          10 443 inc     l                           ; move HL to the next attribute address
7978 10 FC       10 444 djnz    Screen_Tiles_BRow1          ; repeat for each tile
797A 2E F6       10 445 ld      l, $F6                      ; move HL to the next attribute address
797C 06 09       10 446 ld      b, 9                        ; number of tiles (loop counter)
797E             10 447 Screen_Tiles_BRow2
797E 77          10 448 ld      (hl), a                     ; apply color
797F 2C          10 449 inc     l                           ; move HL to the next attribute address
7980 10 FC       10 450 djnz    Screen_Tiles_BRow2          ; repeat for each tile
7982 C9          10 451 ret
7983             10 453 ; ----------------------------------------------------------------------------------------------------------------------
7983             10 454 ; Screen_Menu: show main menu and wait for an option
7983             10 455 ;
7983             10 456 ; Input:    -
7983             10 457 ;
7983             10 458 ; Output:   -
7983             10 459 ;
7983             10 460 ; Uses:     GAME_LEVEL (current game level)
7983             10 461 ;
7983             10 462 ; Destroys: A, BC, DE, HL, IX, IY
7983             10 463 ; ----------------------------------------------------------------------------------------------------------------------
7983             10 464 Screen_Menu:
7983 CD 18 77    10 465 call    Screen_Clear                ; fill in black the whole screen area and attributes area
7986 CD 5D 7C    10 466 call    Screen_Hexagons             ; draw menu hexagons ("HEX 2")
7989             10 467 Screen_Menu_Strings
7989 21 80 59    10 468 ld      hl, $5980                   ; HL points to menu text area attributes address
798C 11 81 59    10 469 ld      de, $5981                   ; DE points to next byte of menu text area attr. address
798F 36 00       10 470 ld      (hl), 0                     ; set first attribute text area in black
7991 01 7F 01    10 471 ld      bc, 32*12-1                 ; length of text area attributes (-1 already set)
7994 ED B0       10 472 ldir                                ; set the rest of text area attributes in black
7996 DD 21 CA 59 10 474 ld      ix, $59CA                   ; IX points to "Start new game" string attr. address (+1)
799A DD 36 FF 78 10 475 ld      (ix-1), WHITE_PAPER+BRIGHT  ; set color of first letter
799E 01 47 0D    10 476 ld      bc, 13*256+WHITE_FLASH0     ; B = string length-1 (loop counter), C = color attributes
79A1 CD 7C 78    10 477 call    Screen_Apply_Color_Loop     ; apply color to string area
79A4 11 80 67    10 478 ld      de, STR_OPTIONS             ; DE points to string address
79A7 21 C9 48    10 479 ld      hl, $48C9                   ; HL points to string screen address
79AA CD 58 6F    10 480 call    Print_String                ; print "Start new game"
79AD DD 21 2A 5A 10 481 ld      ix, $5A2A                   ; IX points to "How to play" string attributes address (+1)
79B1 DD 36 FF 78 10 482 ld      (ix-1), WHITE_PAPER+BRIGHT  ; set color of first letter
79B5 06 0A       10 483 ld      b, 10                       ; string length-1 (loop counter)
79B7 CD 7C 78    10 484 call    Screen_Apply_Color_Loop     ; apply color to string area
79BA 13          10 485 inc     de                          ; move DE to "How to play" string address
79BB 21 29 50    10 486 ld      hl, $5029                   ; HL points to string screen address
79BE CD 58 6F    10 487 call    Print_String                ; print "How to play"
79C1 DD 2E 8A    10 488 ld      ixl, $8A                    ; IX points to "Credits" string attributes address (+1)
79C4 DD 36 FF 78 10 489 ld      (ix-1), WHITE_PAPER+BRIGHT  ; set color of first letter
79C8 CD 7A 78    10 490 call    Screen_Apply_Color          ; apply color to string area
79CB 13          10 491 inc     de                          ; move DE to "Credits" string address
79CC 2E 89       10 492 ld      l, $89                      ; HL points to string screen address
79CE CD 58 6F    10 493 call    Print_String                ; print "Credits"
79D1             10 494 Screen_Menu_Options
79D1 CD C4 6E    10 495 call    Input_Key_Scan              ; wait for a key pressed
79D4 FE 73       10 496 cp      's'                         ; is it 's'?
79D6 C8          10 497 ret     z                           ; yes, return
79D7 FE 63       10 498 cp      'c'                         ; is it 'c'?
79D9 CA ED 7B    10 499 jp      z, Screen_Menu_Credits      ; yes, show credits
79DC FE 68       10 500 cp      'h'                         ; is it 'h'?
79DE 20 F1       10 501 jr      nz, Screen_Menu_Options     ; no, repeat until key pressed = 's' or 'c' or 'h'
79E0             10 503 ; ----------------------------------------------------------------------------------------------------------------------
79E0             10 504 ; Show "How to play" pages
79E0             10 505 ; ----------------------------------------------------------------------------------------------------------------------
79E0             10 506 Screen_Menu_How2Play
79E0 CD 18 77    10 507 call    Screen_Clear                ; fill in black the whole screen area and attributes area
79E3 CD 25 77    10 508 call    Screen_Letters              ; draw the two rows of letters on the screen (a..g)
79E6 CD 51 77    10 509 call    Screen_Numbers              ; draw the two columns of numbers on the screen (1..7)
79E9 CD 90 77    10 510 call    Screen_Frame                ; draw the screen frame
79EC 21 9D 61    10 512 ld      hl, GAME_LEVEL              ; HL points to game level address (needed for color frame)
79EF 34          10 513 inc     (hl)                        ; increment game level (GAME_LEVEL = 1)
79F0 CD 27 79    10 514 call    Screen_Frame_Color          ; set up frame color depending on current level
79F3 CD 16 79    10 515 call    Screen_Clear_ThreeRow       ; clear all three-in-a-row marks
79F6 11 4A 68    10 517 ld      de, STR_BUTTONS             ; DE points to "Next" string address
79F9 21 DB 50    10 518 ld      hl, $50DB                   ; HL points to string screen address
79FC CD 58 6F    10 519 call    Print_String                ; print "Next"
79FF 13          10 520 inc     de                          ; move DE to "Back" string address
7A00 21 C1 50    10 521 ld      hl, $50C1                   ; HL points to string screen address
7A03 CD 58 6F    10 522 call    Print_String                ; print "Back"
7A06             10 524 Screen_How2Play_RED
7A06 21 5E 58    10 525 ld      hl, $5876-24                ; HL points to cyan text area attributes address (-24)
7A09 CD 97 7C    10 526 call    Screen_Clear_Text           ; clear text area attributes
7A0C CD A0 6D    10 527 call    Draw_Board                  ; draw an empty hexagons board
7A0F             10 529 ; text for RED
7A0F DD 21 01 5A 10 531 ld      ix, $5A01                   ; IX points to "Connect" string attributes address
7A13 01 07 07    10 532 ld      bc, 7*256+WHITE             ; B = string length (loop counter), C = color attributes
7A16 CD 7C 78    10 533 call    Screen_Apply_Color_Loop     ; apply color to string area
7A19 11 5D 68    10 534 ld      de, STR_HELP1               ; DE points to string address
7A1C 21 01 50    10 535 ld      hl, $5001                   ; HL points to string screen address
7A1F CD 58 6F    10 536 call    Print_String                ; print "Connect"
7A22 DD 2E 21    10 537 ld      ixl, $21                    ; IX points to "left and" string attributes address
7A25 06 08       10 538 ld      b, 8                        ; string length (loop counter)
7A27 CD 7C 78    10 539 call    Screen_Apply_Color_Loop     ; apply color to string area
7A2A 13          10 540 inc     de                          ; move DE to "left and" string address
7A2B 2E 21       10 541 ld      l, $21                      ; HL points to string screen address
7A2D CD 58 6F    10 542 call    Print_String                ; print "left and"
7A30 DD 2E 41    10 543 ld      ixl, $41                    ; IX points to "right" string attributes address
7A33 06 05       10 544 ld      b, 5                        ; set string length (loop counter)
7A35 CD 7C 78    10 545 call    Screen_Apply_Color_Loop     ; apply color to string area
7A38 11 75 68    10 546 ld      de, STR_HELP3_RED           ; DE points to "right" string address
7A3B 2E 41       10 547 ld      l, $41                      ; HL points to string screen address
7A3D CD 58 6F    10 548 call    Print_String                ; print "right"
7A40 DD 2E 61    10 549 ld      ixl, $61                    ; IX points to "borders" string attributes address
7A43 06 07       10 550 ld      b, 7                        ; set string length (loop counter)
7A45 CD 7C 78    10 551 call    Screen_Apply_Color_Loop     ; apply color to string area
7A48 11 80 68    10 552 ld      de, STR_HELP4               ; DE points to "borders" string address
7A4B 2E 61       10 553 ld      l, $61                      ; HL points to string screen address
7A4D CD 58 6F    10 554 call    Print_String                ; print "borders"
7A50 DD 2E 81    10 555 ld      ixl, $81                    ; IX points to "to win" string attributes address
7A53 CD 7A 78    10 556 call    Screen_Apply_Color          ; apply color to string area
7A56 13          10 557 inc     de                          ; move DE to "to win" string address
7A57 2E 81       10 558 ld      l, $81                      ; HL points to string screen address
7A59 CD 58 6F    10 559 call    Print_String                ; print "to win"
7A5C DD 21 E3 59 10 560 ld      ix, $59E3                   ; IX points to "RED" string attributes address
7A60 01 42 03    10 561 ld      bc, 3*256+RED_COLOR+BRIGHT  ; B = string length (loop counter), C = color attributes
7A63 CD 7C 78    10 562 call    Screen_Apply_Color_Loop     ; apply color to string area
7A66 11 54 68    10 563 ld      de, STR_RED                 ; DE points to "RED" string address
7A69 21 E3 48    10 564 ld      hl, $48E3                   ; HL points to string screen address
7A6C CD 58 6F    10 565 call    Print_String                ; print "RED"
7A6F             10 567 ; draw RED sample board
7A6F FD 21 3A 67 10 569 ld      iy, SAMPLE_BOARD_RED        ; IY points to sample board (red) screen addresses
7A73 11 3E 66    10 570 ld      de, HEXAGON_TOKEN           ; DE points to token sprite address
7A76 06 07       10 571 ld      b, 7                        ; number of red+bright tokens (loop counter)
7A78 3E 42       10 572 ld      a, RED_COLOR+BRIGHT         ; set token color
7A7A 32 9E 61    10 573 ld      (TOKEN_COLOR), a            ; save token color
7A7D CD 82 7C    10 574 call    Screen_Hexagons_Loop        ; draw tokens
7A80 06 02       10 575 ld      b, 2                        ; number of red tokens (loop counter)
7A82 3E 02       10 576 ld      a, RED_COLOR                ; set token color
7A84 32 9E 61    10 577 ld      (TOKEN_COLOR), a            ; save token color
7A87 CD 82 7C    10 578 call    Screen_Hexagons_Loop        ; draw tokens
7A8A 06 09       10 579 ld      b, 9                        ; number of cyan tokens (loop counter)
7A8C 3E 05       10 580 ld      a, CYAN_COLOR               ; set token color
7A8E 32 9E 61    10 581 ld      (TOKEN_COLOR), a            ; save token color
7A91 CD 82 7C    10 582 call    Screen_Hexagons_Loop        ; draw tokens
7A94             10 584 ; wait for "Next" option pressed
7A94 DD 21 C1 5A 10 586 ld      ix, $5AC1                   ; IX points to "Back" string attribute address
7A98 01 00 04    10 587 ld      bc, $0400                   ; B = string length (loop counter), C = attributes (black)
7A9B CD 7C 78    10 588 call    Screen_Apply_Color_Loop     ; hide "Back" string
7A9E DD 2E DC    10 589 ld      ixl, $DC                    ; IX points to "Next" string attribute address (+1)
7AA1 DD 36 FF 78 10 590 ld      (ix-1), WHITE_PAPER+BRIGHT  ; set color of first letter
7AA5 01 47 03    10 591 ld      bc, 3*256+WHITE_FLASH0      ; B = string length-1 (loop counter), C = color attributes
7AA8 CD 7C 78    10 592 call    Screen_Apply_Color_Loop     ; apply color to string area
7AAB             10 593 Screen_How2PlayRED_End
7AAB CD C4 6E    10 594 call    Input_Key_Scan              ; wait for a key pressed
7AAE FE 6E       10 595 cp      'n'                         ; is it 'n'?
7AB0 20 F9       10 596 jr      nz, Screen_How2PlayRED_End  ; no, repeat until key pressed = 'n'
7AB2             10 598 Screen_How2Play_CYAN
7AB2 21 0F 58    10 599 ld      hl, $580F                   ; HL points to level number attribute address
7AB5 CB BE       10 600 res     7, (hl)                     ; reset flash attribute
7AB7 26 40       10 601 ld      h, $40                      ; HL points to level number screen address
7AB9 3E 31       10 602 ld      a, '1'                      ; set level number (char)
7ABB CD 64 6F    10 603 call    Print_Char                  ; print '1'
7ABE CD 16 79    10 604 call    Screen_Clear_ThreeRow       ; clear all three-in-a-row marks
7AC1 21 C9 59    10 606 ld      hl, $59E1-24                ; HL points to red text area attributes address (-24)
7AC4 CD 97 7C    10 607 call    Screen_Clear_Text           ; clear text area attributes
7AC7 CD A0 6D    10 608 call    Draw_Board                  ; draw an empty hexagons board
7ACA             10 610 ; text for CYAN
7ACA DD 21 98 58 10 612 ld      ix, $5898                   ; IX points to "Connect" string attributes address
7ACE 01 07 07    10 613 ld      bc, 7*256+WHITE             ; B = string length (loop counter), C = color attributes
7AD1 CD 7C 78    10 614 call    Screen_Apply_Color_Loop     ; apply color to string area
7AD4 11 5D 68    10 615 ld      de, STR_HELP1               ; DE points to "Connect" string address
7AD7 21 98 40    10 616 ld      hl, $4098                   ; HL points to string screen address
7ADA CD 58 6F    10 617 call    Print_String                ; print "Connect"
7ADD DD 2E B9    10 618 ld      ixl, $B9                    ; IX points to "up and" string attributes address
7AE0 CD 7A 78    10 619 call    Screen_Apply_Color          ; apply color to string area
7AE3 11 6E 68    10 620 ld      de, STR_HELP2_CYAN          ; DE points to "up and" string address
7AE6 2E B9       10 621 ld      l, $B9                      ; HL points to string screen address
7AE8 CD 58 6F    10 622 call    Print_String                ; print "up and"
7AEB DD 2E DB    10 623 ld      ixl, $DB                    ; IX points to "down" string attributes address
7AEE 06 04       10 624 ld      b, 4                        ; string length (loop counter)
7AF0 CD 7C 78    10 625 call    Screen_Apply_Color_Loop     ; apply color to string area
7AF3 11 7B 68    10 626 ld      de, STR_HELP3_CYAN          ; DE points to "down" string address
7AF6 2E DB       10 627 ld      l, $DB                      ; HL points to string screen address
7AF8 CD 58 6F    10 628 call    Print_String                ; print "down"
7AFB DD 2E F8    10 629 ld      ixl, $F8                    ; IX points to "borders" string attributes address
7AFE 06 07       10 630 ld      b, 7                        ; string length (loop counter)
7B00 CD 7C 78    10 631 call    Screen_Apply_Color_Loop     ; apply color to string area
7B03 13          10 632 inc     de                          ; move DE to "borders" string address
7B04 2E F8       10 633 ld      l, $F8                      ; HL points to string screen address
7B06 CD 58 6F    10 634 call    Print_String                ; print "borders"
7B09 DD 21 19 59 10 635 ld      ix, $5919                   ; IX points to "to win" string attributes address
7B0D CD 7A 78    10 636 call    Screen_Apply_Color          ; apply color to string area
7B10 13          10 637 inc     de                          ; move DE to "to win" string address
7B11 21 19 48    10 638 ld      hl, $4819                   ; HL points to string screen address
7B14 CD 58 6F    10 639 call    Print_String                ; print "to win"
7B17 DD 21 7A 58 10 640 ld      ix, $587A                   ; IX points to "CYAN" string attributes address
7B1B 01 45 04    10 641 ld      bc, $0445                   ; B = string length (loop counter)
7B1E             10 642 ; C = color attributes (cyan+bright)
7B1E CD 7C 78    10 643 call    Screen_Apply_Color_Loop     ; apply color to string area
7B21 11 58 68    10 644 ld      de, STR_CYAN                ; DE points to "CYAN" string address
7B24 21 7A 40    10 645 ld      hl, $407A                   ; HL points to string screen address
7B27 CD 58 6F    10 646 call    Print_String                ; print "CYAN"
7B2A             10 648 ; draw CYAN sample board
7B2A FD 21 5E 67 10 650 ld      iy, SAMPLE_BOARD_CYAN       ; IY points to sample board (cyan) screen addresses
7B2E 11 3E 66    10 651 ld      de, HEXAGON_TOKEN           ; DE points to token sprite address
7B31 06 07       10 652 ld      b, 7                        ; number of cyan+bright tokens (loop counter)
7B33 3E 45       10 653 ld      a, CYAN_COLOR+BRIGHT        ; set token color
7B35 32 9E 61    10 654 ld      (TOKEN_COLOR), a            ; save token color
7B38 CD 82 7C    10 655 call    Screen_Hexagons_Loop        ; draw tokens
7B3B 06 02       10 656 ld      b, 2                        ; number of cyan tokens (loop counter)
7B3D 3E 05       10 657 ld      a, CYAN_COLOR               ; set token color
7B3F 32 9E 61    10 658 ld      (TOKEN_COLOR), a            ; save token color
7B42 CD 82 7C    10 659 call    Screen_Hexagons_Loop        ; draw tokens
7B45 06 08       10 660 ld      b, 8                        ; number of red tokens (loop counter)
7B47 3E 02       10 661 ld      a, RED_COLOR                ; set token color
7B49 32 9E 61    10 662 ld      (TOKEN_COLOR), a            ; save token color
7B4C CD 82 7C    10 663 call    Screen_Hexagons_Loop        ; draw tokens
7B4F             10 665 ; wait for "Next" or "Back" options pressed
7B4F DD 21 C2 5A 10 667 ld      ix, $5AC2                   ; IX points to "Back" string attributes address (+1)
7B53 DD 36 FF 78 10 668 ld      (ix-1), WHITE_PAPER+BRIGHT  ; set color of first letter
7B57 01 47 03    10 669 ld      bc, 3*256+WHITE_FLASH0      ; B = string length (-1), C = color attributes
7B5A CD 7C 78    10 670 call    Screen_Apply_Color_Loop     ; apply color to string area
7B5D             10 671 Screen_How2PlayCYAN_End
7B5D CD C4 6E    10 672 call    Input_Key_Scan              ; wait for a key pressed
7B60 FE 62       10 673 cp      'b'                         ; is it 'b'?
7B62 CA 06 7A    10 674 jp      z, Screen_How2Play_RED      ; yes, show RED page
7B65 FE 6E       10 675 cp      'n'                         ; is it 'n'?
7B67 20 F4       10 676 jr      nz, Screen_How2PlayCYAN_End ; no, repeat until key pressed = 'n' or 'b'
7B69             10 678 Screen_How2Play_LevelUp
7B69 21 5E 58    10 679 ld      hl, $5876-24                ; HL points to cyan text area attributes address (-24)
7B6C CD 97 7C    10 680 call    Screen_Clear_Text           ; clear text area attributes
7B6F             10 682 ; text for Level Up
7B6F DD 21 21 5A 10 684 ld      ix, $5A21                   ; IX points to "Win three" string attributes address
7B73 01 07 09    10 685 ld      bc, 9*256+WHITE             ; B = string length (loop counter), C = color attributes
7B76 CD 7C 78    10 686 call    Screen_Apply_Color_Loop     ; apply color to string area
7B79 11 8F 68    10 687 ld      de, STR_HELP                ; DE points to "Win three" string address
7B7C 21 21 50    10 688 ld      hl, $5021                   ; HL points to string screen address
7B7F CD 58 6F    10 689 call    Print_String                ; print "Win three"
7B82 DD 2E 41    10 690 ld      ixl, $41                    ; IX points to "times in" string attributes address
7B85 06 08       10 691 ld      b, 8                        ; string length (loop counter)
7B87 CD 7C 78    10 692 call    Screen_Apply_Color_Loop     ; apply color to string area
7B8A 13          10 693 inc     de                          ; move DE to "times in" string address
7B8B 2E 41       10 694 ld      l, $41                      ; HL points to string screen address
7B8D CD 58 6F    10 695 call    Print_String                ; print "times in"
7B90 DD 2E 61    10 696 ld      ixl, $61                    ; IX points to "a row to" string attributes address
7B93 06 08       10 697 ld      b, 8                        ; string length (loop counter)
7B95 CD 7C 78    10 698 call    Screen_Apply_Color_Loop     ; apply color to string area
7B98 13          10 699 inc     de                          ; move DE to "a row to" string address
7B99 2E 61       10 700 ld      l, $61                      ; HL points to string screen address
7B9B CD 58 6F    10 701 call    Print_String                ; print "a row to"
7B9E DD 2E 81    10 702 ld      ixl, $81                    ; IX points to "level up" string attributes address
7BA1 06 08       10 703 ld      b, 8                        ; string length (loop counter)
7BA3 CD 7C 78    10 704 call    Screen_Apply_Color_Loop     ; apply color to string area
7BA6 13          10 705 inc     de                          ; move DE to "level up" string address
7BA7 2E 81       10 706 ld      l, $81                      ; HL points to string screen address
7BA9 CD 58 6F    10 707 call    Print_String                ; print "level up"
7BAC             10 709 ; reset bright of cyan tokens
7BAC FD 21 5E 67 10 711 ld      iy, SAMPLE_BOARD_CYAN       ; IY points to sample board (cyan) screen addresses
7BB0 11 3E 66    10 712 ld      de, HEXAGON_TOKEN           ; DE points to token sprite address
7BB3 06 07       10 713 ld      b, 7                        ; number of cyan+bright tokens (loop counter)
7BB5 3E 05       10 714 ld      a, CYAN_COLOR               ; set new token color
7BB7 32 9E 61    10 715 ld      (TOKEN_COLOR), a            ; save color
7BBA CD 82 7C    10 716 call    Screen_Hexagons_Loop        ; draw tokens
7BBD             10 718 ; set flash attribute of level number and three-in-a-row marks
7BBD 21 0F 58    10 720 ld      hl, $580F                   ; HL points to level number attribute address
7BC0 CB FE       10 721 set     7, (hl)                     ; set flash attribute
7BC2 21 0F 40    10 722 ld      hl, $400F                   ; HL points to level number screen address
7BC5 3E 32       10 723 ld      a, '2'                      ; set new level
7BC7 CD 64 6F    10 724 call    Print_Char                  ; print new level
7BCA DD 21 F2 5A 10 725 ld      ix, $5AF2                   ; IX points to three-in-a-row attribute address
7BCE DD 36 00 B8 10 726 ld      (ix+0), WHITE_PAPER+FLASH   ; set flash attributes
7BD2 DD 36 01 B8 10 727 ld      (ix+1), WHITE_PAPER+FLASH
7BD6 DD 36 02 B8 10 728 ld      (ix+2), WHITE_PAPER+FLASH
7BDA             10 730 ; wait for "Next" or "Back" options pressed
7BDA             10 732 Screen_How2Play_End
7BDA CD C4 6E    10 733 call    Input_Key_Scan              ; wait for a key pressed
7BDD FE 62       10 734 cp      'b'                         ; is it 'b'?
7BDF CA B2 7A    10 735 jp      z, Screen_How2Play_CYAN     ; yes, show CYAN page
7BE2 FE 6E       10 736 cp      'n'                         ; is it 'n'?
7BE4 20 F4       10 737 jr      nz, Screen_How2Play_End     ; no, repeat until key pressed = 'b' or 'n'
7BE6 21 9D 61    10 739 ld      hl, GAME_LEVEL              ; HL points to game level address
7BE9 35          10 740 dec     (hl)                        ; decrement game level (GAME_LEVEL = 0)
7BEA C3 83 79    10 741 jp      Screen_Menu                 ; return to main menu
7BED             10 743 ; ----------------------------------------------------------------------------------------------------------------------
7BED             10 744 ; Show credits
7BED             10 745 ; ----------------------------------------------------------------------------------------------------------------------
7BED             10 746 Screen_Menu_Credits
7BED DD 21 84 59 10 747 ld      ix, $5984                   ; IX points to "Design..." string attributes address
7BF1 01 47 19    10 748 ld      bc, 25*256+WHITE_FLASH0     ; B = string length (loop counter), C = color attributes
7BF4 CD 7C 78    10 749 call    Screen_Apply_Color_Loop     ; apply color to string area
7BF7 11 A3 67    10 750 ld      de, STR_CREDITS             ; DE points to "Design..." string address
7BFA 21 84 48    10 751 ld      hl, $4884                   ; HL points to string screen address
7BFD CD 58 6F    10 752 call    Print_String                ; print "Design..."
7C00 DD 2E C4    10 753 ld      ixl, $C4                    ; IX points to "Code..." string attributes address
7C03 06 19       10 754 ld      b, 25                       ; string length (loop counter)
7C05 CD 7C 78    10 755 call    Screen_Apply_Color_Loop     ; apply color to string area
7C08 13          10 756 inc     de                          ; move DE to to "Code..." string address
7C09 2E C4       10 757 ld      l, $C4                      ; HL points to string screen address
7C0B CD 58 6F    10 758 call    Print_String                ; print "Code..."
7C0E DD 2E E4    10 759 ld      ixl, $E4                    ; IX points to "Einar Saukas" string attributes address
7C11 06 18       10 760 ld      b, 24                       ; string length (loop counter)
7C13 CD 7C 78    10 761 call    Screen_Apply_Color_Loop     ; apply color to string area
7C16 13          10 762 inc     de                          ; move DE to "Einar Saukas" string address
7C17 2E E4       10 763 ld      l, $E4                      ; HL points to string screen address
7C19 CD 58 6F    10 764 call    Print_String                ; print "Einar Saukas"
7C1C DD 21 24 5A 10 765 ld      ix, $5A24                   ; IX points to "Font..." string attributes address
7C20 06 18       10 766 ld      b, 24                       ; string length (loop counter)
7C22 CD 7C 78    10 767 call    Screen_Apply_Color_Loop     ; apply color to string area
7C25 13          10 768 inc     de                          ; move DE to "Font..." string address
7C26 21 24 50    10 769 ld      hl, $5024                   ; HL points to string screen address
7C29 CD 58 6F    10 770 call    Print_String                ; print "Font..."
7C2C DD 2E 64    10 771 ld      ixl, $64                    ; IX points to "Graphics..." string attributes address
7C2F 06 18       10 772 ld      b, 24                       ; string length (loop counter)
7C31 CD 7C 78    10 773 call    Screen_Apply_Color_Loop     ; apply color to string area
7C34 13          10 774 inc     de                          ; move DE to "Graphics..." string address
7C35 2E 64       10 775 ld      l, $64                      ; HL points to string screen address
7C37 CD 58 6F    10 776 call    Print_String                ; print "Graphics..."
7C3A DD 2E 84    10 777 ld      ixl, $84                    ; IX points to "Antonio Luque" string attributes address
7C3D 06 19       10 778 ld      b, 25                       ; string length (loop counter)
7C3F CD 7C 78    10 779 call    Screen_Apply_Color_Loop     ; apply color to string area
7C42 13          10 780 inc     de                          ; move DE to "Antonio Luque" string address
7C43 2E 84       10 781 ld      l, $84                      ; HL points to string screen address
7C45 CD 58 6F    10 782 call    Print_String                ; print "Antonio Luque"
7C48 DD 2E E9    10 783 ld      ixl, $E9                    ; IX points to "Press any key" string attributes address
7C4B 01 38 0D    10 784 ld      bc, 13*256+WHITE_PAPER      ; B = string length (loop counter), C = color attributes
7C4E CD 7C 78    10 785 call    Screen_Apply_Color_Loop     ; apply color to string area
7C51 13          10 786 inc     de                          ; move DE to "Press any key" string address
7C52 2E E9       10 787 ld      l, $E9                      ; HL points to string screen address
7C54 CD 58 6F    10 788 call    Print_String                ; print "Press any key"
7C57 CD C4 6E    10 789 call    Input_Key_Scan              ; wait for a key pressed
7C5A C3 89 79    10 790 jp      Screen_Menu_Strings         ; return to main menu
7C5D             10 792 ; ----------------------------------------------------------------------------------------------------------------------
7C5D             10 793 ; Screen_Menu_Hexagons: draw menu hexagons on screen
7C5D             10 794 ;
7C5D             10 795 ; Input:    -
7C5D             10 796 ;
7C5D             10 797 ; Output:   -
7C5D             10 798 ;
7C5D             10 799 ; Uses:     TOKEN_COLOR (current token color)
7C5D             10 800 ;
7C5D             10 801 ; Destroys: A, BC, DE, HL, IX, IY
7C5D             10 802 ; ----------------------------------------------------------------------------------------------------------------------
7C5D             10 803 Screen_Hexagons:
7C5D FD 21 EA 66 10 804 ld      iy, MENU_HEXAGONS           ; IY points to menu hexagons screen addresses
7C61 3E 07       10 805 ld      a, WHITE                    ; set hexagon color
7C63 32 9E 61    10 806 ld      (TOKEN_COLOR), a            ; save hexagon color
7C66 11 7E 65    10 807 ld      de, HEXAGON_EMPTY           ; DE points to empty hexagon sprite address
7C69 06 1C       10 808 ld      b, 28                       ; number of empty hexagons (loop counter)
7C6B CD 82 7C    10 809 call    Screen_Hexagons_Loop        ; draw empty hexagons
7C6E 3E 05       10 810 ld      a, CYAN_COLOR               ; set token color
7C70 32 9E 61    10 811 ld      (TOKEN_COLOR), a            ; save hexagon color
7C73 11 3E 66    10 812 ld      de, HEXAGON_TOKEN           ; DE points to token sprite address
7C76 06 06       10 813 ld      b, 6                        ; number of cyan tokens (loop counter)
7C78 CD 82 7C    10 814 call    Screen_Hexagons_Loop        ; draw cyan tokens
7C7B 3E 02       10 815 ld      a, RED_COLOR                ; set token color
7C7D 32 9E 61    10 816 ld      (TOKEN_COLOR), a            ; save hexagon color
7C80 06 06       10 817 ld      b, 6                        ; number of red tokens (loop counter)
7C82             10 818 Screen_Hexagons_Loop:
7C82 FD 6E 00    10 819 ld      l, (iy+0)                   ; HL points to hexagon/token screen address
7C85 FD 66 01    10 820 ld      h, (iy+1)
7C88 CD 0E 6E    10 821 call    Draw_Hexagon_Color          ; apply color to hexagon/token area
7C8B D5          10 822 push    de                          ; store hexagon/token sprite address
7C8C CD E0 6D    10 823 call    Draw_Sprite_Hexagon         ; draw hexagon sprite
7C8F D1          10 824 pop     de                          ; restore hexagon/token sprite address
7C90 FD 23       10 825 inc     iy                          ; move IY to next hexagon/token screen address
7C92 FD 23       10 826 inc     iy
7C94 10 EC       10 827 djnz    Screen_Hexagons_Loop        ; repeat for each hexagon/token
7C96 C9          10 828 ret
7C97             10 830 ; ----------------------------------------------------------------------------------------------------------------------
7C97             10 831 ; Screen_Clear_Text: clean a text attributes area
7C97             10 832 ;
7C97             10 833 ; Input:    HL = text area attributes address
7C97             10 834 ;
7C97             10 835 ; Output:   -
7C97             10 836 ;
7C97             10 837 ; Destroys: BC, DE, HL
7C97             10 838 ; ----------------------------------------------------------------------------------------------------------------------
7C97             10 839 Screen_Clear_Text:
7C97 01 30 00    10 840 ld      bc, 8*6                     ; length of attributes area: width x height (in bytes)
7C9A             10 841 Screen_ClearText_Loop
7C9A 11 18 00    10 842 ld      de, 24                      ; displacement for each text row
7C9D 19          10 843 add     hl, de                      ; add displacement to text area attributes address
7C9E 54          10 844 ld      d, h                        ; DE points to text area attributes address
7C9F 5D          10 845 ld      e, l
7CA0 36 00       10 846 ld      (hl), 0                     ; set attributes color (black) for 1st byte of current row
7CA2 13          10 847 inc     de                          ; move DE to next byte attribute address
7CA3 ED A0       10 848 ldi                                 ; set attributes color for the rest of bytes of current row
7CA5 ED A0       10 849 ldi
7CA7 ED A0       10 850 ldi
7CA9 ED A0       10 851 ldi
7CAB ED A0       10 852 ldi
7CAD ED A0       10 853 ldi
7CAF ED A0       10 854 ldi
7CB1 ED A0       10 855 ldi
7CB3 EA 9A 7C    10 856 jp      pe, Screen_ClearText_Loop   ; repeat for each row
7CB6 C9          10 857 ret

; File #0: C:\Users\Antonio Luque\source\Repos\Hex\Z80CodeFiles\Hex2.z80asm

7CB7             0 19 ; ----------------------------------------------------------------------------------------------------------------------
7CB7             0 20 ; Credits and acknowledgements:
7CB7             0 21 ;
7CB7             0 22 ; - Einar Saukas and his amazing BRAINIAC: https://spectrumcomputing.co.uk/entry/31171/ZX-Spectrum/BRAINIAC,
7CB7             0 23 ;   PATHFINDER adaptation: https://spectrumcomputing.co.uk/entry/28178/ZX-Spectrum/PATHFINDER, loading screen,
7CB7             0 24 ;   "King+" font and TOKEN graphics.
7CB7             0 25 ; - Greg Surma article: https://gsurma.medium.com/hex-creating-intelligent-opponents-with-minimax-driven-ai-part-1-%CE%B
7CB7             0 26 ;   1-%CE%B2-pruning-cc1df850e5bd
7CB7             0 27 ; - Jack van Rijswijck's thesis: https://webdocs.cs.ualberta.ca/~hayward/theses/jackmsc.pdf
7CB7             0 28 ; - ChibiAkumas lessons: https://www.chibiakumas.com/z80/simplesamples.php#LessonS2
7CB7             0 29 ; - Santiago Romero assembler course: https://wiki.speccy.org/cursos/ensamblador/indice
7CB7             0 30 ;
7CB7             0 31 ; - Special thanks to my wife Sonia.
7CB7             0 32 ; ----------------------------------------------------------------------------------------------------------------------
