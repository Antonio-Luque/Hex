
; File #0: C:\Users\Antonio\source\repos\Hex\Z80CodeFiles\Hex2.z80asm

8000             0 1 ; ----------------------------------------------------------------------------------------------------------------------
8000             0 2 ; Hex2.z80asm
8000             0 3 ; Coded by Antonio Luque
8000             0 4 ;
8000             0 5 ; Build file
8000             0 6 ; ----------------------------------------------------------------------------------------------------------------------

; File #1: C:\Users\Antonio\source\repos\Hex\Z80CodeFiles\Data.z80asm

8000             1 1 ; ----------------------------------------------------------------------------------------------------------------------
8000             1 2 ; Data.z80asm
8000             1 3 ; Coded by Antonio Luque
8000             1 4 ;
8000             1 5 ; Definition of data, variables and tables
8000             1 6 ; ----------------------------------------------------------------------------------------------------------------------
8000             1 8 STACK                   ORG     $6000
6000             1 10 ; ----------------------------------------------------------------------------------------------------------------------
6000             1 11 ; Circular queue
6000             1 12 ; ----------------------------------------------------------------------------------------------------------------------
6000 00 00 00 00 1 13 CYAN_QUEUE_AREA         DEFS    256                         ; 256-aligned block reserved for circular queue
6004 00 00 00 00 1 13 
6008 00 00 00 00 1 13 
600C 00 00 00 00 1 13 
6010 00 00 00 00 1 13 
6014 00 00 00 00 1 13 
6018 00 00 00 00 1 13 
601C 00 00 00 00 1 13 
6020 00 00 00 00 1 13 
6024 00 00 00 00 1 13 
6028 00 00 00 00 1 13 
602C 00 00 00 00 1 13 
6030 00 00 00 00 1 13 
6034 00 00 00 00 1 13 
6038 00 00 00 00 1 13 
603C 00 00 00 00 1 13 
6040 00 00 00 00 1 13 
6044 00 00 00 00 1 13 
6048 00 00 00 00 1 13 
604C 00 00 00 00 1 13 
6050 00 00 00 00 1 13 
6054 00 00 00 00 1 13 
6058 00 00 00 00 1 13 
605C 00 00 00 00 1 13 
6060 00 00 00 00 1 13 
6064 00 00 00 00 1 13 
6068 00 00 00 00 1 13 
606C 00 00 00 00 1 13 
6070 00 00 00 00 1 13 
6074 00 00 00 00 1 13 
6078 00 00 00 00 1 13 
607C 00 00 00 00 1 13 
6080 00 00 00 00 1 13 
6084 00 00 00 00 1 13 
6088 00 00 00 00 1 13 
608C 00 00 00 00 1 13 
6090 00 00 00 00 1 13 
6094 00 00 00 00 1 13 
6098 00 00 00 00 1 13 
609C 00 00 00 00 1 13 
60A0 00 00 00 00 1 13 
60A4 00 00 00 00 1 13 
60A8 00 00 00 00 1 13 
60AC 00 00 00 00 1 13 
60B0 00 00 00 00 1 13 
60B4 00 00 00 00 1 13 
60B8 00 00 00 00 1 13 
60BC 00 00 00 00 1 13 
60C0 00 00 00 00 1 13 
60C4 00 00 00 00 1 13 
60C8 00 00 00 00 1 13 
60CC 00 00 00 00 1 13 
60D0 00 00 00 00 1 13 
60D4 00 00 00 00 1 13 
60D8 00 00 00 00 1 13 
60DC 00 00 00 00 1 13 
60E0 00 00 00 00 1 13 
60E4 00 00 00 00 1 13 
60E8 00 00 00 00 1 13 
60EC 00 00 00 00 1 13 
60F0 00 00 00 00 1 13 
60F4 00 00 00 00 1 13 
60F8 00 00 00 00 1 13 
60FC 00 00 00 00 1 13 
6100             1 15 ; ----------------------------------------------------------------------------------------------------------------------
6100             1 16 ; CYAN BOARDS: these boards must be located immediately after cyan queue area!
6100             1 17 ; 
6100             1 18 ; These boards hold a determined position of the board from cyan perspective. They are used to calculate CYAN "two-
6100             1 19 ; distance" (Jack van Rijswijck) from UP to DOWN edges and CYAN two-distance from DOWN to UP edges. The cyan UP-DOWN
6100             1 20 ; board is also used to store CYAN potentials and TOTAL potentials.
6100             1 21 ; 
6100             1 22 ; The values of $7F form the border of the board. The UP and DOWN edges are identified with 7th bit set and the lowest 3
6100             1 23 ; bits are the edge number. The rest of bytes indicates "two-distance" from goal (stored in lowest 6 bits), and a flag
6100             1 24 ; that indicates a position occupied by a friendly token (stored in 6th bit).
6100             1 25 ; ----------------------------------------------------------------------------------------------------------------------
6100             1 26 CYAN_BOARD_UP_DOWN:
6100 7F 7F 7F 7F 1 27 DEFB      $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F
6104 7F 7F 7F 7F 1 27 
6108 7F 00 00 00 1 28 DEFB    $7F, $00, $00, $00, $00, $00, $00, $00, $7F
610C 00 00 00 00 1 28 
6110 7F          1 28 
6111 7F 00 00 00 1 29 DEFB       $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6115 00 00 00 00 1 29 
6119 7F          1 29 
611A 7F 00 00 00 1 30 DEFB          $7F, $00, $00, $00, $00, $00, $00, $00, $7F
611E 00 00 00 00 1 30 
6122 7F          1 30 
6123 7F 00 00 00 1 31 DEFB             $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6127 00 00 00 00 1 31 
612B 7F          1 31 
612C 7F 00 00 00 1 32 DEFB                $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6130 00 00 00 00 1 32 
6134 7F          1 32 
6135 7F 00 00 00 1 33 DEFB                   $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6139 00 00 00 00 1 33 
613D 7F          1 33 
613E 7F 00 00 00 1 34 DEFB                      $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6142 00 00 00 00 1 34 
6146 7F          1 34 
6147 7F 80 81 82 1 35 DEFB                         $7F, $80, $81, $82, $83, $84, $85, $86, $7F
614B 83 84 85 86 1 35 
614F 7F          1 35 
6150             1 36 CYAN_BOARD_DOWN_UP:
6150 7F 00 00 00 1 37 DEFB    $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6154 00 00 00 00 1 37 
6158 7F          1 37 
6159 7F 00 00 00 1 38 DEFB       $7F, $00, $00, $00, $00, $00, $00, $00, $7F
615D 00 00 00 00 1 38 
6161 7F          1 38 
6162 7F 00 00 00 1 39 DEFB          $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6166 00 00 00 00 1 39 
616A 7F          1 39 
616B 7F 00 00 00 1 40 DEFB             $7F, $00, $00, $00, $00, $00, $00, $00, $7F
616F 00 00 00 00 1 40 
6173 7F          1 40 
6174 7F 00 00 00 1 41 DEFB                $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6178 00 00 00 00 1 41 
617C 7F          1 41 
617D 7F 00 00 00 1 42 DEFB                   $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6181 00 00 00 00 1 42 
6185 7F          1 42 
6186 7F 00 00 00 1 43 DEFB                      $7F, $00, $00, $00, $00, $00, $00, $00, $7F
618A 00 00 00 00 1 43 
618E 7F          1 43 
618F 7F 7F 7F 7F 1 44 DEFB                         $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F
6193 7F 7F 7F 7F 1 44 
6197             1 46 ; ----------------------------------------------------------------------------------------------------------------------
6197             1 47 ; Variables
6197             1 48 ; ----------------------------------------------------------------------------------------------------------------------
6197             1 49 POTENTIALS:                                                 ; (must be in a 256-byte boundary)
6197 00          1 50 DEFB    0                           ; board potential
6198 00          1 51 DEFB    0                           ; attack mobility
6199 00          1 52 AI_PLAYER               DEFB    0                           ; speccy side (FRIEND or ENEMY)
619A 00          1 53 AI_DEPTH                DEFB    0                           ; recursion depth level (1-4)
619B 00          1 54 MOVE_NUMBER             DEFB    0                           ; current move number
619C 00          1 55 LEVEL_COLOR             DEFB    0                           ; current level color for frame border
619D 00          1 56 GAME_LEVEL              DEFB    0                           ; current game level (1-4)
619E 00          1 57 TOKEN_COLOR             DEFB    0                           ; current token color
619F 05          1 58 PLAYER_COLOR            DEFB    5                           ; current player color
61A0             1 60 ; ----------------------------------------------------------------------------------------------------------------------
61A0             1 61 ; Screen addresses look-up table for board hexagons
61A0             1 62 ;
61A0             1 63 ; The first column contains the screen addresses high byte
61A0             1 64 ; The rest of bytes are the screen addresses low byte
61A0             1 65 ; ----------------------------------------------------------------------------------------------------------------------
61A0             1 66 BOARD_MAP:
61A0 40 A6 A8 AA 1 67 DEFB    $40, $A6, $A8, $AA, $AC, $AE, $B0, $B2
61A4 AC AE B0 B2 1 67 
61A8 40 E7 E9 EB 1 68 DEFB    $40, $E7, $E9, $EB, $ED, $EF, $F1, $F3
61AC ED EF F1 F3 1 68 
61B0 48 28 2A 2C 1 69 DEFB    $48, $28, $2A, $2C, $2E, $30, $32, $34
61B4 2E 30 32 34 1 69 
61B8 48 69 6B 6D 1 70 DEFB    $48, $69, $6B, $6D, $6F, $71, $73, $75
61BC 6F 71 73 75 1 70 
61C0 48 AA AC AE 1 71 DEFB    $48, $AA, $AC, $AE, $B0, $B2, $B4, $B6
61C4 B0 B2 B4 B6 1 71 
61C8 48 EB ED EF 1 72 DEFB    $48, $EB, $ED, $EF, $F1, $F3, $F5, $F7
61CC F1 F3 F5 F7 1 72 
61D0 50 2C 2E 30 1 73 DEFB    $50, $2C, $2E, $30, $32, $34, $36, $38
61D4 32 34 36 38 1 73 
61D8             1 75 ; ----------------------------------------------------------------------------------------------------------------------
61D8             1 76 ; Keyboard array map
61D8             1 77 ; ----------------------------------------------------------------------------------------------------------------------
61D8 20 7A 78 63 1 78 KEY_MAP                 DEFM    " zxcvasdfgqwert1234509876poiuy\x0Dlkjh  mnb"
61DC 76 61 73 64 1 78 
61E0 66 67 71 77 1 78 
61E4 65 72 74 31 1 78 
61E8 32 33 34 35 1 78 
61EC 30 39 38 37 1 78 
61F0 36 70 6F 69 1 78 
61F4 75 79 0D 6C 1 78 
61F8 6B 6A 68 20 1 78 
61FC 20 6D 6E 62 1 78 
6200             1 80 ;ORG     $6200
6200             1 81 ; ----------------------------------------------------------------------------------------------------------------------
6200             1 82 ; Vector table of routines (must be aligned at the next page of cyan board arrays)
6200             1 83 ; ----------------------------------------------------------------------------------------------------------------------
6200             1 84 CYAN_VECTOR_TABLE:
6200 AF 73       1 85 DEFW    PathFinder_CYAN_Edge_0
6202 CF 73       1 86 DEFW    PathFinder_CYAN_Edge_1
6204 EA 73       1 87 DEFW    PathFinder_CYAN_Edge_2
6206 08 74       1 88 DEFW    PathFinder_CYAN_Edge_3
6208 27 74       1 89 DEFW    PathFinder_CYAN_Edge_4
620A 45 74       1 90 DEFW    PathFinder_CYAN_Edge_5
620C 60 74       1 91 DEFW    PathFinder_CYAN_Edge_6
620E             1 93 ; ----------------------------------------------------------------------------------------------------------------------
620E             1 94 ; Variables and strings
620E             1 95 ; ----------------------------------------------------------------------------------------------------------------------
620E 00          1 96 THREE_ROW               DEFB    0                           ; three-in-a-row counter
620F 0F 0E 0C 0B 1 97 ROW_COLOR_MAP           DEFB    15, 14, 12, 11, 13, 10      ; level-color map for frame border
6213 0D 0A       1 97 
6215 00 2D 30 00 1 98 STR_MOVE                DEFB    0, '-', '0', 0, '\0'        ; formatted move string
6219 00          1 98 
621A 53 70 65 63 1 99 STR_SPECCY              DEFM    "Speccy\0"
621E 63 79 00    1 99 
6221 50 6C 61 79 1 100 STR_PLAYER              DEFM    "Player\0"
6225 65 72 00    1 100 
6228 4C 65 76 65 1 101 STR_LEVELTEXT           DEFM    "Level\0"
622C 6C 00       1 101 
622E 46 49 4C 4C 1 102 STR_FILLED              DEFM    "FILLED\0"
6232 45 44 00    1 102 
6235 57 41 49 54 1 103 STR_WAIT                DEFM    "WAIT\0"
6239 00          1 103 
623A 20 57 49 4E 1 104 STR_WINNER              DEFM    " WINS \0"
623E 53 20 00    1 104 
6241 20 20 20 20 1 105 STR_EMPTY4              DEFM    "    \0"
6245 00          1 105 
6246 20 20 20 20 1 106 STR_EMPTY6              DEFM    "      \0"
624A 20 20 00    1 106 
624D             1 108 ; ----------------------------------------------------------------------------------------------------------------------
624D             1 109 ; Conversion table: from position to XY board indexes
624D             1 110 ; ----------------------------------------------------------------------------------------------------------------------
624D             1 111 BOARD_COORDINATES:
624D 00 00 00 00 1 112 DEFB    $00, $00, $00, $00, $00, $00, $00, $00
6251 00 00 00 00 1 112 
6255 00 09 0A 0B 1 113 DEFB    $00, $09, $0A, $0B, $0C, $0D, $0E, $0F
6259 0C 0D 0E 0F 1 113 
625D 00 12 13 14 1 114 DEFB    $00, $12, $13, $14, $15, $16, $17, $18
6261 15 16 17 18 1 114 
6265 00 1B 1C 1D 1 115 DEFB    $00, $1B, $1C, $1D, $1E, $1F, $20, $21
6269 1E 1F 20 21 1 115 
626D 00 24 25 26 1 116 DEFB    $00, $24, $25, $26, $27, $28, $29, $2A
6271 27 28 29 2A 1 116 
6275 00 2D 2E 2F 1 117 DEFB    $00, $2D, $2E, $2F, $30, $31, $32, $33
6279 30 31 32 33 1 117 
627D 00 36 37 38 1 118 DEFB    $00, $36, $37, $38, $39, $3A, $3B, $3C
6281 39 3A 3B 3C 1 118 
6285 00 3F 40 41 1 119 DEFB    $00, $3F, $40, $41, $42, $43, $44, $45
6289 42 43 44 45 1 119 
628D             1 121 ; ----------------------------------------------------------------------------------------------------------------------
628D             1 122 ; Graphics map indexes for the frame tiles
628D             1 123 ; ----------------------------------------------------------------------------------------------------------------------
628D             1 124 FRAME_MAP:
628D 00 01 01 01 1 125 DEFB      0,   1,   1,   1,   1,   1,   2,   3
6291 01 01 02 03 1 125 
6295 04 FF FF FF 1 126 DEFB      4,  -1,  -1,  -1,  -1,  -1,  -1,  -1
6299 FF FF FF FF 1 126 
629D 05 06 07 01 1 127 DEFB      5,   6,   7,   1,   1,   1,   1,   1
62A1 01 01 01 01 1 127 
62A5 01 01 01 01 1 128 DEFB      1,   1,   1,   1,   1,   1,   1,   8
62A9 01 01 01 08 1 128 
62AD 09 01 01 01 1 129 DEFB      9,   1,   1,   1,   1,   1,   1,   1
62B1 01 01 01 01 1 129 
62B5 01 01 01 01 1 130 DEFB      1,   1,   1,   1,   1,   1,   1,   1
62B9 01 01 01 01 1 130 
62BD 0A 06 0D 0D 1 131 DEFB     10,   6,  13,  13,  13,   3,  11,   1
62C1 0D 03 0B 01 1 131 
62C5 01 01 01 01 1 132 DEFB      1,   1,   1,   1,   1,   1,   1,  12
62C9 01 01 01 0C 1 132 
62CD             1 134 ; ----------------------------------------------------------------------------------------------------------------------
62CD             1 135 ; Definition of a small "Opening Book" for speccy first move
62CD             1 136 ; ----------------------------------------------------------------------------------------------------------------------
62CD             1 137 OPENINGS:
62CD 0F 14 16 17 1 138 DEFB    $0F, $14, $16, $17, $18, $1C, $1D
62D1 18 1C 1D    1 138 
62D4 1E 1F 20 24 1 139 DEFB    $1E, $1F, $20, $24, $25, $26, $27
62D8 25 26 27    1 139 
62DB 28 29 2A 2E 1 140 DEFB    $28, $29, $2A, $2E, $2F, $30, $31
62DF 2F 30 31    1 140 
62E2 32 36 37 38 1 141 DEFB    $32, $36, $37, $38, $3A, $3F
62E6 3A 3F       1 141 
62E8             1 143 ; ----------------------------------------------------------------------------------------------------------------------
62E8             1 144 ; Timer variables
62E8             1 145 ; ----------------------------------------------------------------------------------------------------------------------
62E8 00          1 146 TIMER_FLAG              DEFB    0                           ; 0 = timer stopped, 1 = cyan timer on, 2 = red timer on
62E9             1 147 ; for each timer:
62E9             1 148 ;   1st byte = interrupt counter (incremented each 1/50 seconds)
62E9             1 149 ;   2nd byte = seconds counter
62E9             1 150 ;   3th byte = minutes counter
62E9 32 00 00    1 151 CYAN_TIMER              DEFB    50, 0, 0
62EC 32 00 00    1 152 RED_TIMER               DEFB    50, 0, 0
62EF             1 154 ; ----------------------------------------------------------------------------------------------------------------------
62EF             1 155 ; Screen addresses look-up array for board numbers
62EF             1 156 ; ----------------------------------------------------------------------------------------------------------------------
62EF             1 157 NUMBER_SCREEN:
62EF A5 43 E6 43 1 158 DEFW    $43A5, $43E6, $4B27, $4B68, $4BA9, $4BEA, $532B
62F3 27 4B 68 4B 1 158 
62F7 A9 4B EA 4B 1 158 
62FB 2B 53       1 158 
62FD FF FF FF    1 160 FILLER_1                DEFB    $FF, $FF, $FF               ; filler to align next block (not used)
6300             1 162 ;ORG     $6300
6300             1 163 ; ----------------------------------------------------------------------------------------------------------------------
6300             1 164 ; Circular queue
6300             1 165 ; ----------------------------------------------------------------------------------------------------------------------
6300 00 00 00 00 1 166 RED_QUEUE_AREA          DEFS    256                         ; 256-aligned block reserved for circular queue
6304 00 00 00 00 1 166 
6308 00 00 00 00 1 166 
630C 00 00 00 00 1 166 
6310 00 00 00 00 1 166 
6314 00 00 00 00 1 166 
6318 00 00 00 00 1 166 
631C 00 00 00 00 1 166 
6320 00 00 00 00 1 166 
6324 00 00 00 00 1 166 
6328 00 00 00 00 1 166 
632C 00 00 00 00 1 166 
6330 00 00 00 00 1 166 
6334 00 00 00 00 1 166 
6338 00 00 00 00 1 166 
633C 00 00 00 00 1 166 
6340 00 00 00 00 1 166 
6344 00 00 00 00 1 166 
6348 00 00 00 00 1 166 
634C 00 00 00 00 1 166 
6350 00 00 00 00 1 166 
6354 00 00 00 00 1 166 
6358 00 00 00 00 1 166 
635C 00 00 00 00 1 166 
6360 00 00 00 00 1 166 
6364 00 00 00 00 1 166 
6368 00 00 00 00 1 166 
636C 00 00 00 00 1 166 
6370 00 00 00 00 1 166 
6374 00 00 00 00 1 166 
6378 00 00 00 00 1 166 
637C 00 00 00 00 1 166 
6380 00 00 00 00 1 166 
6384 00 00 00 00 1 166 
6388 00 00 00 00 1 166 
638C 00 00 00 00 1 166 
6390 00 00 00 00 1 166 
6394 00 00 00 00 1 166 
6398 00 00 00 00 1 166 
639C 00 00 00 00 1 166 
63A0 00 00 00 00 1 166 
63A4 00 00 00 00 1 166 
63A8 00 00 00 00 1 166 
63AC 00 00 00 00 1 166 
63B0 00 00 00 00 1 166 
63B4 00 00 00 00 1 166 
63B8 00 00 00 00 1 166 
63BC 00 00 00 00 1 166 
63C0 00 00 00 00 1 166 
63C4 00 00 00 00 1 166 
63C8 00 00 00 00 1 166 
63CC 00 00 00 00 1 166 
63D0 00 00 00 00 1 166 
63D4 00 00 00 00 1 166 
63D8 00 00 00 00 1 166 
63DC 00 00 00 00 1 166 
63E0 00 00 00 00 1 166 
63E4 00 00 00 00 1 166 
63E8 00 00 00 00 1 166 
63EC 00 00 00 00 1 166 
63F0 00 00 00 00 1 166 
63F4 00 00 00 00 1 166 
63F8 00 00 00 00 1 166 
63FC 00 00 00 00 1 166 
6400             1 168 ; ----------------------------------------------------------------------------------------------------------------------
6400             1 169 ; RED BOARDS: these boards must be located immediately after red queue area!
6400             1 170 ; 
6400             1 171 ; These boards hold a determined position of the board from red perspective. They are used to calculate RED "two-
6400             1 172 ; distance" (Jack van Rijswijck) from LEFT to RIGHT edges and RED two-distance from RIGHT to LEFT edges. The red
6400             1 173 ; LEFT-RIGHT board is also used to store RED potentials.
6400             1 174 ; 
6400             1 175 ; The values of $7F form the border of the board. The LEFT-RIGHT edges are identified with Bit 7 set and the lowest 3
6400             1 176 ; bits are the edge number. The rest of bytes indicates "two-distance" from goal (stored in lowest 6 bits), and a flag
6400             1 177 ; that indicates a position occupied by a friendly token (stored in 6th bit).
6400             1 178 ; ----------------------------------------------------------------------------------------------------------------------
6400             1 179 RED_BOARD_LEFT_RIGHT:
6400 7F 7F 7F 7F 1 180 DEFB      $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F
6404 7F 7F 7F 7F 1 180 
6408 7F 00 00 00 1 181 DEFB    $7F, $00, $00, $00, $00, $00, $00, $00, $80
640C 00 00 00 00 1 181 
6410 80          1 181 
6411 7F 00 00 00 1 182 DEFB       $7F, $00, $00, $00, $00, $00, $00, $00, $81
6415 00 00 00 00 1 182 
6419 81          1 182 
641A 7F 00 00 00 1 183 DEFB          $7F, $00, $00, $00, $00, $00, $00, $00, $82
641E 00 00 00 00 1 183 
6422 82          1 183 
6423 7F 00 00 00 1 184 DEFB             $7F, $00, $00, $00, $00, $00, $00, $00, $83
6427 00 00 00 00 1 184 
642B 83          1 184 
642C 7F 00 00 00 1 185 DEFB                $7F, $00, $00, $00, $00, $00, $00, $00, $84
6430 00 00 00 00 1 185 
6434 84          1 185 
6435 7F 00 00 00 1 186 DEFB                   $7F, $00, $00, $00, $00, $00, $00, $00, $85
6439 00 00 00 00 1 186 
643D 85          1 186 
643E 7F 00 00 00 1 187 DEFB                      $7F, $00, $00, $00, $00, $00, $00, $00, $86
6442 00 00 00 00 1 187 
6446 86          1 187 
6447 7F 7F 7F 7F 1 188 DEFB                         $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F
644B 7F 7F 7F 7F 1 188 
644F 7F          1 188 
6450             1 189 RED_BOARD_RIGHT_LEFT:
6450 80 00 00 00 1 190 DEFB    $80, $00, $00, $00, $00, $00, $00, $00, $7F
6454 00 00 00 00 1 190 
6458 7F          1 190 
6459 81 00 00 00 1 191 DEFB       $81, $00, $00, $00, $00, $00, $00, $00, $7F
645D 00 00 00 00 1 191 
6461 7F          1 191 
6462 82 00 00 00 1 192 DEFB          $82, $00, $00, $00, $00, $00, $00, $00, $7F
6466 00 00 00 00 1 192 
646A 7F          1 192 
646B 83 00 00 00 1 193 DEFB             $83, $00, $00, $00, $00, $00, $00, $00, $7F
646F 00 00 00 00 1 193 
6473 7F          1 193 
6474 84 00 00 00 1 194 DEFB                $84, $00, $00, $00, $00, $00, $00, $00, $7F
6478 00 00 00 00 1 194 
647C 7F          1 194 
647D 85 00 00 00 1 195 DEFB                   $85, $00, $00, $00, $00, $00, $00, $00, $7F
6481 00 00 00 00 1 195 
6485 7F          1 195 
6486 86 00 00 00 1 196 DEFB                      $86, $00, $00, $00, $00, $00, $00, $00, $7F
648A 00 00 00 00 1 196 
648E 7F          1 196 
648F 7F 7F 7F 7F 1 197 DEFB                         $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F
6493 7F 7F 7F 7F 1 197 
6497             1 199 ; ----------------------------------------------------------------------------------------------------------------------
6497             1 200 ; Timer digits graphics. Must be in a 256 bytes boundary
6497             1 201 ; ----------------------------------------------------------------------------------------------------------------------
6497             1 202 TIMER_DIGITS:
6497 00 0F 0B 0B 1 203 DEFB    $00, $0F, $0B, $0B, $0B, $0F, $00, $00
649B 0B 0F 00 00 1 203 
649F 00 06 0E 06 1 204 DEFB    $00, $06, $0E, $06, $06, $06, $00, $00
64A3 06 06 00 00 1 204 
64A7 00 0F 03 0F 1 205 DEFB    $00, $0F, $03, $0F, $08, $0F, $00, $00
64AB 08 0F 00 00 1 205 
64AF 00 0F 03 07 1 206 DEFB    $00, $0F, $03, $07, $03, $0F, $00, $00
64B3 03 0F 00 00 1 206 
64B7 00 0B 0B 0F 1 207 DEFB    $00, $0B, $0B, $0F, $03, $03, $00, $00
64BB 03 03 00 00 1 207 
64BF 00 0F 08 0F 1 208 DEFB    $00, $0F, $08, $0F, $03, $0F, $00, $00
64C3 03 0F 00 00 1 208 
64C7 00 0F 0C 0F 1 209 DEFB    $00, $0F, $0C, $0F, $0D, $0F, $00, $00
64CB 0D 0F 00 00 1 209 
64CF 00 0F 03 03 1 210 DEFB    $00, $0F, $03, $03, $03, $03, $00, $00
64D3 03 03 00 00 1 210 
64D7 00 0F 0B 0F 1 211 DEFB    $00, $0F, $0B, $0F, $0B, $0F, $00, $00
64DB 0B 0F 00 00 1 211 
64DF 00 0F 0B 0F 1 212 DEFB    $00, $0F, $0B, $0F, $03, $0F, $00, $00
64E3 03 0F 00 00 1 212 
64E7             1 214 ; ----------------------------------------------------------------------------------------------------------------------
64E7             1 215 ; Tone parameters for sound effects
64E7             1 216 ; ----------------------------------------------------------------------------------------------------------------------
64E7             1 217 ; for each tone (from left to right):
64E7             1 218 ;   - number of frames in the block, slide changes applied once per frame (1..65536)
64E7             1 219 ;   - length of a frame (1..65536)
64E7             1 220 ;   - tone pitch, lower numbers for lower tone (1..65536)
64E7             1 221 ;   - pitch slide, this value is added to pitch every frame (-32767..32768)
64E7             1 222 ; ----------------------------------------------------------------------------------------------------------------------
64E7 01 00 E8 03 1 223 TOKEN_FX                DEFW       1, 1000, 1400,   0
64EB 78 05 00 00 1 223 
64EF 05 00 88 13 1 224 WINNER_FX               DEFW       5, 5000,  200, 100
64F3 C8 00 64 00 1 224 
64F7 E8 03 0A 00 1 225 FILLED_FX               DEFW    1000,   10,  100,   0
64FB 64 00 00 00 1 225 
64FF FF          1 227 FILLER_2                DEFB    $FF                         ; filler to align next block (not used)
6500             1 229 ;ORG     $6500
6500             1 230 ; ----------------------------------------------------------------------------------------------------------------------
6500             1 231 ; Vector table of routines (must be aligned at the next page of red board arrays)
6500             1 232 ; ----------------------------------------------------------------------------------------------------------------------
6500             1 233 RED_VECTOR_TABLE:
6500 95 72       1 234 DEFW    PathFinder_RED_Edge_0
6502 C3 72       1 235 DEFW    PathFinder_RED_Edge_1
6504 E9 72       1 236 DEFW    PathFinder_RED_Edge_2
6506 0F 73       1 237 DEFW    PathFinder_RED_Edge_3
6508 35 73       1 238 DEFW    PathFinder_RED_Edge_4
650A 5B 73       1 239 DEFW    PathFinder_RED_Edge_5
650C 81 73       1 240 DEFW    PathFinder_RED_Edge_6
650E             1 242 ; ----------------------------------------------------------------------------------------------------------------------
650E             1 243 ; Graphics for the screen frame
650E             1 244 ; ----------------------------------------------------------------------------------------------------------------------
650E             1 245 FRAME_TILES:
650E 00 00 1F 3F 1 246 DEFB    $00, $00, $1F, $3F, $3F, $3F, $3C, $3C
6512 3F 3F 3C 3C 1 246 
6516 00 00 FF FF 1 247 DEFB    $00, $00, $FF, $FF, $FF, $FF, $00, $00
651A FF FF 00 00 1 247 
651E 00 00 FF FE 1 248 DEFB    $00, $00, $FF, $FE, $FE, $FF, $00, $00
6522 FE FF 00 00 1 248 
6526 03 07 0F 0F 1 249 DEFB    $03, $07, $0F, $0F, $0F, $0F, $07, $03
652A 0F 0F 07 03 1 249 
652E FF FE FC FC 1 250 DEFB    $FF, $FE, $FC, $FC, $FC, $FC, $FE, $FF
6532 FC FC FE FF 1 250 
6536 FF 7F 3F 3F 1 251 DEFB    $FF, $7F, $3F, $3F, $3F, $3F, $7F, $FF
653A 3F 3F 7F FF 1 251 
653E C0 E0 F0 F0 1 252 DEFB    $C0, $E0, $F0, $F0, $F0, $F0, $E0, $C0
6542 F0 F0 E0 C0 1 252 
6546 00 00 FF 7F 1 253 DEFB    $00, $00, $FF, $7F, $7F, $FF, $00, $00
654A 7F FF 00 00 1 253 
654E 00 00 F8 FC 1 254 DEFB    $00, $00, $F8, $FC, $FC, $FC, $3C, $3C
6552 FC FC 3C 3C 1 254 
6556 3C 3C 3F 3F 1 255 DEFB    $3C, $3C, $3F, $3F, $3F, $1F, $00, $00
655A 3F 1F 00 00 1 255 
655E 00 00 FE FF 1 256 DEFB    $00, $00, $FE, $FF, $FF, $FE, $00, $00
6562 FF FE 00 00 1 256 
6566 00 00 7F FF 1 257 DEFB    $00, $00, $7F, $FF, $FF, $7F, $00, $00
656A FF 7F 00 00 1 257 
656E 3C 3C FC FC 1 258 DEFB    $3C, $3C, $FC, $FC, $FC, $F8, $00, $00
6572 FC F8 00 00 1 258 
6576 00 00 38 7C 1 259 DEFB    $00, $00, $38, $7C, $7C, $38, $00, $00
657A 7C 38 00 00 1 259 
657E             1 261 ; ----------------------------------------------------------------------------------------------------------------------
657E             1 262 ; Hexagon sprites
657E             1 263 ; ----------------------------------------------------------------------------------------------------------------------
657E             1 264 HEXAGON_EMPTY:
657E 07 E0 18 18 1 265 DEFB    $07, $E0, $18, $18, $20, $04, $24, $04
6582 20 04 24 04 1 265 
6586 48 02 48 02 1 266 DEFB    $48, $02, $48, $02, $40, $02, $40, $02
658A 40 02 40 02 1 266 
658E 40 02 40 02 1 267 DEFB    $40, $02, $40, $02, $40, $12, $40, $12
6592 40 12 40 12 1 267 
6596 20 24 20 04 1 268 DEFB    $20, $24, $20, $04, $18, $18, $07, $E0
659A 18 18 07 E0 1 268 
659E             1 269 HEXAGON_SPRITE:
659E 03 C0 0C 30 1 270 DEFB    $03, $C0, $0C, $30, $10, $08, $12, $08
65A2 10 08 12 08 1 270 
65A6 24 04 24 04 1 271 DEFB    $24, $04, $24, $04, $20, $04, $20, $04
65AA 20 04 20 04 1 271 
65AE 20 04 20 04 1 272 DEFB    $20, $04, $20, $04, $20, $24, $20, $24
65B2 20 24 20 24 1 272 
65B6 10 48 10 08 1 273 DEFB    $10, $48, $10, $08, $0C, $30, $03, $C0
65BA 0C 30 03 C0 1 273 
65BE 01 80 02 40 1 275 DEFB    $01, $80, $02, $40, $04, $20, $09, $10
65C2 04 20 09 10 1 275 
65C6 0A 10 0A 10 1 276 DEFB    $0A, $10, $0A, $10, $08, $10, $08, $10
65CA 08 10 08 10 1 276 
65CE 08 10 08 10 1 277 DEFB    $08, $10, $08, $10, $08, $50, $08, $50
65D2 08 50 08 50 1 277 
65D6 08 90 04 20 1 278 DEFB    $08, $90, $04, $20, $02, $40, $01, $80
65DA 02 40 01 80 1 278 
65DE 00 80 00 80 1 280 DEFB    $00, $80, $00, $80, $00, $80, $00, $80
65E2 00 80 00 80 1 280 
65E6 00 80 00 80 1 281 DEFB    $00, $80, $00, $80, $00, $80, $00, $80
65EA 00 80 00 80 1 281 
65EE 00 80 00 80 1 282 DEFB    $00, $80, $00, $80, $00, $80, $00, $80
65F2 00 80 00 80 1 282 
65F6 00 80 00 80 1 283 DEFB    $00, $80, $00, $80, $00, $80, $00, $80
65FA 00 80 00 80 1 283 
65FE 01 80 02 40 1 285 DEFB    $01, $80, $02, $40, $05, $A0, $0B, $D0
6602 05 A0 0B D0 1 285 
6606 0B D0 0B D0 1 286 DEFB    $0B, $D0, $0B, $D0, $0B, $D0, $0B, $D0
660A 0B D0 0B D0 1 286 
660E 0B D0 0B D0 1 287 DEFB    $0B, $D0, $0B, $D0, $0B, $D0, $0B, $D0
6612 0B D0 0B D0 1 287 
6616 0B D0 05 A0 1 288 DEFB    $0B, $D0, $05, $A0, $02, $40, $01, $80
661A 02 40 01 80 1 288 
661E 03 C0 0C 30 1 290 DEFB    $03, $C0, $0C, $30, $13, $C8, $17, $E8
6622 13 C8 17 E8 1 290 
6626 2F F4 2F F4 1 291 DEFB    $2F, $F4, $2F, $F4, $2F, $F4, $2F, $F4
662A 2F F4 2F F4 1 291 
662E 2F F4 2F F4 1 292 DEFB    $2F, $F4, $2F, $F4, $2F, $F4, $2F, $F4
6632 2F F4 2F F4 1 292 
6636 17 E8 13 C8 1 293 DEFB    $17, $E8, $13, $C8, $0C, $30, $03, $C0
663A 0C 30 03 C0 1 293 
663E             1 294 HEXAGON_TOKEN:
663E 07 E0 18 18 1 295 DEFB    $07, $E0, $18, $18, $27, $E4, $2F, $F4
6642 27 E4 2F F4 1 295 
6646 5F FA 5F FA 1 296 DEFB    $5F, $FA, $5F, $FA, $5F, $FA, $5F, $FA
664A 5F FA 5F FA 1 296 
664E 5F FA 5F FA 1 297 DEFB    $5F, $FA, $5F, $FA, $5F, $FA, $5F, $FA
6652 5F FA 5F FA 1 297 
6656 2F F4 27 E4 1 298 DEFB    $2F, $F4, $27, $E4, $18, $18, $07, $E0
665A 18 18 07 E0 1 298 
665E             1 300 ; ----------------------------------------------------------------------------------------------------------------------
665E             1 301 ; Board letter sprites
665E             1 302 ; ----------------------------------------------------------------------------------------------------------------------
665E             1 303 LETTER_SPRITES:
665E 3C 7E FF C3 1 304 DEFB    $3C, $7E, $FF, $C3, $F3, $C3, $D3, $C3, $7E, $3C
6662 F3 C3 D3 C3 1 304 
6666 7E 3C       1 304 
6668 3C 7E CF CF 1 305 DEFB    $3C, $7E, $CF, $CF, $C3, $CB, $CB, $C3, $7E, $3C
666C C3 CB CB C3 1 305 
6670 7E 3C       1 305 
6672 3C 7E FF E3 1 306 DEFB    $3C, $7E, $FF, $E3, $CF, $CF, $CF, $E3, $7E, $3C
6676 CF CF CF E3 1 306 
667A 7E 3C       1 306 
667C 3C 7E F3 F3 1 307 DEFB    $3C, $7E, $F3, $F3, $C3, $D3, $D3, $C3, $7E, $3C
6680 C3 D3 D3 C3 1 307 
6684 7E 3C       1 307 
6686 3C 7E FF E3 1 308 DEFB    $3C, $7E, $FF, $E3, $CB, $C3, $CF, $E3, $7E, $3C
668A CB C3 CF E3 1 308 
668E 7E 3C       1 308 
6690 3C 7E E3 CF 1 309 DEFB    $3C, $7E, $E3, $CF, $C7, $CF, $CF, $CF, $7E, $3C
6694 C7 CF CF CF 1 309 
6698 7E 3C       1 309 
669A 3C 7E FF E3 1 310 DEFB    $3C, $7E, $FF, $E3, $D3, $D3, $E3, $F3, $46, $3C
669E D3 D3 E3 F3 1 310 
66A2 46 3C       1 310 
66A4             1 312 ; ----------------------------------------------------------------------------------------------------------------------
66A4             1 313 ; Board number sprites
66A4             1 314 ; ----------------------------------------------------------------------------------------------------------------------
66A4             1 315 NUMBER_SPRITES:
66A4 3C 7E E7 C7 1 316 DEFB    $3C, $7E, $E7, $C7, $E7, $E7, $E7, $E7, $7E, $3C
66A8 E7 E7 E7 E7 1 316 
66AC 7E 3C       1 316 
66AE 3C 7E E7 D3 1 317 DEFB    $3C, $7E, $E7, $D3, $F3, $E7, $CF, $C3, $7E, $3C
66B2 F3 E7 CF C3 1 317 
66B6 7E 3C       1 317 
66B8 3C 7E C7 F3 1 318 DEFB    $3C, $7E, $C7, $F3, $E3, $F3, $F3, $C7, $7E, $3C
66BC E3 F3 F3 C7 1 318 
66C0 7E 3C       1 318 
66C2 3C 7E D3 D3 1 319 DEFB    $3C, $7E, $D3, $D3, $C3, $F3, $F3, $F3, $7E, $3C
66C6 C3 F3 F3 F3 1 319 
66CA 7E 3C       1 319 
66CC 3C 7E C3 CF 1 320 DEFB    $3C, $7E, $C3, $CF, $C7, $F3, $F3, $C7, $7E, $3C
66D0 C7 F3 F3 C7 1 320 
66D4 7E 3C       1 320 
66D6 3C 7E E3 CF 1 321 DEFB    $3C, $7E, $E3, $CF, $C3, $CB, $CB, $C3, $7E, $3C
66DA C3 CB CB C3 1 321 
66DE 7E 3C       1 321 
66E0 3C 7E C3 F3 1 322 DEFB    $3C, $7E, $C3, $F3, $F3, $E7, $E7, $E7, $7E, $3C
66E4 F3 E7 E7 E7 1 322 
66E8 7E 3C       1 322 
66EA             1 324 ; ----------------------------------------------------------------------------------------------------------------------
66EA             1 325 ; Screen addresses for menu hexagons
66EA             1 326 ; ----------------------------------------------------------------------------------------------------------------------
66EA             1 327 MENU_HEXAGONS:
66EA 01 40 05 40 1 328 DEFW    $4001, $4005, $4008, $400C, $400F, $4013, $401A
66EE 08 40 0C 40 1 328 
66F2 0F 40 13 40 1 328 
66F6 1A 40       1 328 
66F8 45 40 48 40 1 329 DEFW    $4045, $4048, $4052, $405D, $4081, $4083, $4085
66FC 52 40 5D 40 1 329 
6700 81 40 83 40 1 329 
6704 85 40       1 329 
6706 88 40 8A 40 1 330 DEFW    $4088, $408A, $4091, $409D, $40C1, $40D0, $40D9
670A 91 40 9D 40 1 330 
670E C1 40 D0 40 1 330 
6712 D9 40       1 330 
6714 05 48 08 48 1 331 DEFW    $4805, $4808, $480A, $4813, $4819, $481B, $481D
6718 0A 48 13 48 1 331 
671C 19 48 1B 48 1 331 
6720 1D 48       1 331 
6722 0A 40 59 40 1 332 DEFW    $400A, $4059, $40BB, $40C5, $40D2, $480C, $401C
6726 BB 40 C5 40 1 332 
672A D2 40 0C 48 1 332 
672E 1C 40       1 332 
6730 41 40 50 40 1 333 DEFW    $4041, $4050, $40C8, $4801, $480F
6734 C8 40 01 48 1 333 
6738 0F 48       1 333 
673A             1 334 SAMPLE_BOARD_RED:
673A 69 48 6B 48 1 335 DEFW    $4869, $486B, $482C, $482E, $40EF, $40F1, $40B2
673E 2C 48 2E 48 1 335 
6742 EF 40 F1 40 1 335 
6746 B2 40       1 335 
6748 E9 40 6F 48 1 336 DEFW    $40E9, $486F, $4830, $40F3, $48AA, $40AC, $48EF
674C 30 48 F3 40 1 336 
6750 AA 48 AC 40 1 336 
6754 EF 48       1 336 
6756 2A 48 6D 48 1 337 DEFW    $482A, $486D, $40ED, $48AE
675A ED 40 AE 48 1 337 
675E             1 338 SAMPLE_BOARD_CYAN:
675E AE 40 EF 40 1 339 DEFW    $40AE, $40EF, $4830, $486F, $48AE, $48EF, $502E
6762 30 48 6F 48 1 339 
6766 AE 48 EF 48 1 339 
676A 2E 50       1 339 
676C AC 48 B4 48 1 340 DEFW    $48AC, $48B4, $486B, $486D, $482E, $40F1, $40F3
6770 6B 48 6D 48 1 340 
6774 2E 48 F1 40 1 340 
6778 F3 40       1 340 
677A 73 48 B2 48 1 341 DEFW    $4873, $48B2, $5030
677E 30 50       1 341 
6780             1 343 ; ----------------------------------------------------------------------------------------------------------------------
6780             1 344 ; Strings
6780             1 345 ; ----------------------------------------------------------------------------------------------------------------------
6780             1 346 STR_OPTIONS:
6780 53 74 61 72 1 347 DEFM    "Start new game\0"
6784 74 20 6E 65 1 347 
6788 77 20 67 61 1 347 
678C 6D 65 00    1 347 
678F 48 6F 77 20 1 348 DEFM    "How to play\0"
6793 74 6F 20 70 1 348 
6797 6C 61 79 00 1 348 
679B 43 72 65 64 1 349 DEFM    "Credits\0"
679F 69 74 73 00 1 349 
67A3             1 350 STR_CREDITS:
67A3 44 65 73 69 1 351 DEFM    "Design:     Antonio Luque\0"
67A7 67 6E 3A 20 1 351 
67AB 20 20 20 20 1 351 
67AF 41 6E 74 6F 1 351 
67B3 6E 69 6F 20 1 351 
67B7 4C 75 71 75 1 351 
67BB 65 00       1 351 
67BD 43 6F 64 65 1 352 DEFM    "Code:       Antonio Luque\0"
67C1 3A 20 20 20 1 352 
67C5 20 20 20 20 1 352 
67C9 41 6E 74 6F 1 352 
67CD 6E 69 6F 20 1 352 
67D1 4C 75 71 75 1 352 
67D5 65 00       1 352 
67D7 20 20 20 20 1 353 DEFM    "            Einar Saukas\0"
67DB 20 20 20 20 1 353 
67DF 20 20 20 20 1 353 
67E3 45 69 6E 61 1 353 
67E7 72 20 53 61 1 353 
67EB 75 6B 61 73 1 353 
67EF 00          1 353 
67F0 46 6F 6E 74 1 354 DEFM    "Font:       Einar Saukas\0"
67F4 3A 20 20 20 1 354 
67F8 20 20 20 20 1 354 
67FC 45 69 6E 61 1 354 
6800 72 20 53 61 1 354 
6804 75 6B 61 73 1 354 
6808 00          1 354 
6809 47 72 61 70 1 355 DEFM    "Graphics:   Einar Saukas\0"
680D 68 69 63 73 1 355 
6811 3A 20 20 20 1 355 
6815 45 69 6E 61 1 355 
6819 72 20 53 61 1 355 
681D 75 6B 61 73 1 355 
6821 00          1 355 
6822 20 20 20 20 1 356 DEFM    "            Antonio Luque\0"
6826 20 20 20 20 1 356 
682A 20 20 20 20 1 356 
682E 41 6E 74 6F 1 356 
6832 6E 69 6F 20 1 356 
6836 4C 75 71 75 1 356 
683A 65 00       1 356 
683C 50 72 65 73 1 357 STR_PRESSKEY            DEFM    "Press any key\0"
6840 73 20 61 6E 1 357 
6844 79 20 6B 65 1 357 
6848 79 00       1 357 
684A             1 358 STR_BUTTONS:
684A 4E 65 78 74 1 359 DEFM    "Next\0"
684E 00          1 359 
684F 42 61 63 6B 1 360 DEFM    "Back\0"
6853 00          1 360 
6854 52 45 44 00 1 361 STR_RED                 DEFM    "RED\0"
6858 43 59 41 4E 1 362 STR_CYAN                DEFM    "CYAN\0"
685C 00          1 362 
685D 43 6F 6E 6E 1 363 STR_HELP1               DEFM    "Connect\0"
6861 65 63 74 00 1 363 
6865 6C 65 66 74 1 364 STR_HELP2_RED           DEFM    "left and\0"
6869 20 61 6E 64 1 364 
686D 00          1 364 
686E 75 70 20 61 1 365 STR_HELP2_CYAN          DEFM    "up and\0"
6872 6E 64 00    1 365 
6875 72 69 67 68 1 366 STR_HELP3_RED           DEFM    "right\0"
6879 74 00       1 366 
687B 64 6F 77 6E 1 367 STR_HELP3_CYAN          DEFM    "down\0"
687F 00          1 367 
6880 62 6F 72 64 1 368 STR_HELP4               DEFM    "borders\0"
6884 65 72 73 00 1 368 
6888 74 6F 20 77 1 369 STR_HELP5               DEFM    "to win\0"
688C 69 6E 00    1 369 
688F             1 370 STR_HELP:
688F 57 69 6E 20 1 371 DEFM    "Win three\0"
6893 74 68 72 65 1 371 
6897 65 00       1 371 
6899 74 69 6D 65 1 372 DEFM    "times in\0"
689D 73 20 69 6E 1 372 
68A1 00          1 372 
68A2 61 20 72 6F 1 373 DEFM    "a row to\0"
68A6 77 20 74 6F 1 373 
68AA 00          1 373 
68AB 6C 65 76 65 1 374 DEFM    "level up\0"
68AF 6C 20 75 70 1 374 
68B3 00          1 374 
68B4 20 43 4F 4E 1 375 STR_CONGRATS            DEFM    " CONGRATULATIONS \0"
68B8 47 52 41 54 1 375 
68BC 55 4C 41 54 1 375 
68C0 49 4F 4E 53 1 375 
68C4 20 00       1 375 
68C6             1 376 STR_LAST_LEVEL:
68C6 57 65 6C 6C 1 377 DEFM    "Well done! Last level passed\0"
68CA 20 64 6F 6E 1 377 
68CE 65 21 20 4C 1 377 
68D2 61 73 74 20 1 377 
68D6 6C 65 76 65 1 377 
68DA 6C 20 70 61 1 377 
68DE 73 73 65 64 1 377 
68E2 00          1 377 
68E3 43 68 6F 6F 1 378 DEFM    "Choose level to restart, 1-4\0"
68E7 73 65 20 6C 1 378 
68EB 65 76 65 6C 1 378 
68EF 20 74 6F 20 1 378 
68F3 72 65 73 74 1 378 
68F7 61 72 74 2C 1 378 
68FB 20 31 2D 34 1 378 
68FF 00          1 378 
6900             1 380 ; ----------------------------------------------------------------------------------------------------------------------
6900             1 381 ; Based on "King" font https://spectrumcomputing.co.uk/entry/25245/ZX-Spectrum/ZX-ALFA
6900             1 382 ; this font was designed by Einar Saukas for Hex game
6900             1 383 ; ----------------------------------------------------------------------------------------------------------------------
6900             1 384 FONT:
6900 00 00 00 00 1 385 INCLUDEBIN "King+.bin"
6904 00 00 00 00 1 385 
6908 00 18 18 18 1 385 
690C 00 18 18 00 1 385 
6910 00 24 24 00 1 385 
6914 00 00 00 00 1 385 
6918 00 24 7E 24 1 385 
691C 24 7E 24 00 1 385 
6920 00 08 3E 28 1 385 
6924 3E 0A 3E 08 1 385 
6928 00 62 64 08 1 385 
692C 10 26 46 00 1 385 
6930 00 10 28 10 1 385 
6934 2A 44 3A 00 1 385 
6938 00 18 30 00 1 385 
693C 00 00 00 00 1 385 
6940 06 0C 08 08 1 385 
6944 08 0C 06 00 1 385 
6948 60 30 10 10 1 385 
694C 10 30 60 00 1 385 
6950 00 00 14 08 1 385 
6954 3E 08 14 00 1 385 
6958 00 00 08 08 1 385 
695C 3E 08 08 00 1 385 
6960 00 00 00 00 1 385 
6964 00 0C 18 30 1 385 
6968 00 00 00 7E 1 385 
696C 7E 00 00 00 1 385 
6970 00 00 00 00 1 385 
6974 30 70 70 00 1 385 
6978 02 06 0C 18 1 385 
697C 30 60 40 00 1 385 
6980 00 7E 62 62 1 385 
6984 62 62 7E 00 1 385 
6988 00 18 38 18 1 385 
698C 18 18 3C 00 1 385 
6990 00 38 4C 4C 1 385 
6994 18 30 7C 00 1 385 
6998 00 3C 62 0C 1 385 
699C 06 66 3C 00 1 385 
69A0 00 30 30 30 1 385 
69A4 30 34 3E 04 1 385 
69A8 00 7E 60 7E 1 385 
69AC 06 66 3C 00 1 385 
69B0 00 30 60 7C 1 385 
69B4 66 66 3C 00 1 385 
69B8 00 7E 46 0C 1 385 
69BC 18 30 60 00 1 385 
69C0 00 3C 66 3C 1 385 
69C4 66 66 3C 00 1 385 
69C8 00 3C 66 66 1 385 
69CC 3E 06 3C 00 1 385 
69D0 00 00 08 18 1 385 
69D4 00 08 18 00 1 385 
69D8 00 00 04 0C 1 385 
69DC 00 0C 18 30 1 385 
69E0 00 00 04 08 1 385 
69E4 10 08 04 00 1 385 
69E8 00 00 00 3E 1 385 
69EC 00 3E 00 00 1 385 
69F0 00 00 10 08 1 385 
69F4 04 08 10 00 1 385 
69F8 00 3C 42 04 1 385 
69FC 08 00 08 00 1 385 
6A00 00 3C 4A 56 1 385 
6A04 5E 40 3C 00 1 385 
6A08 00 7E 46 46 1 385 
6A0C 7E 46 46 00 1 385 
6A10 00 7C 62 7C 1 385 
6A14 62 62 7C 00 1 385 
6A18 00 7E 66 60 1 385 
6A1C 60 66 7E 00 1 385 
6A20 00 7C 46 46 1 385 
6A24 46 46 7C 00 1 385 
6A28 00 7E 60 7C 1 385 
6A2C 60 60 7E 00 1 385 
6A30 00 7E 60 7C 1 385 
6A34 60 60 60 00 1 385 
6A38 00 3E 62 60 1 385 
6A3C 66 66 3E 00 1 385 
6A40 00 62 62 7E 1 385 
6A44 62 62 62 00 1 385 
6A48 00 18 18 18 1 385 
6A4C 18 18 18 00 1 385 
6A50 00 0C 0C 0C 1 385 
6A54 0C 4C 38 00 1 385 
6A58 00 66 64 68 1 385 
6A5C 7E 46 66 00 1 385 
6A60 00 60 60 60 1 385 
6A64 60 60 7E 00 1 385 
6A68 00 7E 56 56 1 385 
6A6C 56 56 56 00 1 385 
6A70 00 7E 46 46 1 385 
6A74 46 46 46 00 1 385 
6A78 00 7E 62 62 1 385 
6A7C 62 62 7E 00 1 385 
6A80 00 7E 62 62 1 385 
6A84 7E 60 60 00 1 385 
6A88 00 7C 64 64 1 385 
6A8C 64 64 7E 00 1 385 
6A90 00 7C 62 64 1 385 
6A94 7C 46 46 00 1 385 
6A98 00 7E 60 7E 1 385 
6A9C 06 06 7E 00 1 385 
6AA0 00 7E 18 18 1 385 
6AA4 18 18 18 00 1 385 
6AA8 00 62 62 62 1 385 
6AAC 62 62 7E 00 1 385 
6AB0 00 62 62 62 1 385 
6AB4 62 34 18 00 1 385 
6AB8 00 6A 6A 6A 1 385 
6ABC 6A 6A 7E 00 1 385 
6AC0 00 62 62 34 1 385 
6AC4 4E 46 46 00 1 385 
6AC8 00 62 62 7E 1 385 
6ACC 18 18 18 00 1 385 
6AD0 00 7E 06 1C 1 385 
6AD4 38 60 7E 00 1 385 
6AD8 00 0E 08 08 1 385 
6ADC 08 08 0E 00 1 385 
6AE0 00 00 40 20 1 385 
6AE4 10 08 04 00 1 385 
6AE8 00 70 10 10 1 385 
6AEC 10 10 70 00 1 385 
6AF0 00 08 1C 2A 1 385 
6AF4 08 08 08 08 1 385 
6AF8 00 00 00 00 1 385 
6AFC 00 00 00 FF 1 385 
6B00 0C 12 10 38 1 385 
6B04 10 10 3E 00 1 385 
6B08 00 00 3C 06 1 385 
6B0C 7E 46 7E 00 1 385 
6B10 00 60 60 7E 1 385 
6B14 62 62 7E 00 1 385 
6B18 00 00 7E 62 1 385 
6B1C 60 62 7E 00 1 385 
6B20 00 06 06 7E 1 385 
6B24 46 46 7E 00 1 385 
6B28 00 00 7E 46 1 385 
6B2C 7E 60 7E 00 1 385 
6B30 00 1E 30 3C 1 385 
6B34 30 30 30 00 1 385 
6B38 00 00 7E 46 1 385 
6B3C 46 3E 06 3E 1 385 
6B40 00 60 60 7C 1 385 
6B44 66 66 66 00 1 385 
6B48 00 18 00 38 1 385 
6B4C 18 18 3C 00 1 385 
6B50 00 0C 00 0C 1 385 
6B54 0C 0C 4C 38 1 385 
6B58 00 20 2C 38 1 385 
6B5C 38 2C 26 00 1 385 
6B60 00 18 18 18 1 385 
6B64 18 18 0E 00 1 385 
6B68 00 00 6C 56 1 385 
6B6C 56 56 46 00 1 385 
6B70 00 00 7C 46 1 385 
6B74 46 46 46 00 1 385 
6B78 00 00 3C 46 1 385 
6B7C 46 46 3C 00 1 385 
6B80 00 00 7C 66 1 385 
6B84 66 7C 60 60 1 385 
6B88 00 00 3E 46 1 385 
6B8C 46 3E 06 06 1 385 
6B90 00 00 3C 62 1 385 
6B94 60 60 60 00 1 385 
6B98 00 00 3C 60 1 385 
6B9C 3C 06 3C 00 1 385 
6BA0 00 30 78 30 1 385 
6BA4 30 30 1C 00 1 385 
6BA8 00 00 46 46 1 385 
6BAC 46 46 3C 00 1 385 
6BB0 00 00 46 46 1 385 
6BB4 2C 3C 18 00 1 385 
6BB8 00 00 46 56 1 385 
6BBC 56 56 2C 00 1 385 
6BC0 00 00 46 2C 1 385 
6BC4 18 2C 46 00 1 385 
6BC8 00 00 46 46 1 385 
6BCC 46 3E 06 3C 1 385 
6BD0 00 00 7E 0C 1 385 
6BD4 18 30 7E 00 1 385 
6BD8 00 0E 08 30 1 385 
6BDC 08 08 0E 00 1 385 
6BE0 00 08 08 08 1 385 
6BE4 08 2A 1C 08 1 385 
6BE8 00 70 10 0C 1 385 
6BEC 10 10 70 00 1 385 
6BF0 00 14 28 00 1 385 
6BF4 00 00 00 00 1 385 
6BF8 FF 81 81 81 1 385 
6BFC 81 81 81 FF 1 385 

; File #2: C:\Users\Antonio\source\repos\Hex\Z80CodeFiles\Main.z80asm

6C00             2 1 ; ----------------------------------------------------------------------------------------------------------------------
6C00             2 2 ; Main.z80asm
6C00             2 3 ; Coded by Antonio Luque
6C00             2 4 ; ----------------------------------------------------------------------------------------------------------------------
6C00             2 6 CYAN_COLOR              EQU     %00000101                   ; attributes: flash 0, bright 0, paper 0, ink 5
6C00             2 7 RED_COLOR               EQU     %00000010                   ; attributes: flash 0, bright 0, paper 0, ink 2
6C00             2 9 ; ----------------------------------------------------------------------------------------------------------------------
6C00             2 10 ; Entry point of the program - Initialization
6C00             2 11 ; ----------------------------------------------------------------------------------------------------------------------
6C00             2 12 Main                    ENT     $                           ; SpectNet IDE pragma: defines the entry code of the program
6C00 F3          2 14 di                                  ; disable interrupts
6C01             2 16 ; allocate jump to interrupt routine at address $5CA1 (pointed by IY+103)
6C01 21 28 76    2 18 ld      hl, Timer_Interrupt         ; HL points to interrupt routine address
6C04 FD 36 67 C3 2 19 ld      (iy+103), $C3               ; 'jp' opcode
6C08 FD 75 68    2 20 ld      (iy+104), l                 ; Low byte of interrupt routine address
6C0B FD 74 69    2 21 ld      (iy+105), h                 ; High byte of interrupt routine address
6C0E 3E 2E       2 22 ld      a, $2E                      ; High byte of interrupt vector address
6C10 ED 47       2 23 ld      i, a                        ; set interrupt vector address
6C12 ED 5E       2 24 im      2                           ; set interrupt mode 2
6C14             2 26 ; When the ULA triggers an interrupt it doesn't put any device ID in the data bus. When no value
6C14             2 27 ; is placed on the Spectrum's data bus, this acquires the value of 8 signals one ($FF). So, the
6C14             2 28 ; resultant vector address is formed as follows:
6C14             2 29 ;
6C14             2 30 ;                           ( I * $100 ) + $FF = $2E00 + $FF = $2EFF
6C14             2 31 ; Source: 
6C14             2 32 ; https://wiki.speccy.org/cursos/ensamblador/interrupciones#curiosidades-y-consideraciones
6C14             2 33 ;
6C14             2 34 ; The value pointed at ROM address $2EFF is $5CA1. This address belongs to the calculator's
6C14             2 35 ; memory area and it is used by some ROM routines, but none of them are called by HEX2 program.
6C14 31 00 60    2 37 ld      sp, STACK                   ; move stack
6C17 AF          2 39 xor     a                           ; set border color (black)
6C18 D3 FE       2 40 out     ($FE), a
6C1A CD 7F 79    2 41 call    Screen_Menu                 ; show main menu and wait for an option
6C1D             2 43 ; ----------------------------------------------------------------------------------------------------------------------
6C1D             2 44 ; Start new game
6C1D             2 45 ; ----------------------------------------------------------------------------------------------------------------------
6C1D             2 46 Main_Start
6C1D CD 14 77    2 47 call    Screen_Clear                ; fill in black the whole screen area and attributes area
6C20 CD 21 77    2 48 call    Screen_Letters              ; draw the two rows of letters on the screen (a..g)
6C23 CD 4D 77    2 49 call    Screen_Numbers              ; draw the two columns of numbers on the screen (1..7)
6C26 CD 8C 77    2 50 call    Screen_Frame                ; draw the screen frame
6C29 CD E4 77    2 51 call    Screen_Tokens               ; draw the fixed tokens on the screen
6C2C CD 03 78    2 52 call    Screen_Timer_Quotes         ; draw the timer quotes (' ") on the screen
6C2F CD 46 78    2 53 call    Screen_Color_Statics        ; apply color to statics items of the screen
6C32 FB          2 55 ei                                  ; enable interrupts
6C33             2 57 ; ----------------------------------------------------------------------------------------------------------------------
6C33             2 58 ; New level
6C33             2 59 ; ----------------------------------------------------------------------------------------------------------------------
6C33             2 60 Main_New_Level
6C33 3E 04       2 61 ld      a, 4                        ; maximum level
6C35 21 9D 61    2 62 ld      hl, GAME_LEVEL              ; HL points to game level address
6C38 BE          2 63 cp      (hl)                        ; level 4 achieved?
6C39 20 05       2 64 jr      nz, Main_Increment_Level    ; no, increment game level
6C3B CD 80 78    2 65 call    Screen_Last_Level           ; show last level screen and input game level
6C3E 18 DD       2 66 jr      Main_Start                  ; start a new game
6C40             2 67 Main_Increment_Level
6C40 34          2 68 inc     (hl)                        ; increment game level
6C41 CD 23 79    2 69 call    Screen_Frame_Color          ; set up frame color depending on current level
6C44 CD 12 79    2 70 call    Screen_Clear_ThreeRow       ; clear all three-in-a-row marks
6C47 AF          2 71 xor     a                           ; initialize three-in-a-row counter
6C48 32 0E 62    2 72 ld      (THREE_ROW), a
6C4B             2 74 ; ----------------------------------------------------------------------------------------------------------------------
6C4B             2 75 ; Start new match
6C4B             2 76 ; ----------------------------------------------------------------------------------------------------------------------
6C4B             2 77 Main_Start_Match
6C4B             2 78 ; set up timers and clear last messages
6C4B CD BD 76    2 80 call    Timer_Reset                 ; reset timers
6C4E CD A8 76    2 81 call    Timer_Display_All           ; display timers
6C51 CD 0C 6F    2 82 call    Print_Clear_Alert           ; clear last alert
6C54 3E 02       2 83 ld      a, RED_COLOR                ; set red color in A
6C56 32 9E 61    2 84 ld      (TOKEN_COLOR), a            ; save token color
6C59 CD 36 6F    2 85 call    Print_Clear_Move            ; clear red player last move
6C5C             2 87 ; swap players' colors
6C5C 3A 9F 61    2 89 ld      a, (PLAYER_COLOR)           ; get current player color
6C5F EE 07       2 90 xor     %00000111                   ; swap color
6C61 32 9F 61    2 91 ld      (PLAYER_COLOR), a           ; save swapped player color
6C64 CD EE 6E    2 92 call    Print_Players               ; print "Player" and "Speccy" strings
6C67             2 94 ; initialize positions and draw empty board
6C67 21 00 7D    2 96 ld      hl, CYAN_POSITIONS          ; HL points to cyan positions address
6C6A 11 01 7D    2 97 ld      de, CYAN_POSITIONS+1        ; DE points to cyan positions (+1) address
6C6D 36 00       2 98 ld      (hl), EMPTY                 ; set first position as empty
6C6F 01 FF 01    2 99 ld      bc, 256*2-1                 ; length of cyan + red positions areas (-1 already set)
6C72 ED B0       2 100 ldir                                ; fill the rest of positions as empty
6C74 CD 9E 6D    2 101 call    Draw_Board                  ; draw an empty hexagons board
6C77             2 103 ; initialize draw token delay, move number and token color
6C77 3E 0A       2 105 ld      a, 10                       ; set delay duration for animate hexagons
6C79 32 CD 6D    2 106 ld      (@Token_Delay+1), a
6C7C 3E 01       2 107 ld      a, 1                        ; initialize move number
6C7E 32 9B 61    2 108 ld      (MOVE_NUMBER), a
6C81 3E 05       2 109 ld      a, CYAN_COLOR               ; first player token color
6C83             2 111 ; ----------------------------------------------------------------------------------------------------------------------
6C83             2 112 ; Process players moves - Match loop
6C83             2 113 ; ----------------------------------------------------------------------------------------------------------------------
6C83             2 114 Main_Match_Loop
6C83             2 115 ; check player turn
6C83 32 9E 61    2 117 ld      (TOKEN_COLOR), a            ; save current token color
6C86 21 9F 61    2 118 ld      hl, PLAYER_COLOR            ; HL points to player color address
6C89 BE          2 119 cp      (hl)                        ; check player color
6C8A 11 93 6C    2 120 ld      de, Main_Update_Board       ; set return address from jumps below
6C8D D5          2 121 push    de                          ; put return address on stack
6C8E 20 56       2 122 jr      nz, Main_GetSpeccy_Move     ; if player color <> current token color, get speccy move
6C90 C3 31 6D    2 123 jp      Main_GetPlayer_Move         ; otherwise, get a legal (empty position) player move 
6C93             2 124 Main_Update_Board
6C93             2 125 ; update positions with player/speccy move
6C93 CD F6 70    2 127 call    PathFinder_Friend           ; get player/speccy side
6C96 CD FF 70    2 128 call    PathFinder_PutToken         ; put token on cyan and red positions
6C99             2 130 ; draw token on the board
6C99 AF          2 132 xor     a                           ; stop timers
6C9A 32 E8 62    2 133 ld      (TIMER_FLAG), a
6C9D CD B9 6D    2 134 call    Draw_Token                  ; animate hexagon sprite on the screen
6CA0 DD 21 E7 64 2 135 ld      ix, TOKEN_FX                ; IX points to token tone parameters address
6CA4 CD D2 76    2 136 call    Sound_FX                    ; play sound effect
6CA7             2 138 ; check for a winner
6CA7 CD A8 75    2 140 call    PathFinder_VictoryPath      ; check current player victory path
6CAA 3C          2 141 inc     a                           ; is there a victory path?
6CAB 20 0C       2 142 jr      nz, Main_Match_End          ; yes, match ends
6CAD 21 9B 61    2 144 ld      hl, MOVE_NUMBER             ; HL points to move number address
6CB0 34          2 145 inc     (hl)                        ; increment move number
6CB1             2 147 ; swap players' token color
6CB1 3A 9E 61    2 149 ld      a, (TOKEN_COLOR)            ; get current token color
6CB4 EE 07       2 150 xor     %00000111                   ; swap token color
6CB6 C3 83 6C    2 151 jp      Main_Match_Loop             ; repeat match loop
6CB9             2 153 ; ----------------------------------------------------------------------------------------------------------------------
6CB9             2 154 ; Current player wins the match
6CB9             2 155 ; ----------------------------------------------------------------------------------------------------------------------
6CB9             2 156 Main_Match_End
6CB9 CD DD 75    2 157 call    PathFinder_BrightPath       ; animate and highlight the winner path
6CBC 11 3A 62    2 159 ld      de, STR_WINNER              ; DE points to "WINS" string address
6CBF CD 14 6F    2 160 call    Print_Alert                 ; print string
6CC2 3A 9E 61    2 162 ld      a, (TOKEN_COLOR)            ; get current token color
6CC5 21 9F 61    2 163 ld      hl, PLAYER_COLOR            ; get player color
6CC8 BE          2 164 cp      (hl)                        ; is player color = current token color?
6CC9 21 0E 62    2 165 ld      hl, THREE_ROW               ; HL points to three-in-a-row counter
6CCC 28 04       2 166 jr      z, Main_ThreeRow_Increment  ; yes, go to increment three-in-a-row counter
6CCE 35          2 167 dec     (hl)                        ; decrement three-in-a-row counter
6CCF F2 D3 6C    2 168 jp      p, Main_ThreeRow_Show       ; if not negative (-1), show marks
6CD2             2 169 Main_ThreeRow_Increment
6CD2 34          2 170 inc     (hl)                        ; increment three-in-a-row counter
6CD3             2 171 Main_ThreeRow_Show
6CD3 CD F6 78    2 172 call    Screen_ThreeRow             ; show three-in-a-row marks
6CD6 3E FF       2 173 ld      a, 255                      ; set delay duration
6CD8 CD 8F 6D    2 174 call    Main_Delay                  ; execute delay
6CDB 3A 0E 62    2 175 ld      a, (THREE_ROW)              ; check three row counter
6CDE FE 03       2 176 cp      3                           ; is it 3?
6CE0 CA 33 6C    2 177 jp      z, Main_New_Level           ; yes, start a new level
6CE3 C3 4B 6C    2 178 jp      Main_Start_Match            ; start a new match
6CE6             2 180 ; ----------------------------------------------------------------------------------------------------------------------
6CE6             2 181 ; Main_GetSpeccy_Move: get the speccy move
6CE6             2 182 ;
6CE6             2 183 ; Input:     A = current token color
6CE6             2 184 ;
6CE6             2 185 ; Output:   BC = hexagon board indexes (B:column, C:row)
6CE6             2 186 ;           HL = CYAN_POSITIONS move address
6CE6             2 187 ;
6CE6             2 188 ; Uses:     MOVE_NUMBER (current move number)
6CE6             2 189 ;           GAME_LEVEL (current game level)
6CE6             2 190 ;           AI_DEPTH (recursion depth level)
6CE6             2 191 ;           STR_MOVE (formatted move string)
6CE6             2 192 ;
6CE6             2 193 ; Destroys: A, DE, IX, IY
6CE6             2 194 ; ----------------------------------------------------------------------------------------------------------------------
6CE6             2 195 Main_GetSpeccy_Move:
6CE6 E6 03       2 196 and     %00000011                   ; calculate speccy's timer flag based on current token color
6CE8 32 E8 62    2 197 ld      (TIMER_FLAG), a             ; (re)start speccy timer
6CEB CD 2E 6F    2 199 call    Print_Wait                  ; print "WAIT" message
6CEE 3A 9B 61    2 200 ld      a, (MOVE_NUMBER)            ; get move number
6CF1 3D          2 201 dec     a                           ; is it cyan first move?
6CF2 28 2A       2 202 jr      z, Main_GetSpeccy_Book      ; yes, get move from opening book
6CF4 DD 21 00 7F 2 204 ld      ix, CANDIDATES              ; IX points to candidates list address
6CF8 3A 9D 61    2 205 ld      a, (GAME_LEVEL)             ; get game level
6CFB 32 9A 61    2 206 ld      (AI_DEPTH), a               ; save recursion depth level
6CFE CD F6 70    2 208 call    PathFinder_Friend           ; get speccy side
6D01 CD 82 6F    2 209 call    BRAINIAC_best_move          ; get speccy best move
6D04 6B          2 210 ld      l, e                        ; set node index in L
6D05             2 211 Main_GetSpeccy_Positions
6D05 26 7D       2 212 ld      h, CYAN_POSITIONS/256       ; HL points to CYAN_POSITIONS move address
6D07 E5          2 213 push    hl                          ; store CYAN_POSITIONS move address
6D08 CD 7D 6D    2 214 call    Main_Board2Indexes          ; convert board position to indexes
6D0B 78          2 215 ld      a, b                        ; get 1..7 column
6D0C C6 60       2 216 add     a, $60                      ; adjust to charset ('a'..'g')
6D0E 32 15 62    2 217 ld      (STR_MOVE+0), a             ; put it on formatted move string
6D11 79          2 218 ld      a, c                        ; get 1..7 row
6D12 C6 30       2 219 add     a, $30                      ; adjust to charset ('1'..'7')
6D14 32 18 62    2 220 ld      (STR_MOVE+3), a             ; put it on formatted move string
6D17 C5          2 221 push    bc                          ; store hexagon board indexes
6D18 CD 3E 6F    2 222 call    Print_Move                  ; print Speccy move
6D1B C1          2 223 pop     bc                          ; restore hexagon board indexes
6D1C E1          2 224 pop     hl                          ; restore CYAN_POSITIONS move address
6D1D C9          2 225 ret                                 ; return to Main_Update_Board
6D1E             2 226 Main_GetSpeccy_Book
6D1E ED 5F       2 227 ld      a, r                        ; get a pseudo-random number (0..127)
6D20 E6 1F       2 228 and     %00011111                   ; number is in range (0..31)
6D22 FE 1B       2 229 cp      27                          ; is it >= 27?
6D24 30 F8       2 230 jr      nc, Main_GetSpeccy_Book     ; yes, repeat until range is (0..26)
6D26 21 CD 62    2 231 ld      hl, OPENINGS                ; HL points to opening book address
6D29 16 00       2 232 ld      d, 0                        ; set index in DE
6D2B 5F          2 233 ld      e, a
6D2C 19          2 234 add     hl, de                      ; HL points to move index address
6D2D 6E          2 235 ld      l, (hl)                     ; get move from opening book
6D2E C3 05 6D    2 236 jp      Main_GetSpeccy_Positions    ; get speccy move positions
6D31             2 238 ; ----------------------------------------------------------------------------------------------------------------------
6D31             2 239 ; Main_GetPlayer_Move: get a legal (empty hexagon) move from player
6D31             2 240 ;
6D31             2 241 ; Input:     A = current token color
6D31             2 242 ;
6D31             2 243 ; Output:   BC = hexagon board indexes (B:column, C:row)
6D31             2 244 ;           HL = CYAN_POSITIONS move address
6D31             2 245 ;
6D31             2 246 ; Uses:     STR_MOVE (formatted move string)
6D31             2 247 ;
6D31             2 248 ; Destroys: A, DE, IX
6D31             2 249 ; ----------------------------------------------------------------------------------------------------------------------
6D31             2 250 Main_GetPlayer_Move:
6D31 E6 03       2 251 and     %00000011                   ; calculate player's timer flag based on current token color
6D33 32 E8 62    2 252 ld      (TIMER_FLAG), a             ; (re)start player timer
6D36             2 253 Main_GetPlayer_Input
6D36 CD 36 6F    2 254 call    Print_Clear_Move            ; clear player last move
6D39 CD 28 6E    2 255 call    Input_Move                  ; wait for input player move
6D3C CD 3E 6F    2 256 call    Print_Move                  ; print player move
6D3F 3A 15 62    2 258 ld      a, (STR_MOVE+0)             ; get column ('a'..'g')
6D42 D6 60       2 259 sub     $60                         ; convert to number (1..7)
6D44 47          2 260 ld      b, a                        ; set column index in B
6D45 3A 18 62    2 261 ld      a, (STR_MOVE+3)             ; get row ('1'..'7')
6D48 D6 30       2 262 sub     $30                         ; convert to number (1..7)
6D4A 4F          2 263 ld      c, a                        ; set row index in C
6D4B 11 4D 62    2 264 ld      de, BOARD_COORDINATES       ; DE points to board coordinates address
6D4E CD 70 6D    2 265 call    Main_Search_Table           ; search board position in board coordinates
6D51 6E          2 266 ld      l, (hl)                     ; set board position of player move
6D52 26 7D       2 267 ld      h, CYAN_POSITIONS/256       ; HL points to CYAN_POSITIONS move address
6D54 3E 00       2 268 ld      a, EMPTY                    ; check position
6D56 BE          2 269 cp      (hl)                        ; is position empty?
6D57 C8          2 270 ret     z                           ; yes, return to Main_Update_Board
6D58             2 272 ; illegal player move (position not empty)
6D58 11 2E 62    2 274 ld      de, STR_FILLED              ; DE points to "FILLED" string address
6D5B CD 14 6F    2 275 call    Print_Alert                 ; print string
6D5E DD 21 F7 64 2 276 ld      ix, FILLED_FX               ; IX points to filled tone parameters address
6D62 CD D2 76    2 277 call    Sound_FX                    ; play sound fx
6D65 3E 50       2 278 ld      a, 80                       ; set delay counter
6D67 CD 8F 6D    2 279 call    Main_Delay                  ; execute delay
6D6A CD 0C 6F    2 280 call    Print_Clear_Alert           ; clear alert message
6D6D C3 36 6D    2 281 jp      Main_GetPlayer_Input        ; repeat player input until move is legal
6D70             2 283 ; ----------------------------------------------------------------------------------------------------------------------
6D70             2 284 ; Main_Search_Table: search an element in a 8x8 bytes table
6D70             2 285 ;
6D70             2 286 ; Input:    BC = element indexes (B = column, C = row)
6D70             2 287 ;           DE = table address in which to search for the element
6D70             2 288 ;
6D70             2 289 ; Output:   DE = address of first element in the C row of the table
6D70             2 290 ;           HL = address of the element in the BC indexes of the table
6D70             2 291 ;
6D70             2 292 ; Destroys: -
6D70             2 293 ; ----------------------------------------------------------------------------------------------------------------------
6D70             2 294 Main_Search_Table:
6D70 26 00       2 295 ld      h, 0                        ; first, get the C row in table
6D72 69          2 296 ld      l, c                        ; set index in HL
6D73 29          2 297 add     hl, hl                      ; a row is 8 bytes long
6D74 29          2 298 add     hl, hl
6D75 29          2 299 add     hl, hl
6D76 19          2 300 add     hl, de                      ; HL points to the address of C row 
6D77 EB          2 301 ex      de, hl                      ; DE points to the address of C row
6D78 26 00       2 302 ld      h, 0                        ; go for to the B column
6D7A 68          2 303 ld      l, b                        ; set index in HL
6D7B 19          2 304 add     hl, de                      ; HL points to the address of BC indexes
6D7C C9          2 305 ret
6D7D             2 307 ; ----------------------------------------------------------------------------------------------------------------------
6D7D             2 308 ; Main_Board2Indexes: convert a board position into a board indexes
6D7D             2 309 ;
6D7D             2 310 ; Input:    L  = board position
6D7D             2 311 ;
6D7D             2 312 ; Output:   BC = board indexes (B = column, C = row)
6D7D             2 313 ;
6D7D             2 314 ; Destroys: HL
6D7D             2 315 ; ----------------------------------------------------------------------------------------------------------------------
6D7D             2 316 Main_Board2Indexes:
6D7D 7D          2 317 ld      a, l                        ; set board position in A to compare later
6D7E 21 8D 62    2 319 ld      hl, BOARD_COORDINATES+64    ; HL points to last board position address (+1)
6D81 0E 07       2 320 ld      c, 7                        ; 7 rows
6D83             2 321 Main_Board2Indexes_Row
6D83 06 07       2 322 ld      b, 7                        ; 7 columns
6D85             2 323 Main_Board2Indexes_Col
6D85 2B          2 324 dec     hl                          ; move HL to next board position address
6D86 BE          2 325 cp      (hl)                        ; is A the position?
6D87 C8          2 326 ret     z                           ; yes, return board indexes
6D88 10 FB       2 327 djnz    Main_Board2Indexes_Col      ; repeat for each column
6D8A 2B          2 328 dec     hl                          ; skip borders
6D8B 0D          2 329 dec     c                           ; decrement row
6D8C C3 83 6D    2 330 jp      Main_Board2Indexes_Row      ; loop until find position
6D8F             2 332 ; ----------------------------------------------------------------------------------------------------------------------
6D8F             2 333 ; Main_Delay: execute a delay
6D8F             2 334 ;
6D8F             2 335 ; Input:    A = delay counter
6D8F             2 336 ;
6D8F             2 337 ; Output:   -
6D8F             2 338 ;
6D8F             2 339 ; Destroys: A
6D8F             2 340 ; ----------------------------------------------------------------------------------------------------------------------
6D8F             2 341 Main_Delay:
6D8F C5          2 342 push    bc                          ; store register
6D90             2 343 Main_Delay_Loop
6D90 0E 0A       2 344 ld      c, 10                       ; set outer loop counter
6D92             2 345 Main_Delay_Loop1
6D92 06 00       2 346 ld      b, 0                        ; set inner loop counter (256)
6D94             2 347 Main_Delay_Loop2
6D94 10 FE       2 348 djnz    Main_Delay_Loop2            ; repeat until B=0
6D96 0D          2 349 dec     c                           ; decrement outer loop counter
6D97 20 F9       2 350 jr      nz, Main_Delay_Loop1        ; repeat until C=0
6D99 3D          2 351 dec     a                           ; decrement delay counter
6D9A 20 F4       2 352 jr      nz, Main_Delay_Loop         ; repeat until A=0
6D9C C1          2 353 pop     bc                          ; restore register
6D9D C9          2 354 ret

; File #3: C:\Users\Antonio\source\repos\Hex\Z80CodeFiles\Draw.z80asm

6D9E             3 1 ; ----------------------------------------------------------------------------------------------------------------------
6D9E             3 2 ; Draw.z80asm
6D9E             3 3 ; Coded by Antonio Luque
6D9E             3 4 ; ----------------------------------------------------------------------------------------------------------------------
6D9E             3 6 ; ----------------------------------------------------------------------------------------------------------------------
6D9E             3 7 ; Draw_Board: draw an empty 7x7 hexagons board on the screen
6D9E             3 8 ;
6D9E             3 9 ; Input:    -
6D9E             3 10 ;
6D9E             3 11 ; Output:   -
6D9E             3 12 ;
6D9E             3 13 ; Uses:     TOKEN_COLOR (current token color)
6D9E             3 14 ;
6D9E             3 15 ; Destroys: A, BC, DE, HL, IXL
6D9E             3 16 ; ----------------------------------------------------------------------------------------------------------------------
6D9E             3 17 Draw_Board:
6D9E 3E 07       3 18 ld      a, WHITE                    ; set empty hexagon color
6DA0 32 9E 61    3 19 ld      (TOKEN_COLOR), a            ; store hexagon color
6DA3 0E 07       3 20 ld      c, 7                        ; 7 rows
6DA5             3 21 Draw_Board_Row
6DA5 06 07       3 22 ld      b, 7                        ; 7 columns
6DA7             3 23 Draw_Board_Column
6DA7 CD D4 6D    3 24 call    Draw_GetHEX_Screen          ; get hexagon screen address
6DAA CD 0C 6E    3 25 call    Draw_Hexagon_Color          ; apply color to hexagon area
6DAD 11 7E 65    3 26 ld      de, HEXAGON_EMPTY           ; DE points to hexagon sprite address
6DB0 CD DE 6D    3 27 call    Draw_Sprite_Hexagon         ; draw an empty hexagon at screen address
6DB3 10 F2       3 28 djnz    Draw_Board_Column           ; repeat for each column
6DB5 0D          3 29 dec     c                           ; decrement row
6DB6 20 ED       3 30 jr      nz, Draw_Board_Row          ; repeat for each row
6DB8 C9          3 31 ret
6DB9             3 33 ; ----------------------------------------------------------------------------------------------------------------------
6DB9             3 34 ; Draw_Token: animate an hexagon sprite on the screen
6DB9             3 35 ;
6DB9             3 36 ; Input:    BC = hexagon board indexes (B:column, C:row)
6DB9             3 37 ;
6DB9             3 38 ; Output:   -
6DB9             3 39 ;
6DB9             3 40 ; Destroys: A, BC, DE, HL, IXL
6DB9             3 41 ; ----------------------------------------------------------------------------------------------------------------------
6DB9             3 42 Draw_Token:
6DB9 CD D4 6D    3 43 call    Draw_GetHEX_Screen          ; get hexagon screen address
6DBC 01 04 06    3 44 ld      bc, $0604                   ; B = number of sprites, C = sprite number to change color
6DBF 11 9E 65    3 45 ld      de, HEXAGON_SPRITE          ; DE points to hexagon sprite address
6DC2             3 46 Draw_Token_Loop
6DC2 E5          3 47 push    hl                          ; store hexagon screen address
6DC3 CD DE 6D    3 48 call    Draw_Sprite_Hexagon         ; draw hexagon sprite
6DC6 E1          3 49 pop     hl                          ; restore hexagon screen address
6DC7 78          3 50 ld      a, b                        ; check loop counter
6DC8 B9          3 51 cp      c                           ; is it 4?
6DC9 CC 0C 6E    3 52 call    z, Draw_Hexagon_Color       ; yes, apply color to hexagon area
6DCC             3 53 @Token_Delay
6DCC 3E 00       3 54 ld      a, 0                        ; set delay duration (changed before calling this routine)
6DCE CD 8F 6D    3 55 call    Main_Delay                  ; execute delay
6DD1 10 EF       3 56 djnz    Draw_Token_Loop             ; repeat for each hexagon sprite
6DD3 C9          3 57 ret
6DD4             3 59 ; ----------------------------------------------------------------------------------------------------------------------
6DD4             3 60 ; Draw_GetHEX_Screen: get the screen address of an hexagon on board
6DD4             3 61 ;
6DD4             3 62 ; Input:    BC = hexagon board indexes (B:column, C:row)
6DD4             3 63 ;
6DD4             3 64 ; Output:   HL = hexagon screen address 
6DD4             3 65 ;
6DD4             3 66 ; Destroys: A, DE
6DD4             3 67 ; ----------------------------------------------------------------------------------------------------------------------
6DD4             3 68 Draw_GetHEX_Screen:
6DD4 11 98 61    3 69 ld      de, BOARD_MAP-8             ; DE points to board hexagons screen addresses table (-8)
6DD7 CD 70 6D    3 70 call    Main_Search_Table           ; search the screen address of the hexagon in table
6DDA 6E          3 71 ld      l, (hl)                     ; set the low byte of the screen address in L
6DDB 1A          3 72 ld      a, (de)                     ; set the high byte of the screen address in H
6DDC 67          3 73 ld      h, a
6DDD C9          3 74 ret
6DDE             3 76 ; ----------------------------------------------------------------------------------------------------------------------
6DDE             3 77 ; Draw_Sprite_Hexagon: draw an hexagon sprite on the screen
6DDE             3 78 ;
6DDE             3 79 ; Input:    DE = hexagon sprite address
6DDE             3 80 ;           HL = hexagon screen address
6DDE             3 81 ;
6DDE             3 82 ; Output:   DE = next hexagon sprite address
6DDE             3 83 ;
6DDE             3 84 ; Destroys: A, HL, IXL
6DDE             3 85 ; ----------------------------------------------------------------------------------------------------------------------
6DDE             3 86 Draw_Sprite_Hexagon:
6DDE DD 2E 10    3 87 ld      ixl, 16                     ; hexagon sprite height in bytes (loop counter)
6DE1             3 88 Draw_Sprite_HexLoop
6DE1 1A          3 89 ld      a, (de)                     ; get sprite byte
6DE2 77          3 90 ld      (hl), a                     ; put sprite byte on screen
6DE3 13          3 91 inc     de                          ; move DE to next sprite byte address
6DE4 2C          3 92 inc     l                           ; move HL to next screen column
6DE5 1A          3 93 ld      a, (de)                     ; get sprite byte
6DE6 77          3 94 ld      (hl), a                     ; put sprite byte on screen
6DE7 13          3 95 inc     de                          ; move DE to next sprite byte
6DE8 2D          3 96 dec     l                           ; move HL to previous screen column
6DE9 CD FD 6D    3 97 call    Draw_Down_PixelLine         ; move HL down one pixel-line
6DEC DD 2D       3 98 dec     ixl                         ; decrement sprite height
6DEE 20 F1       3 99 jr      nz, Draw_Sprite_HexLoop     ; repeat for each byte in sprite
6DF0 C9          3 100 ret
6DF1             3 102 ; ----------------------------------------------------------------------------------------------------------------------
6DF1             3 103 ; Draw_Sprite_LetterNum: draw a letter/number sprite at screen address
6DF1             3 104 ;
6DF1             3 105 ; Input:    DE = letter/number sprite address
6DF1             3 106 ;           HL = letter/number screen address
6DF1             3 107 ;
6DF1             3 108 ; Output:   DE = next letter/number sprite address
6DF1             3 109 ;
6DF1             3 110 ; Destroys: A, C, HL
6DF1             3 111 ; ----------------------------------------------------------------------------------------------------------------------
6DF1             3 112 Draw_Sprite_LetterNum:
6DF1 0E 0A       3 113 ld      c, 10                       ; letter/number sprite height in bytes (loop counter)
6DF3             3 114 Draw_Sprite_Loop
6DF3 1A          3 115 ld      a, (de)                     ; get sprite byte
6DF4 77          3 116 ld      (hl), a                     ; put sprite byte on screen
6DF5 13          3 117 inc     de                          ; move DE to next sprite byte address
6DF6 CD FD 6D    3 118 call    Draw_Down_PixelLine         ; move HL down one pixel-line
6DF9 0D          3 119 dec     c                           ; decrement sprite height
6DFA 20 F7       3 120 jr      nz, Draw_Sprite_Loop        ; repeat for each byte in sprite
6DFC C9          3 121 ret
6DFD             3 123 ; ----------------------------------------------------------------------------------------------------------------------
6DFD             3 124 ; Draw_Down_PixelLine: move HL down one pixel-line
6DFD             3 125 ; Source: https://spectrumcomputing.co.uk/forums/viewtopic.php?p=35272#p35272
6DFD             3 126 ;
6DFD             3 127 ; The screen address of a pixel-line is encoded as follows:
6DFD             3 128 ;
6DFD             3 129 ;             H           |           L
6DFD             3 130 ;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
6DFD             3 131 ;  07|06|05|04|03|02|01|00|07|06|05|04|03|02|01|00
6DFD             3 132 ;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
6DFD             3 133 ;   0| 1| 0|Y7|Y6|Y2|Y1|Y0|Y5|Y4|Y3|X4|X3|X2|X1|X0
6DFD             3 134 ;
6DFD             3 135 ; where:
6DFD             3 136 ;   Y = pixel position: Y7,Y6,Y5,Y4,Y3,Y2,Y1,Y0 (0-191)
6DFD             3 137 ;   X = byte  position:  0, 0, 0,X4,X3,X2,X1,X0 (0-31)
6DFD             3 138 ;
6DFD             3 139 ; Input:    HL = pixel-line address
6DFD             3 140 ;
6DFD             3 141 ; Output:   HL = next (down) pixel-line address
6DFD             3 142 ;
6DFD             3 143 ; Destroys: A
6DFD             3 144 ; ----------------------------------------------------------------------------------------------------------------------
6DFD             3 145 Draw_Down_PixelLine:
6DFD 24          3 146 inc     h                           ; move HL down one pixel-line
6DFE 7C          3 147 ld      a, h                        ; get high byte of pixel-line address
6DFF E6 07       3 148 and     %00000111                   ; is pixel-line address inside a character line?
6E01 C0          3 149 ret     nz                          ; yes, return
6E02 7D          3 150 ld      a, l                        ; get low byte of pixel-line address (at this point Y6 = 1)
6E03 C6 20       3 151 add     a, 32                       ; add size of char line (add extra bit into Y3-Y5)
6E05 6F          3 152 ld      l, a                        ; move HL down one character line
6E06 D8          3 153 ret     c                           ; a third was crossed? yes, return
6E07 7C          3 154 ld      a, h                        ; get high byte of pixel-line address
6E08 D6 08       3 155 sub     8                           ; clean up the bit from Y6
6E0A 67          3 156 ld      h, a                        ; HL points to next (down) pixel-line address
6E0B C9          3 157 ret
6E0C             3 159 ; ----------------------------------------------------------------------------------------------------------------------
6E0C             3 160 ; Draw_Hexagon_Color: color an hexagon sprite on the screen
6E0C             3 161 ; Source: https://spectrumcomputing.co.uk/forums/viewtopic.php?p=42285#p42285
6E0C             3 162 ;
6E0C             3 163 ; This routine converts a screen address (HL) into an attribute address (IX):
6E0C             3 164 ;
6E0C             3 165 ;             H           |           L
6E0C             3 166 ;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
6E0C             3 167 ;  07|06|05|04|03|02|01|00|07|06|05|04|03|02|01|00
6E0C             3 168 ;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
6E0C             3 169 ;   0| 1| 0|Y7|Y6|Y2|Y1|Y0|Y5|Y4|Y3|X4|X3|X2|X1|X0      screen address
6E0C             3 170 ;
6E0C             3 171 ;            IXH          |          IXL
6E0C             3 172 ;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
6E0C             3 173 ;  07|06|05|04|03|02|01|00|07|06|05|04|03|02|01|00
6E0C             3 174 ;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
6E0C             3 175 ;   0| 1| 0| 1| 1| 0|Y7|Y6|Y5|Y4|Y3|X4|X3|X2|X1|X0      attribute address
6E0C             3 176 ;
6E0C             3 177 ; where:
6E0C             3 178 ;   Y = pixel position: Y7,Y6,Y5,Y4,Y3,Y2,Y1,Y0 (0-191)
6E0C             3 179 ;   X = byte  position:  0, 0, 0,X4,X3,X2,X1,X0 (0-31)
6E0C             3 180 ;
6E0C             3 181 ; Input:    HL = screen address of the hexagon
6E0C             3 182 ;
6E0C             3 183 ; Output:   IX = attribute address of the hexagon
6E0C             3 184 ;
6E0C             3 185 ; Uses:     TOKEN_COLOR (current token color)
6E0C             3 186 ;
6E0C             3 187 ; Destroys: A
6E0C             3 188 ; ----------------------------------------------------------------------------------------------------------------------
6E0C             3 189 Draw_Hexagon_Color:
6E0C 7C          3 190 ld      a, h                        ; get high byte of screen address
6E0D F6 87       3 191 or      %10000111                   ; mask Y0-Y2 and set bit 7 on
6E0F 1F          3 192 rra                                 ; shift Y7-Y6 two positions
6E10 1F          3 193 rra
6E11 CB 3F       3 194 srl     a                           ; shift Y7-Y6 to last positions and set bit 7 off
6E13 DD 67       3 195 ld      ixh, a                      ; set high byte of attribute address in IXH
6E15 7D          3 196 ld      a, l                        ; (the low byte for attribute address doesn't change)
6E16 DD 6F       3 197 ld      ixl, a                      ; set low byte of attribute address in IXL
6E18 3A 9E 61    3 198 ld      a, (TOKEN_COLOR)            ; get current token color
6E1B DD 77 00    3 199 ld      (ix+0), a                   ; set hexagon color (4 bytes)
6E1E DD 77 01    3 200 ld      (ix+1), a
6E21 DD 77 20    3 201 ld      (ix+32), a
6E24 DD 77 21    3 202 ld      (ix+33), a
6E27 C9          3 203 ret

; File #4: C:\Users\Antonio\source\repos\Hex\Z80CodeFiles\Input.z80asm

6E28             4 1 ; ----------------------------------------------------------------------------------------------------------------------
6E28             4 2 ; Input.z80asm
6E28             4 3 ; Coded by Antonio Luque
6E28             4 4 ; ----------------------------------------------------------------------------------------------------------------------
6E28             4 6 MAX_CHARS               EQU     2                           ; maximum of input chars
6E28             4 8 ; ----------------------------------------------------------------------------------------------------------------------
6E28             4 9 ; Input_Move: wait for input a move from keyboard
6E28             4 10 ; Based on assembler course by sromero: https://wiki.speccy.org/cursos/ensamblador/gfx4_fuentes
6E28             4 11 ;
6E28             4 12 ; Input:    -
6E28             4 13 ;
6E28             4 14 ; Output:   -
6E28             4 15 ;
6E28             4 16 ; Uses:     TOKEN_COLOR (current token color)
6E28             4 17 ;           STR_MOVE (formatted move string)
6E28             4 18 ;
6E28             4 19 ; Destroys: A, A', BC, DE, HL, IX
6E28             4 20 ; ----------------------------------------------------------------------------------------------------------------------
6E28             4 21 Input_Move:
6E28 01 00 02    4 22 ld      bc, MAX_CHARS*256           ; B = maximum of input chars, C = chars counter
6E2B DD 21 83 5A 4 24 ld      ix, $5A83                   ; IX points to attribute address of RED input text
6E2F 21 83 50    4 25 ld      hl, $5083                   ; HL points to screen address of RED input text
6E32 3A 9E 61    4 26 ld      a, (TOKEN_COLOR)            ; check current player color
6E35 FE 02       4 27 cp      RED_COLOR                   ; is RED the current token color?
6E37 28 07       4 28 jr      z, Input_Start              ; yes, start input
6E39 DD 21 19 59 4 29 ld      ix, $5919                   ; IX points to attribute address of CYAN input text
6E3D 21 19 48    4 30 ld      hl, $4819                   ; HL points to screen address of CYAN input text
6E40             4 31 Input_Start
6E40 DD 36 00 C7 4 32 ld      (ix+0), WHITE_FLASH1        ; set attributes for cursor (flash)
6E44 3E 5F       4 33 ld      a, '_'                      ; text input cursor
6E46 CD 68 6F    4 34 call    Print_Char                  ; print cursor
6E49             4 35 Input_Loop
6E49 CD C2 6E    4 36 call    Input_Key_Scan              ; scan for a key pressed
6E4C FE 0D       4 38 cp      $0D                         ; is it ENTER?
6E4E 28 64       4 39 jr      z, Input_Enter              ; yes, perform enter pressed
6E50 FE 30       4 40 cp      '0'                         ; is it "delete"? (char '0' acts as delete, without Shift)
6E52 28 42       4 41 jr      z, Input_Delete             ; yes, perform delete char
6E54 08          4 42 ex      af, af'                     ; store char in A'
6E55 79          4 43 ld      a, c                        ; check number of chars inserted
6E56 B8          4 44 cp      b                           ; chars limit reached?
6E57 28 F0       4 45 jr      z, Input_Loop               ; yes, repeat input loop
6E59 B7          4 47 or      a                           ; is it the first char?
6E5A 20 21       4 48 jr      nz, Input_Numbers           ; no, perform input of 2nd char
6E5C             4 50 ; restrict first char to 'a'-'g'
6E5C 08          4 52 ex      af, af'                     ; restore char
6E5D FE 61       4 53 cp      'a'                         ; is it < 'a'?
6E5F 38 E8       4 54 jr      c, Input_Loop               ; yes, repeat input loop (char is not allowed)
6E61 FE 68       4 55 cp      'h'                         ; is it >= 'g'?
6E63 30 E4       4 56 jr      nc, Input_Loop              ; yes, repeat input loop (char is not allowed)
6E65             4 58 ; char is valid as column
6E65 32 15 62    4 60 ld      (STR_MOVE+0), a             ; save char in player move
6E68 DD 36 00 47 4 61 ld      (ix+0), WHITE_FLASH0        ; restore attributes (no flash)
6E6C CD 68 6F    4 62 call    Print_Char                  ; print key pressed
6E6F 0C          4 63 inc     c                           ; increment chars counter
6E70 2C          4 64 inc     l                           ; increment X position of current input screen location
6E71 DD 2C       4 65 inc     ixl                         ; increment X position of current input attr location
6E73 3E 2D       4 66 ld      a, '-'                      ; set dash char
6E75 CD 68 6F    4 67 call    Print_Char                  ; print key pressed
6E78 2C          4 68 inc     l                           ; increment X position of current input screen location
6E79 DD 2C       4 69 inc     ixl                         ; increment X position of current input attr location
6E7B 18 C3       4 70 jr      Input_Start                 ; get next char (do until ENTER is pressed)
6E7D             4 71 Input_Numbers
6E7D             4 72 ; restrict second char to '1'-'7'
6E7D 08          4 74 ex      af, af'                     ; restore char
6E7E FE 31       4 75 cp      '1'                         ; is it < '1'?
6E80 38 C7       4 76 jr      c, Input_Loop               ; yes, repeat input loop (char is not allowed)
6E82 FE 38       4 77 cp      '8'                         ; is it >= '8'?
6E84 30 C3       4 78 jr      nc, Input_Loop              ; yes, repeat input loop (char is not allowed)
6E86             4 80 ; char is valid as row
6E86 32 18 62    4 82 ld      (STR_MOVE+3), a             ; save char in player move
6E89 DD 36 00 47 4 83 ld      (ix+0), WHITE_FLASH0        ; restore attributes (no flash)
6E8D CD 68 6F    4 84 call    Print_Char                  ; print key pressed
6E90 0C          4 85 inc     c                           ; increment chars counter
6E91 2C          4 86 inc     l                           ; increment X position of current input screen location
6E92 DD 2C       4 87 inc     ixl                         ; increment X position of current input attr location
6E94 18 AA       4 88 jr      Input_Start                 ; get next char (do until ENTER is pressed)
6E96             4 90 ; player pressed "delete" (char '0')
6E96             4 91 Input_Delete
6E96 79          4 92 ld      a, c                        ; get char counter
6E97 B7          4 93 or      a                           ; is it 0?
6E98 28 AF       4 94 jr      z, Input_Loop               ; repeat input loop (no chars to delete)
6E9A DD 36 00 47 4 96 ld      (ix+0), WHITE_FLASH0        ; restore attributes (no flash)
6E9E B8          4 97 cp      b                           ; is it the first char?
6E9F 28 08       4 98 jr      z, Input_Delete_Char        ; yes, continue delete
6EA1 3E 20       4 99 ld      a, ' '                      ; empty char
6EA3 CD 68 6F    4 100 call    Print_Char                  ; delete cursor and last char
6EA6 2D          4 101 dec     l                           ; decrement X position of input screen location
6EA7 DD 2D       4 102 dec     ixl                         ; decrement X position of input attr location
6EA9             4 103 Input_Delete_Char
6EA9 0D          4 104 dec     c                           ; decrement char counter
6EAA 3E 20       4 105 ld      a, ' '                      ; empty char
6EAC CD 68 6F    4 106 call    Print_Char                  ; delete cursor and last char
6EAF 2D          4 107 dec     l                           ; decrement X position of player input screen location
6EB0 DD 2D       4 108 dec     ixl                         ; decrement X position of player input attr location
6EB2 18 8C       4 109 jr      Input_Start                 ; get next char
6EB4             4 111 ; player pressed ENTER
6EB4             4 112 Input_Enter
6EB4 79          4 113 ld      a, c                        ; check char counter  
6EB5 B8          4 114 cp      b                           ; is it < MAX_CHARS?
6EB6 38 91       4 115 jr      c, Input_Loop               ; yes, repeat input loop (move is incomplete)
6EB8 DD 36 00 47 4 117 ld      (ix+0), WHITE_FLASH0        ; restore attributes (no flash)
6EBC 3E 20       4 118 ld      a, ' '                      ; empty char
6EBE CD 68 6F    4 119 call    Print_Char                  ; delete cursor
6EC1 C9          4 120 ret
6EC2             4 122 ; ----------------------------------------------------------------------------------------------------------------------
6EC2             4 123 ; Input_Key_Scan: wait for a key pressed and return its ASCII code
6EC2             4 124 ;
6EC2             4 125 ;                           Bit
6EC2             4 126 ;  Port  |   0   |   1   |   2   |   3   |   4   |
6EC2             4 127 ;  ------+-------+-------+-------+-------+-------+
6EC2             4 128 ;  $FEFE | Shift |   Z   |   X   |   C   |   V   |
6EC2             4 129 ;  $FDFE |   A   |   S   |   D   |   F   |   G   |
6EC2             4 130 ;  $FBFE |   Q   |   W   |   E   |   R   |   T   |
6EC2             4 131 ;  $F7FE |   1   |   2   |   3   |   4   |   5   |
6EC2             4 132 ;  $EFFE |   0   |   9   |   8   |   7   |   6   |
6EC2             4 133 ;  $DFFE |   P   |   O   |   I   |   U   |   Y   |
6EC2             4 134 ;  $BFFE | Enter |   L   |   K   |   J   |   H   |
6EC2             4 135 ;  $7FFE | Space |  Sym  |   M   |   N   |   B   |
6EC2             4 136 ;
6EC2             4 137 ;  Bits are set to 0 for any key that is pressed and 1 for any key that is not pressed
6EC2             4 138 ;
6EC2             4 139 ; Input:    -
6EC2             4 140 ;
6EC2             4 141 ; Output:   A = ASCII code of key pressed
6EC2             4 142 ;
6EC2             4 143 ; Destroys: DE
6EC2             4 144 ; ----------------------------------------------------------------------------------------------------------------------
6EC2             4 145 Input_Key_Scan:
6EC2 C5          4 146 push    bc                          ; store registers
6EC3 E5          4 147 push    hl
6EC4             4 148 Input_Key_Released
6EC4 01 FE FE    4 149 ld      bc, $FEFE                   ; set keyboard port (see above)
6EC7             4 150 Input_Key_Released_Line
6EC7 ED 78       4 151 in      a, (c)                      ; read port
6EC9 2F          4 152 cpl                                 ; invert bits
6ECA E6 1F       4 153 and     %00011111                   ; check 0 to 4 bits
6ECC 20 F6       4 154 jr      nz, Input_Key_Released      ; repeat from the beginning until no key is pressed
6ECE CB 00       4 155 rlc     b                           ; move BC to the next port
6ED0 38 F5       4 156 jr      c, Input_Key_Released_Line  ; repeat for each port
6ED2 11 05 00    4 157 ld      de, 5                       ; number of keys in each port (KEY_MAP displacement)
6ED5             4 158 Input_Key_Pressed_Begin
6ED5 21 D8 61    4 159 ld      hl, KEY_MAP                 ; HL points to KEY_MAP array
6ED8             4 160 Input_Key_Pressed_Line
6ED8 ED 78       4 161 in      a, (c)                      ; read port
6EDA 2F          4 162 cpl                                 ; invert bits
6EDB E6 1F       4 163 and     %00011111                   ; check 0 to 4 bits
6EDD 20 08       4 164 jr      nz, Input_Key_Pressed       ; if any key is pressed, process it
6EDF 19          4 165 add     hl, de                      ; HL points to the next KEY_MAP block
6EE0 CB 00       4 166 rlc     b                           ; move BC to the next port
6EE2 38 F4       4 167 jr      c, Input_Key_Pressed_Line   ; repeat for each port
6EE4 18 EF       4 168 jr      Input_Key_Pressed_Begin     ; repeat from the beginning until any key is pressed
6EE6             4 169 Input_Key_Next
6EE6 23          4 170 inc     hl                          ; move HL to the next character
6EE7             4 171 Input_Key_Pressed
6EE7 1F          4 172 rra                                 ; rotate bits of port readed
6EE8 30 FC       4 173 jr      nc, Input_Key_Next          ; repeat until find the key pressed
6EEA 7E          4 174 ld      a, (hl)                     ; return key pressed (ASCII) in A
6EEB E1          4 175 pop     hl                          ; restore registers
6EEC C1          4 176 pop     bc
6EED C9          4 177 ret

; File #5: C:\Users\Antonio\source\repos\Hex\Z80CodeFiles\Print.z80asm

6EEE             5 1 ; ----------------------------------------------------------------------------------------------------------------------
6EEE             5 2 ; Print.z80asm
6EEE             5 3 ; Coded by Antonio Luque
6EEE             5 4 ; ----------------------------------------------------------------------------------------------------------------------
6EEE             5 6 CHAR_SET                EQU     FONT-256                    ; address of character set data, adjusted for ASCII codes
6EEE             5 8 ; ----------------------------------------------------------------------------------------------------------------------
6EEE             5 9 ; Print_Players: print "Player" and "Speccy" strings in the corresponding positions
6EEE             5 10 ;
6EEE             5 11 ; Input:    A = player color (CYAN_COLOR or RED_COLOR)
6EEE             5 12 ;
6EEE             5 13 ; Output:   -
6EEE             5 14 ;
6EEE             5 15 ; Destroys: A, BC, DE, HL
6EEE             5 16 ; ----------------------------------------------------------------------------------------------------------------------
6EEE             5 17 Print_Players:
6EEE 11 21 62    5 18 ld      de, STR_PLAYER              ; DE points to "Player" string address
6EF1 01 1A 62    5 19 ld      bc, STR_SPECCY              ; BC points to "Speccy" string address
6EF4 21 02 50    5 20 ld      hl, $5002                   ; HL points to red string screen address
6EF7 FE 02       5 21 cp      RED_COLOR                   ; is player color red?
6EF9 28 06       5 22 jr      z, Print_Players_Strings    ; yes, print players strings
6EFB 11 1A 62    5 23 ld      de, STR_SPECCY              ; DE points to "Speccy" string address
6EFE 01 21 62    5 24 ld      bc, STR_PLAYER              ; BC points to "Player" string address
6F01             5 25 Print_Players_Strings
6F01 CD 5B 6F    5 26 call    Print_String                ; print "Player" or "Speccy"
6F04 50          5 27 ld      d, b                        ; DE points to "Player" or "Speccy" string address
6F05 59          5 28 ld      e, c
6F06 21 98 40    5 29 ld      hl, $4098                   ; HL points to cyan string screen address
6F09 C3 5B 6F    5 30 jp      Print_String                ; print "Player" or "Speccy"
6F0C             5 32 ; ----------------------------------------------------------------------------------------------------------------------
6F0C             5 33 ; Print_Clear_Alert: clear a printed alert message below the current player input move
6F0C             5 34 ;
6F0C             5 35 ; Input:    -
6F0C             5 36 ; Output:   -
6F0C             5 37 ; Destroys: A, BC, DE, HL, IX
6F0C             5 38 ; ----------------------------------------------------------------------------------------------------------------------
6F0C             5 39 Print_Clear_Alert:
6F0C 11 46 62    5 40 ld      de, STR_EMPTY6              ; DE points to a 6 blanks string address
6F0F 0E 47       5 41 ld      c, WHITE_FLASH0             ; set (clear) alert message color
6F11 C3 16 6F    5 42 jp      Print_Alert_XY              ; print (clear) alert string
6F14             5 44 ; ----------------------------------------------------------------------------------------------------------------------
6F14             5 45 ; Print_Alert: print an alert message below the current player input move
6F14             5 46 ;
6F14             5 47 ; Input:    DE = alert message string address
6F14             5 48 ;
6F14             5 49 ; Output:   -
6F14             5 50 ;
6F14             5 51 ; Uses:     TOKEN_COLOR (current token color)
6F14             5 52 ;
6F14             5 53 ; Destroys: A, BC, DE, HL, IX
6F14             5 54 ; ----------------------------------------------------------------------------------------------------------------------
6F14             5 55 Print_Alert:
6F14 0E C7       5 56 ld      c, WHITE_FLASH1             ; set alert message color
6F16             5 57 Print_Alert_XY
6F16 DD 21 A2 5A 5 58 ld      ix, $5AA2                   ; IX points to red alert string attribute address
6F1A 21 A2 50    5 59 ld      hl, $50A2                   ; HL points to red alert string screen address
6F1D 3A 9E 61    5 60 ld      a, (TOKEN_COLOR)            ; check current token color
6F20 FE 02       5 61 cp      RED_COLOR                   ; is token color red?
6F22 28 34       5 62 jr      z, Print_String_Color       ; yes, print alert string with color
6F24 DD 21 38 59 5 63 ld      ix, $5938                   ; IX points to cyan alert string attribute address
6F28 21 38 48    5 64 ld      hl, $4838                   ; HL points to cyan alert string screen address
6F2B C3 58 6F    5 65 jp      Print_String_Color          ; print alert string with color
6F2E             5 67 ; ----------------------------------------------------------------------------------------------------------------------
6F2E             5 68 ; Print_Wait: print "WAIT" message at current player input move location 
6F2E             5 69 ;
6F2E             5 70 ; Input:    -
6F2E             5 71 ;
6F2E             5 72 ; Output:   -
6F2E             5 73 ;
6F2E             5 74 ; Destroys: A, BC, DE, HL, IX
6F2E             5 75 ; ----------------------------------------------------------------------------------------------------------------------
6F2E             5 76 Print_Wait:
6F2E 11 35 62    5 77 ld      de, STR_WAIT                ; DE points to "WAIT" string address
6F31 0E C7       5 78 ld      c, WHITE_FLASH1             ; set wait message color
6F33 C3 43 6F    5 79 jp      Print_Move_XY               ; print wait string
6F36             5 81 ; ----------------------------------------------------------------------------------------------------------------------
6F36             5 82 ; Clear_Move: clear a printed player move at current player input move location 
6F36             5 83 ;
6F36             5 84 ; Input:    -
6F36             5 85 ;
6F36             5 86 ; Output:   -
6F36             5 87 ;
6F36             5 88 ; Destroys: A, BC, DE, HL, IX
6F36             5 89 ; ----------------------------------------------------------------------------------------------------------------------
6F36             5 90 Print_Clear_Move:
6F36 11 41 62    5 91 ld      de, STR_EMPTY4              ; DE points to a 4 blanks string address
6F39 0E 47       5 92 ld      c, WHITE_FLASH0             ; set (clear) move string color
6F3B C3 43 6F    5 93 jp      Print_Move_XY               ; print (clear) move string
6F3E             5 95 ; ----------------------------------------------------------------------------------------------------------------------
6F3E             5 96 ; Print_Move: print a formatted move at current player input move location 
6F3E             5 97 ;
6F3E             5 98 ; Input:    -
6F3E             5 99 ;
6F3E             5 100 ; Output:   -
6F3E             5 101 ;
6F3E             5 102 ; Uses:     TOKEN_COLOR (current token color)
6F3E             5 103 ;
6F3E             5 104 ; Destroys: A, BC, DE, HL, IX
6F3E             5 105 ; ----------------------------------------------------------------------------------------------------------------------
6F3E             5 106 Print_Move:
6F3E 11 15 62    5 107 ld      de, STR_MOVE                ; DE points to formatted move string address
6F41 0E 47       5 108 ld      c, WHITE_FLASH0             ; set string color
6F43             5 109 Print_Move_XY
6F43 DD 21 82 5A 5 110 ld      ix, $5A82                   ; IX points to red move attribute address
6F47 21 83 50    5 111 ld      hl, $5083                   ; HL points to red move screen address
6F4A 3A 9E 61    5 112 ld      a, (TOKEN_COLOR)            ; check current token color
6F4D FE 02       5 113 cp      RED_COLOR                   ; is token color red?
6F4F 28 07       5 114 jr      z, Print_String_Color       ; yes, print move string with color
6F51 DD 21 18 59 5 115 ld      ix, $5918                   ; IX points to cyan move attribute address
6F55 21 19 48    5 116 ld      hl, $4819                   ; HL points to cyan move screen address
6F58             5 117 Print_String_Color
6F58 CD 76 78    5 118 call    Screen_Apply_Color          ; apply color to string area
6F5B             5 119 ; ----------------------------------------------------------------------------------------------------------------------
6F5B             5 120 ; Print_String: print a string on the screen
6F5B             5 121 ; Based on assembler course by sromero: https://wiki.speccy.org/cursos/ensamblador/gfx4_fuentes
6F5B             5 122 ;
6F5B             5 123 ; Input:    DE = string address (ending with 0)
6F5B             5 124 ;           HL = string screen address
6F5B             5 125 ;
6F5B             5 126 ; Output:   -
6F5B             5 127 ;
6F5B             5 128 ; Destroys: A, DE, HL
6F5B             5 129 ; ----------------------------------------------------------------------------------------------------------------------
6F5B             5 130 Print_String:
6F5B 1A          5 131 ld      a, (de)                     ; get string character
6F5C B7          5 132 or      a                           ; is it 0? (end of string)
6F5D C8          5 133 ret     z                           ; yes, return
6F5E D5          5 134 push    de                          ; store pointer to string address
6F5F CD 68 6F    5 135 call    Print_Char                  ; print character
6F62 D1          5 136 pop     de                          ; restore pointer to string address
6F63 13          5 137 inc     de                          ; move DE to next string character
6F64 2C          5 138 inc     l                           ; move HL to next screen column
6F65 C3 5B 6F    5 139 jp      Print_String                ; repeat until end of string
6F68             5 141 ; ----------------------------------------------------------------------------------------------------------------------
6F68             5 142 ; Print_Char: print a character on the screen
6F68             5 143 ;
6F68             5 144 ; Input:    A  = character to print (ASCII)
6F68             5 145 ;           HL = character screen address
6F68             5 146 ;
6F68             5 147 ; Output:   -
6F68             5 148 ;
6F68             5 149 ; Destroys: A, DE
6F68             5 150 ; ----------------------------------------------------------------------------------------------------------------------
6F68             5 151 Print_Char:
6F68 11 00 68    5 152 ld      de, CHAR_SET                ; DE points to charset address
6F6B             5 153 Print_Tile:
6F6B E5          5 154 push    hl                          ; store pointer to character/tile screen address
6F6C 26 00       5 155 ld      h, 0                        ; set character/tile index in HL
6F6E 6F          5 156 ld      l, a
6F6F 29          5 157 add     hl, hl                      ; a character/tile is 8 bytes long
6F70 29          5 158 add     hl, hl
6F71 29          5 159 add     hl, hl
6F72 19          5 160 add     hl, de                      ; move HL to character/tile address
6F73 EB          5 161 ex      de, hl                      ; DE points to character/tile address
6F74 E1          5 162 pop     hl                          ; restore pointer to character/tile screen address
6F75 C5          5 163 push    bc                          ; store BC register
6F76 4C          5 164 ld      c, h                        ; save high byte of character/tile screen address
6F77 06 08       5 165 ld      b, 8                        ; number of character/tile bytes (loop counter)
6F79             5 166 Print_Tile_Pixels
6F79 1A          5 167 ld      a, (de)                     ; get character/tile byte
6F7A 77          5 168 ld      (hl), a                     ; put character/tile byte on screen
6F7B 13          5 169 inc     de                          ; move DE to next character/tile byte
6F7C 24          5 170 inc     h                           ; move HL down one pixel-line
6F7D 10 FA       5 171 djnz    Print_Tile_Pixels           ; repeat for each character/tile bytes
6F7F 61          5 172 ld      h, c                        ; restore high byte of character/tile screen address
6F80 C1          5 173 pop     bc                          ; restore BC register
6F81 C9          5 174 ret

; File #6: C:\Users\Antonio\source\repos\Hex\Z80CodeFiles\Brainiac.z80asm

6F82             6 1 ; ----------------------------------------------------------------------------------------------------------------------
6F82             6 2 ; Brainiac.z80asm
6F82             6 3 ; Coded by Einar Saukas: https://spectrumcomputing.co.uk/entry/31171/ZX-Spectrum/BRAINIAC
6F82             6 4 ;
6F82             6 5 ; Adapted for Hex game by Einar Saukas
6F82             6 6 ; ----------------------------------------------------------------------------------------------------------------------
6F82             6 8 MIN_VALUE               EQU     0                           ; alphaBeta pruning minimum value
6F82             6 9 MAX_VALUE               EQU     255                         ; alphaBeta pruning maximum value
6F82             6 11 ; ----------------------------------------------------------------------------------------------------------------------
6F82             6 12 ; BRAINIAC_best_move: execute BRAINIAC algorithm to determine best choice for specified player's next move, according to
6F82             6 13 ; specified AI difficulty level. This algorithm is implemented as recursive Minimax with alpha-beta pruning, that
6F82             6 14 ; alternates between tree nodes maximizing score (speccy move) and minimizing it (player move) depending on recursion
6F82             6 15 ; depth.
6F82             6 16 ;
6F82             6 17 ; Original source code by Einar Saukas: https://spectrumcomputing.co.uk/entry/31171/ZX-Spectrum/BRAINIAC
6F82             6 18 ;
6F82             6 19 ; Input:    A   = speccy side (FRIEND or ENEMY)
6F82             6 20 ;           IX  = candidates vector address
6F82             6 21 ;           P/V = flag unset if speccy side is FRIEND, flag set if speccy side is ENEMY
6F82             6 22 ;
6F82             6 23 ; Output:   E  = selected position (speccy move)
6F82             6 24 ;
6F82             6 25 ; Uses:     AI_PLAYER (speccy side)
6F82             6 26 ;           AI_DEPTH (recursion depth level)
6F82             6 27 ;
6F82             6 28 ; Destroys: A, A', BC, D, HL, IX, IY
6F82             6 29 ; ----------------------------------------------------------------------------------------------------------------------
6F82             6 30 BRAINIAC_best_move:
6F82 32 99 61    6 31 ld      (AI_PLAYER), a              ; save speccy side
6F85 CD 80 74    6 33 call    PathFinder_Score            ; get board score (needed to get candidates)
6F88 CD 23 75    6 34 call    PathFinder_Candidates       ; get candidates from board potentials
6F8B             6 36 ; BRAINIAC start
6F8B             6 37 AI_First_Candidate
6F8B DD 7E 00    6 38 ld      a, (ix+0)                   ; A is our first candidate
6F8E 5F          6 40 ld      e, a                        ; E = best speccy move (initialization)
6F8F 16 00       6 41 ld      d, MIN_VALUE                ; D = alphaMax
6F91             6 43 AI_Main_Loop                                                ; for each candidate {
6F91 D5          6 44 push    de                          ;       store alphaMax and best speccy move
6F92 26 7D       6 46 ld      h, CYAN_POSITIONS/256       ;       get and store candidate position on board
6F94 6F          6 47 ld      l, a
6F95 E5          6 48 push    hl
6F96 3A 99 61    6 50 ld      a, (AI_PLAYER)              ;       get speccy side
6F99 CD FF 70    6 51 call    PathFinder_PutToken         ;       BRAINIAC_play
6F9C EE 7C       6 52 xor     $7C                         ;       restore speccy side
6F9E 1E FF       6 53 ld      e, MAX_VALUE                ;       E = betaMin
6FA0 CD B9 6F    6 54 call    Alphabeta_Min               ;       A = alphabeta_min(alphaMax, betaMin)
6FA3 E1          6 56 pop     hl                          ;       restore candidate position
6FA4 CD 05 71    6 57 call    PathFinder_EraseToken       ;       BRAINIAC_undo
6FA7 D1          6 59 pop     de                          ;       restore alphaMax and best player node
6FA8 BA          6 61 cp      d
6FA9 38 04       6 62 jr      c, AI_Main_Next
6FAB 28 02       6 63 jr      z, AI_Main_Next             ;       if (A <= alphaMax) continue
6FAD 57          6 65 ld      d, a                        ;       alphaMax = A
6FAE 5D          6 66 ld      e, l                        ;       best move = E
6FAF             6 68 AI_Main_Next
6FAF DD 2D       6 69 dec     ixl
6FB1 DD 7E 00    6 70 ld      a, (ix+0)                   ;       A is our next candidate
6FB4 B7          6 71 or      a                           ;       repeat until no more candidates
6FB5 C2 91 6F    6 72 jp      nz, AI_Main_Loop            ; }
6FB8 C9          6 73 ret
6FB9             6 75 ; ----------------------------------------------------------------------------------------------------------------------
6FB9             6 76 ; Alphabeta_Min: Process a tree node of the Minimax search tree with alpha-beta pruning, when it requires MINIMIZING
6FB9             6 77 ; Speccy's score.
6FB9             6 78 ;
6FB9             6 79 ; This implementation is different from conventional alpha-beta pruning because it returns the best (lowest) betaMin
6FB9             6 80 ; value obtained so far at this subtree depth (from previous sibling nodes), when it's even lower than the best (lowest)
6FB9             6 81 ; score at this tree node only. In practice that's OK, since the existence of a lower betaMin in a previous sibling node
6FB9             6 82 ; would make parent node discard the node's betaMin value and adopt the even lower betaMin value from a previous sibling
6FB9             6 83 ; node anyway. This change was useful to allow a highly optimized Assembly implementation with a more efficient register
6FB9             6 84 ; allocation. The only drawback was that, whenever a parent node obtains the same best score from 2 child nodes, it must
6FB9             6 85 ; always choose the child node evaluated first, since the other child node node may not really have the same score and
6FB9             6 86 ; could be just reproducing the best score from its sibling.
6FB9             6 87 ;
6FB9             6 88 ; Original source code by Einar Saukas: https://spectrumcomputing.co.uk/entry/31171/ZX-Spectrum/BRAINIAC
6FB9             6 89 ;
6FB9             6 90 ; Input:    A   = speccy side (FRIEND or ENEMY)
6FB9             6 91 ;           D   = alphaMax
6FB9             6 92 ;           E   = betaMin
6FB9             6 93 ;           P/V = flag unset if speccy side is FRIEND, flag set if speccy side is ENEMY
6FB9             6 94 ;
6FB9             6 95 ; Output:   A = "improved" betaMin
6FB9             6 96 ;           D = alphaMax
6FB9             6 97 ;           E = "improved" betaMin
6FB9             6 98 ;
6FB9             6 99 ; Uses:     AI_PLAYER (speccy side)
6FB9             6 100 ;           AI_DEPTH (recursion depth level)
6FB9             6 101 ;
6FB9             6 102 ; Destroys: BC, HL, IX, IY
6FB9             6 103 ; ----------------------------------------------------------------------------------------------------------------------
6FB9             6 104 Alphabeta_Min:
6FB9 D5          6 105 push    de
6FBA             6 107 ; check if last speccy move is a winner one
6FBA CD 80 74    6 109 call    PathFinder_Score            ; if (speccy won)
6FBD B7          6 110 or      a
6FBE C2 C8 6F    6 111 jp      nz, Alphabeta_Min_Candidates
6FC1 3A 9A 61    6 112 ld      a, (AI_DEPTH)
6FC4 C6 E0       6 113 add     a, 224                      ;     return 224+depth
6FC6 D1          6 114 pop     de
6FC7 C9          6 115 ret
6FC8             6 117 Alphabeta_Min_Candidates
6FC8 CD 23 75    6 118 call    PathFinder_Candidates       ; find candidates for next move
6FCB D1          6 119 pop     de
6FCC DD 7E 00    6 121 ld      a, (ix+0)                   ; A is our first candidate
6FCF 21 9A 61    6 123 ld      hl, AI_DEPTH
6FD2 35          6 124 dec     (hl)                        ; depth--
6FD3 CA 13 70    6 125 jp      z, Heuristic_Min            ; if (depth == 0) return heuristic_min
6FD6             6 127 Alphabeta_Min_Loop                                          ; for each candidate {
6FD6 D5          6 128 push    de                          ;       store alphaMax and betaMin
6FD7 26 7D       6 130 ld      h, CYAN_POSITIONS/256       ;       get and store candidate position on board
6FD9 6F          6 131 ld      l, a
6FDA E5          6 132 push    hl
6FDB 3A 99 61    6 134 ld      a, (AI_PLAYER)              ;       get speccy side
6FDE EE 7C       6 135 xor     $7C                         ;       switch to player side
6FE0 CD FF 70    6 136 call    PathFinder_PutToken         ;       BRAINIAC_play
6FE3 CD 57 70    6 137 call    Alphabeta_Max               ;       A = alphabeta_max(alphaMax, betaMin)
6FE6 E1          6 139 pop     hl                          ;       restore candidate position
6FE7 CD 05 71    6 140 call    PathFinder_EraseToken       ;       BRAINIAC_undo
6FEA D1          6 142 pop     de                          ;       restore alphaMax and betaMin
6FEB BB          6 144 cp      e
6FEC 30 06       6 145 jr      nc, Alphabeta_Min_Next      ;       if (A >= betaMin) continue
6FEE BA          6 147 cp      d
6FEF 38 12       6 148 jr      c, Alphabeta_Min_Exit
6FF1 28 10       6 149 jr      z, Alphabeta_Min_Exit       ;       if (A <= alphaMax) { depth++; return A }
6FF3 5F          6 151 ld      e, a                        ;       betaMin = A
6FF4             6 153 Alphabeta_Min_Next
6FF4 DD 2D       6 154 dec     ixl
6FF6 DD 7E 00    6 155 ld      a, (ix+0)                   ;       A is our next candidate
6FF9 B7          6 156 or      a                           ;       repeat until no more candidates
6FFA C2 D6 6F    6 157 jp      nz, Alphabeta_Min_Loop      ; }
6FFD 7B          6 159 ld      a, e                        ; return betaMin
6FFE 21 9A 61    6 161 ld      hl, AI_DEPTH
7001 34          6 162 inc     (hl)                        ; depth++
7002 C9          6 163 ret
7003             6 165 Alphabeta_Min_Exit
7003 5F          6 166 ld      e, a                        ; (discard remaining candidates)
7004 AF          6 167 xor     a
7005             6 168 Alphabeta_Min_Skip
7005 DD 2D       6 169 dec     ixl
7007 DD BE 00    6 170 cp      (ix+0)
700A C2 05 70    6 171 jp      nz, Alphabeta_Min_Skip
700D 7B          6 172 ld      a, e
700E 21 9A 61    6 174 ld      hl, AI_DEPTH
7011 34          6 175 inc     (hl)                        ; (depth++)
7012 C9          6 176 ret
7013             6 178 ; ----------------------------------------------------------------------------------------------------------------------
7013             6 179 ; Heuristic_Min: Specialized routine to process the lowest tree node (depth zero) of the Minimax search tree with alpha-
7013             6 180 ; beta pruning, when it requires MINIMIZING Speccy's score.
7013             6 181 ;
7013             6 182 ; Technically "Heuristic_Min" works exactly like "Alphabeta_Min_Loop", except it directly evaluates board for each child
7013             6 183 ; node instead of calling "Alphabeta_Max" recursively. Although it would be easier to just let it invoke "Alphabeta_Max"
7013             6 184 ; again to obtain the evaluated board, this simple optimization is responsible for making BRAINIAC almost 2 seconds
7013             6 185 ; faster.
7013             6 186 ;
7013             6 187 ; Original source code by Einar Saukas: https://spectrumcomputing.co.uk/entry/31171/ZX-Spectrum/BRAINIAC
7013             6 188 ;
7013             6 189 ; Input:    A = first candidate
7013             6 190 ;           D = alphaMax
7013             6 191 ;           E = betaMin
7013             6 192 ;
7013             6 193 ; Output:   A = "improved" betaMin
7013             6 194 ;           D = alphaMax
7013             6 195 ;           E = "improved" betaMin
7013             6 196 ;
7013             6 197 ; Uses:     AI_PLAYER (speccy side)
7013             6 198 ;           AI_DEPTH (recursion depth level)
7013             6 199 ;
7013             6 200 ; Destroys: BC, HL, IX, IY
7013             6 201 ; ----------------------------------------------------------------------------------------------------------------------
7013             6 202 Heuristic_Min:                                              ; for each candidate {
7013 D5          6 203 push    de                          ;       store alphaMax and betaMin
7014 26 7D       6 205 ld      h, CYAN_POSITIONS/256       ;       get and store candidate position on board
7016 6F          6 206 ld      l, a
7017 E5          6 207 push    hl
7018 3A 99 61    6 209 ld      a, (AI_PLAYER)              ;       get speccy side
701B EE 7C       6 210 xor     $7C                         ;       switch to player side
701D CD FF 70    6 211 call    PathFinder_PutToken         ;       BRAINIAC_play
7020 CD 80 74    6 213 call    PathFinder_Score            ;       if (player won)
7023 FE FF       6 214 cp      -1
7025 C2 2A 70    6 215 jp      nz, Heuristic_Min_Continue
7028 3E 20       6 216 ld      a, 32                       ;           A = 32
702A             6 217 Heuristic_Min_Continue
702A E1          6 218 pop     hl
702B CD 05 71    6 219 call    PathFinder_EraseToken       ;       BRAINIAC_undo
702E D1          6 221 pop     de
702F BB          6 223 cp      e
7030 30 06       6 224 jr      nc, Heuristic_Min_Next      ;       if (A >= betaMin) continue
7032 BA          6 226 cp      d
7033 38 12       6 227 jr      c, Heuristic_Min_Exit
7035 28 10       6 228 jr      z, Heuristic_Min_Exit       ;       if (A <= alphaMax) { depth++; return A }
7037 5F          6 230 ld      e, a                        ;       betaMin = A
7038             6 232 Heuristic_Min_Next
7038 DD 2D       6 233 dec     ixl
703A DD 7E 00    6 234 ld      a, (ix+0)                   ;       A is our next candidate
703D B7          6 235 or      a                           ;       repeat until no more candidates
703E C2 13 70    6 236 jp      nz, Heuristic_Min           ; }
7041 7B          6 238 ld      a, e                        ; return betaMin
7042 21 9A 61    6 240 ld      hl, AI_DEPTH
7045 34          6 241 inc     (hl)                        ; depth++
7046 C9          6 242 ret
7047             6 244 Heuristic_Min_Exit
7047 5F          6 245 ld      e, a                        ; (discard remaining candidates)
7048 AF          6 246 xor     a
7049             6 247 Heuristic_Min_Skip
7049 DD 2D       6 248 dec     ixl
704B DD BE 00    6 249 cp      (ix+0)
704E C2 49 70    6 250 jp      nz, Heuristic_Min_Skip
7051 7B          6 251 ld      a, e
7052 21 9A 61    6 253 ld      hl, AI_DEPTH
7055 34          6 254 inc     (hl)                        ; (depth++)
7056 C9          6 255 ret
7057             6 257 ; ----------------------------------------------------------------------------------------------------------------------
7057             6 258 ; Alphabeta_Max: Process a tree node of the Minimax search tree with alpha-beta pruning, when it requires MAXIMIZING
7057             6 259 ; Speccy's score.
7057             6 260 ;
7057             6 261 ; This implementation is different from conventional alpha-beta pruning because it returns the best (highest) alphaMax
7057             6 262 ; value obtained so far at this subtree depth (from previous sibling nodes), when it's even higher than the best
7057             6 263 ; (highest) score at this tree node only. In practice that's OK, since the existence of a higher alphaMax in a previous
7057             6 264 ; sibling node would make parent node discard the node's alphaMax value and adopt the even higher alphaMax value from a
7057             6 265 ; previous sibling node anyway. This change was useful to allow a highly optimized Assembly implementation with a more
7057             6 266 ; efficient register allocation. The only drawback was that, whenever a parent node obtains the same best score from 2
7057             6 267 ; child nodes, it must always choose the child node evaluated first, since the other child node node may not really have
7057             6 268 ; the same score and could be just reproducing the best score from its sibling.
7057             6 269 ;
7057             6 270 ; Original source code by Einar Saukas: https://spectrumcomputing.co.uk/entry/31171/ZX-Spectrum/BRAINIAC
7057             6 271 ;
7057             6 272 ; Input:    A   = speccy side (FRIEND or ENEMY)
7057             6 273 ;           D   = alphaMax
7057             6 274 ;           E   = betaMin
7057             6 275 ;           P/V = flag unset if speccy side is FRIEND, flag set if speccy side is ENEMY
7057             6 276 ;
7057             6 277 ; Output:   A = "improved" alphaMax
7057             6 278 ;           D = "improved" alphaMax
7057             6 279 ;           E = betaMin
7057             6 280 ;
7057             6 281 ; Uses:     AI_PLAYER (speccy side)
7057             6 282 ;           AI_DEPTH (recursion depth level)
7057             6 283 ;
7057             6 284 ; Destroys: BC, HL, IX, IY
7057             6 285 ; ----------------------------------------------------------------------------------------------------------------------
7057             6 286 Alphabeta_Max:
7057 D5          6 287 push    de
7058             6 289 ; check if last player move is a winner one
7058 CD 80 74    6 291 call    PathFinder_Score            ; if (player won)
705B FE FF       6 292 cp      -1
705D C2 68 70    6 293 jp      nz, Alphabeta_Max_Candidates
7060 3A 9A 61    6 294 ld      a, (AI_DEPTH)
7063 2F          6 295 cpl
7064 C6 21       6 296 add     a, 32+1                     ;     return 32-depth
7066 D1          6 297 pop     de
7067 C9          6 298 ret
7068             6 300 Alphabeta_Max_Candidates
7068 CD 23 75    6 301 call    PathFinder_Candidates       ; find candidates for next move
706B D1          6 302 pop     de
706C DD 7E 00    6 304 ld      a, (ix+0)                   ; A is our first candidate
706F 21 9A 61    6 306 ld      hl, AI_DEPTH
7072 35          6 307 dec     (hl)                        ; depth--
7073 CA B3 70    6 308 jp      z, Heuristic_Max            ; if (depth == 0) return heuristic_max
7076             6 310 Alphabeta_Max_Loop                                          ; for each candidate {
7076 D5          6 311 push    de                          ;       store alphaMax and betaMin
7077 26 7D       6 313 ld      h, CYAN_POSITIONS/256       ;       get and store candidate position on board
7079 6F          6 314 ld      l, a
707A E5          6 315 push    hl
707B 3A 99 61    6 317 ld      a, (AI_PLAYER)              ;       get speccy side
707E CD FF 70    6 318 call    PathFinder_PutToken         ;       BRAINIAC_play
7081 EE 7C       6 319 xor     $7C                         ;       restore speccy side
7083 CD B9 6F    6 320 call    Alphabeta_Min               ;       A = alphabeta_min(alphaMax, betaMin)
7086 E1          6 322 pop     hl                          ;       restore candidate position
7087 CD 05 71    6 323 call    PathFinder_EraseToken       ;       BRAINIAC_undo
708A D1          6 325 pop     de                          ;       restore alphaMax and betaMin
708B BA          6 327 cp      d
708C 38 06       6 328 jr      c, Alphabeta_Max_Next
708E 28 04       6 329 jr      z, Alphabeta_Max_Next       ;       if (A <= alphaMax) continue
7090 BB          6 331 cp      e
7091 30 10       6 332 jr      nc, Alphabeta_Max_Exit      ;       if (A >= betaMin) { depth++; return A }
7093 57          6 334 ld      d, a                        ;       alphaMax = A
7094             6 336 Alphabeta_Max_Next
7094 DD 2D       6 337 dec     ixl
7096 DD 7E 00    6 338 ld      a, (ix+0)                   ;       A is our next candidate
7099 B7          6 339 or      a                           ;       repeat until no more candidates
709A C2 76 70    6 340 jp      nz, Alphabeta_Max_Loop      ; }
709D 7A          6 342 ld      a, d                        ; return alphaMax
709E 21 9A 61    6 344 ld      hl, AI_DEPTH
70A1 34          6 345 inc     (hl)                        ; depth++
70A2 C9          6 346 ret
70A3             6 348 Alphabeta_Max_Exit
70A3 57          6 349 ld      d, a                        ; (discard remaining candidates)
70A4 AF          6 350 xor     a
70A5             6 351 Alphabeta_Max_Skip
70A5 DD 2D       6 352 dec     ixl
70A7 DD BE 00    6 353 cp      (ix+0)
70AA C2 A5 70    6 354 jp      nz, Alphabeta_Max_Skip
70AD 7A          6 355 ld      a, d
70AE 21 9A 61    6 357 ld      hl, AI_DEPTH
70B1 34          6 358 inc     (hl)                        ; (depth++)
70B2 C9          6 359 ret
70B3             6 361 ; ----------------------------------------------------------------------------------------------------------------------
70B3             6 362 ; Heuristic_Max: Specialized routine to process the lowest tree node (depth zero) of the Minimax search tree with alpha-
70B3             6 363 ; beta pruning, when it requires MAXIMIZING Speccy's score.
70B3             6 364 ;
70B3             6 365 ; Technically "Heuristic_Max" works exactly like "Alphabeta_Max_Loop", except it directly evaluates board for each child
70B3             6 366 ; node instead of calling "Alphabeta_Min" recursively. Although it would be easier to just let it invoke "Alphabeta_Min"
70B3             6 367 ; again to obtain the evaluated board, this simple optimization is responsible for making BRAINIAC almost 2 seconds
70B3             6 368 ; faster.
70B3             6 369 ;
70B3             6 370 ; Original source code by Einar Saukas: https://spectrumcomputing.co.uk/entry/31171/ZX-Spectrum/BRAINIAC
70B3             6 371 ;
70B3             6 372 ; Input:    A = first candidate
70B3             6 373 ;           D = alphaMax
70B3             6 374 ;           E = betaMin
70B3             6 375 ;
70B3             6 376 ; Returns:  A = "improved" alphaMax
70B3             6 377 ;           D = "improved" alphaMax
70B3             6 378 ;           E = betaMin
70B3             6 379 ;
70B3             6 380 ; Uses:     AI_PLAYER (speccy side)
70B3             6 381 ;           AI_DEPTH (recursion depth level)
70B3             6 382 ;
70B3             6 383 ; Destroys: BC, HL, IX, IY
70B3             6 384 ; ----------------------------------------------------------------------------------------------------------------------
70B3             6 385 Heuristic_Max:                                              ; for each candidate {
70B3 D5          6 386 push    de                          ;       store alphaMax and betaMin
70B4 26 7D       6 388 ld      h, CYAN_POSITIONS/256       ;       get and store candidate position on board
70B6 6F          6 389 ld      l, a
70B7 E5          6 390 push    hl
70B8 3A 99 61    6 392 ld      a, (AI_PLAYER)              ;       get speccy side
70BB CD FF 70    6 393 call    PathFinder_PutToken         ;       (BRAINIAC_play)
70BE EE 7C       6 394 xor     $7C                         ;       restore speccy side
70C0 CD 80 74    6 396 call    PathFinder_Score            ;       if (speccy won)
70C3 B7          6 397 or      a
70C4 C2 C9 70    6 398 jp      nz, Heuristic_Max_Continue
70C7 3E E0       6 399 ld      a, 224                      ;           A = 224
70C9             6 400 Heuristic_Max_Continue
70C9 E1          6 401 pop     hl                          ;       restore candidate position
70CA CD 05 71    6 402 call    PathFinder_EraseToken       ;       BRAINIAC_undo
70CD D1          6 404 pop     de                          ;       restore alphaMax and betaMin
70CE BA          6 406 cp      d
70CF 38 06       6 407 jr      c, Heuristic_Max_Next
70D1 28 04       6 408 jr      z, Heuristic_Max_Next       ;       if (A <= alphaMax) continue
70D3 BB          6 410 cp      e
70D4 30 10       6 411 jr      nc, Heuristic_Max_Exit      ;       if (A >= betaMin) { depth++; return A }
70D6 57          6 413 ld      d, a                        ;       alphaMax = A
70D7             6 415 Heuristic_Max_Next
70D7 DD 2D       6 416 dec     ixl
70D9 DD 7E 00    6 417 ld      a, (ix+0)                   ;       A is our next candidate
70DC B7          6 418 or      a                           ;       repeat until no more candidates
70DD C2 B3 70    6 419 jp      nz, Heuristic_Max           ; }
70E0 7A          6 421 ld      a, d                        ; return alphaMax
70E1 21 9A 61    6 423 ld      hl, AI_DEPTH
70E4 34          6 424 inc     (hl)                        ; depth++
70E5 C9          6 425 ret
70E6             6 427 Heuristic_Max_Exit
70E6 57          6 428 ld      d, a                        ; (discard remaining candidates)
70E7 AF          6 429 xor     a
70E8             6 430 Heuristic_Max_Skip
70E8 DD 2D       6 431 dec     ixl
70EA DD BE 00    6 432 cp      (ix+0)
70ED C2 E8 70    6 433 jp      nz, Heuristic_Max_Skip
70F0 7A          6 434 ld      a, d
70F1 21 9A 61    6 436 ld      hl, AI_DEPTH
70F4 34          6 437 inc     (hl)                        ; (depth++)
70F5 C9          6 438 ret

; File #7: C:\Users\Antonio\source\repos\Hex\Z80CodeFiles\PathFinder.z80asm

70F6             7 1 ; ----------------------------------------------------------------------------------------------------------------------
70F6             7 2 ; PathFinder.z80asm
70F6             7 3 ; Coded by Einar Saukas: https://spectrumcomputing.co.uk/entry/28178/ZX-Spectrum/PATHFINDER
70F6             7 4 ;
70F6             7 5 ; Adapted by Antonio Luque and Einar Saukas to be used as heuristic in Hex game.
70F6             7 6 ; Based on chapter 5 of Jack van Rijswijck's thesis - https://webdocs.cs.ualberta.ca/~hayward/theses/jackmsc.pdf
70F6             7 7 ; ----------------------------------------------------------------------------------------------------------------------
70F6             7 9 EMPTY                   EQU     $00                         ; empty positions on the board
70F6             7 10 SKIPPED                 EQU     $01                         ; skipped positions on the board
70F6             7 11 FRIEND                  EQU     $02                         ; positions occupied by friendly tokens on the board
70F6             7 12 ENEMY                   EQU     $7E                         ; positions occupied by opponent tokens on the board
70F6             7 13 VICTORY                 EQU     $03                         ; internal value if victory
70F6             7 14 WIDTH                   EQU     $08                         ; distance to up-left/down-right neighbor
70F6             7 16 CYAN_POSITIONS          EQU     $7D00                       ; a 256-aligned memory area reserved for cyan positions
70F6             7 17 RED_POSITIONS           EQU     $7E00                       ; a 256-aligned memory area reserved for red positions
70F6             7 18 CANDIDATES              EQU     $7F00                       ; a 256-aligned memory area reserved to store candidates
70F6             7 20 ; ----------------------------------------------------------------------------------------------------------------------
70F6             7 21 ; PathFinder_Friend: return if current player is FRIEND or ENEMY from the perspective of the cyan player
70F6             7 22 ;
70F6             7 23 ; Input:    -
70F6             7 24 ;
70F6             7 25 ; Output:   A   = FRIEND if current token color is cyan, or A = ENEMY if current token color is red
70F6             7 26 ;           P/V = flag unset if speccy side is FRIEND, flag set if speccy side is ENEMY
70F6             7 27 ;
70F6             7 28 ; Uses:     TOKEN_COLOR (current token color)
70F6             7 29 ;
70F6             7 30 ; Destroys: -
70F6             7 31 ; ----------------------------------------------------------------------------------------------------------------------
70F6             7 32 PathFinder_Friend:
70F6 3A 9E 61    7 33 ld      a, (TOKEN_COLOR)            ; get current player color
70F9 EE 07       7 34 xor     $07                         ; is current player color cyan?
70FB E0          7 35 ret     po                          ; yes, return FRIEND 
70FC 3E 7E       7 36 ld      a, ENEMY                    ; no, return ENEMY
70FE C9          7 37 ret
70FF             7 39 ; ----------------------------------------------------------------------------------------------------------------------
70FF             7 40 ; PathFinder_PutToken: put a token on both CYAN_POSITIONS and RED_POSITIONS areas
70FF             7 41 ;
70FF             7 42 ; Input:    A  = either FRIEND or ENEMY from the perspective of cyan player
70FF             7 43 ;           HL = CYAN_POSITIONS token address
70FF             7 44 ;
70FF             7 45 ; Output:   A   = inverted side (FRIEND or ENEMY)
70FF             7 46 ;           P/V = flag unset if speccy side is FRIEND, flag set if speccy side is ENEMY
70FF             7 47 ;
70FF             7 48 ; Destroys: -
70FF             7 49 ; ----------------------------------------------------------------------------------------------------------------------
70FF             7 50 PathFinder_PutToken:
70FF 77          7 51 ld      (hl), a                     ; put token at cyan position
7100 24          7 52 inc     h                           ; move HL to red position address
7101 EE 7C       7 53 xor     $7C                         ; invert side
7103 77          7 54 ld      (hl), a                     ; put token at red position
7104 C9          7 55 ret
7105             7 57 ; ----------------------------------------------------------------------------------------------------------------------
7105             7 58 ; PathFinder_EraseToken: erase a token from both CYAN_POSITIONS and RED_POSITIONS areas
7105             7 59 ;
7105             7 60 ; Input:    HL = CYAN_POSITIONS token address
7105             7 61 ;
7105             7 62 ; Output:   -
7105             7 63 ;
7105             7 64 ; Destroys: -
7105             7 65 ; ----------------------------------------------------------------------------------------------------------------------
7105             7 66 PathFinder_EraseToken:
7105 36 00       7 67 ld      (hl), EMPTY                 ; erase token at cyan position
7107 24          7 68 inc     h                           ; move HL to red position address
7108 36 00       7 69 ld      (hl), EMPTY                 ; erase token at red position
710A C9          7 70 ret
710B             7 72 ; ----------------------------------------------------------------------------------------------------------------------
710B             7 73 ; PathFinder_CopyPositions: copy from CYAN_POSITIONS or RED_POSITIONS area to its corresponding board
710B             7 74 ;
710B             7 75 ; Input:    DE = cyan or red board address (destiny)
710B             7 76 ;           HL = CYAN_POSITIONS or RED_POSITIONS address (origin)
710B             7 77 ;
710B             7 78 ; Output:   -
710B             7 79 ;
710B             7 80 ; Destroys: BC, DE, HL
710B             7 81 ; ----------------------------------------------------------------------------------------------------------------------
710B             7 82 PathFinder_CopyPositions:
710B 01 31 00    7 83 ld      bc, 7*7                     ; number of positions to be copied
710E             7 84 PathFinder_CopyLoop
710E 2C          7 85 inc     l                           ; skip borders on positions
710F 2C          7 86 inc     l
7110 1C          7 87 inc     e                           ; skip borders on board
7111 1C          7 88 inc     e
7112 ED A0       7 89 ldi                                 ; copy a row of 7 positions
7114 ED A0       7 90 ldi
7116 ED A0       7 91 ldi
7118 ED A0       7 92 ldi
711A ED A0       7 93 ldi
711C ED A0       7 94 ldi
711E ED A0       7 95 ldi
7120 EA 0E 71    7 96 jp      pe, PathFinder_CopyLoop     ; repeat for each row
7123 C9          7 97 ret
7124             7 99 ; ----------------------------------------------------------------------------------------------------------------------
7124             7 100 ; PathFinder_Update: update current board position during heuristic function evaluation
7124             7 101 ;
7124             7 102 ; This is an approach to Jack van Rijswijck's "two-distance" metric. The two-distance is defined as "one more than the
7124             7 103 ; second lowest distance of p's neighbors to q, with the proviso that the two-distance equals 1 if p and q are directly
7124             7 104 ; adjacent".
7124             7 105 ;
7124             7 106 ; The position will be updated with a number that indicates two-distance from goal (stored in lowest 6 bits), and a flag
7124             7 107 ; that indicates a position occupied by a friendly token (stored in 6th bit). Therefore this position is updated as
7124             7 108 ; follows, depending on current content:
7124             7 109 ;
7124             7 110 ; * SKIPPED: 1 + distance of neighbor closest to goal
7124             7 111 ; * FRIEND:  distance of neighbor closest to goal
7124             7 112 ; * EMPTY:   1 + distance of neighbor closest to goal, if current distance is friendly, SKIPPED otherwise
7124             7 113 ;
7124             7 114 ; Input:    Z  = flag set when (HL) is FRIEND
7124             7 115 ;           C  = current distance (also with a flag at 6th bit that indicates a friendly position)
7124             7 116 ;           HL = current position address (on either cyan boards or red boards)
7124             7 117 ;
7124             7 118 ; Output:   -
7124             7 119 ;
7124             7 120 ; Destroys: B, DE
7124             7 121 ; ----------------------------------------------------------------------------------------------------------------------
7124             7 122 PathFinder_Update:
7124 28 12       7 123 jr      z, PathFinder_Friendly      ; if Z flag is set, update friend distance
7126 46          7 124 ld      b, (hl)                     ; check current position
7127 10 1A       7 125 djnz    PathFinder_EMPTY            ; if (hl) = EMPTY, jump below
7129             7 126 ; if (HL) = SKIPPED, then set (HL) = C+1 and insert HL at queue tail
7129             7 127 PathFinder_Skipped:
7129 71          7 128 ld      (hl), c                     ; save current distance in current position
712A 34          7 129 inc     (hl)                        ; increment distance of current position
712B CB B6       7 130 res     6, (hl)                     ; reset friendly token flag
712D EB          7 131 ex      de, hl                      ; store current position in DE
712E             7 132 @Queue_Tail
712E 21 00 00    7 133 ld      hl, $0000                   ; HL points to queue tail address (changed before call)
7131 2C          7 134 inc     l                           ; move queue tail down
7132 73          7 135 ld      (hl), e                     ; store position into queue tail
7133 22 2F 71    7 136 ld      (@Queue_Tail+1), hl         ; update queue tail
7136 EB          7 137 ex      de, hl                      ; restore current position
7137 C9          7 138 ret
7138             7 139 ; if (HL) = FRIEND, then set (HL) = C and insert HL at queue head
7138             7 140 PathFinder_Friendly
7138 71          7 141 ld      (hl), c                     ; save current distance in current position
7139 CB F6       7 142 set     6, (hl)                     ; set friendly token flag
713B 45          7 143 ld      b, l                        ; save current position in B
713C D1          7 144 pop     de                          ; preserve RET address
713D E3          7 145 ex      (sp), hl                    ; retrieve queue head
713E 70          7 146 ld      (hl), b                     ; push this position into queue head
713F 2D          7 147 dec     l                           ; move queue head up
7140 E3          7 148 ex      (sp), hl                    ; update queue head
7141 D5          7 149 push    de                          ; restore RET address
7142 C9          7 150 ret
7143             7 151 ; if (HL) = EMPTY, then set (HL) = C+1 if current distance is friendly, set (HL) = SKIPPED otherwise
7143             7 152 PathFinder_EMPTY
7143 CB 71       7 153 bit     6, c                        ; is current distance friendly?
7145 20 E2       7 154 jr      nz, PathFinder_Skipped      ; yes, set (HL) = C+1 and insert HL in queue tail
7147 34          7 155 inc     (hl)                        ; set (HL) = SKIPPED to find the second lowest distance
7148 C9          7 156 ret
7149             7 158 ; ----------------------------------------------------------------------------------------------------------------------
7149             7 159 ; PathFinder_Cyan_UpDown: set up 'Path_Finder' routine to calculate CYAN two-distances from UP to DOWN edge
7149             7 160 ;
7149             7 161 ; Input:    -
7149             7 162 ;
7149             7 163 ; Output:   A = -1, if down edge couldn't be reached
7149             7 164 ;           A =  0, if there is chain of connected cyan tokens between the two edges
7149             7 165 ;           A = last edge position visited (-1), otherwise
7149             7 166 ;
7149             7 167 ; Uses:     @Queue_Tail (queue pointer in 'PathFinder_Update' routine)
7149             7 168 ;
7149             7 169 ; Destroys: BC, DE, HL, IY
7149             7 170 ; ----------------------------------------------------------------------------------------------------------------------
7149             7 171 PathFinder_Cyan_UpDown:
7149 21 07 7D    7 172 ld      hl, CYAN_POSITIONS+7        ; HL points to cyan positions address (up-right corner)
714C 11 07 61    7 173 ld      de, CYAN_BOARD_UP_DOWN+7    ; DE points to cyan board up-down address (up-right corner)
714F CD 0B 71    7 174 call    PathFinder_CopyPositions    ; copy from cyan positions to cyan board up-down
7152             7 176 ; entry point for PathFinder_VictoryPath
7152             7 177 PathFinder_Cyan_CheckPath:
7152 FD 21 00 09 7 178 ld      iy, $0900                   ; IYH = distance to check edge positions
7156             7 179 ; IYL = last edge position visited
7156 21 00 60    7 180 ld      hl, CYAN_QUEUE_AREA         ; HL points to cyan queue area address
7159 22 2F 71    7 181 ld      (@Queue_Tail+1), hl         ; initialize cyan queue tail
715C E5          7 182 push    hl                          ; store cyan queue head
715D             7 184 ; set up cyan board (up-down) start positions distances
715D 21 09 61    7 186 ld      hl, CYAN_BOARD_UP_DOWN+9    ; HL points to cyan board up-down address (1st position)
7160 0E 43       7 187 ld      c, VICTORY+$40              ; set start positions distance + friendly flag
7162 3E 02       7 188 ld      a, FRIEND                   ; set distance to compare with
7164 BE          7 189 cp      (hl)                        ; check 1st start position distance
7165 D4 24 71    7 190 call    nc, PathFinder_Update       ; if FRIEND >= distance, update distance
7168 2C          7 191 inc     l                           ; move HL to next start position address
7169 BE          7 192 cp      (hl)                        ; check 2nd start position distance
716A D4 24 71    7 193 call    nc, PathFinder_Update       ; (repeat for each start position)
716D 2C          7 194 inc     l
716E BE          7 195 cp      (hl)                        ; check 3rd start position distance
716F D4 24 71    7 196 call    nc, PathFinder_Update
7172 2C          7 197 inc     l
7173 BE          7 198 cp      (hl)                        ; check 4th start position distance
7174 D4 24 71    7 199 call    nc, PathFinder_Update
7177 2C          7 200 inc     l
7178 BE          7 201 cp      (hl)                        ; check 5th start position distance
7179 D4 24 71    7 202 call    nc, PathFinder_Update
717C 2C          7 203 inc     l
717D BE          7 204 cp      (hl)                        ; check 6th start position distance
717E D4 24 71    7 205 call    nc, PathFinder_Update
7181 2C          7 206 inc     l
7182 C3 6F 72    7 207 jp      Path_Finder_First           ; calculate two-distances of cyan board (up-down)
7185             7 209 ; ----------------------------------------------------------------------------------------------------------------------
7185             7 210 ; PathFinder_Cyan_DownUp: set up Path_Finder routine to calculate CYAN two-distance from DOWN to UP edge
7185             7 211 ;
7185             7 212 ; Input:    -
7185             7 213 ;
7185             7 214 ; Output:   A = -1, if up edge couldn't be reached
7185             7 215 ;           A =  0, if there is chain of connected cyan tokens between the two edges
7185             7 216 ;           A = last edge position visited (-1), otherwise
7185             7 217 ;
7185             7 218 ; Uses:     @Queue_Tail (queue pointer in 'PathFinder_Update' routine)
7185             7 219 ;
7185             7 220 ; Destroys: BC, DE, HL, IY
7185             7 221 ; ----------------------------------------------------------------------------------------------------------------------
7185             7 222 PathFinder_Cyan_DownUp:
7185 21 07 7D    7 223 ld      hl, CYAN_POSITIONS+7        ; HL points to cyan positions address (up-right corner)
7188 11 4F 61    7 224 ld      de, CYAN_BOARD_DOWN_UP-1    ; DE points to cyan board down-up address (up-right corner)
718B CD 0B 71    7 225 call    PathFinder_CopyPositions    ; copy from cyan positions to cyan board down-up
718E FD 21 00 F7 7 227 ld      iy, $F700                   ; IYH = distance to check edge positions
7192             7 228 ; IYL = last edge position visited
7192 2A 2F 71    7 229 ld      hl, (@Queue_Tail+1)         ; retreive cyan queue tail
7195 E5          7 230 push    hl                          ; initialize cyan queue head
7196             7 232 ; set up cyan board (down-up) start positions distances
7196 EB          7 234 ex      de, hl                      ; (take advantage of last "CopyPositions" execution)
7197 2D          7 235 dec     l                           ; move HL to cyan boad down-up address (last position)
7198 0E 43       7 236 ld      c, VICTORY+$40              ; set start positions distance + friendly flag
719A 3E 02       7 237 ld      a, FRIEND                   ; set distance to compare with
719C BE          7 238 cp      (hl)                        ; check 1st start position distance
719D D4 24 71    7 239 call    nc, PathFinder_Update       ; if FRIEND >= distance, update distance
71A0 2D          7 240 dec     l                           ; move HL to next start position address
71A1 BE          7 241 cp      (hl)                        ; check 2nd start position distance
71A2 D4 24 71    7 242 call    nc, PathFinder_Update       ; (repeat for each start position)
71A5 2D          7 243 dec     l
71A6 BE          7 244 cp      (hl)                        ; check 3rd start position distance
71A7 D4 24 71    7 245 call    nc, PathFinder_Update
71AA 2D          7 246 dec     l
71AB BE          7 247 cp      (hl)                        ; check 4th start position distance
71AC D4 24 71    7 248 call    nc, PathFinder_Update
71AF 2D          7 249 dec     l
71B0 BE          7 250 cp      (hl)                        ; check 5th start position distance
71B1 D4 24 71    7 251 call    nc, PathFinder_Update
71B4 2D          7 252 dec     l
71B5 BE          7 253 cp      (hl)                        ; check 6th start position distance
71B6 D4 24 71    7 254 call    nc, PathFinder_Update
71B9 2D          7 255 dec     l
71BA C3 6F 72    7 256 jp      Path_Finder_First           ; calculate two-distances of cyan board (down-up)
71BD             7 258 ; ----------------------------------------------------------------------------------------------------------------------
71BD             7 259 ; PathFinder_Red_LeftRight: set up Path_Finder routine to calculate RED two-distance from LEFT to RIGHT edge
71BD             7 260 ;
71BD             7 261 ; Input:    -
71BD             7 262 ;
71BD             7 263 ; Output:   A = -1, if right edge couldn't be reached
71BD             7 264 ;           A =  0, if there is chain of connected cyan tokens between the two edges
71BD             7 265 ;           A = last edge position visited (-1), otherwise
71BD             7 266 ;
71BD             7 267 ; Uses:     @Queue_Tail (queue pointer in 'PathFinder_Update' routine)
71BD             7 268 ;
71BD             7 269 ; Destroys: BC, DE, HL, IY
71BD             7 270 ; ----------------------------------------------------------------------------------------------------------------------
71BD             7 271 PathFinder_Red_LeftRight:
71BD 21 07 7E    7 272 ld      hl, RED_POSITIONS+7         ; HL points to red positions address (up-right corner)
71C0 11 07 64    7 273 ld      de, RED_BOARD_LEFT_RIGHT+7  ; DE points to red board left-right addr. (up-right corner)
71C3 CD 0B 71    7 274 call    PathFinder_CopyPositions    ; copy from red positions to red board left-right
71C6             7 276 ; entry point for PathFinder_VictoryPath
71C6             7 277 PathFinder_Red_CheckPath
71C6 FD 21 00 01 7 278 ld      iy, $0100                   ; IYH = distance to check edge positions
71CA             7 279 ; IYL = last edge position visited
71CA 21 00 63    7 280 ld      hl, RED_QUEUE_AREA          ; HL points to red queue area address
71CD 22 2F 71    7 281 ld      (@Queue_Tail+1), hl         ; initialize red queue tail
71D0 E5          7 282 push    hl                          ; store red queue head
71D1             7 284 ; set up red board (left-right) start positions distances
71D1 21 09 64    7 286 ld      hl, RED_BOARD_LEFT_RIGHT+9  ; HL points to red board left-right address (1st position)
71D4 0E 43       7 287 ld      c, VICTORY+$40              ; set start positions distance + friendly flag
71D6 3E 02       7 288 ld      a, FRIEND                   ; set distance to compare with
71D8 BE          7 289 cp      (hl)                        ; check 1st start position distance
71D9 D4 24 71    7 290 call    nc, PathFinder_Update       ; if FRIEND >= distance, update distance
71DC 2E 12       7 291 ld      l, (RED_BOARD_LEFT_RIGHT+18)%256
71DE BE          7 292 cp      (hl)                        ; check 2nd start position distance
71DF D4 24 71    7 293 call    nc, PathFinder_Update       ; (repeat for each start position)
71E2 2E 1B       7 294 ld      l, (RED_BOARD_LEFT_RIGHT+27)%256
71E4 BE          7 295 cp      (hl)                        ; check 3rd start position distance
71E5 D4 24 71    7 296 call    nc, PathFinder_Update
71E8 2E 24       7 297 ld      l, (RED_BOARD_LEFT_RIGHT+36)%256
71EA BE          7 298 cp      (hl)                        ; check 4th start position distance
71EB D4 24 71    7 299 call    nc, PathFinder_Update
71EE 2E 2D       7 300 ld      l, (RED_BOARD_LEFT_RIGHT+45)%256
71F0 BE          7 301 cp      (hl)                        ; check 5th start position distance
71F1 D4 24 71    7 302 call    nc, PathFinder_Update
71F4 2E 36       7 303 ld      l, (RED_BOARD_LEFT_RIGHT+54)%256
71F6 BE          7 304 cp      (hl)                        ; check 6th start position distance
71F7 D4 24 71    7 305 call    nc, PathFinder_Update
71FA 2E 3F       7 306 ld      l, (RED_BOARD_LEFT_RIGHT+63)%256
71FC C3 6F 72    7 307 jp      Path_Finder_First           ; calculate two-distances of red board (left-right)
71FF             7 309 ; ----------------------------------------------------------------------------------------------------------------------
71FF             7 310 ; PathFinder_Red_RightLeft: set up Path_Finder routine to calculate RED two-distance from RIGHT to LEFT edge
71FF             7 311 ;
71FF             7 312 ; Input:    -
71FF             7 313 ;
71FF             7 314 ; Output:   A = -1, if left edge couldn't be reached
71FF             7 315 ;           A =  0, if there is chain of connected cyan tokens between the two edges
71FF             7 316 ;           A = last edge position visited (-1), otherwise
71FF             7 317 ;
71FF             7 318 ; Uses:     @Queue_Tail (queue pointer in 'PathFinder_Update' routine)
71FF             7 319 ;
71FF             7 320 ; Destroys: BC, DE, HL, IY
71FF             7 321 ; ----------------------------------------------------------------------------------------------------------------------
71FF             7 322 PathFinder_Red_RightLeft:
71FF 21 07 7E    7 323 ld      hl, RED_POSITIONS+7         ; HL points to red positions address (up-right corner)
7202 11 4F 64    7 324 ld      de, RED_BOARD_RIGHT_LEFT-1  ; DE points to red board right-left addr. (up-right corner)
7205 CD 0B 71    7 325 call    PathFinder_CopyPositions    ; copy from red positions to red board right-left
7208 FD 21 00 FF 7 327 ld      iy, $FF00                   ; IYH = distance to check edge positions
720C             7 328 ; IYL = last edge position visited
720C 2A 2F 71    7 329 ld      hl, (@Queue_Tail+1)         ; retreive red queue tail
720F E5          7 330 push    hl                          ; initialize red queue head
7210             7 332 ; set up red board (right-left) start positions distances
7210 EB          7 334 ex      de, hl                      ; take advantage of last "CopyPositions" execution
7211 2D          7 335 dec     l                           ; move HL to red board right-left address (last position)
7212 0E 43       7 336 ld      c, VICTORY+$40              ; set start positions distance + friendly flag
7214 3E 02       7 337 ld      a, FRIEND                   ; set distance to compare with
7216 BE          7 338 cp      (hl)                        ; check 1st start position distance
7217 D4 24 71    7 339 call    nc, PathFinder_Update       ; if FRIEND >= distance, update distance
721A 2E 84       7 340 ld      l, (RED_BOARD_RIGHT_LEFT+52)%256
721C BE          7 341 cp      (hl)                        ; check 2nd start position distance
721D D4 24 71    7 342 call    nc, PathFinder_Update       ; (repeat for each start position)
7220 2E 7B       7 343 ld      l, (RED_BOARD_RIGHT_LEFT+43)%256
7222 BE          7 344 cp      (hl)                        ; check 3rd start position distance
7223 D4 24 71    7 345 call    nc, PathFinder_Update
7226 2E 72       7 346 ld      l, (RED_BOARD_RIGHT_LEFT+34)%256
7228 BE          7 347 cp      (hl)                        ; check 4th start position distance
7229 D4 24 71    7 348 call    nc, PathFinder_Update
722C 2E 69       7 349 ld      l, (RED_BOARD_RIGHT_LEFT+25)%256
722E BE          7 350 cp      (hl)                        ; check 5th start position distance
722F D4 24 71    7 351 call    nc, PathFinder_Update
7232 2E 60       7 352 ld      l, (RED_BOARD_RIGHT_LEFT+16)%256
7234 BE          7 353 cp      (hl)                        ; check 6th start position distance
7235 D4 24 71    7 354 call    nc, PathFinder_Update
7238 2E 57       7 355 ld      l, (RED_BOARD_RIGHT_LEFT+7)%256
723A C3 6F 72    7 356 jp      Path_Finder_First           ; calculate red two-distance (right-left)
723D             7 358 ; ----------------------------------------------------------------------------------------------------------------------
723D             7 359 ; Path_Finder: calculate two-distance metric for each board position
723D             7 360 ;
723D             7 361 ; The algorithm is implemented running PATHFINDER, starting at the corresponding side of the input board
723D             7 362 ;
723D             7 363 ; Input:    HL  = cyan or red queue area address
723D             7 364 ;           IYH = distance to check edge positions
723D             7 365 ;           IYL = 0
723D             7 366 ;
723D             7 367 ; Output:   A = -1, if corresponding edge couldn't be reached
723D             7 368 ;           A =  0, if there is chain of connected (color) tokens between the two edges
723D             7 369 ;           A = last edge position visited (-1), otherwise
723D             7 370 ;
723D             7 371 ; Uses:     @Queue_Tail (queue pointer in 'PathFinder_Update' routine)
723D             7 372 ;
723D             7 373 ; Destroys: DE, HL, IY
723D             7 374 ; ----------------------------------------------------------------------------------------------------------------------
723D             7 375 Path_Finder:
723D 2C          7 376 inc     l                           ; move queue head down
723E E5          7 377 push    hl                          ; preserve queue head address
723F 6E          7 378 ld      l, (hl)                     ; retrieve next position to be checked
7240 24          7 379 inc     h                           ; move HL to corresponding board address
7241 4E          7 380 ld      c, (hl)                     ; retrieve distance from this position to start
7242 5D          7 381 ld      e, l                        ; store current position
7243             7 383 ; look for adjacent positions
7243 7D          7 385 ld      a, l                        ; get current position
7244 FD 84       7 386 add     a, iyh                      ; add distance to check edge positions
7246 6F          7 387 ld      l, a                        ; move HL to calculated position address
7247 CB 7E       7 388 bit     7, (hl)                     ; is it an edge?
7249 20 34       7 389 jr      nz, Path_Finder_Adjacent    ; yes, process adjacent positions
724B 3E 02       7 391 ld      a, FRIEND                   ; set distance to compare with
724D             7 392 ; return point from PathFinder_Adjacent
724D             7 393 Path_Finder_Neighbors
724D 6B          7 394 ld      l, e                        ; restore current position to be checked
724E 2C          7 395 inc     l                           ; move HL to right neighbor address
724F BE          7 396 cp      (hl)                        ; check right neighbor distance
7250 D4 24 71    7 397 call    nc, PathFinder_Update       ; if FRIEND >= distance, update distance
7253 2D          7 398 dec     l                           ; move HL to left neighbor address
7254 2D          7 399 dec     l
7255 BE          7 400 cp      (hl)                        ; check left neighbor distance
7256 D4 24 71    7 401 call    nc, PathFinder_Update       ; (repeat for each neighbor)
7259 11 F8 FF    7 402 ld      de, -WIDTH
725C 19          7 403 add     hl, de
725D BE          7 404 cp      (hl)                        ; check upper-left neighbor distance
725E D4 24 71    7 405 call    nc, PathFinder_Update
7261 2C          7 406 inc     l
7262 BE          7 407 cp      (hl)                        ; check upper-right neighbor distance
7263 D4 24 71    7 408 call    nc, PathFinder_Update
7266 11 10 00    7 409 ld      de, WIDTH*2
7269 19          7 410 add     hl, de
726A BE          7 411 cp      (hl)                        ; check lower-left neighbor distance
726B D4 24 71    7 412 call    nc, PathFinder_Update
726E 2C          7 413 inc     l
726F             7 414 Path_Finder_First
726F BE          7 415 cp      (hl)                        ; check lower-right neighbor distance
7270 D4 24 71    7 416 call    nc, PathFinder_Update
7273 E1          7 417 pop     hl                          ; retreive queue head address
7274 3A 2F 71    7 418 ld      a, (@Queue_Tail+1)          ; get queue tail address (low-byte)
7277 BD          7 419 cp      l                           ; is queue empty?
7278 C2 3D 72    7 420 jp      nz, Path_Finder             ; no, repeat until queue is empty
727B FD 7D       7 422 ld      a, iyl                      ; get last edge position visited
727D 3D          7 423 dec     a                           ; return A = -1, if the edge couldn't be reached
727E C9          7 424 ret
727F             7 426 ; ----------------------------------------------------------------------------------------------------------------------
727F             7 427 ; Check adjacent hexagons.
727F             7 428 ;
727F             7 429 ; This is an approach to update the two-distance of adjacent positions. As explained in Jack van Rijswijck's thesis:
727F             7 430 ; "two cells are adjacent if they share a common edge on the board."
727F             7 431 ;
727F             7 432 ; Input:    E  = current position
727F             7 433 ;           C  = current distance (with a flag at 6th bit that indicates a friendly position)
727F             7 434 ;           HL = current edge position address (a flag in 7th bit indicates an edge position and the lowest 3 bits the
727F             7 435 ;                edge number)
727F             7 436 ;
727F             7 437 ; Output:   A = 0, if there is a chain of connected tokens of the same color between the two edges.
727F             7 438 ;           A = FRIEND and E = current position, otherwise.
727F             7 439 ;
727F             7 440 ; Destroys: DE, HL
727F             7 441 ; ----------------------------------------------------------------------------------------------------------------------
727F             7 442 Path_Finder_Adjacent
727F 3E 43       7 443 ld      a, VICTORY+$40              ; set victory distance + friendly flag
7281 B9          7 444 cp      c                           ; is current distance victory and friendly?
7282 28 0E       7 445 jr      z, Path_Finder_Abort        ; yes, abort path_finder
7284 FD 6B       7 447 ld      iyl, e                      ; update last edge position visited
7286 54          7 448 ld      d, h                        ; store pointer to current position address in DE
7287 6E          7 449 ld      l, (hl)                     ; get current edge position
7288 CB 25       7 450 sla     l                           ; calculate vector table routine index
728A 24          7 451 inc     h                           ; move HL to (cyan or red) vector table routine address
728B 7E          7 452 ld      a, (hl)                     ; get low byte of vector table routine address
728C 2C          7 453 inc     l                           ; move HL to high byte of vector table routine address
728D 66          7 454 ld      h, (hl)                     ; get high byte of vector table routine address
728E 6F          7 455 ld      l, a                        ; HL points to 'PathFinder_[COLOR]_Edge_[n]' routine address
728F 3E 02       7 456 ld      a, FRIEND                   ; set distance to compare with
7291 E9          7 457 jp      (hl)                        ; jump to 'PathFinder_[COLOR]_Edge_[n]' routine
7292             7 458 Path_Finder_Abort
7292 E1          7 459 pop     hl                          ; restore queue head address
7293 AF          7 460 xor     a                           ; return A = 0
7294 C9          7 461 ret
7295             7 463 ; ----------------------------------------------------------------------------------------------------------------------
7295             7 464 ;  Check two-distance of RED adjacents
7295             7 465 ; ----------------------------------------------------------------------------------------------------------------------
7295             7 466 PathFinder_RED_Edge_0
7295 EB          7 467 ex      de, hl                      ; restore pointer to current position address
7296 11 12 00    7 468 ld      de, 9*2                     ; calculate distance to adjacent #2
7299 19          7 469 add     hl, de                      ; move HL to adjacent #2 address
729A BE          7 470 cp      (hl)                        ; check adjacent #2 distance
729B D4 24 71    7 471 call    nc, PathFinder_Update       ; if FRIEND >= adjacent #2 distance, update distance
729E 11 09 00    7 472 ld      de, 9                       ; calculate distance to adjacent #3
72A1 19          7 473 add     hl, de                      ; move HL to adjacent #3 address
72A2 BE          7 474 cp      (hl)                        ; check adjacent #3 distance
72A3 D4 24 71    7 475 call    nc, PathFinder_Update       ; (repeat for each adjacent)
72A6 11 09 00    7 476 ld      de, 9
72A9 19          7 477 add     hl, de
72AA BE          7 478 cp      (hl)                        ; check adjacent #4 distance
72AB D4 24 71    7 479 call    nc, PathFinder_Update
72AE 11 09 00    7 480 ld      de, 9
72B1 19          7 481 add     hl, de
72B2 BE          7 482 cp      (hl)                        ; check adjacent #5 distance
72B3 D4 24 71    7 483 call    nc, PathFinder_Update
72B6 11 09 00    7 484 ld      de, 9
72B9 19          7 485 add     hl, de
72BA BE          7 486 cp      (hl)                        ; check adjacent #6 distance
72BB D4 24 71    7 487 call    nc, PathFinder_Update
72BE FD 5D       7 488 ld      e, iyl                      ; restore current position
72C0 C3 4D 72    7 489 jp      Path_Finder_Neighbors       ; continue processing neighbors
72C3             7 491 PathFinder_RED_Edge_1
72C3 EB          7 492 ex      de, hl                      ; restore pointer to current position address
72C4 11 12 00    7 493 ld      de, 9*2
72C7 19          7 494 add     hl, de
72C8 BE          7 495 cp      (hl)                        ; check adjacent #3 distance
72C9 D4 24 71    7 496 call    nc, PathFinder_Update
72CC 11 09 00    7 497 ld      de, 9
72CF 19          7 498 add     hl, de
72D0 BE          7 499 cp      (hl)                        ; check adjacent #4 distance
72D1 D4 24 71    7 500 call    nc, PathFinder_Update
72D4 11 09 00    7 501 ld      de, 9
72D7 19          7 502 add     hl, de
72D8 BE          7 503 cp      (hl)                        ; check adjacent #5 distance
72D9 D4 24 71    7 504 call    nc, PathFinder_Update
72DC 11 09 00    7 505 ld      de, 9
72DF 19          7 506 add     hl, de
72E0 BE          7 507 cp      (hl)                        ; check adjacent #6 distance
72E1 D4 24 71    7 508 call    nc, PathFinder_Update
72E4 FD 5D       7 509 ld      e, iyl                      ; restore current position
72E6 C3 4D 72    7 510 jp      Path_Finder_Neighbors       ; continue processing neighbors
72E9             7 512 PathFinder_RED_Edge_2
72E9 EB          7 513 ex      de, hl                      ; restore pointer to current position address
72EA 11 12 00    7 514 ld      de, 9*2
72ED 19          7 515 add     hl, de
72EE BE          7 516 cp      (hl)                        ; check adjacent #4 distance
72EF D4 24 71    7 517 call    nc, PathFinder_Update
72F2 11 09 00    7 518 ld      de, 9
72F5 19          7 519 add     hl, de
72F6 BE          7 520 cp      (hl)                        ; check adjacent #5 distance
72F7 D4 24 71    7 521 call    nc, PathFinder_Update
72FA 11 09 00    7 522 ld      de, 9
72FD 19          7 523 add     hl, de
72FE BE          7 524 cp      (hl)                        ; check adjacent #6 distance
72FF D4 24 71    7 525 call    nc, PathFinder_Update
7302 11 CA FF    7 526 ld      de, -9*6
7305 19          7 527 add     hl, de
7306 BE          7 528 cp      (hl)                        ; check adjacent #0 distance
7307 D4 24 71    7 529 call    nc, PathFinder_Update
730A FD 5D       7 530 ld      e, iyl                      ; restore current position
730C C3 4D 72    7 531 jp      Path_Finder_Neighbors       ; continue processing neighbors
730F             7 533 PathFinder_RED_Edge_3
730F EB          7 534 ex      de, hl                      ; restore pointer to current position address
7310 11 E5 FF    7 535 ld      de, -9*3
7313 19          7 536 add     hl, de
7314 BE          7 537 cp      (hl)                        ; check adjacent #0 distance
7315 D4 24 71    7 538 call    nc, PathFinder_Update
7318 11 09 00    7 539 ld      de, 9
731B 19          7 540 add     hl, de
731C BE          7 541 cp      (hl)                        ; check adjacent #1 distance
731D D4 24 71    7 542 call    nc, PathFinder_Update
7320 11 24 00    7 543 ld      de, 9*4
7323 19          7 544 add     hl, de
7324 BE          7 545 cp      (hl)                        ; check adjacent #5 distance
7325 D4 24 71    7 546 call    nc, PathFinder_Update
7328 11 09 00    7 547 ld      de, 9
732B 19          7 548 add     hl, de
732C BE          7 549 cp      (hl)                        ; check adjacent #6 distance
732D D4 24 71    7 550 call    nc, PathFinder_Update
7330 FD 5D       7 551 ld      e, iyl                      ; restore current position
7332 C3 4D 72    7 552 jp      Path_Finder_Neighbors       ; continue processing neighbors
7335             7 554 PathFinder_RED_Edge_4
7335 EB          7 555 ex      de, hl                      ; restore pointer to current position address
7336 11 12 00    7 556 ld      de, 9*2
7339 19          7 557 add     hl, de
733A BE          7 558 cp      (hl)                        ; check adjacent #6 distance
733B D4 24 71    7 559 call    nc, PathFinder_Update
733E 11 CA FF    7 560 ld      de, -9*6
7341 19          7 561 add     hl, de
7342 BE          7 562 cp      (hl)                        ; check adjacent #0 distance
7343 D4 24 71    7 563 call    nc, PathFinder_Update
7346 11 09 00    7 564 ld      de, 9
7349 19          7 565 add     hl, de
734A BE          7 566 cp      (hl)                        ; check adjacent #1 distance
734B D4 24 71    7 567 call    nc, PathFinder_Update
734E 11 09 00    7 568 ld      de, 9
7351 19          7 569 add     hl, de
7352 BE          7 570 cp      (hl)                        ; check adjacent #2 distance
7353 D4 24 71    7 571 call    nc, PathFinder_Update
7356 FD 5D       7 572 ld      e, iyl                      ; restore current position
7358 C3 4D 72    7 573 jp      Path_Finder_Neighbors       ; continue processing neighbors
735B             7 575 PathFinder_RED_Edge_5
735B EB          7 576 ex      de, hl                      ; restore pointer to current position address
735C 11 D3 FF    7 577 ld      de, -9*5
735F 19          7 578 add     hl, de
7360 BE          7 579 cp      (hl)                        ; check adjacent #0 distance
7361 D4 24 71    7 580 call    nc, PathFinder_Update
7364 11 09 00    7 581 ld      de, 9
7367 19          7 582 add     hl, de
7368 BE          7 583 cp      (hl)                        ; check adjacent #1 distance
7369 D4 24 71    7 584 call    nc, PathFinder_Update
736C 11 09 00    7 585 ld      de, 9
736F 19          7 586 add     hl, de
7370 BE          7 587 cp      (hl)                        ; check adjacent #2 distance
7371 D4 24 71    7 588 call    nc, PathFinder_Update
7374 11 09 00    7 589 ld      de, 9
7377 19          7 590 add     hl, de
7378 BE          7 591 cp      (hl)                        ; check adjacent #3 distance
7379 D4 24 71    7 592 call    nc, PathFinder_Update
737C FD 5D       7 593 ld      e, iyl                      ; restore current position
737E C3 4D 72    7 594 jp      Path_Finder_Neighbors       ; continue processing neighbors
7381             7 596 PathFinder_RED_Edge_6
7381 EB          7 597 ex      de, hl                      ; restore pointer to current position address
7382 11 CA FF    7 598 ld      de, -9*6
7385 19          7 599 add     hl, de
7386 BE          7 600 cp      (hl)                        ; check adjacent #0 distance
7387 D4 24 71    7 601 call    nc, PathFinder_Update
738A 11 09 00    7 602 ld      de, 9
738D 19          7 603 add     hl, de
738E BE          7 604 cp      (hl)                        ; check adjacent #1 distance
738F D4 24 71    7 605 call    nc, PathFinder_Update
7392 11 09 00    7 606 ld      de, 9
7395 19          7 607 add     hl, de
7396 BE          7 608 cp      (hl)                        ; check adjacent #2 distance
7397 D4 24 71    7 609 call    nc, PathFinder_Update
739A 11 09 00    7 610 ld      de, 9
739D 19          7 611 add     hl, de
739E BE          7 612 cp      (hl)                        ; check adjacent #3 distance
739F D4 24 71    7 613 call    nc, PathFinder_Update
73A2 11 09 00    7 614 ld      de, 9
73A5 19          7 615 add     hl, de
73A6 BE          7 616 cp      (hl)                        ; check adjacent #4 distance
73A7 D4 24 71    7 617 call    nc, PathFinder_Update
73AA FD 5D       7 618 ld      e, iyl                      ; restore current position
73AC C3 4D 72    7 619 jp      Path_Finder_Neighbors       ; continue processing neighbors
73AF             7 621 ; ----------------------------------------------------------------------------------------------------------------------
73AF             7 622 ;  Check two-distance of CYAN adjacents
73AF             7 623 ; ----------------------------------------------------------------------------------------------------------------------
73AF             7 624 PathFinder_CYAN_Edge_0
73AF EB          7 625 ex      de, hl                      ; restore pointer to current position address
73B0 2C          7 626 inc     l
73B1 2C          7 627 inc     l
73B2 BE          7 628 cp      (hl)                        ; check adjacent #2 distance
73B3 D4 24 71    7 629 call    nc, PathFinder_Update
73B6 2C          7 630 inc     l
73B7 BE          7 631 cp      (hl)                        ; check adjacent #3 distance
73B8 D4 24 71    7 632 call    nc, PathFinder_Update
73BB 2C          7 633 inc     l
73BC BE          7 634 cp      (hl)                        ; check adjacent #4 distance
73BD D4 24 71    7 635 call    nc, PathFinder_Update
73C0 2C          7 636 inc     l
73C1 BE          7 637 cp      (hl)                        ; check adjacent of edge number 5
73C2 D4 24 71    7 638 call    nc, PathFinder_Update
73C5 2C          7 639 inc     l
73C6 BE          7 640 cp      (hl)                        ; check adjacent of edge number 6
73C7 D4 24 71    7 641 call    nc, PathFinder_Update
73CA FD 5D       7 642 ld      e, iyl                      ; restore current position
73CC C3 4D 72    7 643 jp      Path_Finder_Neighbors       ; continue processing neighbors
73CF             7 645 PathFinder_CYAN_Edge_1
73CF EB          7 646 ex      de, hl                      ; restore pointer to current position address
73D0 2C          7 647 inc     l
73D1 2C          7 648 inc     l
73D2 BE          7 649 cp      (hl)                        ; check adjacent #3 distance
73D3 D4 24 71    7 650 call    nc, PathFinder_Update
73D6 2C          7 651 inc     l
73D7 BE          7 652 cp      (hl)                        ; check adjacent #4 distance
73D8 D4 24 71    7 653 call    nc, PathFinder_Update
73DB 2C          7 654 inc     l
73DC BE          7 655 cp      (hl)                        ; check adjacent #5 distance
73DD D4 24 71    7 656 call    nc, PathFinder_Update
73E0 2C          7 657 inc     l
73E1 BE          7 658 cp      (hl)                        ; check adjacent #6 distance
73E2 D4 24 71    7 659 call    nc, PathFinder_Update
73E5 FD 5D       7 660 ld      e, iyl                      ; restore current position
73E7 C3 4D 72    7 661 jp      Path_Finder_Neighbors       ; continue processing neighbors
73EA             7 663 PathFinder_CYAN_Edge_2
73EA EB          7 664 ex      de, hl                      ; restore pointer to current position address
73EB 2D          7 665 dec     l
73EC 2D          7 666 dec     l
73ED BE          7 667 cp      (hl)                        ; check adjacent #0 distance
73EE D4 24 71    7 668 call    nc, PathFinder_Update
73F1 2C          7 669 inc     l
73F2 2C          7 670 inc     l
73F3 2C          7 671 inc     l
73F4 2C          7 672 inc     l
73F5 BE          7 673 cp      (hl)                        ; check adjacent #4 distance
73F6 D4 24 71    7 674 call    nc, PathFinder_Update
73F9 2C          7 675 inc     l
73FA BE          7 676 cp      (hl)                        ; check adjacent #5 distance
73FB D4 24 71    7 677 call    nc, PathFinder_Update
73FE 2C          7 678 inc     l
73FF BE          7 679 cp      (hl)                        ; check adjacent #6 distance
7400 D4 24 71    7 680 call    nc, PathFinder_Update
7403 FD 5D       7 681 ld      e, iyl                      ; restore current position
7405 C3 4D 72    7 682 jp      Path_Finder_Neighbors       ; continue processing neighbors
7408             7 684 PathFinder_CYAN_Edge_3
7408 EB          7 685 ex      de, hl                      ; restore pointer to current position address
7409 2D          7 686 dec     l
740A 2D          7 687 dec     l
740B 2D          7 688 dec     l
740C BE          7 689 cp      (hl)                        ; check adjacent #0 distance
740D D4 24 71    7 690 call    nc, PathFinder_Update
7410 2C          7 691 inc     l
7411 BE          7 692 cp      (hl)                        ; check adjacent #1 distance
7412 D4 24 71    7 693 call    nc, PathFinder_Update
7415 2C          7 694 inc     l
7416 2C          7 695 inc     l
7417 2C          7 696 inc     l
7418 2C          7 697 inc     l
7419 BE          7 698 cp      (hl)                        ; check adjacent #5 distance
741A D4 24 71    7 699 call    nc, PathFinder_Update
741D 2C          7 700 inc     l
741E BE          7 701 cp      (hl)                        ; check adjacent #6 distance
741F D4 24 71    7 702 call    nc, PathFinder_Update
7422 FD 5D       7 703 ld      e, iyl                      ; restore current position
7424 C3 4D 72    7 704 jp      Path_Finder_Neighbors       ; continue processing neighbors
7427             7 706 PathFinder_CYAN_Edge_4
7427 EB          7 707 ex      de, hl                      ; restore pointer to current position address
7428 2C          7 708 inc     l
7429 2C          7 709 inc     l
742A BE          7 710 cp      (hl)                        ; check adjacent #6 distance
742B D4 24 71    7 711 call    nc, PathFinder_Update
742E 2D          7 712 dec     l
742F 2D          7 713 dec     l
7430 2D          7 714 dec     l
7431 2D          7 715 dec     l
7432 BE          7 716 cp      (hl)                        ; check adjacent #2 distance
7433 D4 24 71    7 717 call    nc, PathFinder_Update
7436 2D          7 718 dec     l
7437 BE          7 719 cp      (hl)                        ; check adjacent #1 distance
7438 D4 24 71    7 720 call    nc, PathFinder_Update
743B 2D          7 721 dec     l
743C BE          7 722 cp      (hl)                        ; check adjacent #0 distance
743D D4 24 71    7 723 call    nc, PathFinder_Update
7440 FD 5D       7 724 ld      e, iyl                      ; restore current position
7442 C3 4D 72    7 725 jp      Path_Finder_Neighbors       ; continue processing neighbors
7445             7 727 PathFinder_CYAN_Edge_5
7445 EB          7 728 ex      de, hl                      ; restore pointer to current position address
7446 2D          7 729 dec     l
7447 2D          7 730 dec     l
7448 BE          7 731 cp      (hl)                        ; check adjacent #3 distance
7449 D4 24 71    7 732 call    nc, PathFinder_Update
744C 2D          7 733 dec     l
744D BE          7 734 cp      (hl)                        ; check adjacent #2 distance
744E D4 24 71    7 735 call    nc, PathFinder_Update
7451 2D          7 736 dec     l
7452 BE          7 737 cp      (hl)                        ; check adjacent #1 distance
7453 D4 24 71    7 738 call    nc, PathFinder_Update
7456 2D          7 739 dec     l
7457 BE          7 740 cp      (hl)                        ; check adjacent #0 distance
7458 D4 24 71    7 741 call    nc, PathFinder_Update
745B FD 5D       7 742 ld      e, iyl                      ; restore current position
745D C3 4D 72    7 743 jp      Path_Finder_Neighbors       ; continue processing neighbors
7460             7 745 PathFinder_CYAN_Edge_6
7460 EB          7 746 ex      de, hl                      ; restore pointer to current position address
7461 2D          7 747 dec     l
7462 2D          7 748 dec     l
7463 BE          7 749 cp      (hl)                        ; check adjacent #4 distance
7464 D4 24 71    7 750 call    nc, PathFinder_Update
7467 2D          7 751 dec     l
7468 BE          7 752 cp      (hl)                        ; check adjacent #3 distance
7469 D4 24 71    7 753 call    nc, PathFinder_Update
746C 2D          7 754 dec     l
746D BE          7 755 cp      (hl)                        ; check adjacent #2 distance
746E D4 24 71    7 756 call    nc, PathFinder_Update
7471 2D          7 757 dec     l
7472 BE          7 758 cp      (hl)                        ; check adjacent #1 distance
7473 D4 24 71    7 759 call    nc, PathFinder_Update
7476 2D          7 760 dec     l
7477 BE          7 761 cp      (hl)                        ; check adjacent #0 distance
7478 D4 24 71    7 762 call    nc, PathFinder_Update
747B FD 5D       7 763 ld      e, iyl                      ; restore current position
747D C3 4D 72    7 764 jp      Path_Finder_Neighbors       ; continue processing neighbors
7480             7 766 ; ----------------------------------------------------------------------------------------------------------------------
7480             7 767 ; PathFinder_Score: calculate board score depending on speccy color
7480             7 768 ;
7480             7 769 ; Input:    P/V = flag unset if speccy side is FRIEND, flag set if speccy side is ENEMY
7480             7 770 ;
7480             7 771 ; Output:   A = -1, if speccy can't reach his opposite edge
7480             7 772 ;           A =  0, if speccy has a chain of connected tokens between the two edges or if player cant reach his edge
7480             7 773 ;           A = speccy heuristic evaluation, otherwise
7480             7 774 ;
7480             7 775 ; Uses:     -
7480             7 776 ;
7480             7 777 ; Destroys: A', BC, DE, HL, IY
7480             7 778 ; ----------------------------------------------------------------------------------------------------------------------
7480             7 779 PathFinder_Score:
7480 E2 B4 74    7 780 jp      po, PathFinder_CyanScore    ; if speccy side is FRIEND, calculate CYAN score
7483             7 782 ; ----------------------------------------------------------------------------------------------------------------------
7483             7 783 ; PathFinder_RedScore: calculate red score
7483             7 784 ;
7483             7 785 ; Input:    -
7483             7 786 ;
7483             7 787 ; Output:   A = -1, if red can't reach his opposite edge
7483             7 788 ;           A =  0, if there a chain of connected red tokens between the two edges or if cyan can't reach his edge
7483             7 789 ;           A = red heuristic evaluation, otherwise
7483             7 790 ;
7483             7 791 ; Uses:     POTENTIALS (board potential and attack mobility)
7483             7 792 ;
7483             7 793 ; Destroys: A', BC, DE, HL, IY
7483             7 794 ; ----------------------------------------------------------------------------------------------------------------------
7483             7 795 PathFinder_RedScore
7483 CD BD 71    7 796 call    PathFinder_Red_LeftRight    ; calculate RED two-distance from LEFT to RIGHT edge
7486 C8          7 797 ret     z                           ; if red has a chain of connected tokens, return A = 0
7487 08          7 798 ex      af, af'                     ; save first result
7488 CD FF 71    7 799 call    PathFinder_Red_RightLeft    ; calculate RED two-distance from RIGHT to LEFT edge
748B 47          7 800 ld      b, a                        ; save second result
748C 08          7 801 ex      af, af'                     ; restore first result
748D 90          7 802 sub     b                           ; subtract both results
748E 78          7 803 ld      a, b                        ; restore second result
748F C8          7 804 ret     z                           ; if red can't reach his opposite edge, return A = -1
7490 CD 49 71    7 806 call    PathFinder_Cyan_UpDown      ; calculate CYAN two-distance from UP to DOWN edge
7493 08          7 807 ex      af, af'                     ; save result
7494 CD 85 71    7 808 call    PathFinder_Cyan_DownUp      ; calculate CYAN two-distance from DOWN to UP edge
7497 47          7 809 ld      b, a                        ; save second result
7498 08          7 810 ex      af, af'                     ; restore first result
7499 90          7 811 sub     b                           ; subtract both results
749A C8          7 812 ret     z                           ; if cyan can't reach his opposite edge, return A = 0
749B 21 09 64    7 814 ld      hl, RED_BOARD_LEFT_RIGHT+9  ; HL points to red board left-right address (1st position)
749E 11 51 64    7 815 ld      de, RED_BOARD_RIGHT_LEFT+1  ; DE points to red board right-left address (1st position)
74A1 CD F2 74    7 816 call    PathFinder_Potentials       ; calculate RED potentials
74A4 ED 43 97 61 7 817 ld      (POTENTIALS), bc            ; store RED potentials
74A8 21 09 61    7 819 ld      hl, CYAN_BOARD_UP_DOWN+9    ; HL points to cyan board up-down address (1st position)
74AB 11 51 61    7 820 ld      de, CYAN_BOARD_DOWN_UP+1    ; DE points to cyan board down-up address (1st position)
74AE CD F2 74    7 821 call    PathFinder_Potentials       ; calculate cyan potentials
74B1 C3 E2 74    7 822 jp      PathFinder_Evaluation       ; calculate heuristic evaluation
74B4             7 824 ; ----------------------------------------------------------------------------------------------------------------------
74B4             7 825 ; PathFinder_CyanScore: calculate cyan score
74B4             7 826 ;
74B4             7 827 ; Input:    -
74B4             7 828 ;
74B4             7 829 ; Output:   A = -1, if cyan can't reach his opposite edge
74B4             7 830 ;           A =  0, if there a chain of connected cyan tokens between the two edges or if red can't reach his edge
74B4             7 831 ;           A = cyan heuristic evaluation, otherwise
74B4             7 832 ;
74B4             7 833 ; Uses:     POTENTIALS (board potential and attack mobility)
74B4             7 834 ;
74B4             7 835 ; Destroys: A', BC, DE, HL
74B4             7 836 ; ----------------------------------------------------------------------------------------------------------------------
74B4             7 837 PathFinder_CyanScore
74B4 CD 49 71    7 838 call    PathFinder_Cyan_UpDown      ; calculate CYAN two-distance from UP to DOWN edge
74B7 C8          7 839 ret     z                           ; if cyan has a chain of connected tokens, return A = 0
74B8 08          7 840 ex      af, af'                     ; save result
74B9 CD 85 71    7 841 call    PathFinder_Cyan_DownUp      ; calculate CYAN two-distance from DOWN to UP edge
74BC 47          7 842 ld      b, a                        ; save second result
74BD 08          7 843 ex      af, af'                     ; restore first result
74BE 90          7 844 sub     b                           ; subtract both results
74BF 78          7 845 ld      a, b                        ; restore second result
74C0 C8          7 846 ret     z                           ; if cyan can't reach his opposite edge, return A = -1
74C1 CD BD 71    7 848 call    PathFinder_Red_LeftRight    ; calculate RED two-distance from LEFT to RIGHT edge
74C4 08          7 849 ex      af, af'                     ; save result
74C5 CD FF 71    7 850 call    PathFinder_Red_RightLeft    ; calculate RED two-distance from RIGHT to LEFT edge
74C8 47          7 851 ld      b, a                        ; save second result
74C9 08          7 852 ex      af, af'                     ; restore first result
74CA 90          7 853 sub     b                           ; subtract both results
74CB C8          7 854 ret     z                           ; if red can't reach his opposite edge, return A = 0
74CC 21 09 61    7 856 ld      hl, CYAN_BOARD_UP_DOWN+9    ; HL points to cyan board up-down address (1st position)
74CF 11 51 61    7 857 ld      de, CYAN_BOARD_DOWN_UP+1    ; DE points to cyan board down-up address (1st position)
74D2 CD F2 74    7 858 call    PathFinder_Potentials       ; calculate cyan potentials
74D5 ED 43 97 61 7 859 ld      (POTENTIALS), bc            ; save cyan potentials
74D9 21 09 64    7 861 ld      hl, RED_BOARD_LEFT_RIGHT+9  ; HL points to red board left-right address (1st position)
74DC 11 51 64    7 862 ld      de, RED_BOARD_RIGHT_LEFT+1  ; DE points to red board right-left address (1st position)
74DF CD F2 74    7 863 call    PathFinder_Potentials       ; calculate red potentials
74E2             7 864 ; ----------------------------------------------------------------------------------------------------------------------
74E2             7 865 ; PathFinder_Evaluation: calculate heuristic evaluation.
74E2             7 866 ; The original evaluation function (from cyan perspective) is described in Jack van Rijswijck's thesis as:
74E2             7 867 ;
74E2             7 868 ;                                       e = M (pC - pR) - (aC - aR)
74E2             7 869 ; where:
74E2             7 870 ;   pC = cyan board potential
74E2             7 871 ;   pR = red board potential
74E2             7 872 ;   aC = cyan attack mobility
74E2             7 873 ;   aR = red attack mobility
74E2             7 874 ;    M = a large number
74E2             7 875 ;
74E2             7 876 ; This adaptation uses an "invert" result to better fit BRAINIAC process.
74E2             7 877 ;
74E2             7 878 ; Input:    B = opponent attack mobility
74E2             7 879 ;           C = opponent board potential
74E2             7 880 ;
74E2             7 881 ; Output:   A = heuristic evaluation
74E2             7 882 ;
74E2             7 883 ; Destroys: E, HL
74E2             7 884 ; ----------------------------------------------------------------------------------------------------------------------
74E2             7 885 PathFinder_Evaluation:
74E2 21 98 61    7 886 ld      hl, POTENTIALS+1            ; HL points to color attack mobility address
74E5 78          7 887 ld      a, b                        ; get opponent's attack mobility
74E6 96          7 888 sub     (hl)                        ; subtract attack mobilities -> (aC - aR)
74E7 5F          7 889 ld      e, a                        ; save the result in E
74E8 2D          7 890 dec     l                           ; move HL to player's board potential address
74E9 79          7 891 ld      a, c                        ; get opponent's board potential
74EA 96          7 892 sub     (hl)                        ; subtract potentials -> (pC - pR)
74EB 87          7 893 add     a, a                        ; multiply by 8 -> M (pC - pR)
74EC 87          7 894 add     a, a
74ED 87          7 895 add     a, a
74EE 93          7 896 sub     e                           ; subtract result of attack mobilities subtraction
74EF             7 897 ; -> M (pC - pR) - (aC - aR)
74EF EE 80       7 898 xor     $80                         ; invert sign for easier further comparative
74F1 C9          7 899 ret                                 ; return A = -1 * (M (pC - pR) - (aC - aR))
74F2             7 901 ; ----------------------------------------------------------------------------------------------------------------------
74F2             7 902 ; PathFinder_Potentials: calculate board potential and attack mobility
74F2             7 903 ;
74F2             7 904 ; * A cell's Cyan potential is defined as the sum of its Cyan two-distance to both cyan edges; its Red potential is the
74F2             7 905 ;   sum of its Red two-distance to both red edges. The board potential is defined as the lowest potential that occurs on
74F2             7 906 ;   the board.
74F2             7 907 ; * The attack mobility is defined for each player as the number of cells that realize that player's board potential.
74F2             7 908 ;
74F2             7 909 ; Input:    HL = cyan board or red board address
74F2             7 910 ;           DE = cyan board or red board address
74F2             7 911 ;
74F2             7 912 ; Output:   B = attack mobility
74F2             7 913 ;           C = board potential
74F2             7 914 ;
74F2             7 915 ; Destroys: A, DE, HL, IYL
74F2             7 916 ; ----------------------------------------------------------------------------------------------------------------------
74F2             7 917 PathFinder_Potentials:
74F2 01 FF 00    7 918 ld      bc, $00FF                   ; initialize attack mobility and board potential
74F5 FD 2E 3D    7 919 ld      iyl, 61                     ; number of cells to be checked (loop counter)
74F8             7 920 Potentials_Loop
74F8 7E          7 921 ld      a, (hl)                     ; get cell's two-distance pointed by HL
74F9 FE 40       7 922 cp      $40                         ; is cell occupied or border?
74FB 30 14       7 923 jr      nc, Potentials_Next         ; yes, skip to next cell
74FD FE 04       7 924 cp      $04                         ; cell distance was not updated?
74FF 38 18       7 925 jr      c, Potentials_Infinite      ; yes, set cell potential as "infinite" and skip
7501 1A          7 926 ld      a, (de)                     ; get cell's two-distance pointed by DE
7502 FE 04       7 927 cp      $04                         ; cell distance was not updated?
7504 38 13       7 928 jr      c, Potentials_Infinite      ; yes, set cell potential as "infinite" and skip
7506 86          7 929 add     a, (hl)                     ; sum both two-distances (calculate cell potential)
7507 77          7 930 ld      (hl), a                     ; save potential in the cell pointed by HL
7508 B9          7 931 cp      c                           ; is the new potential = board potential?
7509 28 05       7 932 jr      z, Potentials_Increment     ; yes, increment attack mobility
750B 30 04       7 933 jr      nc, Potentials_Next         ; if (new potential > board potential) skip to next cell
750D 4F          7 934 ld      c, a                        ; board potential = new potential
750E 06 00       7 935 ld      b, 0                        ; restart attack mobility
7510             7 936 Potentials_Increment
7510 04          7 937 inc     b                           ; increment attack mobility
7511             7 938 Potentials_Next
7511 1C          7 939 inc     e                           ; move to next cell of each board
7512 2C          7 940 inc     l
7513 FD 2D       7 941 dec     iyl                         ; decrement loop counter
7515 C2 F8 74    7 942 jp      nz, Potentials_Loop         ; repeat until end of boards
7518 C9          7 943 ret
7519             7 944 Potentials_Infinite
7519 CB FE       7 945 set     7, (hl)                     ; set cell potential as "infinite"
751B 1C          7 946 inc     e                           ; move to next cell of each board
751C 2C          7 947 inc     l
751D FD 2D       7 948 dec     iyl                         ; decrement loop counter
751F C2 F8 74    7 949 jp      nz, Potentials_Loop         ; repeat until end of boards
7522 C9          7 950 ret
7523             7 952 ; ----------------------------------------------------------------------------------------------------------------------
7523             7 953 ; PathFinder_Candidates: search candidates based on score result and boards potentials
7523             7 954 ;
7523             7 955 ; Input:    A  = -1, 0 or heuristic result
7523             7 956 ;           IX = candidates area address
7523             7 957 ;
7523             7 958 ; Output:   IX = first candidate address
7523             7 959 ;
7523             7 960 ; Uses:     AI_PLAYER (speccy side)
7523             7 961 ;
7523             7 962 ; Destroys: A, A', BC, DE, HL
7523             7 963 ; ----------------------------------------------------------------------------------------------------------------------
7523             7 964 PathFinder_Candidates:
7523 DD 36 00 00 7 965 ld      (ix+0), 0                   ; set candidates endmarker
7527 B7          7 967 or      a                           ; is speccy the winner?
7528 28 3D       7 968 jr      z, Candidates_Winner        ; yes, fill candidates for winner color
752A 3C          7 969 inc     a                           ; is speccy defeated?
752B 28 4E       7 970 jr      z, Candidates_Defeat        ; yes, fill candidates for defeated color
752D             7 972 ; if score is not -1 nor 0, fill candidates from total potentials
752D 21 09 61    7 974 ld      hl, CYAN_BOARD_UP_DOWN+9    ; HL points to cyan board up-down address (1st position)
7530 11 09 64    7 975 ld      de, RED_BOARD_LEFT_RIGHT+9  ; DE points to red board left-right address (1st position)
7533 CD F2 74    7 976 call    PathFinder_Potentials       ; process candidates from total potentials
7536 79          7 978 ld      a, c                        ; set board potential in A
7537 08          7 979 ex      af, af'                     ; save board potential
7538 50          7 980 ld      d, b                        ; store attack mobility
7539 DD 5D       7 981 ld      e, ixl                      ; store candidates position
753B             7 983 ; insert the second best board potentials in candidates area
753B             7 984 Candidates_2ndBest
753B 2E 09       7 985 ld      l, 9                        ; HL points to board potentials address (1st position)
753D 0C          7 986 inc     c                           ; increment board potential
753E 79          7 987 ld      a, c                        ; A = second best potential
753F FE 20       7 988 cp      $20                         ; is potential >= $20? (2nd best max potential)
7541 30 13       7 989 jr      nc, Candidates_2ndBest_Exit ; yes, stop searching 2nd best potential
7543 06 3D       7 991 ld      b, 61                       ; number of cells to be checked (loop counter)
7545             7 992 Candidates_2ndBest_Loop
7545 BE          7 993 cp      (hl)                        ; is current board potential = 2nd best board potential?
7546 C2 4E 75    7 994 jp      nz, Candidates_2ndBest_Next ; no, skip to next potential
7549 DD 2C       7 995 inc     ixl                         ; yes, insert candidate
754B DD 75 00    7 996 ld      (ix+0), l
754E             7 997 Candidates_2ndBest_Next
754E 2C          7 998 inc     l                           ; move HL to next board potential address
754F 10 F4       7 999 djnz    Candidates_2ndBest_Loop     ; repeat for each cell
7551 DD 7D       7 1000 ld      a, ixl                      ; A = current candidates position
7553 BB          7 1001 cp      e                           ; new candidates inserted?
7554 28 E5       7 1002 jr      z, Candidates_2ndBest       ; no, repeat until new candidates inserted
7556             7 1004 Candidates_2ndBest_Exit
7556 42          7 1005 ld      b, d                        ; restore attack mobility
7557 08          7 1006 ex      af, af'                     ; restore board potential
7558             7 1008 ; insert the best board potentials in candidates area
7558             7 1009 Candidates_Best
7558 2E 08       7 1010 ld      l, 8                        ; HL points to board potential address (1st position -1)
755A             7 1011 Candidates_Best_Loop
755A 2C          7 1012 inc     l                           ; move HL to next board potential address
755B BE          7 1013 cp      (hl)                        ; is current board potential equal to best board potential?
755C C2 5A 75    7 1014 jp      nz, Candidates_Best_Loop    ; no, next potential
755F DD 2C       7 1015 inc     ixl                         ; yes, insert candidate
7561 DD 75 00    7 1016 ld      (ix+0), l
7564 10 F4       7 1017 djnz    Candidates_Best_Loop        ; repeat for each cell
7566 C9          7 1018 ret
7567             7 1020 ; ----------------------------------------------------------------------------------------------------------------------
7567             7 1021 ; Fill candidates for winner color
7567             7 1022 ; ----------------------------------------------------------------------------------------------------------------------
7567             7 1023 Candidates_Winner
7567 3A 99 61    7 1024 ld      a, (AI_PLAYER)              ; check speccy side
756A B7          7 1025 or      a                           ; is it FRIEND?
756B EA 9B 75    7 1026 jp      pe, Candidates_Red_Potential; no, fill candidates from red potentials
756E 21 09 61    7 1028 ld      hl, CYAN_BOARD_UP_DOWN+9    ; HL points to cyan board up-down address (1st position)
7571 11 51 61    7 1029 ld      de, CYAN_BOARD_DOWN_UP+1    ; DE points to cyan board down-up address (1st position)
7574 CD F2 74    7 1030 call    PathFinder_Potentials       ; calculate cyan potentials
7577 79          7 1032 ld      a, c                        ; set board potential in A
7578 C3 58 75    7 1033 jp      Candidates_Best             ; fill only the best candidates
757B             7 1035 ; ----------------------------------------------------------------------------------------------------------------------
757B             7 1036 ; Fill candidates for defeated color
757B             7 1037 ; ----------------------------------------------------------------------------------------------------------------------
757B             7 1038 Candidates_Defeat
757B 3A 99 61    7 1039 ld      a, (AI_PLAYER)              ; check speccy side
757E B7          7 1040 or      a                           ; is it FRIEND?
757F E2 95 75    7 1041 jp      po, Candidates_Red          ; yes, fill candidates from red potentials
7582             7 1043 ; if RED is defeated, candidates are chosen from cyan board potentials
7582 CD 49 71    7 1045 call    PathFinder_Cyan_UpDown      ; calculate cyan two-distance from UP to DOWN edge
7585 CD 85 71    7 1046 call    PathFinder_Cyan_DownUp      ; calculate cyan two-distance from DOWN to UP edge
7588 21 09 61    7 1047 ld      hl, CYAN_BOARD_UP_DOWN+9    ; HL points to cyan board up-down address (1st position)
758B 11 51 61    7 1048 ld      de, CYAN_BOARD_DOWN_UP+1    ; DE points to cyan board down-up address (1st position)
758E CD F2 74    7 1049 call    PathFinder_Potentials       ; calculate cyan potentials
7591 79          7 1051 ld      a, c                        ; set board potential in A
7592 C3 58 75    7 1052 jp      Candidates_Best             ; fill only the best candidates
7595             7 1054 ; if CYAN is defeated, candidates are chosen from red board potentials
7595             7 1055 Candidates_Red
7595 CD BD 71    7 1056 call    PathFinder_Red_LeftRight    ; calculate red two-distance from LEFT to RIGHT edge
7598 CD FF 71    7 1057 call    PathFinder_Red_RightLeft    ; calculate red two-distance from RIGHT to LEFT edge
759B             7 1058 Candidates_Red_Potential
759B 21 09 64    7 1059 ld      hl, RED_BOARD_LEFT_RIGHT+9  ; HL points to red board left-right address (1st pos.)
759E 11 51 64    7 1060 ld      de, RED_BOARD_RIGHT_LEFT+1  ; DE points to red board right-left address (1st position)
75A1 CD F2 74    7 1061 call    PathFinder_Potentials       ; calculate red potentials
75A4 79          7 1063 ld      a, c                        ; set board potential in A
75A5 C3 58 75    7 1064 jp      Candidates_Best             ; fill only the best candidates
75A8             7 1066 ; ----------------------------------------------------------------------------------------------------------------------
75A8             7 1067 ; PathFinder_VictoryPath: calculate current player victory path
75A8             7 1068 ;
75A8             7 1069 ; Input:    -
75A8             7 1070 ;
75A8             7 1071 ; Output:   A = -1, if there isn't a victory path
75A8             7 1072 ;           A = start position (-1) of the victory path, otherwise
75A8             7 1073 ;
75A8             7 1074 ; Uses:     TOKEN_COLOR (current token color)
75A8             7 1075 ;
75A8             7 1076 ; Destroys: BC, DE, HL, IY
75A8             7 1077 ; ----------------------------------------------------------------------------------------------------------------------
75A8             7 1078 PathFinder_VictoryPath:
75A8 3A 9E 61    7 1079 ld      a, (TOKEN_COLOR)            ; get current token color
75AB FE 05       7 1080 cp      CYAN_COLOR                  ; if it is cyan, check victory path for cyan player
75AD 28 0C       7 1081 jr      z, PathFinder_VictoryPath_Cyan
75AF CD BD 71    7 1083 call    PathFinder_Red_LeftRight    ; execute Path_Finder RED two-distance from LEFT to RIGHT
75B2 21 45 64    7 1084 ld      hl, RED_BOARD_LEFT_RIGHT+69 ; HL points to red board left-right address (last position)
75B5 CD C7 75    7 1085 call    PathFinder_PrepareBoard     ; prepare board to calculate victory path
75B8 C3 C6 71    7 1086 jp      PathFinder_Red_CheckPath    ; calculate RED victory path
75BB             7 1088 PathFinder_VictoryPath_Cyan
75BB CD 49 71    7 1089 call    PathFinder_Cyan_UpDown      ; execute Path_Finder CYAN two-distance from UP to DOWN
75BE 21 45 61    7 1090 ld      hl, CYAN_BOARD_UP_DOWN+69   ; HL points to cyan board up-down address (last position)
75C1 CD C7 75    7 1091 call    PathFinder_PrepareBoard     ; prepare board to calculate victory path
75C4 C3 52 71    7 1092 jp      PathFinder_Cyan_CheckPath   ; calculate CYAN victory path
75C7             7 1094 ; ----------------------------------------------------------------------------------------------------------------------
75C7             7 1095 ; PathFinder_PrepareBoard: update '[color]_BOARD_XX_YY', changing VICTORY+$40 to 1, everything else to ENEMY.
75C7             7 1096 ; Immediately after 'Path_Finder_[color]' returned VICTORY, you can execute this routine, then execute 'Path_Finder_
75C7             7 1097 ; [color]' again to find a victory path.
75C7             7 1098 ;
75C7             7 1099 ; Coded by Einar Saukas
75C7             7 1100 ;
75C7             7 1101 ; Input:    HL = pointer to last position of [color]_BOARD
75C7             7 1102 ;
75C7             7 1103 ; Output:   -
75C7             7 1104 ;
75C7             7 1105 ; Destroys: A, BC, HL
75C7             7 1106 ; ----------------------------------------------------------------------------------------------------------------------
75C7             7 1107 PathFinder_PrepareBoard:
75C7 3E 43       7 1108 ld      a, VICTORY+$40              ; set victory distance + friendly flag
75C9 0E 07       7 1109 ld      c, 7                        ; 7 rows
75CB             7 1110 PrepareBoard_Row
75CB 06 07       7 1111 ld      b, 7                        ; 7 columns
75CD             7 1112 PrepareBoard_Column
75CD BE          7 1113 cp      (hl)                        ; is it win condition?
75CE 36 01       7 1114 ld      (hl), 1                     ; save 1 by default
75D0 28 02       7 1115 jr      z, PrepareBoard_Next        ; yes, next position
75D2 36 7E       7 1116 ld      (hl), ENEMY                 ; no, save ENEMY
75D4             7 1117 PrepareBoard_Next
75D4 2D          7 1118 dec     l                           ; HL points to next board position
75D5 10 F6       7 1119 djnz    PrepareBoard_Column         ; repeat for each column
75D7 2D          7 1121 dec     l                           ; skip borders
75D8 2D          7 1122 dec     l
75D9 0D          7 1123 dec     c                           ; decrement rows
75DA 20 EF       7 1124 jr      nz, PrepareBoard_Row        ; repeat for each row
75DC C9          7 1125 ret
75DD             7 1127 ; ----------------------------------------------------------------------------------------------------------------------
75DD             7 1128 ; PathFinder_BrightPath: animate and highlight the hexagons included in shortest path when match ends
75DD             7 1129 ;
75DD             7 1130 ; Input:    A  = start position of the victory path
75DD             7 1131 ;           HL = [color]_QUEUE_AREA address
75DD             7 1132 ;
75DD             7 1133 ; Output:   -
75DD             7 1134 ;
75DD             7 1135 ; Uses:     TOKEN_COLOR (current token color)
75DD             7 1136 ;
75DD             7 1137 ; Destroys: A, BC, DE, HL, IX
75DD             7 1138 ; ----------------------------------------------------------------------------------------------------------------------
75DD             7 1139 PathFinder_BrightPath:
75DD 44          7 1140 ld      b, h                        ; store high byte of QUEUE_AREA address
75DE 21 9E 61    7 1142 ld      hl, TOKEN_COLOR             ; get current token color address
75E1 CB F6       7 1143 set     6, (hl)                     ; switch on bright attribute
75E3 21 CD 6D    7 1144 ld      hl, @Token_Delay+1          ; set delay duration for animate hexagons
75E6 36 04       7 1145 ld      (hl), 4
75E8 60          7 1147 ld      h, b                        ; restore high byte of QUEUE_AREA address
75E9 6F          7 1148 ld      l, a                        ; move HL to the start position of the victory path
75EA 24          7 1149 inc     h
75EB 4E          7 1150 ld      c, (hl)                     ; set current victory path length in C
75EC 06 03       7 1151 ld      b, VICTORY                  ; set victory length in B
75EE 18 1C       7 1152 jr      BrightPath_Position         ; animate and highlight the hexagon position
75F0             7 1154 BrightPath_Neighbor
75F0 2C          7 1155 inc     l                           ; move HL to left neighbor address
75F1 BE          7 1156 cp      (hl)                        ; is it the same as current victory path length?
75F2 28 18       7 1157 jr      z, BrightPath_Position      ; yes, animate and highlight the hexagon position
75F4 2D          7 1158 dec     l                           ; move HL to right neighbor address
75F5 2D          7 1159 dec     l
75F6 BE          7 1160 cp      (hl)                        ; is it the same as current victory path length?
75F7 28 13       7 1161 jr      z, BrightPath_Position      ; yes, animate and highlight the hexagon position
75F9 11 F8 FF    7 1162 ld      de, -WIDTH                  ; move HL to upper-right neighbor address
75FC 19          7 1163 add     hl, de
75FD BE          7 1164 cp      (hl)                        ; is it the same as current victory path length?
75FE 28 0C       7 1165 jr      z, BrightPath_Position      ; yes, animate and highlight the hexagon position
7600 2C          7 1166 inc     l                           ; move HL to upper-left neighbor address
7601 BE          7 1167 cp      (hl)                        ; is it the same as current victory path length?
7602 28 08       7 1168 jr      z, BrightPath_Position      ; yes, animate and highlight the hexagon position
7604 11 10 00    7 1169 ld      de, WIDTH*2                 ; move HL to lower-right neighbor address
7607 19          7 1170 add     hl, de
7608 BE          7 1171 cp      (hl)                        ; is it the same as current victory path length?
7609 28 01       7 1172 jr      z, BrightPath_Position      ; yes, animate and highlight the hexagon position
760B 2C          7 1173 inc     l                           ; move HL to lower-left neighbor address
760C             7 1174 BrightPath_Position
760C C5          7 1175 push    bc                          ; store current victory path length
760D E5          7 1176 push    hl                          ; store current position pointer
760E CD 7D 6D    7 1178 call    Main_Board2Indexes          ; convert a board position into a board indexes
7611 CD B9 6D    7 1179 call    Draw_Token                  ; animate hexagon sprite on the screen
7614 DD 21 E7 64 7 1180 ld      ix, TOKEN_FX                ; IX points to token tone parameters address
7618 CD D2 76    7 1181 call    Sound_FX                    ; play sound effect
761B E1          7 1183 pop     hl                          ; restore current position pointer
761C C1          7 1184 pop     bc                          ; restore current victory path length
761D 0D          7 1186 dec     c                           ; decrement current victory path length
761E 79          7 1187 ld      a, c                        ; set current victory path length in A
761F B8          7 1188 cp      b                           ; has reached victory length?
7620 20 CE       7 1189 jr      nz, BrightPath_Neighbor     ; repeat for each neighbor until reach victory length
7622 21 9E 61    7 1191 ld      hl, TOKEN_COLOR             ; get current token color address
7625 CB B6       7 1192 res     6, (hl)                     ; switch off bright attribute
7627 C9          7 1193 ret

; File #8: C:\Users\Antonio\source\repos\Hex\Z80CodeFiles\Timer.z80asm

7628             8 1 ; ----------------------------------------------------------------------------------------------------------------------
7628             8 2 ; Timer.z80asm
7628             8 3 ; Coded by Antonio Luque
7628             8 4 ;
7628             8 5 ; Based on disassembly of "Chess" (c) 1982 Psion
7628             8 6 ; ----------------------------------------------------------------------------------------------------------------------
7628             8 8 ; ----------------------------------------------------------------------------------------------------------------------
7628             8 9 ; Timer_Interrupt: interrupt routine to manage players' timers
7628             8 10 ;
7628             8 11 ; Input:    -
7628             8 12 ;
7628             8 13 ; Output:   -
7628             8 14 ;
7628             8 15 ; Uses:     TIMER_FLAG (0 = timer stopped, 1 = cyan timer on, 2 = red timer on)
7628             8 16 ;
7628             8 17 ; Destroys: BC', DE', HL'
7628             8 18 ; ----------------------------------------------------------------------------------------------------------------------
7628             8 19 Timer_Interrupt:
7628 F5          8 20 push    af                          ; store AF register
7629 D9          8 21 exx                                 ; store BC, DE and HL registers
762A 3A E8 62    8 23 ld      a, (TIMER_FLAG)             ; check timer flag
762D B7          8 24 or      a                           ; is timer stopped?
762E CA 57 76    8 25 jp      z, Timer_Exit               ; yes, exit routine
7631 21 EC 62    8 27 ld      hl, RED_TIMER               ; HL points to red's interrupt counter address
7634 3D          8 28 dec     a                           ; is red timer on?
7635 C2 3B 76    8 29 jp      nz, Timer_Counters          ; yes, check interrupt counter 
7638 21 E9 62    8 30 ld      hl, CYAN_TIMER              ; HL points to cyan's interrupt counter address
763B             8 31 Timer_Counters
763B 35          8 32 dec     (hl)                        ; decrement interrupt counter
763C C2 57 76    8 33 jp      nz, Timer_Exit              ; if not 0, exit routine
763F 36 32       8 35 ld      (hl), 50                    ; restart interrupt counter
7641 23          8 36 inc     hl                          ; move HL to seconds counter address
7642 3E 01       8 37 ld      a, 1                        ; increment seconds counter
7644 86          8 38 add     a, (hl)
7645 27          8 39 daa                                 ; convert to BCD (Binary-Coded-Decimal)
7646 77          8 40 ld      (hl), a                     ; store seconds
7647 FE 60       8 41 cp      $60                         ; 60 seconds reached?
7649 C2 54 76    8 42 jp      nz, Timer_Show              ; no, show timer
764C 36 00       8 43 ld      (hl), 0                     ; restart seconds counter
764E 23          8 44 inc     hl                          ; move HL to minutes counter address
764F 3E 01       8 45 ld      a, 1                        ; increment minutes counter
7651 86          8 46 add     a, (hl)
7652 27          8 47 daa                                 ; convert to BCD (Binary-Coded-Decimal)
7653 77          8 48 ld      (hl), a                     ; store minutes
7654             8 49 Timer_Show
7654 CD 5B 76    8 50 call    Timer_Display               ; display timer on the screen
7657             8 51 Timer_Exit
7657 D9          8 52 exx                                 ; restore BC, DE and HL registers
7658 F1          8 53 pop     af                          ; restore AF register
7659 FB          8 55 ei                                  ; enable interrupts
765A C9          8 56 ret
765B             8 58 ; ----------------------------------------------------------------------------------------------------------------------
765B             8 59 ; Timer_Display: display a timer on the screen
765B             8 60 ;
765B             8 61 ; Input:    -
765B             8 62 ;
765B             8 63 ; Output:   -
765B             8 64 ;
765B             8 65 ; Uses:     TIMER_FLAG (0 = timer stopped, 1 = cyan timer on, 2 = red timer on)
765B             8 66 ;
765B             8 67 ; Destroys: A, BC, DE, HL
765B             8 68 ; ----------------------------------------------------------------------------------------------------------------------
765B             8 69 Timer_Display:
765B 01 EE 62    8 70 ld      bc, RED_TIMER+2             ; BC points to red's minutes counter address
765E 11 E2 48    8 71 ld      de, $48E2                   ; DE points to red's minutes screen address
7661 3A E8 62    8 72 ld      a, (TIMER_FLAG)             ; check timer flag
7664 3D          8 73 dec     a                           ; is cyan timer on?
7665 C2 6E 76    8 74 jp      nz, Timer_Display_Min       ; no, jump to display minutes counter
7668 01 EB 62    8 75 ld      bc, CYAN_TIMER+2            ; BC points to cyan's minutes counter address
766B 11 78 40    8 76 ld      de, $4078                   ; DE points to cyan's minutes screen address
766E             8 77 Timer_Display_Min
766E CD 73 76    8 78 call    Timer_Display_MinSec        ; display minutes counter on screen
7671 0B          8 79 dec     bc                          ; BC points to seconds counter address
7672 1C          8 80 inc     e                           ; DE points to seconds screen address
7673             8 81 Timer_Display_MinSec:
7673 0A          8 82 ld      a, (bc)                     ; set min/sec counter in A
7674 1F          8 83 rra                                 ; move tens digit to the first 4th bits of A
7675 1F          8 84 rra
7676 1F          8 85 rra
7677 1F          8 86 rra
7678 CD 7C 76    8 87 call    Timer_Display_Digit         ; display tens digit on screen
767B 0A          8 88 ld      a, (bc)                     ; set min/sec counter in A 
767C             8 89 Timer_Display_Digit:
767C E6 0F       8 90 and     %00001111                   ; discard the last 4th bits of the digit
767E D5          8 91 push    de                          ; store digit screen address
767F 21 97 64    8 93 ld      hl, TIMER_DIGITS            ; HL points to timer digits (graphics) address
7682 87          8 94 add     a, a                        ; a digit is 8 bytes long
7683 87          8 95 add     a, a
7684 87          8 96 add     a, a
7685 85          8 97 add     a, l                        ; set digit index in HL
7686 6F          8 98 ld      l, a
7687 7E          8 100 ld      a, (hl)                     ; get digit tile
7688 12          8 101 ld      (de), a                     ; put it on screen address
7689 14          8 102 inc     d                           ; move DE to next pixel-line address
768A 2C          8 103 inc     l                           ; move HL to next digit tile address
768B 7E          8 104 ld      a, (hl)                     ; (repeat 7 more times)
768C 12          8 105 ld      (de), a
768D 14          8 106 inc     d
768E 2C          8 107 inc     l
768F 7E          8 108 ld      a, (hl)
7690 12          8 109 ld      (de), a
7691 14          8 110 inc     d
7692 2C          8 111 inc     l
7693 7E          8 112 ld      a, (hl)
7694 12          8 113 ld      (de), a
7695 14          8 114 inc     d
7696 2C          8 115 inc     l
7697 7E          8 116 ld      a, (hl)
7698 12          8 117 ld      (de), a
7699 14          8 118 inc     d
769A 2C          8 119 inc     l
769B 7E          8 120 ld      a, (hl)
769C 12          8 121 ld      (de), a
769D 14          8 122 inc     d
769E 2C          8 123 inc     l
769F 7E          8 124 ld      a, (hl)
76A0 12          8 125 ld      (de), a
76A1 14          8 126 inc     d
76A2 2C          8 127 inc     l
76A3 7E          8 128 ld      a, (hl)
76A4 12          8 129 ld      (de), a
76A5 D1          8 131 pop     de                          ; restore digit screen address
76A6 1C          8 132 inc     e                           ; move screen address to next column
76A7 C9          8 133 ret
76A8             8 135 ; ----------------------------------------------------------------------------------------------------------------------
76A8             8 136 ; Timer_Display_All: display cyan and red timers
76A8             8 137 ;
76A8             8 138 ; Input:    -
76A8             8 139 ;
76A8             8 140 ; Output:   -
76A8             8 141 ;
76A8             8 142 ; Uses:     TIMER_FLAG (0 = timer stopped, 1 = cyan timer on, 2 = red timer on)
76A8             8 143 ;
76A8             8 144 ; Destroys: BC, DE, HL
76A8             8 145 ; ----------------------------------------------------------------------------------------------------------------------
76A8             8 146 Timer_Display_All:
76A8 3E 01       8 147 ld      a, 1                        ; set cyan timer on
76AA 32 E8 62    8 148 ld      (TIMER_FLAG), a
76AD CD 5B 76    8 149 call    Timer_Display               ; display cyan timer
76B0 3E 02       8 151 ld      a, 2                        ; set red timer on
76B2 32 E8 62    8 152 ld      (TIMER_FLAG), a
76B5 CD 5B 76    8 153 call    Timer_Display               ; display red timer
76B8 AF          8 155 xor     a                           ; stop timers
76B9 32 E8 62    8 156 ld      (TIMER_FLAG), a
76BC C9          8 157 ret
76BD             8 159 ; ----------------------------------------------------------------------------------------------------------------------
76BD             8 160 ; Timer_Reset: initialize cyan and red timers
76BD             8 161 ;
76BD             8 162 ; Input:    -
76BD             8 163 ;
76BD             8 164 ; Output:   -
76BD             8 165 ;
76BD             8 166 ; Destroys: HL
76BD             8 167 ; ----------------------------------------------------------------------------------------------------------------------
76BD             8 168 Timer_Reset:
76BD 21 E9 62    8 169 ld      hl, CYAN_TIMER              ; HL points to cyan timer address
76C0 36 32       8 171 ld      (hl), 50                    ; set interrupt counter (1/50 seconds)
76C2 23          8 172 inc     hl                          ; move HL to cyan's seconds counter address
76C3 36 00       8 173 ld      (hl), 0                     ; reset seconds counter
76C5 23          8 174 inc     hl                          ; move HL to cyan's minutes counter address
76C6 36 00       8 175 ld      (hl), 0                     ; reset minutes counter
76C8 23          8 176 inc     hl                          ; move HL to red's interrupt counter
76C9 36 32       8 178 ld      (hl), 50                    ; set interrupt counter (1/50 seconds)
76CB 23          8 179 inc     hl                          ; move HL to red's seconds counter address
76CC 36 00       8 180 ld      (hl), 0                     ; reset seconds counter
76CE 23          8 181 inc     hl                          ; move HL to red's minutes counter address
76CF 36 00       8 182 ld      (hl), 0                     ; reset minutes counter
76D1 C9          8 183 ret

; File #9: C:\Users\Antonio\source\repos\Hex\Z80CodeFiles\Sound.z80asm

76D2             9 1 ; ----------------------------------------------------------------------------------------------------------------------
76D2             9 2 ; Sound.z80asm
76D2             9 3 ; Coded with BeepFX player tool by Shiru: https://shiru.untergrund.net/software.shtml
76D2             9 4 ;
76D2             9 5 ; Adapted for Hex game by Antonio Luque
76D2             9 6 ; ----------------------------------------------------------------------------------------------------------------------
76D2             9 8 ; ----------------------------------------------------------------------------------------------------------------------
76D2             9 9 ; Sound_FX: play a sound effect (tone) defined by many parameters
76D2             9 10 ; 
76D2             9 11 ; Input:    IX = tone parameters address
76D2             9 12 ;
76D2             9 13 ; Output:   -
76D2             9 14 ;
76D2             9 15 ; Destroys: A, BC, DE, HL, IY
76D2             9 16 ; ----------------------------------------------------------------------------------------------------------------------
76D2             9 17 Sound_FX:
76D2 F3          9 18 di                                  ; disable interrupts
76D3 DD 4E 00    9 20 ld      c, (ix+0)                   ; BC = frames
76D6 DD 46 01    9 21 ld      b, (ix+1)
76D9 DD 5E 02    9 22 ld      e, (ix+2)                   ; DE = frame length
76DC DD 56 03    9 23 ld      d, (ix+3)
76DF D5          9 24 push    de                          ; store frame length in IY
76E0 FD E1       9 25 pop     iy
76E2 DD 5E 04    9 26 ld      e, (ix+4)                   ; DE = pitch
76E5 DD 56 05    9 27 ld      d, (ix+5)
76E8 21 00 00    9 28 ld      hl, 0                       ; reset HL
76EB             9 30 Sound_FX_Frames
76EB C5          9 31 push    bc                          ; store frames
76EC FD E5       9 32 push    iy                          ; restore frame length in BC
76EE C1          9 33 pop     bc
76EF             9 34 Sound_FX_FrameLength
76EF 19          9 35 add     hl, de                      ; HL = incremented pitch
76F0 7C          9 36 ld      a, h                        ; compares with fixed duty cycle ($80 for 50% square wave)
76F1 FE 80       9 37 cp      $80                         ; if (incremented pitch < duty cycle)
76F3 9F          9 38 sbc     a, a                        ;    { A = %11111111 } else { A = %00000000 }
76F4 E6 10       9 39 and     %00010000                   ; toggling bit 4 controls the internal speaker
76F6 F6 00       9 40 or      0                           ; keep border unchanged, dummy (7t)
76F8 D3 FE       9 41 out     ($FE), a                    ; send bit to internal speaker
76FA 3A 00 00    9 42 ld      a, (0)                      ; dummy (13t)
76FD 0B          9 43 dec     bc                          ; decrement frame length
76FE 78          9 44 ld      a, b                        ; check frame length
76FF B1          9 45 or      c                           ; frame length = 0?
7700 C2 EF 76    9 46 jp      nz, Sound_FX_FrameLength    ; no, repeat "frame length" times (loop = 88t)
7703 DD 4E 06    9 48 ld      c, (ix+6)                   ; BC = pitch slide
7706 DD 46 07    9 49 ld      b, (ix+7)
7709 EB          9 50 ex      de, hl                      ; HL = current pitch
770A 09          9 51 add     hl, bc                      ; increment pitch with pitch slide
770B EB          9 52 ex      de, hl                      ; DE = new pitch
770C C1          9 54 pop     bc                          ; restore frames
770D 0B          9 55 dec     bc                          ; decrement frames
770E 78          9 56 ld      a, b                        ; check frames
770F B1          9 57 or      c                           ; frames = 0?
7710 20 D9       9 58 jr      nz, Sound_FX_Frames         ; no, repeat "frames" times
7712 FB          9 60 ei                                  ; enable interrupts
7713 C9          9 61 ret

; File #10: C:\Users\Antonio\source\repos\Hex\Z80CodeFiles\Screen.z80asm

7714             10 1 ; ----------------------------------------------------------------------------------------------------------------------
7714             10 2 ; Screen.z80asm
7714             10 3 ; Coded by Antonio Luque
7714             10 4 ; ----------------------------------------------------------------------------------------------------------------------
7714             10 6 BLUE_INK                EQU     %00000001                   ; attributes: flash 0, bright 0, paper 0, ink 1
7714             10 7 BLUE_PAPER              EQU     %00001000                   ; attributes: flash 0, bright 0, paper 1, ink 0
7714             10 8 WHITE_PAPER             EQU     %00111000                   ; attributes: flash 0, bright 0, paper 7, ink 0
7714             10 9 WHITE                   EQU     %00000111                   ; attributes: flash 0, bright 0, paper 0, ink 7
7714             10 10 BRIGHT                  EQU     %01000000                   ; mask to apply bright to attributes
7714             10 11 FLASH                   EQU     %10000000                   ; mask to apply flash to attributes
7714             10 12 WHITE_FLASH0            EQU     WHITE+BRIGHT                ; attributes: flash 0, bright 1, paper 0, ink 7
7714             10 13 WHITE_FLASH1            EQU     WHITE+BRIGHT+FLASH          ; attributes: flash 1, bright 1, paper 0, ink 7
7714             10 15 ; ----------------------------------------------------------------------------------------------------------------------
7714             10 16 ; Screen_Clear: fill in black the whole screen area and attributes area
7714             10 17 ;
7714             10 18 ; Input:    -
7714             10 19 ;
7714             10 20 ; Output:   -
7714             10 21 ;
7714             10 22 ; Destroys: BC, DE, HL
7714             10 23 ; ----------------------------------------------------------------------------------------------------------------------
7714             10 24 Screen_Clear:
7714 21 00 40    10 25 ld      hl, $4000                   ; HL points to start of the screen address
7717 11 01 40    10 26 ld      de, $4001                   ; DE points to next byte of the screen address
771A 75          10 27 ld      (hl), l                     ; set first pixel-byte in black
771B 01 FF 1A    10 28 ld      bc, 6144-1+768              ; length of screen area (-1 already set) + attributes area 
771E ED B0       10 29 ldir                                ; fill the rest of screen area and attributes area in black
7720 C9          10 30 ret
7721             10 32 ; ----------------------------------------------------------------------------------------------------------------------
7721             10 33 ; Screen_Letters: draw the two rows of letters on the screen (a..g)
7721             10 34 ;
7721             10 35 ; Input:    -
7721             10 36 ;
7721             10 37 ; Output:   -
7721             10 38 ;
7721             10 39 ; Destroys: A, BC, DE, HL, IX
7721             10 40 ; ----------------------------------------------------------------------------------------------------------------------
7721             10 41 Screen_Letters:
7721 21 66 45    10 42 ld      hl, $4566                   ; HL points to first letter screen address (top row)
7724 DD 21 66 58 10 43 ld      ix, $5866                   ; IX points to first letter attribute address (top row)
7728 CD 32 77    10 44 call    Screen_Letters_Row          ; draw top row of letters
772B 21 6D 51    10 45 ld      hl, $516D                   ; HL points to first letter screen address (bottom row)
772E DD 21 6D 5A 10 46 ld      ix, $5A6D                   ; IX points to first letter attribute address (bottom row)
7732             10 47 Screen_Letters_Row:
7732 11 5E 66    10 48 ld      de, LETTER_SPRITES          ; DE points to letter sprites address
7735 06 07       10 49 ld      b, 7                        ; number of letters (loop counter)
7737             10 50 Screen_Letter_Loop
7737 E5          10 51 push    hl                          ; store letter screen address
7738 CD F1 6D    10 52 call    Draw_Sprite_LetterNum       ; draw letter at screen address
773B E1          10 53 pop     hl                          ; restore letter screen address
773C 2C          10 54 inc     l                           ; move HL to next screen address
773D 2C          10 55 inc     l
773E DD 36 00 05 10 56 ld      (ix+0), CYAN_COLOR          ; set letter color (2 bytes)
7742 DD 36 20 05 10 57 ld      (ix+32), CYAN_COLOR
7746 DD 2C       10 58 inc     ixl                         ; move IX to next attribute address
7748 DD 2C       10 59 inc     ixl
774A 10 EB       10 60 djnz    Screen_Letter_Loop          ; repeat for each letter
774C C9          10 61 ret
774D             10 63 ; ----------------------------------------------------------------------------------------------------------------------
774D             10 64 ; Screen_Numbers: draw the two columns of numbers on the screen (1-7)
774D             10 65 ;
774D             10 66 ; Input:    -
774D             10 67 ;
774D             10 68 ; Output:   -
774D             10 69 ;
774D             10 70 ; Destroys: A, BC, DE, HL, IX, IY
774D             10 71 ; ----------------------------------------------------------------------------------------------------------------------
774D             10 72 Screen_Numbers:
774D 11 A4 66    10 73 ld      de, NUMBER_SPRITES          ; DE points to numbers sprites
7750 FD 21 EF 62 10 74 ld      iy, NUMBER_SCREEN           ; IY points to numbers screen addresses
7754 DD 21 A5 58 10 75 ld      ix, $58A5                   ; IX points to first number attribute address
7758 06 07       10 76 ld      b, 7                        ; number of numbers (loop counter)
775A             10 77 Screen_Number_Loop
775A FD 6E 00    10 78 ld      l, (iy+0)                   ; HL points to number screen address
775D FD 66 01    10 79 ld      h, (iy+1)
7760 E5          10 80 push    hl                          ; store pointer to number screen address
7761 D5          10 81 push    de                          ; store pointer to sprite address
7762 CD F1 6D    10 82 call    Draw_Sprite_LetterNum       ; draw number at screen address
7765 D1          10 83 pop     de                          ; restore pointer to sprite address
7766 E1          10 84 pop     hl                          ; restore pointer to number screen address
7767 DD 36 00 02 10 85 ld      (ix+0), RED_COLOR           ; set number color (2 bytes)
776B DD 36 20 02 10 86 ld      (ix+32), RED_COLOR
776F 7D          10 87 ld      a, l                        ; move HL to screen address of the 2nd column
7770 C6 0F       10 88 add     a, 15
7772 6F          10 89 ld      l, a
7773 CD F1 6D    10 90 call    Draw_Sprite_LetterNum       ; draw number at screen address
7776 DD 36 0F 02 10 91 ld      (ix+15), RED_COLOR          ; set number color (2 bytes)
777A DD 36 2F 02 10 92 ld      (ix+47), RED_COLOR
777E 78          10 93 ld      a, b                        ; save loop counter
777F 01 41 00    10 94 ld      bc, 65                      ; displacement of next attribute address
7782 DD 09       10 95 add     ix, bc                      ; move IX to next attribute address
7784 FD 23       10 96 inc     iy                          ; move IY to next number screen address
7786 FD 23       10 97 inc     iy
7788 47          10 98 ld      b, a                        ; restore loop counter
7789 10 CF       10 99 djnz    Screen_Number_Loop          ; repeat for each number
778B C9          10 100 ret
778C             10 102 ; ----------------------------------------------------------------------------------------------------------------------
778C             10 103 ; Screen_Frame: draw the screen frame on the screen
778C             10 104 ;
778C             10 105 ; Input:    -
778C             10 106 ;
778C             10 107 ; Output:   -
778C             10 108 ;
778C             10 109 ; Destroys: A, BC, DE, HL, IX
778C             10 110 ; ----------------------------------------------------------------------------------------------------------------------
778C             10 111 Screen_Frame:
778C 11 28 62    10 112 ld      de, STR_LEVELTEXT           ; DE points to "Level" string address
778F 21 09 40    10 113 ld      hl, $4009                   ; HL points to screen address of the string
7792 CD 5B 6F    10 114 call    Print_String                ; print "Level"
7795 CD D1 77    10 115 call    Screen_Vertical_Bars        ; draw the vertical bars of frame
7798 01 8D 62    10 117 ld      bc, FRAME_MAP               ; BC points to the frame tiles indexes
779B 21 00 40    10 118 ld      hl, $4000                   ; HL points to the screen address of the up-border
779E CD A4 77    10 119 call    Screen_Frame_Border         ; draw up-border
77A1 21 E0 50    10 120 ld      hl, $50E0                   ; HL points to the screen address of the bottom-border
77A4             10 121 Screen_Frame_Border:
77A4 DD 2E 20    10 122 ld      ixl, 32                     ; border width in bytes (loop counter)
77A7             10 123 Screen_Frame_Loop
77A7 0A          10 124 ld      a, (bc)                     ; get tile index
77A8 FE FF       10 125 cp      -1                          ; is it -1?
77AA 28 06       10 126 jr      z, Screen_Frame_Next        ; yes, there is no tile to print
77AC 11 0E 65    10 127 ld      de, FRAME_TILES             ; DE points to tiles array
77AF CD 6B 6F    10 128 call    Print_Tile                  ; print frame tile
77B2             10 129 Screen_Frame_Next
77B2 2C          10 130 inc     l                           ; HL points to the next screen address (next column)
77B3 03          10 131 inc     bc                          ; BC points to the next tile index
77B4 DD 2D       10 132 dec     ixl                         ; decrement loop counter
77B6 20 EF       10 133 jr      nz, Screen_Frame_Loop       ; repeat for each tile
77B8 DD 21 07 58 10 135 ld      ix, $5807                   ; IX points to the "concave left" tile screen position
77BC DD 36 00 08 10 136 ld      (ix+0), BLUE_PAPER          ; color tile
77C0 DD 36 0A 08 10 137 ld      (ix+10), BLUE_PAPER         ; color "concave right" tile
77C4 DD 21 F1 5A 10 138 ld      ix, $5AF1                   ; IX points to the "convex left" tile screen position
77C8 DD 36 00 01 10 139 ld      (ix+0), BLUE_INK            ; color tile
77CC DD 36 04 01 10 140 ld      (ix+4), BLUE_INK            ; color "convex right" tile
77D0 C9          10 141 ret
77D1             10 143 ; ----------------------------------------------------------------------------------------------------------------------
77D1             10 144 ; Screen_Vertical_Bars: draw the vertical bars of the frame on the screen
77D1             10 145 ;
77D1             10 146 ; Input:    -
77D1             10 147 ;
77D1             10 148 ; Output:   -
77D1             10 149 ;
77D1             10 150 ; Destroys: A, BC, HL
77D1             10 151 ; ----------------------------------------------------------------------------------------------------------------------
77D1             10 152 Screen_Vertical_Bars:
77D1 21 20 40    10 153 ld      hl, $4020                   ; HL points to left bar screen address
77D4 CD DA 77    10 154 call    Screen_Vertical_Bar         ; draw left bar
77D7 21 3F 40    10 155 ld      hl, $403F                   ; HL points to right bar screen address
77DA             10 156 Screen_Vertical_Bar:
77DA 06 B0       10 157 ld      b, 176                      ; number of pixel lines (loop counter)
77DC             10 158 Screen_Vertical_Loop
77DC 36 3C       10 159 ld      (hl), %00111100             ; draw pixel byte of bar
77DE CD FD 6D    10 160 call    Draw_Down_PixelLine         ; move HL to the next pixel-line address
77E1 10 F9       10 161 djnz    Screen_Vertical_Loop        ; repeat for each pixel line
77E3 C9          10 162 ret
77E4             10 164 ; ----------------------------------------------------------------------------------------------------------------------
77E4             10 165 ; Screen_Tokens: draw the fixed tokens on the screen
77E4             10 166 ;
77E4             10 167 ; Input:    -
77E4             10 168 ;
77E4             10 169 ; Output:   -
77E4             10 170 ;
77E4             10 171 ; Uses:     TOKEN_COLOR (current token color)
77E4             10 172 ;
77E4             10 173 ; Destroys: A, BC, DE, HL, IX
77E4             10 174 ; ----------------------------------------------------------------------------------------------------------------------
77E4             10 175 Screen_Tokens:
77E4 3E 05       10 176 ld      a, CYAN_COLOR               ; set token color
77E6 21 BA 44    10 177 ld      hl, $44BA                   ; HL points to the fixed cyan token screen address
77E9 CD F1 77    10 178 call    Screen_Tokens_Draw          ; draw cyan fixed token
77EC 3E 02       10 180 ld      a, RED_COLOR                ; set token color
77EE 21 24 54    10 181 ld      hl, $5424                   ; HL points to the fixed red token screen address 
77F1             10 182 Screen_Tokens_Draw:
77F1 32 9E 61    10 183 ld      (TOKEN_COLOR), a            ; save token color
77F4 CD 0C 6E    10 184 call    Draw_Hexagon_Color          ; color fixed token area
77F7 DD 77 40    10 185 ld      (ix+64), a                  ; the fixed tokens are 3 bytes (attributes) high, so we have
77FA DD 77 41    10 186 ld      (ix+65), a                  ; to color the remaining 2 bytes that have not been colored
77FD 11 3E 66    10 187 ld      de, HEXAGON_TOKEN           ; DE points to token sprite address
7800 C3 DE 6D    10 188 jp      Draw_Sprite_Hexagon         ; draw fixed token
7803             10 190 ; ----------------------------------------------------------------------------------------------------------------------
7803             10 191 ; Screen_Timer_Quotes: draw the timer quotes ('  '') on the screen
7803             10 192 ;
7803             10 193 ; Input:    -
7803             10 194 ;
7803             10 195 ; Output:   -
7803             10 196 ;
7803             10 197 ; Destroys: IX
7803             10 198 ; ----------------------------------------------------------------------------------------------------------------------
7803             10 199 Screen_Timer_Quotes:
7803 DD 21 7A 40 10 200 ld      ix, $407A                   ; IX points to the screen address of the cyan timer quotes 
7807 DD 36 00 08 10 201 ld      (ix+0), %00001000           ; draw 1st half of simple quote (')
780B DD 36 03 0A 10 202 ld      (ix+3), %00001010           ; draw 1st half of double quotes (")
780F DD 24       10 203 inc     ixh                         ; move IX to the next screen pixel-line
7811 DD 36 00 08 10 204 ld      (ix+0), %00001000           ; draw 2nd half of simple quote (')
7815 DD 36 03 0A 10 205 ld      (ix+3), %00001010           ; draw 2nd half of double quotes (")
7819 DD 26 58    10 206 ld      ixh, $58                    ; move IX to the attribute address
781C DD 36 00 07 10 207 ld      (ix+0), WHITE               ; color simple quote
7820 DD 36 03 07 10 208 ld      (ix+3), WHITE               ; color double quotes
7824 DD 21 E4 48 10 210 ld      ix, $48E4                   ; IX points to the screen address of the red timer quotes
7828 DD 36 00 08 10 211 ld      (ix+0), %00001000           ; draw 1st half of simple quote (')
782C DD 36 03 0A 10 212 ld      (ix+3), %00001010           ; draw 1st half of double quotes (")
7830 DD 24       10 213 inc     ixh                         ; move IX to the next screen pixel-line
7832 DD 36 00 08 10 214 ld      (ix+0), %00001000           ; draw 2nd half of simple quote (')
7836 DD 36 03 0A 10 215 ld      (ix+3), %00001010           ; draw 2nd half of double quotes (")
783A DD 26 59    10 216 ld      ixh, $59                    ; move IX to the attribute address
783D DD 36 00 07 10 217 ld      (ix+0), WHITE               ; color simple quote
7841 DD 36 03 07 10 218 ld      (ix+3), WHITE               ; color double quotes
7845 C9          10 219 ret
7846             10 221 ; ----------------------------------------------------------------------------------------------------------------------
7846             10 222 ; Screen_Color_Statics: apply color to some statics items of the screen
7846             10 223 ;
7846             10 224 ; Input:    -
7846             10 225 ;
7846             10 226 ; Output:   -
7846             10 227 ;
7846             10 228 ; Destroys: BC, IX
7846             10 229 ; ----------------------------------------------------------------------------------------------------------------------
7846             10 230 Screen_Color_Statics:
7846 DD 21 78 58 10 231 ld      ix, $5878                   ; IX points to the attr. address of the cyan player timer
784A 0E 07       10 232 ld      c, WHITE                    ; set color in C
784C CD 76 78    10 233 call    Screen_Apply_Color          ; apply color
784F DD 2E 98    10 234 ld      ixl, $98                    ; IX points to the attr. address of the cyan player name
7852 0E 05       10 235 ld      c, CYAN_COLOR               ; set color in C
7854 CD 76 78    10 236 call    Screen_Apply_Color          ; apply color
7857 DD 21 18 59 10 237 ld      ix, $5918                   ; IX points to the attr. address of the cyan player messages
785B 0E 47       10 238 ld      c, WHITE+BRIGHT             ; set color in C
785D CD 76 78    10 239 call    Screen_Apply_Color          ; apply color
7860 DD 2E E2    10 240 ld      ixl, $E2                    ; IX points to the attr. address of the red player timer
7863 0E 07       10 241 ld      c, WHITE                    ; set color in C
7865 CD 76 78    10 242 call    Screen_Apply_Color          ; apply color
7868 DD 21 02 5A 10 243 ld      ix, $5A02                   ; IX points to the attr. address of the red player name
786C 0E 02       10 244 ld      c, RED_COLOR                ; set color in C
786E CD 76 78    10 245 call    Screen_Apply_Color          ; apply color
7871 DD 2E 82    10 246 ld      ixl, $82                    ; IX points to the attr. address of the red player messages
7874 0E 47       10 247 ld      c, WHITE+BRIGHT             ; set color in C
7876             10 248 Screen_Apply_Color:
7876 06 06       10 249 ld      b, 6                        ; number of bytes to be colored (loop counter)
7878             10 250 Screen_Apply_Color_Loop:
7878 DD 71 00    10 251 ld      (ix+0), c                   ; apply color
787B DD 2C       10 252 inc     ixl                         ; move IX to the next attribute address
787D 10 F9       10 253 djnz    Screen_Apply_Color_Loop     ; repeat for each byte
787F C9          10 254 ret
7880             10 256 ; ----------------------------------------------------------------------------------------------------------------------
7880             10 257 ; Screen_Last_Level: show last level screen and input game level
7880             10 258 ;
7880             10 259 ; Input:    -
7880             10 260 ;
7880             10 261 ; Output:   -
7880             10 262 ;
7880             10 263 ; Uses:     GAME_LEVEL (current game level)
7880             10 264 ;
7880             10 265 ; Destroys: A, BC, DE, HL, IX, IY
7880             10 266 ; ----------------------------------------------------------------------------------------------------------------------
7880             10 267 Screen_Last_Level:
7880 11 3C 68    10 268 ld      de, STR_PRESSKEY            ; DE points to "Press any key" string address
7883 21 AD 50    10 269 ld      hl, $50AD                   ; HL points to string screen address
7886 CD 5B 6F    10 270 call    Print_String                ; print "Press any key"
7889 DD 21 AD 5A 10 271 ld      ix, $5AAD                   ; IX points to string attributes address
788D 01 38 0D    10 272 ld      bc, 13*256+WHITE_PAPER      ; B = string length (loop counter), C = color attributes
7890 CD 78 78    10 273 call    Screen_Apply_Color_Loop     ; apply color to string area
7893 CD C2 6E    10 274 call    Input_Key_Scan              ; wait for a key pressed
7896 CD 14 77    10 276 call    Screen_Clear                ; fill in black the whole screen area and attributes area
7899 CD 59 7C    10 277 call    Screen_Hexagons             ; draw menu hexagons ("HEX 2")
789C DD 21 C7 59 10 278 ld      ix, $59C7                   ; IX points to "CONGRATULATIONS" string attributes address
78A0 01 C7 11    10 279 ld      bc, 17*256+WHITE_FLASH1     ; B = string length (loop counter), C = color attributes
78A3 CD 78 78    10 280 call    Screen_Apply_Color_Loop     ; apply color to string area
78A6 11 B4 68    10 281 ld      de, STR_CONGRATS            ; DE points to string address
78A9 21 C7 48    10 282 ld      hl, $48C7                   ; HL points to string screen address
78AC CD 5B 6F    10 283 call    Print_String                ; print "CONGRATULATIONS"
78AF DD 21 EF 64 10 284 ld      ix, WINNER_FX               ; IX points to winner tone parameters address
78B3 CD D2 76    10 285 call    Sound_FX                    ; play sound fx
78B6 F3          10 287 di                                  ; disable interrupts
78B7 DD 21 42 5A 10 288 ld      ix, $5A42                   ; IX points to "Well done!..." string attributes address
78BB 01 07 1C    10 289 ld      bc, 28*256+WHITE            ; B = string length (loop counter), C = color attributes
78BE CD 78 78    10 290 call    Screen_Apply_Color_Loop     ; apply color to string area
78C1 11 C6 68    10 291 ld      de, STR_LAST_LEVEL          ; DE points to string address
78C4 21 42 50    10 292 ld      hl, $5042                   ; HL points to string screen address
78C7 CD 5B 6F    10 293 call    Print_String                ; print "Well done!..."
78CA DD 2E 82    10 294 ld      ixl, $82                    ; IX points to "Choose..." string attributes address
78CD 06 18       10 295 ld      b, 24                       ; string length-4 (loop counter)
78CF CD 78 78    10 296 call    Screen_Apply_Color_Loop     ; apply color to string area
78D2 DD 36 01 78 10 297 ld      (ix+1), WHITE_PAPER+BRIGHT  ; set color for last characters ("1-4")
78D6 DD 36 02 78 10 298 ld      (ix+2), WHITE_PAPER+BRIGHT
78DA DD 36 03 78 10 299 ld      (ix+3), WHITE_PAPER+BRIGHT
78DE 13          10 300 inc     de                          ; move DE to next string address
78DF 2E 82       10 301 ld      l, $82                      ; HL points to string screen address
78E1 CD 5B 6F    10 302 call    Print_String                ; print "Choose..."
78E4             10 303 Screen_Choose_Level
78E4 CD C2 6E    10 304 call    Input_Key_Scan              ; wait for a key pressed
78E7 FE 31       10 305 cp      '1'                         ; is it < '1' ?
78E9 38 F9       10 306 jr      c, Screen_Choose_Level      ; yes, wait for a key pressed
78EB FE 35       10 307 cp      '5'                         ; is it >= '5' ?
78ED 30 F5       10 308 jr      nc, Screen_Choose_Level     ; yes, wait for a key pressed
78EF D6 31       10 309 sub     $31                         ; convert ASCII into level number (-1)
78F1 21 9D 61    10 310 ld      hl, GAME_LEVEL              ; HL points to game level address
78F4 77          10 311 ld      (hl), a                     ; save chosen game level (-1)
78F5 C9          10 312 ret
78F6             10 314 ; ----------------------------------------------------------------------------------------------------------------------
78F6             10 315 ; Screen_ThreeRow: color the three-in-a-row marks according to the current three row counter
78F6             10 316 ;
78F6             10 317 ; Input:    -
78F6             10 318 ;
78F6             10 319 ; Output:   -
78F6             10 320 ;
78F6             10 321 ; Uses:     LEVEL_COLOR (current level color for frame border)
78F6             10 322 ;           THREE_ROW (three-in-a-row counter)
78F6             10 323 ;
78F6             10 324 ; Destroys: A, C, HL, IX
78F6             10 325 ; ----------------------------------------------------------------------------------------------------------------------
78F6             10 326 Screen_ThreeRow:
78F6 21 9C 61    10 327 ld      hl, LEVEL_COLOR             ; HL points to level color address
78F9 4E          10 328 ld      c, (hl)                     ; save level color in C
78FA CD 12 79    10 329 call    Screen_Clear_ThreeRow       ; clear all three-in-a-row marks
78FD 3A 0E 62    10 330 ld      a, (THREE_ROW)              ; A = three-in-a-row counter
7900 B7          10 331 or      a                           ; is it 0?
7901 C8          10 332 ret     z                           ; yes, return
7902 3D          10 333 dec     a                           ; is it 1?
7903 28 09       10 334 jr      z, Screen_ThreeRow_1        ; yes, color first mark
7905 3D          10 335 dec     a                           ; is it 2?
7906 28 03       10 336 jr      z, Screen_ThreeRow_2        ; yes color 2nd and 1st marks
7908 DD 71 00    10 337 ld      (ix+0), c                   ; color 3rd mark
790B             10 338 Screen_ThreeRow_2
790B DD 71 01    10 339 ld      (ix+1), c                   ; color 2nd mark
790E             10 340 Screen_ThreeRow_1
790E DD 71 02    10 341 ld      (ix+2), c                   ; color 1st mark
7911 C9          10 342 ret
7912             10 344 ; ----------------------------------------------------------------------------------------------------------------------
7912             10 345 ; Screen_Clear_ThreeRow: clear all three-in-a-row marks
7912             10 346 ;
7912             10 347 ; Input:    -
7912             10 348 ;
7912             10 349 ; Output:   IX = three-in-a-row marks attribute address
7912             10 350 ;
7912             10 351 ; Destroys: -
7912             10 352 ; ----------------------------------------------------------------------------------------------------------------------
7912             10 353 Screen_Clear_ThreeRow:
7912 DD 21 F2 5A 10 354 ld      ix, $5AF2                   ; IX points to attribute address of three-in-a-row marks
7916 DD 36 00 01 10 355 ld      (ix+0), BLUE_INK            ; clear all three-in-a-row marks
791A DD 36 01 01 10 356 ld      (ix+1), BLUE_INK
791E DD 36 02 01 10 357 ld      (ix+2), BLUE_INK
7922 C9          10 358 ret
7923             10 360 ; ----------------------------------------------------------------------------------------------------------------------
7923             10 361 ; Screen_Frame_Color: set up frame color and print level number depending on current level
7923             10 362 ;
7923             10 363 ; Input:    HL = game level address
7923             10 364 ;
7923             10 365 ; Output:   -
7923             10 366 ;
7923             10 367 ; Uses:     LEVEL_COLOR (current level color for frame border)
7923             10 368 ;
7923             10 369 ; Destroys: A, BC, DE, HL
7923             10 370 ; ----------------------------------------------------------------------------------------------------------------------
7923             10 371 Screen_Frame_Color:
7923 06 00       10 372 ld      b, 0                        ; set game level in BC
7925 4E          10 373 ld      c, (hl)
7926 3E 30       10 374 ld      a, $30                      ; convert game level number to game level character
7928 81          10 375 add     a, c
7929 21 0F 40    10 376 ld      hl, $400F                   ; HL points to screen address of game level
792C CD 68 6F    10 377 call    Print_Char                  ; print game level
792F 21 0E 62    10 378 ld      hl, ROW_COLOR_MAP-1         ; HL points to color map address (adjusted for index 0)
7932 09          10 379 add     hl, bc                      ; use BC as index for color map address
7933 7E          10 380 ld      a, (hl)                     ; A = level color
7934 CD 49 79    10 381 call    Screen_Tiles_Color          ; color the frame according to the current level
7937 E6 07       10 382 and     %00000111                   ; mask color
7939 32 9C 61    10 383 ld      (LEVEL_COLOR), a            ; save masked color
793C 17          10 384 rla                                 ; rotate to text level color
793D 17          10 385 rla
793E 17          10 386 rla
793F 21 08 58    10 387 ld      hl, $5808                   ; HL points to attribute address of level text
7942 06 09       10 388 ld      b, 9                        ; length of level text (loop counter)
7944             10 389 Screen_Level_Loop
7944 77          10 390 ld      (hl), a                     ; apply color to level text
7945 2C          10 391 inc     l                           ; HL points to attr address of next character of level text
7946 10 FC       10 392 djnz    Screen_Level_Loop           ; repeat for each character of level text
7948 C9          10 393 ret
7949             10 395 ; ----------------------------------------------------------------------------------------------------------------------
7949             10 396 ; Screen_Tiles_Color: apply color to the frame tiles
7949             10 397 ;
7949             10 398 ; Input:    A = color to apply
7949             10 399 ;
7949             10 400 ; Output:   -
7949             10 401 ;
7949             10 402 ; Destroys: BC, DE, HL
7949             10 403 ; ----------------------------------------------------------------------------------------------------------------------
7949             10 404 Screen_Tiles_Color:
7949             10 405 ; color up row
7949 21 01 58    10 407 ld      hl, $5801                   ; HL points to attribute address of the the frame tile 
794C 06 06       10 408 ld      b, 6                        ; number of tiles (loop counter)
794E             10 409 Screen_Tiles_URow1
794E 77          10 410 ld      (hl), a                     ; apply color
794F 2C          10 411 inc     l                           ; move HL to the next attribute address
7950 10 FC       10 412 djnz    Screen_Tiles_URow1          ; repeat for each tile
7952 2E 12       10 413 ld      l, $12                      ; move HL to the next attribute address
7954 06 0D       10 414 ld      b, 13                       ; number of tiles (loop counter)
7956             10 415 Screen_Tiles_URow2
7956 77          10 416 ld      (hl), a                     ; apply color
7957 2C          10 417 inc     l                           ; move HL to the next attribute address
7958 10 FC       10 418 djnz    Screen_Tiles_URow2          ; repeat for each tile
795A             10 420 ; color vertical bars
795A 2E 00       10 422 ld      l, 0                        ; move HL to the next attribute address
795C 11 1F 00    10 423 ld      de, 31                      ; attribute address displacement (for each bar)
795F 0E 03       10 424 ld      c, 3                        ; number of screen thirds (outer loop counter)
7961             10 425 Screen_Tiles_VBar1
7961 06 08       10 426 ld      b, 8                        ; number of tiles (inner loop counter)
7963             10 427 Screen_Tiles_VBar2
7963 77          10 428 ld      (hl), a                     ; apply color
7964 19          10 429 add     hl, de                      ; move HL to the right column
7965 77          10 430 ld      (hl), a                     ; apply color
7966 2C          10 431 inc     l                           ; move HL to the next attribute address
7967 10 FA       10 432 djnz    Screen_Tiles_VBar2          ; repeat for each tile
7969 24          10 433 inc     h                           ; move HL to the next screen third
796A 0D          10 434 dec     c                           ; decrement number of thirds
796B 20 F4       10 435 jr      nz, Screen_Tiles_VBar1      ; repeat for each third
796D             10 437 ; color bottom row
796D 21 E1 5A    10 439 ld      hl, $5AE1                   ; HL points to attribute address of the the frame tile
7970 06 10       10 440 ld      b, 16                       ; number of tiles (loop counter)
7972             10 441 Screen_Tiles_BRow1
7972 77          10 442 ld      (hl), a                     ; apply color
7973 2C          10 443 inc     l                           ; move HL to the next attribute address
7974 10 FC       10 444 djnz    Screen_Tiles_BRow1          ; repeat for each tile
7976 2E F6       10 445 ld      l, $F6                      ; move HL to the next attribute address
7978 06 09       10 446 ld      b, 9                        ; number of tiles (loop counter)
797A             10 447 Screen_Tiles_BRow2
797A 77          10 448 ld      (hl), a                     ; apply color
797B 2C          10 449 inc     l                           ; move HL to the next attribute address
797C 10 FC       10 450 djnz    Screen_Tiles_BRow2          ; repeat for each tile
797E C9          10 451 ret
797F             10 453 ; ----------------------------------------------------------------------------------------------------------------------
797F             10 454 ; Screen_Menu: show main menu and wait for an option
797F             10 455 ;
797F             10 456 ; Input:    -
797F             10 457 ;
797F             10 458 ; Output:   -
797F             10 459 ;
797F             10 460 ; Uses:     GAME_LEVEL (current game level)
797F             10 461 ;
797F             10 462 ; Destroys: A, BC, DE, HL, IX, IY
797F             10 463 ; ----------------------------------------------------------------------------------------------------------------------
797F             10 464 Screen_Menu:
797F CD 14 77    10 465 call    Screen_Clear                ; fill in black the whole screen area and attributes area
7982 CD 59 7C    10 466 call    Screen_Hexagons             ; draw menu hexagons ("HEX 2")
7985             10 467 Screen_Menu_Strings
7985 21 80 59    10 468 ld      hl, $5980                   ; HL points to menu text area attributes address
7988 11 81 59    10 469 ld      de, $5981                   ; DE points to next byte of menu text area attr. address
798B 36 00       10 470 ld      (hl), 0                     ; set first attribute text area in black
798D 01 7F 01    10 471 ld      bc, 32*12-1                 ; length of text area attributes (-1 already set)
7990 ED B0       10 472 ldir                                ; set the rest of text area attributes in black
7992 DD 21 CA 59 10 474 ld      ix, $59CA                   ; IX points to "Start new game" string attr. address (+1)
7996 DD 36 FF 78 10 475 ld      (ix-1), WHITE_PAPER+BRIGHT  ; set color of first letter
799A 01 47 0D    10 476 ld      bc, 13*256+WHITE_FLASH0     ; B = string length-1 (loop counter), C = color attributes
799D CD 78 78    10 477 call    Screen_Apply_Color_Loop     ; apply color to string area
79A0 11 80 67    10 478 ld      de, STR_OPTIONS             ; DE points to string address
79A3 21 C9 48    10 479 ld      hl, $48C9                   ; HL points to string screen address
79A6 CD 5B 6F    10 480 call    Print_String                ; print "Start new game"
79A9 DD 21 2A 5A 10 481 ld      ix, $5A2A                   ; IX points to "How to play" string attributes address (+1)
79AD DD 36 FF 78 10 482 ld      (ix-1), WHITE_PAPER+BRIGHT  ; set color of first letter
79B1 06 0A       10 483 ld      b, 10                       ; string length-1 (loop counter)
79B3 CD 78 78    10 484 call    Screen_Apply_Color_Loop     ; apply color to string area
79B6 13          10 485 inc     de                          ; move DE to "How to play" string address
79B7 21 29 50    10 486 ld      hl, $5029                   ; HL points to string screen address
79BA CD 5B 6F    10 487 call    Print_String                ; print "How to play"
79BD DD 2E 8A    10 488 ld      ixl, $8A                    ; IX points to "Credits" string attributes address (+1)
79C0 DD 36 FF 78 10 489 ld      (ix-1), WHITE_PAPER+BRIGHT  ; set color of first letter
79C4 CD 76 78    10 490 call    Screen_Apply_Color          ; apply color to string area
79C7 13          10 491 inc     de                          ; move DE to "Credits" string address
79C8 2E 89       10 492 ld      l, $89                      ; HL points to string screen address
79CA CD 5B 6F    10 493 call    Print_String                ; print "Credits"
79CD             10 494 Screen_Menu_Options
79CD CD C2 6E    10 495 call    Input_Key_Scan              ; wait for a key pressed
79D0 FE 73       10 496 cp      's'                         ; is it 's'?
79D2 C8          10 497 ret     z                           ; yes, return
79D3 FE 63       10 498 cp      'c'                         ; is it 'c'?
79D5 CA E9 7B    10 499 jp      z, Screen_Menu_Credits      ; yes, show credits
79D8 FE 68       10 500 cp      'h'                         ; is it 'h'?
79DA 20 F1       10 501 jr      nz, Screen_Menu_Options     ; no, repeat until key pressed = 's' or 'c' or 'h'
79DC             10 503 ; ----------------------------------------------------------------------------------------------------------------------
79DC             10 504 ; Show "How to play" pages
79DC             10 505 ; ----------------------------------------------------------------------------------------------------------------------
79DC             10 506 Screen_Menu_How2Play
79DC CD 14 77    10 507 call    Screen_Clear                ; fill in black the whole screen area and attributes area
79DF CD 21 77    10 508 call    Screen_Letters              ; draw the two rows of letters on the screen (a..g)
79E2 CD 4D 77    10 509 call    Screen_Numbers              ; draw the two columns of numbers on the screen (1..7)
79E5 CD 8C 77    10 510 call    Screen_Frame                ; draw the screen frame
79E8 21 9D 61    10 512 ld      hl, GAME_LEVEL              ; HL points to game level address (needed for color frame)
79EB 34          10 513 inc     (hl)                        ; increment game level (GAME_LEVEL = 1)
79EC CD 23 79    10 514 call    Screen_Frame_Color          ; set up frame color depending on current level
79EF CD 12 79    10 515 call    Screen_Clear_ThreeRow       ; clear all three-in-a-row marks
79F2 11 4A 68    10 517 ld      de, STR_BUTTONS             ; DE points to "Next" string address
79F5 21 DB 50    10 518 ld      hl, $50DB                   ; HL points to string screen address
79F8 CD 5B 6F    10 519 call    Print_String                ; print "Next"
79FB 13          10 520 inc     de                          ; move DE to "Back" string address
79FC 21 C1 50    10 521 ld      hl, $50C1                   ; HL points to string screen address
79FF CD 5B 6F    10 522 call    Print_String                ; print "Back"
7A02             10 524 Screen_How2Play_RED
7A02 21 5E 58    10 525 ld      hl, $5876-24                ; HL points to cyan text area attributes address (-24)
7A05 CD 93 7C    10 526 call    Screen_Clear_Text           ; clear text area attributes
7A08 CD 9E 6D    10 527 call    Draw_Board                  ; draw an empty hexagons board
7A0B             10 529 ; text for RED
7A0B DD 21 01 5A 10 531 ld      ix, $5A01                   ; IX points to "Connect" string attributes address
7A0F 01 07 07    10 532 ld      bc, 7*256+WHITE             ; B = string length (loop counter), C = color attributes
7A12 CD 78 78    10 533 call    Screen_Apply_Color_Loop     ; apply color to string area
7A15 11 5D 68    10 534 ld      de, STR_HELP1               ; DE points to string address
7A18 21 01 50    10 535 ld      hl, $5001                   ; HL points to string screen address
7A1B CD 5B 6F    10 536 call    Print_String                ; print "Connect"
7A1E DD 2E 21    10 537 ld      ixl, $21                    ; IX points to "left and" string attributes address
7A21 06 08       10 538 ld      b, 8                        ; string length (loop counter)
7A23 CD 78 78    10 539 call    Screen_Apply_Color_Loop     ; apply color to string area
7A26 13          10 540 inc     de                          ; move DE to "left and" string address
7A27 2E 21       10 541 ld      l, $21                      ; HL points to string screen address
7A29 CD 5B 6F    10 542 call    Print_String                ; print "left and"
7A2C DD 2E 41    10 543 ld      ixl, $41                    ; IX points to "right" string attributes address
7A2F 06 05       10 544 ld      b, 5                        ; set string length (loop counter)
7A31 CD 78 78    10 545 call    Screen_Apply_Color_Loop     ; apply color to string area
7A34 11 75 68    10 546 ld      de, STR_HELP3_RED           ; DE points to "right" string address
7A37 2E 41       10 547 ld      l, $41                      ; HL points to string screen address
7A39 CD 5B 6F    10 548 call    Print_String                ; print "right"
7A3C DD 2E 61    10 549 ld      ixl, $61                    ; IX points to "borders" string attributes address
7A3F 06 07       10 550 ld      b, 7                        ; set string length (loop counter)
7A41 CD 78 78    10 551 call    Screen_Apply_Color_Loop     ; apply color to string area
7A44 11 80 68    10 552 ld      de, STR_HELP4               ; DE points to "borders" string address
7A47 2E 61       10 553 ld      l, $61                      ; HL points to string screen address
7A49 CD 5B 6F    10 554 call    Print_String                ; print "borders"
7A4C DD 2E 81    10 555 ld      ixl, $81                    ; IX points to "to win" string attributes address
7A4F CD 76 78    10 556 call    Screen_Apply_Color          ; apply color to string area
7A52 13          10 557 inc     de                          ; move DE to "to win" string address
7A53 2E 81       10 558 ld      l, $81                      ; HL points to string screen address
7A55 CD 5B 6F    10 559 call    Print_String                ; print "to win"
7A58 DD 21 E3 59 10 560 ld      ix, $59E3                   ; IX points to "RED" string attributes address
7A5C 01 42 03    10 561 ld      bc, 3*256+RED_COLOR+BRIGHT  ; B = string length (loop counter), C = color attributes
7A5F CD 78 78    10 562 call    Screen_Apply_Color_Loop     ; apply color to string area
7A62 11 54 68    10 563 ld      de, STR_RED                 ; DE points to "RED" string address
7A65 21 E3 48    10 564 ld      hl, $48E3                   ; HL points to string screen address
7A68 CD 5B 6F    10 565 call    Print_String                ; print "RED"
7A6B             10 567 ; draw RED sample board
7A6B FD 21 3A 67 10 569 ld      iy, SAMPLE_BOARD_RED        ; IY points to sample board (red) screen addresses
7A6F 11 3E 66    10 570 ld      de, HEXAGON_TOKEN           ; DE points to token sprite address
7A72 06 07       10 571 ld      b, 7                        ; number of red+bright tokens (loop counter)
7A74 3E 42       10 572 ld      a, RED_COLOR+BRIGHT         ; set token color
7A76 32 9E 61    10 573 ld      (TOKEN_COLOR), a            ; save token color
7A79 CD 7E 7C    10 574 call    Screen_Hexagons_Loop        ; draw tokens
7A7C 06 02       10 575 ld      b, 2                        ; number of red tokens (loop counter)
7A7E 3E 02       10 576 ld      a, RED_COLOR                ; set token color
7A80 32 9E 61    10 577 ld      (TOKEN_COLOR), a            ; save token color
7A83 CD 7E 7C    10 578 call    Screen_Hexagons_Loop        ; draw tokens
7A86 06 09       10 579 ld      b, 9                        ; number of cyan tokens (loop counter)
7A88 3E 05       10 580 ld      a, CYAN_COLOR               ; set token color
7A8A 32 9E 61    10 581 ld      (TOKEN_COLOR), a            ; save token color
7A8D CD 7E 7C    10 582 call    Screen_Hexagons_Loop        ; draw tokens
7A90             10 584 ; wait for "Next" option pressed
7A90 DD 21 C1 5A 10 586 ld      ix, $5AC1                   ; IX points to "Back" string attribute address
7A94 01 00 04    10 587 ld      bc, $0400                   ; B = string length (loop counter), C = attributes (black)
7A97 CD 78 78    10 588 call    Screen_Apply_Color_Loop     ; hide "Back" string
7A9A DD 2E DC    10 589 ld      ixl, $DC                    ; IX points to "Next" string attribute address (+1)
7A9D DD 36 FF 78 10 590 ld      (ix-1), WHITE_PAPER+BRIGHT  ; set color of first letter
7AA1 01 47 03    10 591 ld      bc, 3*256+WHITE_FLASH0      ; B = string length-1 (loop counter), C = color attributes
7AA4 CD 78 78    10 592 call    Screen_Apply_Color_Loop     ; apply color to string area
7AA7             10 593 Screen_How2PlayRED_End
7AA7 CD C2 6E    10 594 call    Input_Key_Scan              ; wait for a key pressed
7AAA FE 6E       10 595 cp      'n'                         ; is it 'n'?
7AAC 20 F9       10 596 jr      nz, Screen_How2PlayRED_End  ; no, repeat until key pressed = 'n'
7AAE             10 598 Screen_How2Play_CYAN
7AAE 21 0F 58    10 599 ld      hl, $580F                   ; HL points to level number attribute address
7AB1 CB BE       10 600 res     7, (hl)                     ; reset flash attribute
7AB3 26 40       10 601 ld      h, $40                      ; HL points to level number screen address
7AB5 3E 31       10 602 ld      a, '1'                      ; set level number (char)
7AB7 CD 68 6F    10 603 call    Print_Char                  ; print '1'
7ABA CD 12 79    10 604 call    Screen_Clear_ThreeRow       ; clear all three-in-a-row marks
7ABD 21 C9 59    10 606 ld      hl, $59E1-24                ; HL points to red text area attributes address (-24)
7AC0 CD 93 7C    10 607 call    Screen_Clear_Text           ; clear text area attributes
7AC3 CD 9E 6D    10 608 call    Draw_Board                  ; draw an empty hexagons board
7AC6             10 610 ; text for CYAN
7AC6 DD 21 98 58 10 612 ld      ix, $5898                   ; IX points to "Connect" string attributes address
7ACA 01 07 07    10 613 ld      bc, 7*256+WHITE             ; B = string length (loop counter), C = color attributes
7ACD CD 78 78    10 614 call    Screen_Apply_Color_Loop     ; apply color to string area
7AD0 11 5D 68    10 615 ld      de, STR_HELP1               ; DE points to "Connect" string address
7AD3 21 98 40    10 616 ld      hl, $4098                   ; HL points to string screen address
7AD6 CD 5B 6F    10 617 call    Print_String                ; print "Connect"
7AD9 DD 2E B9    10 618 ld      ixl, $B9                    ; IX points to "up and" string attributes address
7ADC CD 76 78    10 619 call    Screen_Apply_Color          ; apply color to string area
7ADF 11 6E 68    10 620 ld      de, STR_HELP2_CYAN          ; DE points to "up and" string address
7AE2 2E B9       10 621 ld      l, $B9                      ; HL points to string screen address
7AE4 CD 5B 6F    10 622 call    Print_String                ; print "up and"
7AE7 DD 2E DB    10 623 ld      ixl, $DB                    ; IX points to "down" string attributes address
7AEA 06 04       10 624 ld      b, 4                        ; string length (loop counter)
7AEC CD 78 78    10 625 call    Screen_Apply_Color_Loop     ; apply color to string area
7AEF 11 7B 68    10 626 ld      de, STR_HELP3_CYAN          ; DE points to "down" string address
7AF2 2E DB       10 627 ld      l, $DB                      ; HL points to string screen address
7AF4 CD 5B 6F    10 628 call    Print_String                ; print "down"
7AF7 DD 2E F8    10 629 ld      ixl, $F8                    ; IX points to "borders" string attributes address
7AFA 06 07       10 630 ld      b, 7                        ; string length (loop counter)
7AFC CD 78 78    10 631 call    Screen_Apply_Color_Loop     ; apply color to string area
7AFF 13          10 632 inc     de                          ; move DE to "borders" string address
7B00 2E F8       10 633 ld      l, $F8                      ; HL points to string screen address
7B02 CD 5B 6F    10 634 call    Print_String                ; print "borders"
7B05 DD 21 19 59 10 635 ld      ix, $5919                   ; IX points to "to win" string attributes address
7B09 CD 76 78    10 636 call    Screen_Apply_Color          ; apply color to string area
7B0C 13          10 637 inc     de                          ; move DE to "to win" string address
7B0D 21 19 48    10 638 ld      hl, $4819                   ; HL points to string screen address
7B10 CD 5B 6F    10 639 call    Print_String                ; print "to win"
7B13 DD 21 7A 58 10 640 ld      ix, $587A                   ; IX points to "CYAN" string attributes address
7B17 01 45 04    10 641 ld      bc, $0445                   ; B = string length (loop counter)
7B1A             10 642 ; C = color attributes (cyan+bright)
7B1A CD 78 78    10 643 call    Screen_Apply_Color_Loop     ; apply color to string area
7B1D 11 58 68    10 644 ld      de, STR_CYAN                ; DE points to "CYAN" string address
7B20 21 7A 40    10 645 ld      hl, $407A                   ; HL points to string screen address
7B23 CD 5B 6F    10 646 call    Print_String                ; print "CYAN"
7B26             10 648 ; draw CYAN sample board
7B26 FD 21 5E 67 10 650 ld      iy, SAMPLE_BOARD_CYAN       ; IY points to sample board (cyan) screen addresses
7B2A 11 3E 66    10 651 ld      de, HEXAGON_TOKEN           ; DE points to token sprite address
7B2D 06 07       10 652 ld      b, 7                        ; number of cyan+bright tokens (loop counter)
7B2F 3E 45       10 653 ld      a, CYAN_COLOR+BRIGHT        ; set token color
7B31 32 9E 61    10 654 ld      (TOKEN_COLOR), a            ; save token color
7B34 CD 7E 7C    10 655 call    Screen_Hexagons_Loop        ; draw tokens
7B37 06 02       10 656 ld      b, 2                        ; number of cyan tokens (loop counter)
7B39 3E 05       10 657 ld      a, CYAN_COLOR               ; set token color
7B3B 32 9E 61    10 658 ld      (TOKEN_COLOR), a            ; save token color
7B3E CD 7E 7C    10 659 call    Screen_Hexagons_Loop        ; draw tokens
7B41 06 08       10 660 ld      b, 8                        ; number of red tokens (loop counter)
7B43 3E 02       10 661 ld      a, RED_COLOR                ; set token color
7B45 32 9E 61    10 662 ld      (TOKEN_COLOR), a            ; save token color
7B48 CD 7E 7C    10 663 call    Screen_Hexagons_Loop        ; draw tokens
7B4B             10 665 ; wait for "Next" or "Back" options pressed
7B4B DD 21 C2 5A 10 667 ld      ix, $5AC2                   ; IX points to "Back" string attributes address (+1)
7B4F DD 36 FF 78 10 668 ld      (ix-1), WHITE_PAPER+BRIGHT  ; set color of first letter
7B53 01 47 03    10 669 ld      bc, 3*256+WHITE_FLASH0      ; B = string length (-1), C = color attributes
7B56 CD 78 78    10 670 call    Screen_Apply_Color_Loop     ; apply color to string area
7B59             10 671 Screen_How2PlayCYAN_End
7B59 CD C2 6E    10 672 call    Input_Key_Scan              ; wait for a key pressed
7B5C FE 62       10 673 cp      'b'                         ; is it 'b'?
7B5E CA 02 7A    10 674 jp      z, Screen_How2Play_RED      ; yes, show RED page
7B61 FE 6E       10 675 cp      'n'                         ; is it 'n'?
7B63 20 F4       10 676 jr      nz, Screen_How2PlayCYAN_End ; no, repeat until key pressed = 'n' or 'b'
7B65             10 678 Screen_How2Play_LevelUp
7B65 21 5E 58    10 679 ld      hl, $5876-24                ; HL points to cyan text area attributes address (-24)
7B68 CD 93 7C    10 680 call    Screen_Clear_Text           ; clear text area attributes
7B6B             10 682 ; text for Level Up
7B6B DD 21 21 5A 10 684 ld      ix, $5A21                   ; IX points to "Win three" string attributes address
7B6F 01 07 09    10 685 ld      bc, 9*256+WHITE             ; B = string length (loop counter), C = color attributes
7B72 CD 78 78    10 686 call    Screen_Apply_Color_Loop     ; apply color to string area
7B75 11 8F 68    10 687 ld      de, STR_HELP                ; DE points to "Win three" string address
7B78 21 21 50    10 688 ld      hl, $5021                   ; HL points to string screen address
7B7B CD 5B 6F    10 689 call    Print_String                ; print "Win three"
7B7E DD 2E 41    10 690 ld      ixl, $41                    ; IX points to "times in" string attributes address
7B81 06 08       10 691 ld      b, 8                        ; string length (loop counter)
7B83 CD 78 78    10 692 call    Screen_Apply_Color_Loop     ; apply color to string area
7B86 13          10 693 inc     de                          ; move DE to "times in" string address
7B87 2E 41       10 694 ld      l, $41                      ; HL points to string screen address
7B89 CD 5B 6F    10 695 call    Print_String                ; print "times in"
7B8C DD 2E 61    10 696 ld      ixl, $61                    ; IX points to "a row to" string attributes address
7B8F 06 08       10 697 ld      b, 8                        ; string length (loop counter)
7B91 CD 78 78    10 698 call    Screen_Apply_Color_Loop     ; apply color to string area
7B94 13          10 699 inc     de                          ; move DE to "a row to" string address
7B95 2E 61       10 700 ld      l, $61                      ; HL points to string screen address
7B97 CD 5B 6F    10 701 call    Print_String                ; print "a row to"
7B9A DD 2E 81    10 702 ld      ixl, $81                    ; IX points to "level up" string attributes address
7B9D 06 08       10 703 ld      b, 8                        ; string length (loop counter)
7B9F CD 78 78    10 704 call    Screen_Apply_Color_Loop     ; apply color to string area
7BA2 13          10 705 inc     de                          ; move DE to "level up" string address
7BA3 2E 81       10 706 ld      l, $81                      ; HL points to string screen address
7BA5 CD 5B 6F    10 707 call    Print_String                ; print "level up"
7BA8             10 709 ; reset bright of cyan tokens
7BA8 FD 21 5E 67 10 711 ld      iy, SAMPLE_BOARD_CYAN       ; IY points to sample board (cyan) screen addresses
7BAC 11 3E 66    10 712 ld      de, HEXAGON_TOKEN           ; DE points to token sprite address
7BAF 06 07       10 713 ld      b, 7                        ; number of cyan+bright tokens (loop counter)
7BB1 3E 05       10 714 ld      a, CYAN_COLOR               ; set new token color
7BB3 32 9E 61    10 715 ld      (TOKEN_COLOR), a            ; save color
7BB6 CD 7E 7C    10 716 call    Screen_Hexagons_Loop        ; draw tokens
7BB9             10 718 ; set flash attribute of level number and three-in-a-row marks
7BB9 21 0F 58    10 720 ld      hl, $580F                   ; HL points to level number attribute address
7BBC CB FE       10 721 set     7, (hl)                     ; set flash attribute
7BBE 21 0F 40    10 722 ld      hl, $400F                   ; HL points to level number screen address
7BC1 3E 32       10 723 ld      a, '2'                      ; set new level
7BC3 CD 68 6F    10 724 call    Print_Char                  ; print new level
7BC6 DD 21 F2 5A 10 725 ld      ix, $5AF2                   ; IX points to three-in-a-row attribute address
7BCA DD 36 00 B8 10 726 ld      (ix+0), WHITE_PAPER+FLASH   ; set flash attributes
7BCE DD 36 01 B8 10 727 ld      (ix+1), WHITE_PAPER+FLASH
7BD2 DD 36 02 B8 10 728 ld      (ix+2), WHITE_PAPER+FLASH
7BD6             10 730 ; wait for "Next" or "Back" options pressed
7BD6             10 732 Screen_How2Play_End
7BD6 CD C2 6E    10 733 call    Input_Key_Scan              ; wait for a key pressed
7BD9 FE 62       10 734 cp      'b'                         ; is it 'b'?
7BDB CA AE 7A    10 735 jp      z, Screen_How2Play_CYAN     ; yes, show CYAN page
7BDE FE 6E       10 736 cp      'n'                         ; is it 'n'?
7BE0 20 F4       10 737 jr      nz, Screen_How2Play_End     ; no, repeat until key pressed = 'b' or 'n'
7BE2 21 9D 61    10 739 ld      hl, GAME_LEVEL              ; HL points to game level address
7BE5 35          10 740 dec     (hl)                        ; decrement game level (GAME_LEVEL = 0)
7BE6 C3 7F 79    10 741 jp      Screen_Menu                 ; return to main menu
7BE9             10 743 ; ----------------------------------------------------------------------------------------------------------------------
7BE9             10 744 ; Show credits
7BE9             10 745 ; ----------------------------------------------------------------------------------------------------------------------
7BE9             10 746 Screen_Menu_Credits
7BE9 DD 21 84 59 10 747 ld      ix, $5984                   ; IX points to "Design..." string attributes address
7BED 01 47 19    10 748 ld      bc, 25*256+WHITE_FLASH0     ; B = string length (loop counter), C = color attributes
7BF0 CD 78 78    10 749 call    Screen_Apply_Color_Loop     ; apply color to string area
7BF3 11 A3 67    10 750 ld      de, STR_CREDITS             ; DE points to "Design..." string address
7BF6 21 84 48    10 751 ld      hl, $4884                   ; HL points to string screen address
7BF9 CD 5B 6F    10 752 call    Print_String                ; print "Design..."
7BFC DD 2E C4    10 753 ld      ixl, $C4                    ; IX points to "Code..." string attributes address
7BFF 06 19       10 754 ld      b, 25                       ; string length (loop counter)
7C01 CD 78 78    10 755 call    Screen_Apply_Color_Loop     ; apply color to string area
7C04 13          10 756 inc     de                          ; move DE to to "Code..." string address
7C05 2E C4       10 757 ld      l, $C4                      ; HL points to string screen address
7C07 CD 5B 6F    10 758 call    Print_String                ; print "Code..."
7C0A DD 2E E4    10 759 ld      ixl, $E4                    ; IX points to "Einar Saukas" string attributes address
7C0D 06 18       10 760 ld      b, 24                       ; string length (loop counter)
7C0F CD 78 78    10 761 call    Screen_Apply_Color_Loop     ; apply color to string area
7C12 13          10 762 inc     de                          ; move DE to "Einar Saukas" string address
7C13 2E E4       10 763 ld      l, $E4                      ; HL points to string screen address
7C15 CD 5B 6F    10 764 call    Print_String                ; print "Einar Saukas"
7C18 DD 21 24 5A 10 765 ld      ix, $5A24                   ; IX points to "Font..." string attributes address
7C1C 06 18       10 766 ld      b, 24                       ; string length (loop counter)
7C1E CD 78 78    10 767 call    Screen_Apply_Color_Loop     ; apply color to string area
7C21 13          10 768 inc     de                          ; move DE to "Font..." string address
7C22 21 24 50    10 769 ld      hl, $5024                   ; HL points to string screen address
7C25 CD 5B 6F    10 770 call    Print_String                ; print "Font..."
7C28 DD 2E 64    10 771 ld      ixl, $64                    ; IX points to "Graphics..." string attributes address
7C2B 06 18       10 772 ld      b, 24                       ; string length (loop counter)
7C2D CD 78 78    10 773 call    Screen_Apply_Color_Loop     ; apply color to string area
7C30 13          10 774 inc     de                          ; move DE to "Graphics..." string address
7C31 2E 64       10 775 ld      l, $64                      ; HL points to string screen address
7C33 CD 5B 6F    10 776 call    Print_String                ; print "Graphics..."
7C36 DD 2E 84    10 777 ld      ixl, $84                    ; IX points to "Antonio Luque" string attributes address
7C39 06 19       10 778 ld      b, 25                       ; string length (loop counter)
7C3B CD 78 78    10 779 call    Screen_Apply_Color_Loop     ; apply color to string area
7C3E 13          10 780 inc     de                          ; move DE to "Antonio Luque" string address
7C3F 2E 84       10 781 ld      l, $84                      ; HL points to string screen address
7C41 CD 5B 6F    10 782 call    Print_String                ; print "Antonio Luque"
7C44 DD 2E E9    10 783 ld      ixl, $E9                    ; IX points to "Press any key" string attributes address
7C47 01 38 0D    10 784 ld      bc, 13*256+WHITE_PAPER      ; B = string length (loop counter), C = color attributes
7C4A CD 78 78    10 785 call    Screen_Apply_Color_Loop     ; apply color to string area
7C4D 13          10 786 inc     de                          ; move DE to "Press any key" string address
7C4E 2E E9       10 787 ld      l, $E9                      ; HL points to string screen address
7C50 CD 5B 6F    10 788 call    Print_String                ; print "Press any key"
7C53 CD C2 6E    10 789 call    Input_Key_Scan              ; wait for a key pressed
7C56 C3 85 79    10 790 jp      Screen_Menu_Strings         ; return to main menu
7C59             10 792 ; ----------------------------------------------------------------------------------------------------------------------
7C59             10 793 ; Screen_Menu_Hexagons: draw menu hexagons on screen
7C59             10 794 ;
7C59             10 795 ; Input:    -
7C59             10 796 ;
7C59             10 797 ; Output:   -
7C59             10 798 ;
7C59             10 799 ; Uses:     TOKEN_COLOR (current token color)
7C59             10 800 ;
7C59             10 801 ; Destroys: A, BC, DE, HL, IX, IY
7C59             10 802 ; ----------------------------------------------------------------------------------------------------------------------
7C59             10 803 Screen_Hexagons:
7C59 FD 21 EA 66 10 804 ld      iy, MENU_HEXAGONS           ; IY points to menu hexagons screen addresses
7C5D 3E 07       10 805 ld      a, WHITE                    ; set hexagon color
7C5F 32 9E 61    10 806 ld      (TOKEN_COLOR), a            ; save hexagon color
7C62 11 7E 65    10 807 ld      de, HEXAGON_EMPTY           ; DE points to empty hexagon sprite address
7C65 06 1C       10 808 ld      b, 28                       ; number of empty hexagons (loop counter)
7C67 CD 7E 7C    10 809 call    Screen_Hexagons_Loop        ; draw empty hexagons
7C6A 3E 05       10 810 ld      a, CYAN_COLOR               ; set token color
7C6C 32 9E 61    10 811 ld      (TOKEN_COLOR), a            ; save hexagon color
7C6F 11 3E 66    10 812 ld      de, HEXAGON_TOKEN           ; DE points to token sprite address
7C72 06 06       10 813 ld      b, 6                        ; number of cyan tokens (loop counter)
7C74 CD 7E 7C    10 814 call    Screen_Hexagons_Loop        ; draw cyan tokens
7C77 3E 02       10 815 ld      a, RED_COLOR                ; set token color
7C79 32 9E 61    10 816 ld      (TOKEN_COLOR), a            ; save hexagon color
7C7C 06 06       10 817 ld      b, 6                        ; number of red tokens (loop counter)
7C7E             10 818 Screen_Hexagons_Loop:
7C7E FD 6E 00    10 819 ld      l, (iy+0)                   ; HL points to hexagon/token screen address
7C81 FD 66 01    10 820 ld      h, (iy+1)
7C84 CD 0C 6E    10 821 call    Draw_Hexagon_Color          ; apply color to hexagon/token area
7C87 D5          10 822 push    de                          ; store hexagon/token sprite address
7C88 CD DE 6D    10 823 call    Draw_Sprite_Hexagon         ; draw hexagon sprite
7C8B D1          10 824 pop     de                          ; restore hexagon/token sprite address
7C8C FD 23       10 825 inc     iy                          ; move IY to next hexagon/token screen address
7C8E FD 23       10 826 inc     iy
7C90 10 EC       10 827 djnz    Screen_Hexagons_Loop        ; repeat for each hexagon/token
7C92 C9          10 828 ret
7C93             10 830 ; ----------------------------------------------------------------------------------------------------------------------
7C93             10 831 ; Screen_Clear_Text: clean a text attributes area
7C93             10 832 ;
7C93             10 833 ; Input:    HL = text area attributes address
7C93             10 834 ;
7C93             10 835 ; Output:   -
7C93             10 836 ;
7C93             10 837 ; Destroys: BC, DE, HL
7C93             10 838 ; ----------------------------------------------------------------------------------------------------------------------
7C93             10 839 Screen_Clear_Text:
7C93 01 30 00    10 840 ld      bc, 8*6                     ; length of attributes area: width x height (in bytes)
7C96             10 841 Screen_ClearText_Loop
7C96 11 18 00    10 842 ld      de, 24                      ; displacement for each text row
7C99 19          10 843 add     hl, de                      ; add displacement to text area attributes address
7C9A 54          10 844 ld      d, h                        ; DE points to text area attributes address
7C9B 5D          10 845 ld      e, l
7C9C 36 00       10 846 ld      (hl), 0                     ; set attributes color (black) for 1st byte of current row
7C9E 13          10 847 inc     de                          ; move DE to next byte attribute address
7C9F ED A0       10 848 ldi                                 ; set attributes color for the rest of bytes of current row
7CA1 ED A0       10 849 ldi
7CA3 ED A0       10 850 ldi
7CA5 ED A0       10 851 ldi
7CA7 ED A0       10 852 ldi
7CA9 ED A0       10 853 ldi
7CAB ED A0       10 854 ldi
7CAD ED A0       10 855 ldi
7CAF EA 96 7C    10 856 jp      pe, Screen_ClearText_Loop   ; repeat for each row
7CB2 C9          10 857 ret

; File #0: C:\Users\Antonio\source\repos\Hex\Z80CodeFiles\Hex2.z80asm

7CB3             0 19 ; ----------------------------------------------------------------------------------------------------------------------
7CB3             0 20 ; Credits and acknowledgements:
7CB3             0 21 ;
7CB3             0 22 ; - Einar Saukas and his amazing BRAINIAC: https://spectrumcomputing.co.uk/entry/31171/ZX-Spectrum/BRAINIAC,
7CB3             0 23 ;   PATHFINDER adaptation: https://spectrumcomputing.co.uk/entry/28178/ZX-Spectrum/PATHFINDER, loading screen,
7CB3             0 24 ;   "King+" font and TOKEN graphics.
7CB3             0 25 ; - Greg Surma article: https://gsurma.medium.com/hex-creating-intelligent-opponents-with-minimax-driven-ai-part-1-%CE%B
7CB3             0 26 ;   1-%CE%B2-pruning-cc1df850e5bd
7CB3             0 27 ; - Jack van Rijswijck's thesis: https://webdocs.cs.ualberta.ca/~hayward/theses/jackmsc.pdf
7CB3             0 28 ; - ChibiAkumas lessons: https://www.chibiakumas.com/z80/simplesamples.php#LessonS2
7CB3             0 29 ; - Santiago Romero assembler course: https://wiki.speccy.org/cursos/ensamblador/indice
7CB3             0 30 ;
7CB3             0 31 ; - Special thanks to my wife Sonia.
7CB3             0 32 ; ----------------------------------------------------------------------------------------------------------------------
