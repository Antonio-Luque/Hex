
; File #0: C:\Users\Antonio Luque\source\Repos\Hex\Z80CodeFiles\Hex2.z80asm

8000             0 1 ; ----------------------------------------------------------------------------------------------------------------------
8000             0 2 ; Hex2.z80asm
8000             0 3 ; Coded by Antonio Luque
8000             0 4 ;
8000             0 5 ; Build file
8000             0 6 ; ----------------------------------------------------------------------------------------------------------------------

; File #1: C:\Users\Antonio Luque\source\Repos\Hex\Z80CodeFiles\Data.z80asm

8000             1 1 ; ----------------------------------------------------------------------------------------------------------------------
8000             1 2 ; Data.z80asm
8000             1 3 ; Coded by Antonio Luque
8000             1 4 ;
8000             1 5 ; Definition of data, variables and tables
8000             1 6 ; ----------------------------------------------------------------------------------------------------------------------
8000             1 8 STACK                   org     $6000
6000             1 10 ; ----------------------------------------------------------------------------------------------------------------------
6000             1 11 ; Circular queue
6000             1 12 ; ----------------------------------------------------------------------------------------------------------------------
6000 00 00 00 00 1 13 CYAN_QUEUE_AREA         defs    256                         ; 256-aligned block reserved for circular queue
6004 00 00 00 00 1 13 
6008 00 00 00 00 1 13 
600C 00 00 00 00 1 13 
6010 00 00 00 00 1 13 
6014 00 00 00 00 1 13 
6018 00 00 00 00 1 13 
601C 00 00 00 00 1 13 
6020 00 00 00 00 1 13 
6024 00 00 00 00 1 13 
6028 00 00 00 00 1 13 
602C 00 00 00 00 1 13 
6030 00 00 00 00 1 13 
6034 00 00 00 00 1 13 
6038 00 00 00 00 1 13 
603C 00 00 00 00 1 13 
6040 00 00 00 00 1 13 
6044 00 00 00 00 1 13 
6048 00 00 00 00 1 13 
604C 00 00 00 00 1 13 
6050 00 00 00 00 1 13 
6054 00 00 00 00 1 13 
6058 00 00 00 00 1 13 
605C 00 00 00 00 1 13 
6060 00 00 00 00 1 13 
6064 00 00 00 00 1 13 
6068 00 00 00 00 1 13 
606C 00 00 00 00 1 13 
6070 00 00 00 00 1 13 
6074 00 00 00 00 1 13 
6078 00 00 00 00 1 13 
607C 00 00 00 00 1 13 
6080 00 00 00 00 1 13 
6084 00 00 00 00 1 13 
6088 00 00 00 00 1 13 
608C 00 00 00 00 1 13 
6090 00 00 00 00 1 13 
6094 00 00 00 00 1 13 
6098 00 00 00 00 1 13 
609C 00 00 00 00 1 13 
60A0 00 00 00 00 1 13 
60A4 00 00 00 00 1 13 
60A8 00 00 00 00 1 13 
60AC 00 00 00 00 1 13 
60B0 00 00 00 00 1 13 
60B4 00 00 00 00 1 13 
60B8 00 00 00 00 1 13 
60BC 00 00 00 00 1 13 
60C0 00 00 00 00 1 13 
60C4 00 00 00 00 1 13 
60C8 00 00 00 00 1 13 
60CC 00 00 00 00 1 13 
60D0 00 00 00 00 1 13 
60D4 00 00 00 00 1 13 
60D8 00 00 00 00 1 13 
60DC 00 00 00 00 1 13 
60E0 00 00 00 00 1 13 
60E4 00 00 00 00 1 13 
60E8 00 00 00 00 1 13 
60EC 00 00 00 00 1 13 
60F0 00 00 00 00 1 13 
60F4 00 00 00 00 1 13 
60F8 00 00 00 00 1 13 
60FC 00 00 00 00 1 13 
6100             1 15 ; ----------------------------------------------------------------------------------------------------------------------
6100             1 16 ; CYAN BOARDS: these boards must be located immediately after cyan queue area!
6100             1 17 ; 
6100             1 18 ; These boards hold a determined position of the board from cyan perspective. They are used to calculate CYAN "two-
6100             1 19 ; distance" (Jack van Rijswijck) from UP to DOWN edges and CYAN two-distance from DOWN to UP edges. The cyan UP-DOWN
6100             1 20 ; board is also used to store CYAN potentials and TOTAL potentials.
6100             1 21 ; 
6100             1 22 ; The values of $7F form the border of the board. The UP and DOWN edges are identified with 7th bit set and the lowest 3
6100             1 23 ; bits are the edge number. The rest of bytes indicates "two-distance" from goal (stored in lowest 6 bits), and a flag
6100             1 24 ; that indicates a position occupied by a friendly token (stored in 6th bit).
6100             1 25 ; ----------------------------------------------------------------------------------------------------------------------
6100             1 26 CYAN_BOARD_UP_DOWN:
6100 7F 7F 7F 7F 1 27 defb      $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F
6104 7F 7F 7F 7F 1 27 
6108 7F 00 00 00 1 28 defb    $7F, $00, $00, $00, $00, $00, $00, $00, $7F
610C 00 00 00 00 1 28 
6110 7F          1 28 
6111 7F 00 00 00 1 29 defb       $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6115 00 00 00 00 1 29 
6119 7F          1 29 
611A 7F 00 00 00 1 30 defb          $7F, $00, $00, $00, $00, $00, $00, $00, $7F
611E 00 00 00 00 1 30 
6122 7F          1 30 
6123 7F 00 00 00 1 31 defb             $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6127 00 00 00 00 1 31 
612B 7F          1 31 
612C 7F 00 00 00 1 32 defb                $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6130 00 00 00 00 1 32 
6134 7F          1 32 
6135 7F 00 00 00 1 33 defb                   $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6139 00 00 00 00 1 33 
613D 7F          1 33 
613E 7F 00 00 00 1 34 defb                      $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6142 00 00 00 00 1 34 
6146 7F          1 34 
6147 7F 80 81 82 1 35 defb                         $7F, $80, $81, $82, $83, $84, $85, $86, $7F
614B 83 84 85 86 1 35 
614F 7F          1 35 
6150             1 36 CYAN_BOARD_DOWN_UP:
6150 7F 00 00 00 1 37 defb    $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6154 00 00 00 00 1 37 
6158 7F          1 37 
6159 7F 00 00 00 1 38 defb       $7F, $00, $00, $00, $00, $00, $00, $00, $7F
615D 00 00 00 00 1 38 
6161 7F          1 38 
6162 7F 00 00 00 1 39 defb          $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6166 00 00 00 00 1 39 
616A 7F          1 39 
616B 7F 00 00 00 1 40 defb             $7F, $00, $00, $00, $00, $00, $00, $00, $7F
616F 00 00 00 00 1 40 
6173 7F          1 40 
6174 7F 00 00 00 1 41 defb                $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6178 00 00 00 00 1 41 
617C 7F          1 41 
617D 7F 00 00 00 1 42 defb                   $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6181 00 00 00 00 1 42 
6185 7F          1 42 
6186 7F 00 00 00 1 43 defb                      $7F, $00, $00, $00, $00, $00, $00, $00, $7F
618A 00 00 00 00 1 43 
618E 7F          1 43 
618F 7F 7F 7F 7F 1 44 defb                         $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F
6193 7F 7F 7F 7F 1 44 
6197             1 46 ; ----------------------------------------------------------------------------------------------------------------------
6197             1 47 ; Variables
6197             1 48 ; ----------------------------------------------------------------------------------------------------------------------
6197             1 49 POTENTIALS:                                                 ; (must be in a 256-byte boundary)
6197 00          1 50 defb    0                           ; board potential
6198 00          1 51 defb    0                           ; attack mobility
6199 00          1 52 AI_PLAYER               defb    0                           ; speccy side (FRIEND or ENEMY)
619A 00          1 53 AI_DEPTH                defb    0                           ; recursion depth level (1-4)
619B 00          1 54 MOVE_NUMBER             defb    0                           ; current move number
619C 00          1 55 LEVEL_COLOR             defb    0                           ; current level color for frame border
619D 00          1 56 GAME_LEVEL              defb    0                           ; current game level (1-4)
619E 00          1 57 TOKEN_COLOR             defb    0                           ; current token color
619F 05          1 58 PLAYER_COLOR            defb    5                           ; current player color
61A0             1 60 ; ----------------------------------------------------------------------------------------------------------------------
61A0             1 61 ; Screen addresses look-up table for board hexagons
61A0             1 62 ;
61A0             1 63 ; The first column contains the screen addresses high byte
61A0             1 64 ; The rest of bytes are the screen addresses low byte
61A0             1 65 ; ----------------------------------------------------------------------------------------------------------------------
61A0             1 66 BOARD_MAP:
61A0 40 A6 A8 AA 1 67 defb    $40, $A6, $A8, $AA, $AC, $AE, $B0, $B2
61A4 AC AE B0 B2 1 67 
61A8 40 E7 E9 EB 1 68 defb    $40, $E7, $E9, $EB, $ED, $EF, $F1, $F3
61AC ED EF F1 F3 1 68 
61B0 48 28 2A 2C 1 69 defb    $48, $28, $2A, $2C, $2E, $30, $32, $34
61B4 2E 30 32 34 1 69 
61B8 48 69 6B 6D 1 70 defb    $48, $69, $6B, $6D, $6F, $71, $73, $75
61BC 6F 71 73 75 1 70 
61C0 48 AA AC AE 1 71 defb    $48, $AA, $AC, $AE, $B0, $B2, $B4, $B6
61C4 B0 B2 B4 B6 1 71 
61C8 48 EB ED EF 1 72 defb    $48, $EB, $ED, $EF, $F1, $F3, $F5, $F7
61CC F1 F3 F5 F7 1 72 
61D0 50 2C 2E 30 1 73 defb    $50, $2C, $2E, $30, $32, $34, $36, $38
61D4 32 34 36 38 1 73 
61D8             1 75 ; ----------------------------------------------------------------------------------------------------------------------
61D8             1 76 ; Keyboard array map
61D8             1 77 ; ----------------------------------------------------------------------------------------------------------------------
61D8 20 7A 78 63 1 78 KEY_MAP                 defm    " zxcvasdfgqwert1234509876poiuy\x0Dlkjh  mnb"
61DC 76 61 73 64 1 78 
61E0 66 67 71 77 1 78 
61E4 65 72 74 31 1 78 
61E8 32 33 34 35 1 78 
61EC 30 39 38 37 1 78 
61F0 36 70 6F 69 1 78 
61F4 75 79 0D 6C 1 78 
61F8 6B 6A 68 20 1 78 
61FC 20 6D 6E 62 1 78 
6200             1 80 ;org     $6200
6200             1 81 ; ----------------------------------------------------------------------------------------------------------------------
6200             1 82 ; Vector table of routines (must be aligned at the next page of cyan board arrays)
6200             1 83 ; ----------------------------------------------------------------------------------------------------------------------
6200             1 84 CYAN_VECTOR_TABLE:
6200 A1 73       1 85 defw    PathFinder_CYAN_Edge_0
6202 C1 73       1 86 defw    PathFinder_CYAN_Edge_1
6204 DC 73       1 87 defw    PathFinder_CYAN_Edge_2
6206 FA 73       1 88 defw    PathFinder_CYAN_Edge_3
6208 19 74       1 89 defw    PathFinder_CYAN_Edge_4
620A 37 74       1 90 defw    PathFinder_CYAN_Edge_5
620C 52 74       1 91 defw    PathFinder_CYAN_Edge_6
620E             1 93 ; ----------------------------------------------------------------------------------------------------------------------
620E             1 94 ; Variables and strings
620E             1 95 ; ----------------------------------------------------------------------------------------------------------------------
620E 00          1 96 THREE_ROW               defb    0                           ; three-in-a-row counter
620F 0F 0E 0C 0B 1 97 ROW_COLOR_MAP           defb    15, 14, 12, 11, 13, 10      ; level-color map for frame border
6213 0D 0A       1 97 
6215 00 2D 30 00 1 98 STR_MOVE                defb    0, '-', '0', 0, '\0'        ; formatted move string
6219 00          1 98 
621A 53 70 65 63 1 99 STR_SPECCY              defm    "Speccy\0"
621E 63 79 00    1 99 
6221 50 6C 61 79 1 100 STR_PLAYER              defm    "Player\0"
6225 65 72 00    1 100 
6228 4C 65 76 65 1 101 STR_LEVELTEXT           defm    "Level\0"
622C 6C 00       1 101 
622E 46 49 4C 4C 1 102 STR_FILLED              defm    "FILLED\0"
6232 45 44 00    1 102 
6235 57 41 49 54 1 103 STR_WAIT                defm    "WAIT\0"
6239 00          1 103 
623A 20 57 49 4E 1 104 STR_WINNER              defm    " WINS \0"
623E 53 20 00    1 104 
6241 20 20 20 20 1 105 STR_EMPTY4              defm    "    \0"
6245 00          1 105 
6246 20 20 20 20 1 106 STR_EMPTY6              defm    "      \0"
624A 20 20 00    1 106 
624D             1 108 ; ----------------------------------------------------------------------------------------------------------------------
624D             1 109 ; Conversion table: from position to XY board indexes
624D             1 110 ; ----------------------------------------------------------------------------------------------------------------------
624D             1 111 BOARD_COORDINATES:
624D 00 00 00 00 1 112 defb    $00, $00, $00, $00, $00, $00, $00, $00
6251 00 00 00 00 1 112 
6255 00 09 0A 0B 1 113 defb    $00, $09, $0A, $0B, $0C, $0D, $0E, $0F
6259 0C 0D 0E 0F 1 113 
625D 00 12 13 14 1 114 defb    $00, $12, $13, $14, $15, $16, $17, $18
6261 15 16 17 18 1 114 
6265 00 1B 1C 1D 1 115 defb    $00, $1B, $1C, $1D, $1E, $1F, $20, $21
6269 1E 1F 20 21 1 115 
626D 00 24 25 26 1 116 defb    $00, $24, $25, $26, $27, $28, $29, $2A
6271 27 28 29 2A 1 116 
6275 00 2D 2E 2F 1 117 defb    $00, $2D, $2E, $2F, $30, $31, $32, $33
6279 30 31 32 33 1 117 
627D 00 36 37 38 1 118 defb    $00, $36, $37, $38, $39, $3A, $3B, $3C
6281 39 3A 3B 3C 1 118 
6285 00 3F 40 41 1 119 defb    $00, $3F, $40, $41, $42, $43, $44, $45
6289 42 43 44 45 1 119 
628D             1 121 ; ----------------------------------------------------------------------------------------------------------------------
628D             1 122 ; Graphics map indexes for the frame tiles
628D             1 123 ; ----------------------------------------------------------------------------------------------------------------------
628D             1 124 FRAME_MAP:
628D 00 01 01 01 1 125 defb      0,   1,   1,   1,   1,   1,   2,   3
6291 01 01 02 03 1 125 
6295 04 FF FF FF 1 126 defb      4,  -1,  -1,  -1,  -1,  -1,  -1,  -1
6299 FF FF FF FF 1 126 
629D 05 06 07 01 1 127 defb      5,   6,   7,   1,   1,   1,   1,   1
62A1 01 01 01 01 1 127 
62A5 01 01 01 01 1 128 defb      1,   1,   1,   1,   1,   1,   1,   8
62A9 01 01 01 08 1 128 
62AD 09 01 01 01 1 129 defb      9,   1,   1,   1,   1,   1,   1,   1
62B1 01 01 01 01 1 129 
62B5 01 01 01 01 1 130 defb      1,   1,   1,   1,   1,   1,   1,   1
62B9 01 01 01 01 1 130 
62BD 0A 06 0D 0D 1 131 defb     10,   6,  13,  13,  13,   3,  11,   1
62C1 0D 03 0B 01 1 131 
62C5 01 01 01 01 1 132 defb      1,   1,   1,   1,   1,   1,   1,  12
62C9 01 01 01 0C 1 132 
62CD             1 134 ; ----------------------------------------------------------------------------------------------------------------------
62CD             1 135 ; Definition of a small "Opening Book" for speccy first move
62CD             1 136 ; ----------------------------------------------------------------------------------------------------------------------
62CD             1 137 OPENINGS:
62CD 0F 14 16 17 1 138 defb    $0F, $14, $16, $17, $18, $1C, $1D
62D1 18 1C 1D    1 138 
62D4 1E 1F 20 24 1 139 defb    $1E, $1F, $20, $24, $25, $26, $27
62D8 25 26 27    1 139 
62DB 28 29 2A 2E 1 140 defb    $28, $29, $2A, $2E, $2F, $30, $31
62DF 2F 30 31    1 140 
62E2 32 36 37 38 1 141 defb    $32, $36, $37, $38, $3A, $3F
62E6 3A 3F       1 141 
62E8             1 143 ; ----------------------------------------------------------------------------------------------------------------------
62E8             1 144 ; Timer variables
62E8             1 145 ; ----------------------------------------------------------------------------------------------------------------------
62E8 00          1 146 TIMER_FLAG              defb    0                           ; 0 = timer stopped, 1 = cyan timer on, 2 = red timer on
62E9             1 147 ; for each timer:
62E9             1 148 ;   1st byte = interrupt counter (incremented each 1/50 seconds)
62E9             1 149 ;   2nd byte = seconds counter
62E9             1 150 ;   3th byte = minutes counter
62E9 32 00 00    1 151 CYAN_TIMER              defb    50, 0, 0
62EC 32 00 00    1 152 RED_TIMER               defb    50, 0, 0
62EF             1 154 ; ----------------------------------------------------------------------------------------------------------------------
62EF             1 155 ; Screen addresses look-up array for board numbers
62EF             1 156 ; ----------------------------------------------------------------------------------------------------------------------
62EF             1 157 NUMBER_SCREEN:
62EF A5 43 E6 43 1 158 defw    $43A5, $43E6, $4B27, $4B68, $4BA9, $4BEA, $532B
62F3 27 4B 68 4B 1 158 
62F7 A9 4B EA 4B 1 158 
62FB 2B 53       1 158 
62FD FF FF FF    1 160 FILLER_1                defb    $FF, $FF, $FF               ; filler to align next block (not used)
6300             1 162 ;org     $6300
6300             1 163 ; ----------------------------------------------------------------------------------------------------------------------
6300             1 164 ; Circular queue
6300             1 165 ; ----------------------------------------------------------------------------------------------------------------------
6300 00 00 00 00 1 166 RED_QUEUE_AREA          defs    256                         ; 256-aligned block reserved for circular queue
6304 00 00 00 00 1 166 
6308 00 00 00 00 1 166 
630C 00 00 00 00 1 166 
6310 00 00 00 00 1 166 
6314 00 00 00 00 1 166 
6318 00 00 00 00 1 166 
631C 00 00 00 00 1 166 
6320 00 00 00 00 1 166 
6324 00 00 00 00 1 166 
6328 00 00 00 00 1 166 
632C 00 00 00 00 1 166 
6330 00 00 00 00 1 166 
6334 00 00 00 00 1 166 
6338 00 00 00 00 1 166 
633C 00 00 00 00 1 166 
6340 00 00 00 00 1 166 
6344 00 00 00 00 1 166 
6348 00 00 00 00 1 166 
634C 00 00 00 00 1 166 
6350 00 00 00 00 1 166 
6354 00 00 00 00 1 166 
6358 00 00 00 00 1 166 
635C 00 00 00 00 1 166 
6360 00 00 00 00 1 166 
6364 00 00 00 00 1 166 
6368 00 00 00 00 1 166 
636C 00 00 00 00 1 166 
6370 00 00 00 00 1 166 
6374 00 00 00 00 1 166 
6378 00 00 00 00 1 166 
637C 00 00 00 00 1 166 
6380 00 00 00 00 1 166 
6384 00 00 00 00 1 166 
6388 00 00 00 00 1 166 
638C 00 00 00 00 1 166 
6390 00 00 00 00 1 166 
6394 00 00 00 00 1 166 
6398 00 00 00 00 1 166 
639C 00 00 00 00 1 166 
63A0 00 00 00 00 1 166 
63A4 00 00 00 00 1 166 
63A8 00 00 00 00 1 166 
63AC 00 00 00 00 1 166 
63B0 00 00 00 00 1 166 
63B4 00 00 00 00 1 166 
63B8 00 00 00 00 1 166 
63BC 00 00 00 00 1 166 
63C0 00 00 00 00 1 166 
63C4 00 00 00 00 1 166 
63C8 00 00 00 00 1 166 
63CC 00 00 00 00 1 166 
63D0 00 00 00 00 1 166 
63D4 00 00 00 00 1 166 
63D8 00 00 00 00 1 166 
63DC 00 00 00 00 1 166 
63E0 00 00 00 00 1 166 
63E4 00 00 00 00 1 166 
63E8 00 00 00 00 1 166 
63EC 00 00 00 00 1 166 
63F0 00 00 00 00 1 166 
63F4 00 00 00 00 1 166 
63F8 00 00 00 00 1 166 
63FC 00 00 00 00 1 166 
6400             1 168 ; ----------------------------------------------------------------------------------------------------------------------
6400             1 169 ; RED BOARDS: these boards must be located immediately after red queue area!
6400             1 170 ; 
6400             1 171 ; These boards hold a determined position of the board from red perspective. They are used to calculate RED "two-
6400             1 172 ; distance" (Jack van Rijswijck) from LEFT to RIGHT edges and RED two-distance from RIGHT to LEFT edges. The red
6400             1 173 ; LEFT-RIGHT board is also used to store RED potentials.
6400             1 174 ; 
6400             1 175 ; The values of $7F form the border of the board. The LEFT-RIGHT edges are identified with Bit 7 set and the lowest 3
6400             1 176 ; bits are the edge number. The rest of bytes indicates "two-distance" from goal (stored in lowest 6 bits), and a flag
6400             1 177 ; that indicates a position occupied by a friendly token (stored in 6th bit).
6400             1 178 ; ----------------------------------------------------------------------------------------------------------------------
6400             1 179 RED_BOARD_LEFT_RIGHT:
6400 7F 7F 7F 7F 1 180 defb      $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F
6404 7F 7F 7F 7F 1 180 
6408 7F 00 00 00 1 181 defb    $7F, $00, $00, $00, $00, $00, $00, $00, $80
640C 00 00 00 00 1 181 
6410 80          1 181 
6411 7F 00 00 00 1 182 defb       $7F, $00, $00, $00, $00, $00, $00, $00, $81
6415 00 00 00 00 1 182 
6419 81          1 182 
641A 7F 00 00 00 1 183 defb          $7F, $00, $00, $00, $00, $00, $00, $00, $82
641E 00 00 00 00 1 183 
6422 82          1 183 
6423 7F 00 00 00 1 184 defb             $7F, $00, $00, $00, $00, $00, $00, $00, $83
6427 00 00 00 00 1 184 
642B 83          1 184 
642C 7F 00 00 00 1 185 defb                $7F, $00, $00, $00, $00, $00, $00, $00, $84
6430 00 00 00 00 1 185 
6434 84          1 185 
6435 7F 00 00 00 1 186 defb                   $7F, $00, $00, $00, $00, $00, $00, $00, $85
6439 00 00 00 00 1 186 
643D 85          1 186 
643E 7F 00 00 00 1 187 defb                      $7F, $00, $00, $00, $00, $00, $00, $00, $86
6442 00 00 00 00 1 187 
6446 86          1 187 
6447 7F 7F 7F 7F 1 188 defb                         $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F
644B 7F 7F 7F 7F 1 188 
644F 7F          1 188 
6450             1 189 RED_BOARD_RIGHT_LEFT:
6450 80 00 00 00 1 190 defb    $80, $00, $00, $00, $00, $00, $00, $00, $7F
6454 00 00 00 00 1 190 
6458 7F          1 190 
6459 81 00 00 00 1 191 defb       $81, $00, $00, $00, $00, $00, $00, $00, $7F
645D 00 00 00 00 1 191 
6461 7F          1 191 
6462 82 00 00 00 1 192 defb          $82, $00, $00, $00, $00, $00, $00, $00, $7F
6466 00 00 00 00 1 192 
646A 7F          1 192 
646B 83 00 00 00 1 193 defb             $83, $00, $00, $00, $00, $00, $00, $00, $7F
646F 00 00 00 00 1 193 
6473 7F          1 193 
6474 84 00 00 00 1 194 defb                $84, $00, $00, $00, $00, $00, $00, $00, $7F
6478 00 00 00 00 1 194 
647C 7F          1 194 
647D 85 00 00 00 1 195 defb                   $85, $00, $00, $00, $00, $00, $00, $00, $7F
6481 00 00 00 00 1 195 
6485 7F          1 195 
6486 86 00 00 00 1 196 defb                      $86, $00, $00, $00, $00, $00, $00, $00, $7F
648A 00 00 00 00 1 196 
648E 7F          1 196 
648F 7F 7F 7F 7F 1 197 defb                         $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F
6493 7F 7F 7F 7F 1 197 
6497             1 199 ; ----------------------------------------------------------------------------------------------------------------------
6497             1 200 ; Timer digits graphics. Must be in a 256 bytes boundary
6497             1 201 ; ----------------------------------------------------------------------------------------------------------------------
6497             1 202 TIMER_DIGITS:
6497 00 0F 0B 0B 1 203 defb    $00, $0F, $0B, $0B, $0B, $0F, $00, $00
649B 0B 0F 00 00 1 203 
649F 00 06 0E 06 1 204 defb    $00, $06, $0E, $06, $06, $06, $00, $00
64A3 06 06 00 00 1 204 
64A7 00 0F 03 0F 1 205 defb    $00, $0F, $03, $0F, $08, $0F, $00, $00
64AB 08 0F 00 00 1 205 
64AF 00 0F 03 07 1 206 defb    $00, $0F, $03, $07, $03, $0F, $00, $00
64B3 03 0F 00 00 1 206 
64B7 00 0B 0B 0F 1 207 defb    $00, $0B, $0B, $0F, $03, $03, $00, $00
64BB 03 03 00 00 1 207 
64BF 00 0F 08 0F 1 208 defb    $00, $0F, $08, $0F, $03, $0F, $00, $00
64C3 03 0F 00 00 1 208 
64C7 00 0F 0C 0F 1 209 defb    $00, $0F, $0C, $0F, $0D, $0F, $00, $00
64CB 0D 0F 00 00 1 209 
64CF 00 0F 03 03 1 210 defb    $00, $0F, $03, $03, $03, $03, $00, $00
64D3 03 03 00 00 1 210 
64D7 00 0F 0B 0F 1 211 defb    $00, $0F, $0B, $0F, $0B, $0F, $00, $00
64DB 0B 0F 00 00 1 211 
64DF 00 0F 0B 0F 1 212 defb    $00, $0F, $0B, $0F, $03, $0F, $00, $00
64E3 03 0F 00 00 1 212 
64E7             1 214 ; ----------------------------------------------------------------------------------------------------------------------
64E7             1 215 ; Tone parameters for sound effects
64E7             1 216 ; ----------------------------------------------------------------------------------------------------------------------
64E7             1 217 ; for each tone (from left to right):
64E7             1 218 ;   - number of frames in the block, slide changes applied once per frame (1..65536)
64E7             1 219 ;   - length of a frame (1..65536)
64E7             1 220 ;   - tone pitch, lower numbers for lower tone (1..65536)
64E7             1 221 ;   - pitch slide, this value is added to pitch every frame (-32767..32768)
64E7             1 222 ; ----------------------------------------------------------------------------------------------------------------------
64E7 01 00 E8 03 1 223 TOKEN_FX                defw       1, 1000, 1400,   0
64EB 78 05 00 00 1 223 
64EF 05 00 88 13 1 224 WINNER_FX               defw       5, 5000,  200, 100
64F3 C8 00 64 00 1 224 
64F7 E8 03 0A 00 1 225 FILLED_FX               defw    1000,   10,  100,   0
64FB 64 00 00 00 1 225 
64FF FF          1 227 FILLER_2                defb    $FF                         ; filler to align next block (not used)
6500             1 229 ;org     $6500
6500             1 230 ; ----------------------------------------------------------------------------------------------------------------------
6500             1 231 ; Vector table of routines (must be aligned at the next page of red board arrays)
6500             1 232 ; ----------------------------------------------------------------------------------------------------------------------
6500             1 233 RED_VECTOR_TABLE:
6500 87 72       1 234 defw    PathFinder_RED_Edge_0
6502 B5 72       1 235 defw    PathFinder_RED_Edge_1
6504 DB 72       1 236 defw    PathFinder_RED_Edge_2
6506 01 73       1 237 defw    PathFinder_RED_Edge_3
6508 27 73       1 238 defw    PathFinder_RED_Edge_4
650A 4D 73       1 239 defw    PathFinder_RED_Edge_5
650C 73 73       1 240 defw    PathFinder_RED_Edge_6
650E             1 242 ; ----------------------------------------------------------------------------------------------------------------------
650E             1 243 ; Graphics for the screen frame
650E             1 244 ; ----------------------------------------------------------------------------------------------------------------------
650E             1 245 FRAME_TILES:
650E 00 00 1F 3F 1 246 defb    $00, $00, $1F, $3F, $3F, $3F, $3C, $3C
6512 3F 3F 3C 3C 1 246 
6516 00 00 FF FF 1 247 defb    $00, $00, $FF, $FF, $FF, $FF, $00, $00
651A FF FF 00 00 1 247 
651E 00 00 FF FE 1 248 defb    $00, $00, $FF, $FE, $FE, $FF, $00, $00
6522 FE FF 00 00 1 248 
6526 03 07 0F 0F 1 249 defb    $03, $07, $0F, $0F, $0F, $0F, $07, $03
652A 0F 0F 07 03 1 249 
652E FF FE FC FC 1 250 defb    $FF, $FE, $FC, $FC, $FC, $FC, $FE, $FF
6532 FC FC FE FF 1 250 
6536 FF 7F 3F 3F 1 251 defb    $FF, $7F, $3F, $3F, $3F, $3F, $7F, $FF
653A 3F 3F 7F FF 1 251 
653E C0 E0 F0 F0 1 252 defb    $C0, $E0, $F0, $F0, $F0, $F0, $E0, $C0
6542 F0 F0 E0 C0 1 252 
6546 00 00 FF 7F 1 253 defb    $00, $00, $FF, $7F, $7F, $FF, $00, $00
654A 7F FF 00 00 1 253 
654E 00 00 F8 FC 1 254 defb    $00, $00, $F8, $FC, $FC, $FC, $3C, $3C
6552 FC FC 3C 3C 1 254 
6556 3C 3C 3F 3F 1 255 defb    $3C, $3C, $3F, $3F, $3F, $1F, $00, $00
655A 3F 1F 00 00 1 255 
655E 00 00 FE FF 1 256 defb    $00, $00, $FE, $FF, $FF, $FE, $00, $00
6562 FF FE 00 00 1 256 
6566 00 00 7F FF 1 257 defb    $00, $00, $7F, $FF, $FF, $7F, $00, $00
656A FF 7F 00 00 1 257 
656E 3C 3C FC FC 1 258 defb    $3C, $3C, $FC, $FC, $FC, $F8, $00, $00
6572 FC F8 00 00 1 258 
6576 00 00 38 7C 1 259 defb    $00, $00, $38, $7C, $7C, $38, $00, $00
657A 7C 38 00 00 1 259 
657E             1 261 ; ----------------------------------------------------------------------------------------------------------------------
657E             1 262 ; Hexagon sprites
657E             1 263 ; ----------------------------------------------------------------------------------------------------------------------
657E             1 264 HEXAGON_EMPTY:
657E 07 E0 18 18 1 265 defb    $07, $E0, $18, $18, $20, $04, $24, $04
6582 20 04 24 04 1 265 
6586 48 02 48 02 1 266 defb    $48, $02, $48, $02, $40, $02, $40, $02
658A 40 02 40 02 1 266 
658E 40 02 40 02 1 267 defb    $40, $02, $40, $02, $40, $12, $40, $12
6592 40 12 40 12 1 267 
6596 20 24 20 04 1 268 defb    $20, $24, $20, $04, $18, $18, $07, $E0
659A 18 18 07 E0 1 268 
659E             1 269 HEXAGON_SPRITE:
659E 03 C0 0C 30 1 270 defb    $03, $C0, $0C, $30, $10, $08, $12, $08
65A2 10 08 12 08 1 270 
65A6 24 04 24 04 1 271 defb    $24, $04, $24, $04, $20, $04, $20, $04
65AA 20 04 20 04 1 271 
65AE 20 04 20 04 1 272 defb    $20, $04, $20, $04, $20, $24, $20, $24
65B2 20 24 20 24 1 272 
65B6 10 48 10 08 1 273 defb    $10, $48, $10, $08, $0C, $30, $03, $C0
65BA 0C 30 03 C0 1 273 
65BE 01 80 02 40 1 275 defb    $01, $80, $02, $40, $04, $20, $09, $10
65C2 04 20 09 10 1 275 
65C6 0A 10 0A 10 1 276 defb    $0A, $10, $0A, $10, $08, $10, $08, $10
65CA 08 10 08 10 1 276 
65CE 08 10 08 10 1 277 defb    $08, $10, $08, $10, $08, $50, $08, $50
65D2 08 50 08 50 1 277 
65D6 08 90 04 20 1 278 defb    $08, $90, $04, $20, $02, $40, $01, $80
65DA 02 40 01 80 1 278 
65DE 00 80 00 80 1 280 defb    $00, $80, $00, $80, $00, $80, $00, $80
65E2 00 80 00 80 1 280 
65E6 00 80 00 80 1 281 defb    $00, $80, $00, $80, $00, $80, $00, $80
65EA 00 80 00 80 1 281 
65EE 00 80 00 80 1 282 defb    $00, $80, $00, $80, $00, $80, $00, $80
65F2 00 80 00 80 1 282 
65F6 00 80 00 80 1 283 defb    $00, $80, $00, $80, $00, $80, $00, $80
65FA 00 80 00 80 1 283 
65FE 01 80 02 40 1 285 defb    $01, $80, $02, $40, $05, $A0, $0B, $D0
6602 05 A0 0B D0 1 285 
6606 0B D0 0B D0 1 286 defb    $0B, $D0, $0B, $D0, $0B, $D0, $0B, $D0
660A 0B D0 0B D0 1 286 
660E 0B D0 0B D0 1 287 defb    $0B, $D0, $0B, $D0, $0B, $D0, $0B, $D0
6612 0B D0 0B D0 1 287 
6616 0B D0 05 A0 1 288 defb    $0B, $D0, $05, $A0, $02, $40, $01, $80
661A 02 40 01 80 1 288 
661E 03 C0 0C 30 1 290 defb    $03, $C0, $0C, $30, $13, $C8, $17, $E8
6622 13 C8 17 E8 1 290 
6626 2F F4 2F F4 1 291 defb    $2F, $F4, $2F, $F4, $2F, $F4, $2F, $F4
662A 2F F4 2F F4 1 291 
662E 2F F4 2F F4 1 292 defb    $2F, $F4, $2F, $F4, $2F, $F4, $2F, $F4
6632 2F F4 2F F4 1 292 
6636 17 E8 13 C8 1 293 defb    $17, $E8, $13, $C8, $0C, $30, $03, $C0
663A 0C 30 03 C0 1 293 
663E             1 294 HEXAGON_TOKEN:
663E 07 E0 18 18 1 295 defb    $07, $E0, $18, $18, $27, $E4, $2F, $F4
6642 27 E4 2F F4 1 295 
6646 5F FA 5F FA 1 296 defb    $5F, $FA, $5F, $FA, $5F, $FA, $5F, $FA
664A 5F FA 5F FA 1 296 
664E 5F FA 5F FA 1 297 defb    $5F, $FA, $5F, $FA, $5F, $FA, $5F, $FA
6652 5F FA 5F FA 1 297 
6656 2F F4 27 E4 1 298 defb    $2F, $F4, $27, $E4, $18, $18, $07, $E0
665A 18 18 07 E0 1 298 
665E             1 300 ; ----------------------------------------------------------------------------------------------------------------------
665E             1 301 ; Board letter sprites
665E             1 302 ; ----------------------------------------------------------------------------------------------------------------------
665E             1 303 LETTER_SPRITES:
665E 3C 7E FF C3 1 304 defb    $3C, $7E, $FF, $C3, $F3, $C3, $D3, $C3, $7E, $3C
6662 F3 C3 D3 C3 1 304 
6666 7E 3C       1 304 
6668 3C 7E CF CF 1 305 defb    $3C, $7E, $CF, $CF, $C3, $CB, $CB, $C3, $7E, $3C
666C C3 CB CB C3 1 305 
6670 7E 3C       1 305 
6672 3C 7E FF E3 1 306 defb    $3C, $7E, $FF, $E3, $CF, $CF, $CF, $E3, $7E, $3C
6676 CF CF CF E3 1 306 
667A 7E 3C       1 306 
667C 3C 7E F3 F3 1 307 defb    $3C, $7E, $F3, $F3, $C3, $D3, $D3, $C3, $7E, $3C
6680 C3 D3 D3 C3 1 307 
6684 7E 3C       1 307 
6686 3C 7E FF E3 1 308 defb    $3C, $7E, $FF, $E3, $CB, $C3, $CF, $E3, $7E, $3C
668A CB C3 CF E3 1 308 
668E 7E 3C       1 308 
6690 3C 7E E3 CF 1 309 defb    $3C, $7E, $E3, $CF, $C7, $CF, $CF, $CF, $7E, $3C
6694 C7 CF CF CF 1 309 
6698 7E 3C       1 309 
669A 3C 7E FF E3 1 310 defb    $3C, $7E, $FF, $E3, $D3, $D3, $E3, $F3, $46, $3C
669E D3 D3 E3 F3 1 310 
66A2 46 3C       1 310 
66A4             1 312 ; ----------------------------------------------------------------------------------------------------------------------
66A4             1 313 ; Board number sprites
66A4             1 314 ; ----------------------------------------------------------------------------------------------------------------------
66A4             1 315 NUMBER_SPRITES:
66A4 3C 7E E7 C7 1 316 defb    $3C, $7E, $E7, $C7, $E7, $E7, $E7, $E7, $7E, $3C
66A8 E7 E7 E7 E7 1 316 
66AC 7E 3C       1 316 
66AE 3C 7E E7 D3 1 317 defb    $3C, $7E, $E7, $D3, $F3, $E7, $CF, $C3, $7E, $3C
66B2 F3 E7 CF C3 1 317 
66B6 7E 3C       1 317 
66B8 3C 7E C7 F3 1 318 defb    $3C, $7E, $C7, $F3, $E3, $F3, $F3, $C7, $7E, $3C
66BC E3 F3 F3 C7 1 318 
66C0 7E 3C       1 318 
66C2 3C 7E D3 D3 1 319 defb    $3C, $7E, $D3, $D3, $C3, $F3, $F3, $F3, $7E, $3C
66C6 C3 F3 F3 F3 1 319 
66CA 7E 3C       1 319 
66CC 3C 7E C3 CF 1 320 defb    $3C, $7E, $C3, $CF, $C7, $F3, $F3, $C7, $7E, $3C
66D0 C7 F3 F3 C7 1 320 
66D4 7E 3C       1 320 
66D6 3C 7E E3 CF 1 321 defb    $3C, $7E, $E3, $CF, $C3, $CB, $CB, $C3, $7E, $3C
66DA C3 CB CB C3 1 321 
66DE 7E 3C       1 321 
66E0 3C 7E C3 F3 1 322 defb    $3C, $7E, $C3, $F3, $F3, $E7, $E7, $E7, $7E, $3C
66E4 F3 E7 E7 E7 1 322 
66E8 7E 3C       1 322 
66EA             1 324 ; ----------------------------------------------------------------------------------------------------------------------
66EA             1 325 ; Screen addresses for menu hexagons
66EA             1 326 ; ----------------------------------------------------------------------------------------------------------------------
66EA             1 327 MENU_HEXAGONS:
66EA 01 40 05 40 1 328 defw    $4001, $4005, $4008, $400C, $400F, $4013, $401A
66EE 08 40 0C 40 1 328 
66F2 0F 40 13 40 1 328 
66F6 1A 40       1 328 
66F8 45 40 48 40 1 329 defw    $4045, $4048, $4052, $405D, $4081, $4083, $4085
66FC 52 40 5D 40 1 329 
6700 81 40 83 40 1 329 
6704 85 40       1 329 
6706 88 40 8A 40 1 330 defw    $4088, $408A, $4091, $409D, $40C1, $40D0, $40D9
670A 91 40 9D 40 1 330 
670E C1 40 D0 40 1 330 
6712 D9 40       1 330 
6714 05 48 08 48 1 331 defw    $4805, $4808, $480A, $4813, $4819, $481B, $481D
6718 0A 48 13 48 1 331 
671C 19 48 1B 48 1 331 
6720 1D 48       1 331 
6722 0A 40 59 40 1 332 defw    $400A, $4059, $40BB, $40C5, $40D2, $480C, $401C
6726 BB 40 C5 40 1 332 
672A D2 40 0C 48 1 332 
672E 1C 40       1 332 
6730 41 40 50 40 1 333 defw    $4041, $4050, $40C8, $4801, $480F
6734 C8 40 01 48 1 333 
6738 0F 48       1 333 
673A             1 334 SAMPLE_BOARD_RED:
673A 69 48 6B 48 1 335 defw    $4869, $486B, $482C, $482E, $40EF, $40F1, $40B2
673E 2C 48 2E 48 1 335 
6742 EF 40 F1 40 1 335 
6746 B2 40       1 335 
6748 E9 40 6F 48 1 336 defw    $40E9, $486F, $4830, $40F3, $48AA, $40AC, $48EF
674C 30 48 F3 40 1 336 
6750 AA 48 AC 40 1 336 
6754 EF 48       1 336 
6756 2A 48 6D 48 1 337 defw    $482A, $486D, $40ED, $48AE
675A ED 40 AE 48 1 337 
675E             1 338 SAMPLE_BOARD_CYAN:
675E AE 40 EF 40 1 339 defw    $40AE, $40EF, $4830, $486F, $48AE, $48EF, $502E
6762 30 48 6F 48 1 339 
6766 AE 48 EF 48 1 339 
676A 2E 50       1 339 
676C AC 48 B4 48 1 340 defw    $48AC, $48B4, $486B, $486D, $482E, $40F1, $40F3
6770 6B 48 6D 48 1 340 
6774 2E 48 F1 40 1 340 
6778 F3 40       1 340 
677A 73 48 B2 48 1 341 defw    $4873, $48B2, $5030
677E 30 50       1 341 
6780             1 343 ; ----------------------------------------------------------------------------------------------------------------------
6780             1 344 ; Strings
6780             1 345 ; ----------------------------------------------------------------------------------------------------------------------
6780             1 346 STR_OPTIONS:
6780 53 74 61 72 1 347 defm    "Start new game\0"
6784 74 20 6E 65 1 347 
6788 77 20 67 61 1 347 
678C 6D 65 00    1 347 
678F 48 6F 77 20 1 348 defm    "How to play\0"
6793 74 6F 20 70 1 348 
6797 6C 61 79 00 1 348 
679B 43 72 65 64 1 349 defm    "Credits\0"
679F 69 74 73 00 1 349 
67A3             1 350 STR_CREDITS:
67A3 44 65 73 69 1 351 defm    "Design:     Antonio Luque\0"
67A7 67 6E 3A 20 1 351 
67AB 20 20 20 20 1 351 
67AF 41 6E 74 6F 1 351 
67B3 6E 69 6F 20 1 351 
67B7 4C 75 71 75 1 351 
67BB 65 00       1 351 
67BD 43 6F 64 65 1 352 defm    "Code:       Antonio Luque\0"
67C1 3A 20 20 20 1 352 
67C5 20 20 20 20 1 352 
67C9 41 6E 74 6F 1 352 
67CD 6E 69 6F 20 1 352 
67D1 4C 75 71 75 1 352 
67D5 65 00       1 352 
67D7 20 20 20 20 1 353 defm    "            Einar Saukas\0"
67DB 20 20 20 20 1 353 
67DF 20 20 20 20 1 353 
67E3 45 69 6E 61 1 353 
67E7 72 20 53 61 1 353 
67EB 75 6B 61 73 1 353 
67EF 00          1 353 
67F0 46 6F 6E 74 1 354 defm    "Font:       Einar Saukas\0"
67F4 3A 20 20 20 1 354 
67F8 20 20 20 20 1 354 
67FC 45 69 6E 61 1 354 
6800 72 20 53 61 1 354 
6804 75 6B 61 73 1 354 
6808 00          1 354 
6809 47 72 61 70 1 355 defm    "Graphics:   Einar Saukas\0"
680D 68 69 63 73 1 355 
6811 3A 20 20 20 1 355 
6815 45 69 6E 61 1 355 
6819 72 20 53 61 1 355 
681D 75 6B 61 73 1 355 
6821 00          1 355 
6822 20 20 20 20 1 356 defm    "            Antonio Luque\0"
6826 20 20 20 20 1 356 
682A 20 20 20 20 1 356 
682E 41 6E 74 6F 1 356 
6832 6E 69 6F 20 1 356 
6836 4C 75 71 75 1 356 
683A 65 00       1 356 
683C 50 72 65 73 1 357 STR_PRESSKEY            defm    "Press any key\0"
6840 73 20 61 6E 1 357 
6844 79 20 6B 65 1 357 
6848 79 00       1 357 
684A             1 358 STR_BUTTONS:
684A 4E 65 78 74 1 359 defm    "Next\0"
684E 00          1 359 
684F 42 61 63 6B 1 360 defm    "Back\0"
6853 00          1 360 
6854 52 45 44 00 1 361 STR_RED                 defm    "RED\0"
6858 43 59 41 4E 1 362 STR_CYAN                defm    "CYAN\0"
685C 00          1 362 
685D 43 6F 6E 6E 1 363 STR_HELP1               defm    "Connect\0"
6861 65 63 74 00 1 363 
6865 6C 65 66 74 1 364 STR_HELP2_RED           defm    "left and\0"
6869 20 61 6E 64 1 364 
686D 00          1 364 
686E 75 70 20 61 1 365 STR_HELP2_CYAN          defm    "up and\0"
6872 6E 64 00    1 365 
6875 72 69 67 68 1 366 STR_HELP3_RED           defm    "right\0"
6879 74 00       1 366 
687B 64 6F 77 6E 1 367 STR_HELP3_CYAN          defm    "down\0"
687F 00          1 367 
6880 62 6F 72 64 1 368 STR_HELP4               defm    "borders\0"
6884 65 72 73 00 1 368 
6888 74 6F 20 77 1 369 STR_HELP5               defm    "to win\0"
688C 69 6E 00    1 369 
688F             1 370 STR_HELP:
688F 57 69 6E 20 1 371 defm    "Win three\0"
6893 74 68 72 65 1 371 
6897 65 00       1 371 
6899 74 69 6D 65 1 372 defm    "times in\0"
689D 73 20 69 6E 1 372 
68A1 00          1 372 
68A2 61 20 72 6F 1 373 defm    "a row to\0"
68A6 77 20 74 6F 1 373 
68AA 00          1 373 
68AB 6C 65 76 65 1 374 defm    "level up\0"
68AF 6C 20 75 70 1 374 
68B3 00          1 374 
68B4 20 43 4F 4E 1 375 STR_CONGRATS            defm    " CONGRATULATIONS \0"
68B8 47 52 41 54 1 375 
68BC 55 4C 41 54 1 375 
68C0 49 4F 4E 53 1 375 
68C4 20 00       1 375 
68C6             1 376 STR_LAST_LEVEL:
68C6 57 65 6C 6C 1 377 defm    "Well done! Last level passed\0"
68CA 20 64 6F 6E 1 377 
68CE 65 21 20 4C 1 377 
68D2 61 73 74 20 1 377 
68D6 6C 65 76 65 1 377 
68DA 6C 20 70 61 1 377 
68DE 73 73 65 64 1 377 
68E2 00          1 377 
68E3 43 68 6F 6F 1 378 defm    "Choose level to restart, 1-4\0"
68E7 73 65 20 6C 1 378 
68EB 65 76 65 6C 1 378 
68EF 20 74 6F 20 1 378 
68F3 72 65 73 74 1 378 
68F7 61 72 74 2C 1 378 
68FB 20 31 2D 34 1 378 
68FF 00          1 378 
6900             1 380 ; ----------------------------------------------------------------------------------------------------------------------
6900             1 381 ; Based on "King" font https://spectrumcomputing.co.uk/entry/25245/ZX-Spectrum/ZX-ALFA
6900             1 382 ; this font was designed by Einar Saukas for Hex game
6900             1 383 ; ----------------------------------------------------------------------------------------------------------------------
6900             1 384 FONT:
6900 00 00 00 00 1 385 includebin "King+.bin"
6904 00 00 00 00 1 385 
6908 00 18 18 18 1 385 
690C 00 18 18 00 1 385 
6910 00 24 24 00 1 385 
6914 00 00 00 00 1 385 
6918 00 24 7E 24 1 385 
691C 24 7E 24 00 1 385 
6920 00 08 3E 28 1 385 
6924 3E 0A 3E 08 1 385 
6928 00 62 64 08 1 385 
692C 10 26 46 00 1 385 
6930 00 10 28 10 1 385 
6934 2A 44 3A 00 1 385 
6938 00 18 30 00 1 385 
693C 00 00 00 00 1 385 
6940 06 0C 08 08 1 385 
6944 08 0C 06 00 1 385 
6948 60 30 10 10 1 385 
694C 10 30 60 00 1 385 
6950 00 00 14 08 1 385 
6954 3E 08 14 00 1 385 
6958 00 00 08 08 1 385 
695C 3E 08 08 00 1 385 
6960 00 00 00 00 1 385 
6964 00 0C 18 30 1 385 
6968 00 00 00 7E 1 385 
696C 7E 00 00 00 1 385 
6970 00 00 00 00 1 385 
6974 30 70 70 00 1 385 
6978 02 06 0C 18 1 385 
697C 30 60 40 00 1 385 
6980 00 7E 62 62 1 385 
6984 62 62 7E 00 1 385 
6988 00 18 38 18 1 385 
698C 18 18 3C 00 1 385 
6990 00 38 4C 4C 1 385 
6994 18 30 7C 00 1 385 
6998 00 3C 62 0C 1 385 
699C 06 66 3C 00 1 385 
69A0 00 30 30 30 1 385 
69A4 30 34 3E 04 1 385 
69A8 00 7E 60 7E 1 385 
69AC 06 66 3C 00 1 385 
69B0 00 30 60 7C 1 385 
69B4 66 66 3C 00 1 385 
69B8 00 7E 46 0C 1 385 
69BC 18 30 60 00 1 385 
69C0 00 3C 66 3C 1 385 
69C4 66 66 3C 00 1 385 
69C8 00 3C 66 66 1 385 
69CC 3E 06 3C 00 1 385 
69D0 00 00 08 18 1 385 
69D4 00 08 18 00 1 385 
69D8 00 00 04 0C 1 385 
69DC 00 0C 18 30 1 385 
69E0 00 00 04 08 1 385 
69E4 10 08 04 00 1 385 
69E8 00 00 00 3E 1 385 
69EC 00 3E 00 00 1 385 
69F0 00 00 10 08 1 385 
69F4 04 08 10 00 1 385 
69F8 00 3C 42 04 1 385 
69FC 08 00 08 00 1 385 
6A00 00 3C 4A 56 1 385 
6A04 5E 40 3C 00 1 385 
6A08 00 7E 46 46 1 385 
6A0C 7E 46 46 00 1 385 
6A10 00 7C 62 7C 1 385 
6A14 62 62 7C 00 1 385 
6A18 00 7E 66 60 1 385 
6A1C 60 66 7E 00 1 385 
6A20 00 7C 46 46 1 385 
6A24 46 46 7C 00 1 385 
6A28 00 7E 60 7C 1 385 
6A2C 60 60 7E 00 1 385 
6A30 00 7E 60 7C 1 385 
6A34 60 60 60 00 1 385 
6A38 00 3E 62 60 1 385 
6A3C 66 66 3E 00 1 385 
6A40 00 62 62 7E 1 385 
6A44 62 62 62 00 1 385 
6A48 00 18 18 18 1 385 
6A4C 18 18 18 00 1 385 
6A50 00 0C 0C 0C 1 385 
6A54 0C 4C 38 00 1 385 
6A58 00 66 64 68 1 385 
6A5C 7E 46 66 00 1 385 
6A60 00 60 60 60 1 385 
6A64 60 60 7E 00 1 385 
6A68 00 7E 56 56 1 385 
6A6C 56 56 56 00 1 385 
6A70 00 7E 46 46 1 385 
6A74 46 46 46 00 1 385 
6A78 00 7E 62 62 1 385 
6A7C 62 62 7E 00 1 385 
6A80 00 7E 62 62 1 385 
6A84 7E 60 60 00 1 385 
6A88 00 7C 64 64 1 385 
6A8C 64 64 7E 00 1 385 
6A90 00 7C 62 64 1 385 
6A94 7C 46 46 00 1 385 
6A98 00 7E 60 7E 1 385 
6A9C 06 06 7E 00 1 385 
6AA0 00 7E 18 18 1 385 
6AA4 18 18 18 00 1 385 
6AA8 00 62 62 62 1 385 
6AAC 62 62 7E 00 1 385 
6AB0 00 62 62 62 1 385 
6AB4 62 34 18 00 1 385 
6AB8 00 6A 6A 6A 1 385 
6ABC 6A 6A 7E 00 1 385 
6AC0 00 62 62 34 1 385 
6AC4 4E 46 46 00 1 385 
6AC8 00 62 62 7E 1 385 
6ACC 18 18 18 00 1 385 
6AD0 00 7E 06 1C 1 385 
6AD4 38 60 7E 00 1 385 
6AD8 00 0E 08 08 1 385 
6ADC 08 08 0E 00 1 385 
6AE0 00 00 40 20 1 385 
6AE4 10 08 04 00 1 385 
6AE8 00 70 10 10 1 385 
6AEC 10 10 70 00 1 385 
6AF0 00 08 1C 2A 1 385 
6AF4 08 08 08 08 1 385 
6AF8 00 00 00 00 1 385 
6AFC 00 00 00 FF 1 385 
6B00 0C 12 10 38 1 385 
6B04 10 10 3E 00 1 385 
6B08 00 00 3C 06 1 385 
6B0C 7E 46 7E 00 1 385 
6B10 00 60 60 7E 1 385 
6B14 62 62 7E 00 1 385 
6B18 00 00 7E 62 1 385 
6B1C 60 62 7E 00 1 385 
6B20 00 06 06 7E 1 385 
6B24 46 46 7E 00 1 385 
6B28 00 00 7E 46 1 385 
6B2C 7E 60 7E 00 1 385 
6B30 00 1E 30 3C 1 385 
6B34 30 30 30 00 1 385 
6B38 00 00 7E 46 1 385 
6B3C 46 3E 06 3E 1 385 
6B40 00 60 60 7C 1 385 
6B44 66 66 66 00 1 385 
6B48 00 18 00 38 1 385 
6B4C 18 18 3C 00 1 385 
6B50 00 0C 00 0C 1 385 
6B54 0C 0C 4C 38 1 385 
6B58 00 20 2C 38 1 385 
6B5C 38 2C 26 00 1 385 
6B60 00 18 18 18 1 385 
6B64 18 18 0E 00 1 385 
6B68 00 00 6C 56 1 385 
6B6C 56 56 46 00 1 385 
6B70 00 00 7C 46 1 385 
6B74 46 46 46 00 1 385 
6B78 00 00 3C 46 1 385 
6B7C 46 46 3C 00 1 385 
6B80 00 00 7C 66 1 385 
6B84 66 7C 60 60 1 385 
6B88 00 00 3E 46 1 385 
6B8C 46 3E 06 06 1 385 
6B90 00 00 3C 62 1 385 
6B94 60 60 60 00 1 385 
6B98 00 00 3C 60 1 385 
6B9C 3C 06 3C 00 1 385 
6BA0 00 30 78 30 1 385 
6BA4 30 30 1C 00 1 385 
6BA8 00 00 46 46 1 385 
6BAC 46 46 3C 00 1 385 
6BB0 00 00 46 46 1 385 
6BB4 2C 3C 18 00 1 385 
6BB8 00 00 46 56 1 385 
6BBC 56 56 2C 00 1 385 
6BC0 00 00 46 2C 1 385 
6BC4 18 2C 46 00 1 385 
6BC8 00 00 46 46 1 385 
6BCC 46 3E 06 3C 1 385 
6BD0 00 00 7E 0C 1 385 
6BD4 18 30 7E 00 1 385 
6BD8 00 0E 08 30 1 385 
6BDC 08 08 0E 00 1 385 
6BE0 00 08 08 08 1 385 
6BE4 08 2A 1C 08 1 385 
6BE8 00 70 10 0C 1 385 
6BEC 10 10 70 00 1 385 
6BF0 00 14 28 00 1 385 
6BF4 00 00 00 00 1 385 
6BF8 FF 81 81 81 1 385 
6BFC 81 81 81 FF 1 385 

; File #2: C:\Users\Antonio Luque\source\Repos\Hex\Z80CodeFiles\Main.z80asm

6C00             2 1 ; ----------------------------------------------------------------------------------------------------------------------
6C00             2 2 ; Main.z80asm
6C00             2 3 ; Coded by Antonio Luque
6C00             2 4 ; ----------------------------------------------------------------------------------------------------------------------
6C00             2 6 CYAN_COLOR              equ     %00000101                   ; attributes: flash 0, bright 0, paper 0, ink 5
6C00             2 7 RED_COLOR               equ     %00000010                   ; attributes: flash 0, bright 0, paper 0, ink 2
6C00             2 9 ; ----------------------------------------------------------------------------------------------------------------------
6C00             2 10 ; Entry point of the program - Initialization
6C00             2 11 ; ----------------------------------------------------------------------------------------------------------------------
6C00             2 12 Main                    ent     $
6C00 F3          2 14 di                                  ; disable interrupts
6C01             2 16 ; allocate jump to interrupt routine at address $5CA1 (pointed by IY+103)
6C01 21 17 76    2 18 ld      hl, Timer_Interrupt         ; HL points to interrupt routine address
6C04 FD 36 67 C3 2 19 ld      (iy+103), $C3               ; 'jp' opcode
6C08 FD 75 68    2 20 ld      (iy+104), l                 ; Low byte of interrupt routine address
6C0B FD 74 69    2 21 ld      (iy+105), h                 ; High byte of interrupt routine address
6C0E 3E 2E       2 22 ld      a, $2E                      ; High byte of interrupt vector address
6C10 ED 47       2 23 ld      i, a                        ; set interrupt vector address
6C12 ED 5E       2 24 im      2                           ; set interrupt mode 2
6C14             2 26 ; When the ULA triggers an interrupt it doesn't put any device ID in the data bus. When no value
6C14             2 27 ; is placed on the Spectrum's data bus, this acquires the value of 8 signals one ($FF). So, the
6C14             2 28 ; resultant vector address is formed as follows:
6C14             2 29 ;
6C14             2 30 ;                           ( I * $100 ) + $FF = $2E00 + $FF = $2EFF
6C14             2 31 ; Source: 
6C14             2 32 ; https://wiki.speccy.org/cursos/ensamblador/interrupciones#curiosidades-y-consideraciones
6C14             2 33 ;
6C14             2 34 ; The value pointed at ROM address $2EFF is $5CA1. This address belongs to the calculator's
6C14             2 35 ; memory area and it is used by some ROM routines, but none of them are called by HEX2 program.
6C14 31 00 60    2 37 ld      sp, STACK                   ; move stack
6C17 AF          2 39 xor     a                           ; A = 0
6C18 D3 FE       2 40 out     ($FE), a                    ; set border color (black)
6C1A CD 6E 79    2 41 call    Screen_Menu                 ; show main menu and wait for an option
6C1D             2 43 ; ----------------------------------------------------------------------------------------------------------------------
6C1D             2 44 ; Start new game
6C1D             2 45 ; ----------------------------------------------------------------------------------------------------------------------
6C1D             2 46 Main_Start
6C1D CD 03 77    2 47 call    Screen_Clear                ; fill in black the whole screen area and attributes area
6C20 CD 10 77    2 48 call    Screen_Letters              ; draw the two rows of letters on the screen (a..g)
6C23 CD 3C 77    2 49 call    Screen_Numbers              ; draw the two columns of numbers on the screen (1..7)
6C26 CD 7B 77    2 50 call    Screen_Frame                ; draw the screen frame
6C29 CD D3 77    2 51 call    Screen_Tokens               ; draw the fixed tokens on the screen
6C2C CD F2 77    2 52 call    Screen_Timer_Quotes         ; draw the timer quotes (' ") on the screen
6C2F CD 35 78    2 53 call    Screen_Color_Statics        ; apply color to statics items of the screen
6C32 FB          2 55 ei                                  ; enable interrupts
6C33             2 57 ; ----------------------------------------------------------------------------------------------------------------------
6C33             2 58 ; New level
6C33             2 59 ; ----------------------------------------------------------------------------------------------------------------------
6C33             2 60 Main_New_Level
6C33 3E 04       2 61 ld      a, 4                        ; maximum level
6C35 21 9D 61    2 62 ld      hl, GAME_LEVEL              ; HL points to game level address
6C38 BE          2 63 cp      (hl)                        ; level 4 achieved?
6C39 20 05       2 64 jr      nz, Main_Increment_Level    ; no, increment game level
6C3B CD 6F 78    2 65 call    Screen_Last_Level           ; show last level screen and input game level
6C3E 18 DD       2 66 jr      Main_Start                  ; start a new game
6C40             2 67 Main_Increment_Level
6C40 34          2 68 inc     (hl)                        ; increment game level
6C41 CD 12 79    2 69 call    Screen_Frame_Color          ; set up frame color depending on current level
6C44 CD 01 79    2 70 call    Screen_Clear_ThreeRow       ; clear all three-in-a-row marks
6C47 AF          2 71 xor     a                           ; A = 0
6C48 32 0E 62    2 72 ld      (THREE_ROW), a              ; initialize three-in-a-row counter
6C4B             2 74 ; ----------------------------------------------------------------------------------------------------------------------
6C4B             2 75 ; Start new match
6C4B             2 76 ; ----------------------------------------------------------------------------------------------------------------------
6C4B             2 77 Main_Start_Match
6C4B             2 78 ; set up timers and clear last messages
6C4B CD AC 76    2 80 call    Timer_Reset                 ; reset timers
6C4E CD 97 76    2 81 call    Timer_Display_All           ; display timers
6C51 CD 08 6F    2 82 call    Print_Clear_Alert           ; clear last alert
6C54 3E 02       2 83 ld      a, RED_COLOR                ; set red color in A
6C56 32 9E 61    2 84 ld      (TOKEN_COLOR), a            ; save token color
6C59 CD 2F 6F    2 85 call    Print_Clear_Move            ; clear red player last move
6C5C             2 87 ; swap players' colors
6C5C 3A 9F 61    2 89 ld      a, (PLAYER_COLOR)           ; get current player color
6C5F EE 07       2 90 xor     %00000111                   ; swap color
6C61 32 9F 61    2 91 ld      (PLAYER_COLOR), a           ; save swapped player color
6C64 CD EB 6E    2 92 call    Print_Players               ; print "Player" and "Speccy" strings
6C67             2 94 ; initialize positions and draw empty board
6C67 21 00 7D    2 96 ld      hl, CYAN_POSITIONS          ; HL points to cyan positions address
6C6A 11 01 7D    2 97 ld      de, CYAN_POSITIONS+1        ; DE points to cyan positions (+1) address
6C6D 36 00       2 98 ld      (hl), EMPTY                 ; set first position as empty
6C6F 01 FF 01    2 99 ld      bc, 256*2-1                 ; length of cyan + red positions areas (-1 already set)
6C72 ED B0       2 100 ldir                                ; fill the rest of positions as empty
6C74 CD 9B 6D    2 101 call    Draw_Board                  ; draw an empty hexagons board
6C77             2 103 ; initialize draw token delay, move number and token color
6C77 3E 0A       2 105 ld      a, 10                       ; set delay duration for animate hexagons
6C79 32 CA 6D    2 106 ld      (Draw_Token_Delay+1), a
6C7C 3E 01       2 107 ld      a, 1                        ; initialize move number
6C7E 32 9B 61    2 108 ld      (MOVE_NUMBER), a
6C81 3E 05       2 109 ld      a, CYAN_COLOR               ; first player token color
6C83             2 111 ; ----------------------------------------------------------------------------------------------------------------------
6C83             2 112 ; Process players moves - Match loop
6C83             2 113 ; ----------------------------------------------------------------------------------------------------------------------
6C83             2 114 Main_Match_Loop
6C83             2 115 ; check player turn
6C83 32 9E 61    2 117 ld      (TOKEN_COLOR), a            ; save current token color
6C86 21 9F 61    2 118 ld      hl, PLAYER_COLOR            ; HL points to player color address
6C89 BE          2 119 cp      (hl)                        ; is player color = current token color?
6C8A 28 05       2 120 jr      z, Main_Player_Move         ; yes, process player move
6C8C CD E6 6C    2 122 call    Main_GetSpeccy_Move         ; get the speccy move
6C8F 18 03       2 123 jr      Main_Update_Board           ; update board position
6C91             2 124 Main_Player_Move
6C91 CD 30 6D    2 125 call    Main_GetPlayer_Move         ; get a legal (empty position) player move 
6C94             2 126 Main_Update_Board
6C94             2 127 ; update positions with player/speccy move
6C94 CD E7 70    2 129 call    PathFinder_Friend           ; get player/speccy side
6C97 CD F1 70    2 130 call    PathFinder_PutToken         ; put token on cyan and red positions
6C9A             2 132 ; draw token on the board
6C9A AF          2 134 xor     a                           ; stop timers
6C9B 32 E8 62    2 135 ld      (TIMER_FLAG), a
6C9E CD B6 6D    2 136 call    Draw_Token                  ; animate hexagon sprite on the screen
6CA1 DD 21 E7 64 2 137 ld      ix, TOKEN_FX                ; IX points to token tone parameters address
6CA5 CD C1 76    2 138 call    Sound_FX                    ; play sound effect
6CA8             2 140 ; check for a winner
6CA8 CD 97 75    2 142 call    PathFinder_VictoryPath      ; check current player victory path
6CAB 3C          2 143 inc     a                           ; is there a victory path?
6CAC 20 0B       2 144 jr      nz, Main_Match_End          ; yes, match ends
6CAE 21 9B 61    2 146 ld      hl, MOVE_NUMBER             ; HL points to move number address
6CB1 34          2 147 inc     (hl)                        ; increment move number
6CB2             2 149 ; swap players' token color
6CB2 3A 9E 61    2 151 ld      a, (TOKEN_COLOR)            ; get current token color
6CB5 EE 07       2 152 xor     %00000111                   ; swap token color
6CB7 18 CA       2 153 jr      Main_Match_Loop             ; repeat match loop
6CB9             2 155 ; ----------------------------------------------------------------------------------------------------------------------
6CB9             2 156 ; Current player wins the match
6CB9             2 157 ; ----------------------------------------------------------------------------------------------------------------------
6CB9             2 158 Main_Match_End
6CB9 CD CC 75    2 159 call    PathFinder_BrightPath       ; animate and highlight the winner path
6CBC 11 3A 62    2 161 ld      de, STR_WINNER              ; DE points to "WINS" string address
6CBF CD 0F 6F    2 162 call    Print_Alert                 ; print string
6CC2 3A 9E 61    2 164 ld      a, (TOKEN_COLOR)            ; get current token color
6CC5 21 9F 61    2 165 ld      hl, PLAYER_COLOR            ; get player color
6CC8 BE          2 166 cp      (hl)                        ; is player color = current token color?
6CC9 21 0E 62    2 167 ld      hl, THREE_ROW               ; HL points to three-in-a-row counter
6CCC 28 04       2 168 jr      z, Main_ThreeRow_Increment  ; yes, go to increment three-in-a-row counter
6CCE 35          2 169 dec     (hl)                        ; decrement three-in-a-row counter
6CCF F2 D3 6C    2 170 jp      p, Main_ThreeRow_Show       ; if not negative (-1), show marks
6CD2             2 171 Main_ThreeRow_Increment
6CD2 34          2 172 inc     (hl)                        ; increment three-in-a-row counter
6CD3             2 173 Main_ThreeRow_Show
6CD3 CD E5 78    2 174 call    Screen_ThreeRow             ; show three-in-a-row marks
6CD6 3E FF       2 175 ld      a, 255                      ; set delay duration
6CD8 CD 8C 6D    2 176 call    Main_Delay                  ; execute delay
6CDB 3A 0E 62    2 177 ld      a, (THREE_ROW)              ; check three row counter
6CDE FE 03       2 178 cp      3                           ; is it 3?
6CE0 CA 33 6C    2 179 jp      z, Main_New_Level           ; yes, start a new level
6CE3 C3 4B 6C    2 180 jp      Main_Start_Match            ; start a new match
6CE6             2 182 ; ----------------------------------------------------------------------------------------------------------------------
6CE6             2 183 ; Main_GetSpeccy_Move: get the speccy move
6CE6             2 184 ;
6CE6             2 185 ; Input:     A = current token color
6CE6             2 186 ;
6CE6             2 187 ; Output:   BC = hexagon board indexes (B:column, C:row)
6CE6             2 188 ;           HL = CYAN_POSITIONS move address
6CE6             2 189 ;
6CE6             2 190 ; Uses:     MOVE_NUMBER (current move number)
6CE6             2 191 ;           GAME_LEVEL (current game level)
6CE6             2 192 ;           AI_DEPTH (recursion depth level)
6CE6             2 193 ;           STR_MOVE (formatted move string)
6CE6             2 194 ;
6CE6             2 195 ; Destroys: A, DE, IX, IY
6CE6             2 196 ; ----------------------------------------------------------------------------------------------------------------------
6CE6             2 197 Main_GetSpeccy_Move:
6CE6 E6 03       2 198 and     %00000011                   ; calculate speccy's timer flag based on current token color
6CE8 32 E8 62    2 199 ld      (TIMER_FLAG), a             ; (re)start speccy timer
6CEB CD 28 6F    2 201 call    Print_Wait                  ; print "WAIT" message
6CEE 3A 9B 61    2 202 ld      a, (MOVE_NUMBER)            ; get move number
6CF1 3D          2 203 dec     a                           ; is it cyan first move?
6CF2 28 2A       2 204 jr      z, Main_GetSpeccy_Book      ; yes, get move from opening book
6CF4 DD 21 00 7F 2 206 ld      ix, CANDIDATES              ; IX points to candidates list address
6CF8 3A 9D 61    2 207 ld      a, (GAME_LEVEL)             ; get game level
6CFB 32 9A 61    2 208 ld      (AI_DEPTH), a               ; save recursion depth level
6CFE CD E7 70    2 210 call    PathFinder_Friend           ; get speccy side
6D01 CD 79 6F    2 211 call    BRAINIAC_best_move          ; get speccy best move
6D04 6B          2 212 ld      l, e                        ; set node index in L
6D05             2 213 Main_GetSpeccy_Positions
6D05 26 7D       2 214 ld      h, CYAN_POSITIONS/256       ; HL points to CYAN_POSITIONS move address
6D07 E5          2 215 push    hl                          ; store CYAN_POSITIONS move address
6D08 CD 7B 6D    2 216 call    Main_Board2Indexes          ; convert board position to indexes
6D0B 78          2 217 ld      a, b                        ; get 1..7 column
6D0C C6 60       2 218 add     a, $60                      ; adjust to charset ('a'..'g')
6D0E 32 15 62    2 219 ld      (STR_MOVE+0), a             ; put it on formatted move string
6D11 79          2 220 ld      a, c                        ; get 1..7 row
6D12 C6 30       2 221 add     a, $30                      ; adjust to charset ('1'..'7')
6D14 32 18 62    2 222 ld      (STR_MOVE+3), a             ; put it on formatted move string
6D17 C5          2 223 push    bc                          ; store hexagon board indexes
6D18 CD 36 6F    2 224 call    Print_Move                  ; print Speccy move
6D1B C1          2 225 pop     bc                          ; restore hexagon board indexes
6D1C E1          2 226 pop     hl                          ; restore CYAN_POSITIONS move address
6D1D C9          2 227 ret
6D1E             2 228 Main_GetSpeccy_Book
6D1E ED 5F       2 229 ld      a, r                        ; get a pseudo-random number (0..127)
6D20 E6 1F       2 230 and     %00011111                   ; number is in range (0..31)
6D22 FE 1B       2 231 cp      27                          ; is it >= 27?
6D24 30 F8       2 232 jr      nc, Main_GetSpeccy_Book     ; yes, repeat until range is (0..26)
6D26 21 CD 62    2 233 ld      hl, OPENINGS                ; HL points to opening book address
6D29 16 00       2 234 ld      d, 0                        ; set index in DE
6D2B 5F          2 235 ld      e, a
6D2C 19          2 236 add     hl, de                      ; HL points to move index address
6D2D 6E          2 237 ld      l, (hl)                     ; get move from opening book
6D2E 18 D5       2 238 jr      Main_GetSpeccy_Positions    ; get speccy move positions
6D30             2 240 ; ----------------------------------------------------------------------------------------------------------------------
6D30             2 241 ; Main_GetPlayer_Move: get a legal (empty hexagon) move from player
6D30             2 242 ;
6D30             2 243 ; Input:     A = current token color
6D30             2 244 ;
6D30             2 245 ; Output:   BC = hexagon board indexes (B:column, C:row)
6D30             2 246 ;           HL = CYAN_POSITIONS move address
6D30             2 247 ;
6D30             2 248 ; Uses:     STR_MOVE (formatted move string)
6D30             2 249 ;
6D30             2 250 ; Destroys: A, DE, IX
6D30             2 251 ; ----------------------------------------------------------------------------------------------------------------------
6D30             2 252 Main_GetPlayer_Move:
6D30 E6 03       2 253 and     %00000011                   ; calculate player's timer flag based on current token color
6D32 32 E8 62    2 254 ld      (TIMER_FLAG), a             ; (re)start player timer
6D35             2 255 Main_GetPlayer_Input
6D35 CD 2F 6F    2 256 call    Print_Clear_Move            ; clear player last move
6D38 CD 25 6E    2 257 call    Input_Move                  ; wait for input player move
6D3B CD 36 6F    2 258 call    Print_Move                  ; print player move
6D3E 3A 15 62    2 260 ld      a, (STR_MOVE+0)             ; get column ('a'..'g')
6D41 D6 60       2 261 sub     $60                         ; convert to number (1..7)
6D43 47          2 262 ld      b, a                        ; set column index in B
6D44 3A 18 62    2 263 ld      a, (STR_MOVE+3)             ; get row ('1'..'7')
6D47 D6 30       2 264 sub     $30                         ; convert to number (1..7)
6D49 4F          2 265 ld      c, a                        ; set row index in C
6D4A 11 4D 62    2 266 ld      de, BOARD_COORDINATES       ; DE points to board coordinates address
6D4D CD 6E 6D    2 267 call    Main_Search_Table           ; search board position in board coordinates
6D50 6E          2 268 ld      l, (hl)                     ; set board position of player move
6D51 26 7D       2 269 ld      h, CYAN_POSITIONS/256       ; HL points to CYAN_POSITIONS move address
6D53 3E 00       2 270 ld      a, EMPTY                    ; check position
6D55 BE          2 271 cp      (hl)                        ; is position empty?
6D56 C8          2 272 ret     z                           ; yes, return
6D57             2 274 ; illegal player move (position not empty)
6D57 11 2E 62    2 276 ld      de, STR_FILLED              ; DE points to "FILLED" string address
6D5A CD 0F 6F    2 277 call    Print_Alert                 ; print string
6D5D DD 21 F7 64 2 278 ld      ix, FILLED_FX               ; IX points to filled tone parameters address
6D61 CD C1 76    2 279 call    Sound_FX                    ; play sound fx
6D64 3E 50       2 280 ld      a, 80                       ; set delay counter
6D66 CD 8C 6D    2 281 call    Main_Delay                  ; execute delay
6D69 CD 08 6F    2 282 call    Print_Clear_Alert           ; clear alert message
6D6C 18 C7       2 283 jr      Main_GetPlayer_Input        ; repeat player input until move is legal
6D6E             2 285 ; ----------------------------------------------------------------------------------------------------------------------
6D6E             2 286 ; Main_Search_Table: search an element in a 8x8 bytes table
6D6E             2 287 ;
6D6E             2 288 ; Input:    BC = element indexes (B = column, C = row)
6D6E             2 289 ;           DE = table address in which to search for the element
6D6E             2 290 ;
6D6E             2 291 ; Output:   DE = address of first element in the C row of the table
6D6E             2 292 ;           HL = address of the element in the BC indexes of the table
6D6E             2 293 ;
6D6E             2 294 ; Destroys: -
6D6E             2 295 ; ----------------------------------------------------------------------------------------------------------------------
6D6E             2 296 Main_Search_Table:
6D6E 26 00       2 297 ld      h, 0                        ; first, get the C row in table
6D70 69          2 298 ld      l, c                        ; set index in HL
6D71 29          2 299 add     hl, hl                      ; a row is 8 bytes long
6D72 29          2 300 add     hl, hl
6D73 29          2 301 add     hl, hl
6D74 19          2 302 add     hl, de                      ; HL points to the address of C row 
6D75 EB          2 303 ex      de, hl                      ; DE points to the address of C row
6D76 26 00       2 304 ld      h, 0                        ; go for to the B column
6D78 68          2 305 ld      l, b                        ; set index in HL
6D79 19          2 306 add     hl, de                      ; HL points to the address of BC indexes
6D7A C9          2 307 ret
6D7B             2 309 ; ----------------------------------------------------------------------------------------------------------------------
6D7B             2 310 ; Main_Board2Indexes: convert a board position into a board indexes
6D7B             2 311 ;
6D7B             2 312 ; Input:    L  = board position
6D7B             2 313 ;
6D7B             2 314 ; Output:   BC = board indexes (B = column, C = row)
6D7B             2 315 ;
6D7B             2 316 ; Destroys: HL
6D7B             2 317 ; ----------------------------------------------------------------------------------------------------------------------
6D7B             2 318 Main_Board2Indexes:
6D7B 7D          2 319 ld      a, l                        ; set board position in A to compare later
6D7C 21 8D 62    2 321 ld      hl, BOARD_COORDINATES+64    ; HL points to last board position address (+1)
6D7F 0E 07       2 322 ld      c, 7                        ; 7 rows
6D81             2 323 Main_Board2Indexes_Row
6D81 06 07       2 324 ld      b, 7                        ; 7 columns
6D83             2 325 Main_Board2Indexes_Col
6D83 2B          2 326 dec     hl                          ; move HL to next board position address
6D84 BE          2 327 cp      (hl)                        ; is A the position?
6D85 C8          2 328 ret     z                           ; yes, return board indexes
6D86 10 FB       2 329 djnz    Main_Board2Indexes_Col      ; repeat for each column
6D88 2B          2 330 dec     hl                          ; skip borders
6D89 0D          2 331 dec     c                           ; decrement row
6D8A 18 F5       2 332 jr      Main_Board2Indexes_Row      ; loop until find position
6D8C             2 334 ; ----------------------------------------------------------------------------------------------------------------------
6D8C             2 335 ; Main_Delay: execute a delay
6D8C             2 336 ;
6D8C             2 337 ; Input:    A = delay counter
6D8C             2 338 ;
6D8C             2 339 ; Output:   -
6D8C             2 340 ;
6D8C             2 341 ; Destroys: A
6D8C             2 342 ; ----------------------------------------------------------------------------------------------------------------------
6D8C             2 343 Main_Delay:
6D8C C5          2 344 push    bc                          ; store register
6D8D             2 345 Main_Delay_Loop
6D8D 0E 0A       2 346 ld      c, 10                       ; set outer loop counter
6D8F             2 347 Main_Delay_Loop1
6D8F 06 00       2 348 ld      b, 0                        ; set inner loop counter (256)
6D91             2 349 Main_Delay_Loop2
6D91 10 FE       2 350 djnz    Main_Delay_Loop2            ; repeat until B=0
6D93 0D          2 351 dec     c                           ; decrement outer loop counter
6D94 20 F9       2 352 jr      nz, Main_Delay_Loop1        ; repeat until C=0
6D96 3D          2 353 dec     a                           ; decrement delay counter
6D97 20 F4       2 354 jr      nz, Main_Delay_Loop         ; repeat until A=0
6D99 C1          2 355 pop     bc                          ; restore register
6D9A C9          2 356 ret

; File #3: C:\Users\Antonio Luque\source\Repos\Hex\Z80CodeFiles\Draw.z80asm

6D9B             3 1 ; ----------------------------------------------------------------------------------------------------------------------
6D9B             3 2 ; Draw.z80asm
6D9B             3 3 ; Coded by Antonio Luque
6D9B             3 4 ; ----------------------------------------------------------------------------------------------------------------------
6D9B             3 6 ; ----------------------------------------------------------------------------------------------------------------------
6D9B             3 7 ; Draw_Board: draw an empty 7x7 hexagons board on the screen
6D9B             3 8 ;
6D9B             3 9 ; Input:    -
6D9B             3 10 ;
6D9B             3 11 ; Output:   -
6D9B             3 12 ;
6D9B             3 13 ; Uses:     TOKEN_COLOR (current token color)
6D9B             3 14 ;
6D9B             3 15 ; Destroys: A, BC, DE, HL, IXL
6D9B             3 16 ; ----------------------------------------------------------------------------------------------------------------------
6D9B             3 17 Draw_Board:
6D9B 3E 07       3 18 ld      a, WHITE                    ; set empty hexagon color
6D9D 32 9E 61    3 19 ld      (TOKEN_COLOR), a            ; store hexagon color
6DA0 0E 07       3 20 ld      c, 7                        ; 7 rows
6DA2             3 21 Draw_Board_Row
6DA2 06 07       3 22 ld      b, 7                        ; 7 columns
6DA4             3 23 Draw_Board_Column
6DA4 CD D1 6D    3 24 call    Draw_GetHEX_Screen          ; get hexagon screen address
6DA7 CD 09 6E    3 25 call    Draw_Hexagon_Color          ; apply color to hexagon area
6DAA 11 7E 65    3 26 ld      de, HEXAGON_EMPTY           ; DE points to hexagon sprite address
6DAD CD DB 6D    3 27 call    Draw_Sprite_Hexagon         ; draw an empty hexagon at screen address
6DB0 10 F2       3 28 djnz    Draw_Board_Column           ; repeat for each column
6DB2 0D          3 29 dec     c                           ; decrement row
6DB3 20 ED       3 30 jr      nz, Draw_Board_Row          ; repeat for each row
6DB5 C9          3 31 ret
6DB6             3 33 ; ----------------------------------------------------------------------------------------------------------------------
6DB6             3 34 ; Draw_Token: animate an hexagon sprite on the screen
6DB6             3 35 ;
6DB6             3 36 ; Input:    BC = hexagon board indexes (B:column, C:row)
6DB6             3 37 ;
6DB6             3 38 ; Output:   -
6DB6             3 39 ;
6DB6             3 40 ; Destroys: A, BC, DE, HL, IXL
6DB6             3 41 ; ----------------------------------------------------------------------------------------------------------------------
6DB6             3 42 Draw_Token:
6DB6 CD D1 6D    3 43 call    Draw_GetHEX_Screen          ; get hexagon screen address
6DB9 01 04 06    3 44 ld      bc, $0604                   ; B = number of sprites, C = sprite number to change color
6DBC 11 9E 65    3 45 ld      de, HEXAGON_SPRITE          ; DE points to hexagon sprite address
6DBF             3 46 Draw_Token_Loop
6DBF E5          3 47 push    hl                          ; store hexagon screen address
6DC0 CD DB 6D    3 48 call    Draw_Sprite_Hexagon         ; draw hexagon sprite
6DC3 E1          3 49 pop     hl                          ; restore hexagon screen address
6DC4 78          3 50 ld      a, b                        ; check loop counter
6DC5 B9          3 51 cp      c                           ; is it 4?
6DC6 CC 09 6E    3 52 call    z, Draw_Hexagon_Color       ; yes, apply color to hexagon area
6DC9             3 53 Draw_Token_Delay
6DC9 3E 00       3 54 ld      a, 0                        ; set delay duration (changed before calling this routine)
6DCB CD 8C 6D    3 55 call    Main_Delay                  ; execute delay
6DCE 10 EF       3 56 djnz    Draw_Token_Loop             ; repeat for each hexagon sprite
6DD0 C9          3 57 ret
6DD1             3 59 ; ----------------------------------------------------------------------------------------------------------------------
6DD1             3 60 ; Draw_GetHEX_Screen: get the screen address of an hexagon on board
6DD1             3 61 ;
6DD1             3 62 ; Input:    BC = hexagon board indexes (B:column, C:row)
6DD1             3 63 ;
6DD1             3 64 ; Output:   HL = hexagon screen address 
6DD1             3 65 ;
6DD1             3 66 ; Destroys: A, DE
6DD1             3 67 ; ----------------------------------------------------------------------------------------------------------------------
6DD1             3 68 Draw_GetHEX_Screen:
6DD1 11 98 61    3 69 ld      de, BOARD_MAP-8             ; DE points to board hexagons screen addresses table (-8)
6DD4 CD 6E 6D    3 70 call    Main_Search_Table           ; search the screen address of the hexagon in table
6DD7 6E          3 71 ld      l, (hl)                     ; set the low byte of the screen address in L
6DD8 1A          3 72 ld      a, (de)                     ; set the high byte of the screen address in H
6DD9 67          3 73 ld      h, a
6DDA C9          3 74 ret
6DDB             3 76 ; ----------------------------------------------------------------------------------------------------------------------
6DDB             3 77 ; Draw_Sprite_Hexagon: draw an hexagon sprite on the screen
6DDB             3 78 ;
6DDB             3 79 ; Input:    DE = hexagon sprite address
6DDB             3 80 ;           HL = hexagon screen address
6DDB             3 81 ;
6DDB             3 82 ; Output:   DE = next hexagon sprite address
6DDB             3 83 ;
6DDB             3 84 ; Destroys: A, HL, IXL
6DDB             3 85 ; ----------------------------------------------------------------------------------------------------------------------
6DDB             3 86 Draw_Sprite_Hexagon:
6DDB DD 2E 10    3 87 ld      ixl, 16                     ; hexagon sprite height in bytes (loop counter)
6DDE             3 88 Draw_Sprite_HexLoop
6DDE 1A          3 89 ld      a, (de)                     ; get sprite byte
6DDF 77          3 90 ld      (hl), a                     ; put sprite byte on screen
6DE0 13          3 91 inc     de                          ; move DE to next sprite byte address
6DE1 2C          3 92 inc     l                           ; move HL to next screen column
6DE2 1A          3 93 ld      a, (de)                     ; get sprite byte
6DE3 77          3 94 ld      (hl), a                     ; put sprite byte on screen
6DE4 13          3 95 inc     de                          ; move DE to next sprite byte
6DE5 2D          3 96 dec     l                           ; move HL to previous screen column
6DE6 CD FA 6D    3 97 call    Draw_Down_PixelLine         ; move HL down one pixel-line
6DE9 DD 2D       3 98 dec     ixl                         ; decrement sprite height
6DEB 20 F1       3 99 jr      nz, Draw_Sprite_HexLoop     ; repeat for each byte in sprite
6DED C9          3 100 ret
6DEE             3 102 ; ----------------------------------------------------------------------------------------------------------------------
6DEE             3 103 ; Draw_Sprite_LetterNum: draw a letter/number sprite at screen address
6DEE             3 104 ;
6DEE             3 105 ; Input:    DE = letter/number sprite address
6DEE             3 106 ;           HL = letter/number screen address
6DEE             3 107 ;
6DEE             3 108 ; Output:   DE = next letter/number sprite address
6DEE             3 109 ;
6DEE             3 110 ; Destroys: A, C, HL
6DEE             3 111 ; ----------------------------------------------------------------------------------------------------------------------
6DEE             3 112 Draw_Sprite_LetterNum:
6DEE 0E 0A       3 113 ld      c, 10                       ; letter/number sprite height in bytes (loop counter)
6DF0             3 114 Draw_Sprite_Loop
6DF0 1A          3 115 ld      a, (de)                     ; get sprite byte
6DF1 77          3 116 ld      (hl), a                     ; put sprite byte on screen
6DF2 13          3 117 inc     de                          ; move DE to next sprite byte address
6DF3 CD FA 6D    3 118 call    Draw_Down_PixelLine         ; move HL down one pixel-line
6DF6 0D          3 119 dec     c                           ; decrement sprite height
6DF7 20 F7       3 120 jr      nz, Draw_Sprite_Loop        ; repeat for each byte in sprite
6DF9 C9          3 121 ret
6DFA             3 123 ; ----------------------------------------------------------------------------------------------------------------------
6DFA             3 124 ; Draw_Down_PixelLine: move HL down one pixel-line
6DFA             3 125 ; Source: https://spectrumcomputing.co.uk/forums/viewtopic.php?p=35272#p35272
6DFA             3 126 ;
6DFA             3 127 ; The screen address of a pixel-line is encoded as follows:
6DFA             3 128 ;
6DFA             3 129 ;             H           |           L
6DFA             3 130 ;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
6DFA             3 131 ;  07|06|05|04|03|02|01|00|07|06|05|04|03|02|01|00
6DFA             3 132 ;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
6DFA             3 133 ;   0| 1| 0|Y7|Y6|Y2|Y1|Y0|Y5|Y4|Y3|X4|X3|X2|X1|X0
6DFA             3 134 ;
6DFA             3 135 ; where:
6DFA             3 136 ;   Y = pixel position: Y7,Y6,Y5,Y4,Y3,Y2,Y1,Y0 (0-191)
6DFA             3 137 ;   X = byte  position:  0, 0, 0,X4,X3,X2,X1,X0 (0-31)
6DFA             3 138 ;
6DFA             3 139 ; Input:    HL = pixel-line address
6DFA             3 140 ;
6DFA             3 141 ; Output:   HL = next (down) pixel-line address
6DFA             3 142 ;
6DFA             3 143 ; Destroys: A
6DFA             3 144 ; ----------------------------------------------------------------------------------------------------------------------
6DFA             3 145 Draw_Down_PixelLine:
6DFA 24          3 146 inc     h                           ; move HL down one pixel-line
6DFB 7C          3 147 ld      a, h                        ; get high byte of pixel-line address
6DFC E6 07       3 148 and     %00000111                   ; is pixel-line address inside a character line?
6DFE C0          3 149 ret     nz                          ; yes, return
6DFF 7D          3 150 ld      a, l                        ; get low byte of pixel-line address (at this point Y6 = 1)
6E00 C6 20       3 151 add     a, 32                       ; add size of char line (add extra bit into Y3-Y5)
6E02 6F          3 152 ld      l, a                        ; move HL down one character line
6E03 D8          3 153 ret     c                           ; a third was crossed? yes, return
6E04 7C          3 154 ld      a, h                        ; get high byte of pixel-line address
6E05 D6 08       3 155 sub     8                           ; clean up the bit from Y6
6E07 67          3 156 ld      h, a                        ; HL points to next (down) pixel-line address
6E08 C9          3 157 ret
6E09             3 159 ; ----------------------------------------------------------------------------------------------------------------------
6E09             3 160 ; Draw_Hexagon_Color: color an hexagon sprite on the screen
6E09             3 161 ; Source: https://spectrumcomputing.co.uk/forums/viewtopic.php?p=42285#p42285
6E09             3 162 ;
6E09             3 163 ; This routine converts a screen address (HL) into an attribute address (IX):
6E09             3 164 ;
6E09             3 165 ;             H           |           L
6E09             3 166 ;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
6E09             3 167 ;  07|06|05|04|03|02|01|00|07|06|05|04|03|02|01|00
6E09             3 168 ;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
6E09             3 169 ;   0| 1| 0|Y7|Y6|Y2|Y1|Y0|Y5|Y4|Y3|X4|X3|X2|X1|X0      screen address
6E09             3 170 ;
6E09             3 171 ;            IXH          |          IXL
6E09             3 172 ;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
6E09             3 173 ;  07|06|05|04|03|02|01|00|07|06|05|04|03|02|01|00
6E09             3 174 ;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
6E09             3 175 ;   0| 1| 0| 1| 1| 0|Y7|Y6|Y5|Y4|Y3|X4|X3|X2|X1|X0      attribute address
6E09             3 176 ;
6E09             3 177 ; where:
6E09             3 178 ;   Y = pixel position: Y7,Y6,Y5,Y4,Y3,Y2,Y1,Y0 (0-191)
6E09             3 179 ;   X = byte  position:  0, 0, 0,X4,X3,X2,X1,X0 (0-31)
6E09             3 180 ;
6E09             3 181 ; Input:    HL = screen address of the hexagon
6E09             3 182 ;
6E09             3 183 ; Output:   IX = attribute address of the hexagon
6E09             3 184 ;
6E09             3 185 ; Uses:     TOKEN_COLOR (current token color)
6E09             3 186 ;
6E09             3 187 ; Destroys: A
6E09             3 188 ; ----------------------------------------------------------------------------------------------------------------------
6E09             3 189 Draw_Hexagon_Color:
6E09 7C          3 190 ld      a, h                        ; get high byte of screen address
6E0A F6 87       3 191 or      %10000111                   ; mask Y0-Y2 and set bit 7 on
6E0C 1F          3 192 rra                                 ; shift Y7-Y6 two positions
6E0D 1F          3 193 rra
6E0E CB 3F       3 194 srl     a                           ; shift Y7-Y6 to last positions and set bit 7 off
6E10 DD 67       3 195 ld      ixh, a                      ; set high byte of attribute address in IXH
6E12 7D          3 196 ld      a, l                        ; (the low byte for attribute address doesn't change)
6E13 DD 6F       3 197 ld      ixl, a                      ; set low byte of attribute address in IXL
6E15 3A 9E 61    3 198 ld      a, (TOKEN_COLOR)            ; get current token color
6E18 DD 77 00    3 199 ld      (ix+0), a                   ; set hexagon color (4 bytes)
6E1B DD 77 01    3 200 ld      (ix+1), a
6E1E DD 77 20    3 201 ld      (ix+32), a
6E21 DD 77 21    3 202 ld      (ix+33), a
6E24 C9          3 203 ret

; File #4: C:\Users\Antonio Luque\source\Repos\Hex\Z80CodeFiles\Input.z80asm

6E25             4 1 ; ----------------------------------------------------------------------------------------------------------------------
6E25             4 2 ; Input.z80asm
6E25             4 3 ; Coded by Antonio Luque
6E25             4 4 ; ----------------------------------------------------------------------------------------------------------------------
6E25             4 6 MAX_CHARS               equ     2                           ; maximum of input chars
6E25             4 8 ; ----------------------------------------------------------------------------------------------------------------------
6E25             4 9 ; Input_Move: wait for input a move from keyboard
6E25             4 10 ; Based on assembler course by sromero: https://wiki.speccy.org/cursos/ensamblador/gfx4_fuentes
6E25             4 11 ;
6E25             4 12 ; Input:    -
6E25             4 13 ;
6E25             4 14 ; Output:   -
6E25             4 15 ;
6E25             4 16 ; Uses:     TOKEN_COLOR (current token color)
6E25             4 17 ;           STR_MOVE (formatted move string)
6E25             4 18 ;
6E25             4 19 ; Destroys: A, A', BC, DE, HL, IX
6E25             4 20 ; ----------------------------------------------------------------------------------------------------------------------
6E25             4 21 Input_Move:
6E25 01 00 02    4 22 ld      bc, MAX_CHARS*256           ; B = maximum of input chars, C = chars counter
6E28 DD 21 83 5A 4 24 ld      ix, $5A83                   ; IX points to attribute address of RED input text
6E2C 21 83 50    4 25 ld      hl, $5083                   ; HL points to screen address of RED input text
6E2F 3A 9E 61    4 26 ld      a, (TOKEN_COLOR)            ; check current player color
6E32 FE 02       4 27 cp      RED_COLOR                   ; is RED the current token color?
6E34 28 07       4 28 jr      z, Input_Start              ; yes, start input
6E36 DD 21 19 59 4 29 ld      ix, $5919                   ; IX points to attribute address of CYAN input text
6E3A 21 19 48    4 30 ld      hl, $4819                   ; HL points to screen address of CYAN input text
6E3D             4 31 Input_Start
6E3D DD 36 00 C7 4 32 ld      (ix+0), WHITE_FLASH1        ; set attributes for cursor (flash)
6E41 3E 5F       4 33 ld      a, '_'                      ; text input cursor
6E43 CD 5F 6F    4 34 call    Print_Char                  ; print cursor
6E46             4 35 Input_Loop
6E46 CD BF 6E    4 36 call    Input_Key_Scan              ; scan for a key pressed
6E49 FE 0D       4 38 cp      $0D                         ; is it ENTER?
6E4B 28 64       4 39 jr      z, Input_Enter              ; yes, perform enter pressed
6E4D FE 30       4 40 cp      '0'                         ; is it "delete"? (char '0' acts as delete, without Shift)
6E4F 28 42       4 41 jr      z, Input_Delete             ; yes, perform delete char
6E51 08          4 42 ex      af, af'                     ; store char in A'
6E52 79          4 43 ld      a, c                        ; check number of chars inserted
6E53 B8          4 44 cp      b                           ; chars limit reached?
6E54 28 F0       4 45 jr      z, Input_Loop               ; yes, repeat input loop
6E56 B7          4 47 or      a                           ; is it the first char?
6E57 20 21       4 48 jr      nz, Input_Numbers           ; no, perform input of 2nd char
6E59             4 50 ; restrict first char to 'a'-'g'
6E59 08          4 52 ex      af, af'                     ; restore char
6E5A FE 61       4 53 cp      'a'                         ; is it < 'a'?
6E5C 38 E8       4 54 jr      c, Input_Loop               ; yes, repeat input loop (char is not allowed)
6E5E FE 68       4 55 cp      'h'                         ; is it >= 'g'?
6E60 30 E4       4 56 jr      nc, Input_Loop              ; yes, repeat input loop (char is not allowed)
6E62             4 58 ; char is valid as column
6E62 32 15 62    4 60 ld      (STR_MOVE+0), a             ; save char in player move
6E65 DD 36 00 47 4 61 ld      (ix+0), WHITE_FLASH0        ; restore attributes (no flash)
6E69 CD 5F 6F    4 62 call    Print_Char                  ; print key pressed
6E6C 0C          4 63 inc     c                           ; increment chars counter
6E6D 2C          4 64 inc     l                           ; increment X position of current input screen location
6E6E DD 2C       4 65 inc     ixl                         ; increment X position of current input attr location
6E70 3E 2D       4 66 ld      a, '-'                      ; set dash char
6E72 CD 5F 6F    4 67 call    Print_Char                  ; print key pressed
6E75 2C          4 68 inc     l                           ; increment X position of current input screen location
6E76 DD 2C       4 69 inc     ixl                         ; increment X position of current input attr location
6E78 18 C3       4 70 jr      Input_Start                 ; get next char (do until ENTER is pressed)
6E7A             4 71 Input_Numbers
6E7A             4 72 ; restrict second char to '1'-'7'
6E7A 08          4 74 ex      af, af'                     ; restore char
6E7B FE 31       4 75 cp      '1'                         ; is it < '1'?
6E7D 38 C7       4 76 jr      c, Input_Loop               ; yes, repeat input loop (char is not allowed)
6E7F FE 38       4 77 cp      '8'                         ; is it >= '8'?
6E81 30 C3       4 78 jr      nc, Input_Loop              ; yes, repeat input loop (char is not allowed)
6E83             4 80 ; char is valid as row
6E83 32 18 62    4 82 ld      (STR_MOVE+3), a             ; save char in player move
6E86 DD 36 00 47 4 83 ld      (ix+0), WHITE_FLASH0        ; restore attributes (no flash)
6E8A CD 5F 6F    4 84 call    Print_Char                  ; print key pressed
6E8D 0C          4 85 inc     c                           ; increment chars counter
6E8E 2C          4 86 inc     l                           ; increment X position of current input screen location
6E8F DD 2C       4 87 inc     ixl                         ; increment X position of current input attr location
6E91 18 AA       4 88 jr      Input_Start                 ; get next char (do until ENTER is pressed)
6E93             4 90 ; player pressed "delete" (char '0')
6E93             4 91 Input_Delete
6E93 79          4 92 ld      a, c                        ; get char counter
6E94 B7          4 93 or      a                           ; is it 0?
6E95 28 AF       4 94 jr      z, Input_Loop               ; repeat input loop (no chars to delete)
6E97 DD 36 00 47 4 96 ld      (ix+0), WHITE_FLASH0        ; restore attributes (no flash)
6E9B B8          4 97 cp      b                           ; is it the first char?
6E9C 28 08       4 98 jr      z, Input_Delete_Char        ; yes, continue delete
6E9E 3E 20       4 99 ld      a, ' '                      ; empty char
6EA0 CD 5F 6F    4 100 call    Print_Char                  ; delete cursor and last char
6EA3 2D          4 101 dec     l                           ; decrement X position of input screen location
6EA4 DD 2D       4 102 dec     ixl                         ; decrement X position of input attr location
6EA6             4 103 Input_Delete_Char
6EA6 0D          4 104 dec     c                           ; decrement char counter
6EA7 3E 20       4 105 ld      a, ' '                      ; empty char
6EA9 CD 5F 6F    4 106 call    Print_Char                  ; delete cursor and last char
6EAC 2D          4 107 dec     l                           ; decrement X position of player input screen location
6EAD DD 2D       4 108 dec     ixl                         ; decrement X position of player input attr location
6EAF 18 8C       4 109 jr      Input_Start                 ; get next char
6EB1             4 111 ; player pressed ENTER
6EB1             4 112 Input_Enter
6EB1 79          4 113 ld      a, c                        ; check char counter  
6EB2 B8          4 114 cp      b                           ; is it < MAX_CHARS?
6EB3 38 91       4 115 jr      c, Input_Loop               ; yes, repeat input loop (move is incomplete)
6EB5 DD 36 00 47 4 117 ld      (ix+0), WHITE_FLASH0        ; restore attributes (no flash)
6EB9 3E 20       4 118 ld      a, ' '                      ; empty char
6EBB CD 5F 6F    4 119 call    Print_Char                  ; delete cursor
6EBE C9          4 120 ret
6EBF             4 122 ; ----------------------------------------------------------------------------------------------------------------------
6EBF             4 123 ; Input_Key_Scan: wait for a key pressed and return its ASCII code
6EBF             4 124 ;
6EBF             4 125 ;                           Bit
6EBF             4 126 ;  Port  |   0   |   1   |   2   |   3   |   4   |
6EBF             4 127 ;  ------+-------+-------+-------+-------+-------+
6EBF             4 128 ;  $FEFE | Shift |   Z   |   X   |   C   |   V   |
6EBF             4 129 ;  $FDFE |   A   |   S   |   D   |   F   |   G   |
6EBF             4 130 ;  $FBFE |   Q   |   W   |   E   |   R   |   T   |
6EBF             4 131 ;  $F7FE |   1   |   2   |   3   |   4   |   5   |
6EBF             4 132 ;  $EFFE |   0   |   9   |   8   |   7   |   6   |
6EBF             4 133 ;  $DFFE |   P   |   O   |   I   |   U   |   Y   |
6EBF             4 134 ;  $BFFE | Enter |   L   |   K   |   J   |   H   |
6EBF             4 135 ;  $7FFE | Space |  Sym  |   M   |   N   |   B   |
6EBF             4 136 ;
6EBF             4 137 ;  Bits are set to 0 for any key that is pressed and 1 for any key that is not pressed
6EBF             4 138 ;
6EBF             4 139 ; Input:    -
6EBF             4 140 ;
6EBF             4 141 ; Output:   A = ASCII code of key pressed
6EBF             4 142 ;
6EBF             4 143 ; Destroys: DE
6EBF             4 144 ; ----------------------------------------------------------------------------------------------------------------------
6EBF             4 145 Input_Key_Scan:
6EBF C5          4 146 push    bc                          ; store registers
6EC0 E5          4 147 push    hl
6EC1             4 148 Input_Key_Released
6EC1 01 FE FE    4 149 ld      bc, $FEFE                   ; set keyboard port (see above)
6EC4             4 150 Input_Key_Released_Line
6EC4 ED 78       4 151 in      a, (c)                      ; read port
6EC6 2F          4 152 cpl                                 ; invert bits
6EC7 E6 1F       4 153 and     %00011111                   ; check 0 to 4 bits
6EC9 20 F6       4 154 jr      nz, Input_Key_Released      ; repeat from the beginning until no key is pressed
6ECB CB 00       4 155 rlc     b                           ; move BC to the next port
6ECD 38 F5       4 156 jr      c, Input_Key_Released_Line  ; repeat for each port
6ECF 11 05 00    4 157 ld      de, 5                       ; number of keys in each port (KEY_MAP displacement)
6ED2             4 158 Input_Key_Pressed_Begin
6ED2 21 D8 61    4 159 ld      hl, KEY_MAP                 ; HL points to KEY_MAP array
6ED5             4 160 Input_Key_Pressed_Line
6ED5 ED 78       4 161 in      a, (c)                      ; read port
6ED7 2F          4 162 cpl                                 ; invert bits
6ED8 E6 1F       4 163 and     %00011111                   ; check 0 to 4 bits
6EDA 20 08       4 164 jr      nz, Input_Key_Pressed       ; if any key is pressed, process it
6EDC 19          4 165 add     hl, de                      ; HL points to the next KEY_MAP block
6EDD CB 00       4 166 rlc     b                           ; move BC to the next port
6EDF 38 F4       4 167 jr      c, Input_Key_Pressed_Line   ; repeat for each port
6EE1 18 EF       4 168 jr      Input_Key_Pressed_Begin     ; repeat from the beginning until any key is pressed
6EE3             4 169 Input_Key_Next
6EE3 23          4 170 inc     hl                          ; move HL to the next character
6EE4             4 171 Input_Key_Pressed
6EE4 1F          4 172 rra                                 ; rotate bits of port readed
6EE5 30 FC       4 173 jr      nc, Input_Key_Next          ; repeat until find the key pressed
6EE7 7E          4 174 ld      a, (hl)                     ; return key pressed (ASCII) in A
6EE8 E1          4 175 pop     hl                          ; restore registers
6EE9 C1          4 176 pop     bc
6EEA C9          4 177 ret

; File #5: C:\Users\Antonio Luque\source\Repos\Hex\Z80CodeFiles\Print.z80asm

6EEB             5 1 ; ----------------------------------------------------------------------------------------------------------------------
6EEB             5 2 ; Print.z80asm
6EEB             5 3 ; Coded by Antonio Luque
6EEB             5 4 ; ----------------------------------------------------------------------------------------------------------------------
6EEB             5 6 CHAR_SET                equ     FONT-256                    ; address of character set data, adjusted for ASCII codes
6EEB             5 8 ; ----------------------------------------------------------------------------------------------------------------------
6EEB             5 9 ; Print_Players: print "Player" and "Speccy" strings in the corresponding positions
6EEB             5 10 ;
6EEB             5 11 ; Input:    A = player color (CYAN_COLOR or RED_COLOR)
6EEB             5 12 ;
6EEB             5 13 ; Output:   -
6EEB             5 14 ;
6EEB             5 15 ; Destroys: A, BC, DE, HL
6EEB             5 16 ; ----------------------------------------------------------------------------------------------------------------------
6EEB             5 17 Print_Players:
6EEB 11 21 62    5 18 ld      de, STR_PLAYER              ; DE points to "Player" string address
6EEE 01 1A 62    5 19 ld      bc, STR_SPECCY              ; BC points to "Speccy" string address
6EF1 21 02 50    5 20 ld      hl, $5002                   ; HL points to red string screen address
6EF4 FE 02       5 21 cp      RED_COLOR                   ; is player color red?
6EF6 28 06       5 22 jr      z, Print_Players_Strings    ; yes, print players strings
6EF8 11 1A 62    5 23 ld      de, STR_SPECCY              ; DE points to "Speccy" string address
6EFB 01 21 62    5 24 ld      bc, STR_PLAYER              ; BC points to "Player" string address
6EFE             5 25 Print_Players_Strings
6EFE CD 53 6F    5 26 call    Print_String                ; print "Player" or "Speccy"
6F01 50          5 27 ld      d, b                        ; DE points to "Player" or "Speccy" string address
6F02 59          5 28 ld      e, c
6F03 21 98 40    5 29 ld      hl, $4098                   ; HL points to cyan string screen address
6F06 18 4B       5 30 jr      Print_String                ; print "Player" or "Speccy"
6F08             5 32 ; ----------------------------------------------------------------------------------------------------------------------
6F08             5 33 ; Print_Clear_Alert: clear a printed alert message below the current player input move
6F08             5 34 ;
6F08             5 35 ; Input:    -
6F08             5 36 ; Output:   -
6F08             5 37 ; Destroys: A, BC, DE, HL, IX
6F08             5 38 ; ----------------------------------------------------------------------------------------------------------------------
6F08             5 39 Print_Clear_Alert:
6F08 11 46 62    5 40 ld      de, STR_EMPTY6              ; DE points to a 6 blanks string address
6F0B 0E 47       5 41 ld      c, WHITE_FLASH0             ; set (clear) alert message color
6F0D 18 02       5 42 jr      Print_Alert_XY              ; print (clear) alert string
6F0F             5 44 ; ----------------------------------------------------------------------------------------------------------------------
6F0F             5 45 ; Print_Alert: print an alert message below the current player input move
6F0F             5 46 ;
6F0F             5 47 ; Input:    DE = alert message string address
6F0F             5 48 ;
6F0F             5 49 ; Output:   -
6F0F             5 50 ;
6F0F             5 51 ; Uses:     TOKEN_COLOR (current token color)
6F0F             5 52 ;
6F0F             5 53 ; Destroys: A, BC, DE, HL, IX
6F0F             5 54 ; ----------------------------------------------------------------------------------------------------------------------
6F0F             5 55 Print_Alert:
6F0F 0E C7       5 56 ld      c, WHITE_FLASH1             ; set alert message color
6F11             5 57 Print_Alert_XY
6F11 DD 21 A2 5A 5 58 ld      ix, $5AA2                   ; IX points to red alert string attribute address
6F15 21 A2 50    5 59 ld      hl, $50A2                   ; HL points to red alert string screen address
6F18 3A 9E 61    5 60 ld      a, (TOKEN_COLOR)            ; check current token color
6F1B FE 02       5 61 cp      RED_COLOR                   ; is token color red?
6F1D 28 31       5 62 jr      z, Print_String_Color       ; yes, print alert string with color
6F1F DD 21 38 59 5 63 ld      ix, $5938                   ; IX points to cyan alert string attribute address
6F23 21 38 48    5 64 ld      hl, $4838                   ; HL points to cyan alert string screen address
6F26 18 28       5 65 jr      Print_String_Color          ; print alert string with color
6F28             5 67 ; ----------------------------------------------------------------------------------------------------------------------
6F28             5 68 ; Print_Wait: print "WAIT" message at current player input move location 
6F28             5 69 ;
6F28             5 70 ; Input:    -
6F28             5 71 ;
6F28             5 72 ; Output:   -
6F28             5 73 ;
6F28             5 74 ; Destroys: A, BC, DE, HL, IX
6F28             5 75 ; ----------------------------------------------------------------------------------------------------------------------
6F28             5 76 Print_Wait:
6F28 11 35 62    5 77 ld      de, STR_WAIT                ; DE points to "WAIT" string address
6F2B 0E C7       5 78 ld      c, WHITE_FLASH1             ; set wait message color
6F2D 18 0C       5 79 jr      Print_Move_XY               ; print wait string
6F2F             5 81 ; ----------------------------------------------------------------------------------------------------------------------
6F2F             5 82 ; Clear_Move: clear a printed player move at current player input move location 
6F2F             5 83 ;
6F2F             5 84 ; Input:    -
6F2F             5 85 ;
6F2F             5 86 ; Output:   -
6F2F             5 87 ;
6F2F             5 88 ; Destroys: A, BC, DE, HL, IX
6F2F             5 89 ; ----------------------------------------------------------------------------------------------------------------------
6F2F             5 90 Print_Clear_Move:
6F2F 11 41 62    5 91 ld      de, STR_EMPTY4              ; DE points to a 4 blanks string address
6F32 0E 47       5 92 ld      c, WHITE_FLASH0             ; set (clear) move string color
6F34 18 05       5 93 jr      Print_Move_XY               ; print (clear) move string
6F36             5 95 ; ----------------------------------------------------------------------------------------------------------------------
6F36             5 96 ; Print_Move: print a formatted move at current player input move location 
6F36             5 97 ;
6F36             5 98 ; Input:    -
6F36             5 99 ;
6F36             5 100 ; Output:   -
6F36             5 101 ;
6F36             5 102 ; Uses:     TOKEN_COLOR (current token color)
6F36             5 103 ;
6F36             5 104 ; Destroys: A, BC, DE, HL, IX
6F36             5 105 ; ----------------------------------------------------------------------------------------------------------------------
6F36             5 106 Print_Move:
6F36 11 15 62    5 107 ld      de, STR_MOVE                ; DE points to formatted move string address
6F39 0E 47       5 108 ld      c, WHITE_FLASH0             ; set string color
6F3B             5 109 Print_Move_XY
6F3B DD 21 82 5A 5 110 ld      ix, $5A82                   ; IX points to red move attribute address
6F3F 21 83 50    5 111 ld      hl, $5083                   ; HL points to red move screen address
6F42 3A 9E 61    5 112 ld      a, (TOKEN_COLOR)            ; check current token color
6F45 FE 02       5 113 cp      RED_COLOR                   ; is token color red?
6F47 28 07       5 114 jr      z, Print_String_Color       ; yes, print move string with color
6F49 DD 21 18 59 5 115 ld      ix, $5918                   ; IX points to cyan move attribute address
6F4D 21 19 48    5 116 ld      hl, $4819                   ; HL points to cyan move screen address
6F50             5 117 Print_String_Color
6F50 CD 65 78    5 118 call    Screen_Apply_Color          ; apply color to string area
6F53             5 119 ; ----------------------------------------------------------------------------------------------------------------------
6F53             5 120 ; Print_String: print a string on the screen
6F53             5 121 ; Based on assembler course by sromero: https://wiki.speccy.org/cursos/ensamblador/gfx4_fuentes
6F53             5 122 ;
6F53             5 123 ; Input:    DE = string address (ending with 0)
6F53             5 124 ;           HL = string screen address
6F53             5 125 ;
6F53             5 126 ; Output:   -
6F53             5 127 ;
6F53             5 128 ; Destroys: A, DE, HL
6F53             5 129 ; ----------------------------------------------------------------------------------------------------------------------
6F53             5 130 Print_String:
6F53 1A          5 131 ld      a, (de)                     ; get string character
6F54 B7          5 132 or      a                           ; is it 0? (end of string)
6F55 C8          5 133 ret     z                           ; yes, return
6F56 D5          5 134 push    de                          ; store pointer to string address
6F57 CD 5F 6F    5 135 call    Print_Char                  ; print character
6F5A D1          5 136 pop     de                          ; restore pointer to string address
6F5B 13          5 137 inc     de                          ; move DE to next string character
6F5C 2C          5 138 inc     l                           ; move HL to next screen column
6F5D 18 F4       5 139 jr      Print_String                ; repeat until end of string
6F5F             5 141 ; ----------------------------------------------------------------------------------------------------------------------
6F5F             5 142 ; Print_Char: print a character on the screen
6F5F             5 143 ;
6F5F             5 144 ; Input:    A  = character to print (ASCII)
6F5F             5 145 ;           HL = character screen address
6F5F             5 146 ;
6F5F             5 147 ; Output:   -
6F5F             5 148 ;
6F5F             5 149 ; Destroys: A, DE
6F5F             5 150 ; ----------------------------------------------------------------------------------------------------------------------
6F5F             5 151 Print_Char:
6F5F 11 00 68    5 152 ld      de, CHAR_SET                ; DE points to charset address
6F62             5 153 Print_Tile:
6F62 E5          5 154 push    hl                          ; store pointer to character/tile screen address
6F63 26 00       5 155 ld      h, 0                        ; set character/tile index in HL
6F65 6F          5 156 ld      l, a
6F66 29          5 157 add     hl, hl                      ; a character/tile is 8 bytes long
6F67 29          5 158 add     hl, hl
6F68 29          5 159 add     hl, hl
6F69 19          5 160 add     hl, de                      ; move HL to character/tile address
6F6A EB          5 161 ex      de, hl                      ; DE points to character/tile address
6F6B E1          5 162 pop     hl                          ; restore pointer to character/tile screen address
6F6C C5          5 163 push    bc                          ; store BC register
6F6D 4C          5 164 ld      c, h                        ; save high byte of character/tile screen address
6F6E 06 08       5 165 ld      b, 8                        ; number of character/tile bytes (loop counter)
6F70             5 166 Print_Tile_Pixels
6F70 1A          5 167 ld      a, (de)                     ; get character/tile byte
6F71 77          5 168 ld      (hl), a                     ; put character/tile byte on screen
6F72 13          5 169 inc     de                          ; move DE to next character/tile byte
6F73 24          5 170 inc     h                           ; move HL down one pixel-line
6F74 10 FA       5 171 djnz    Print_Tile_Pixels           ; repeat for each character/tile bytes
6F76 61          5 172 ld      h, c                        ; restore high byte of character/tile screen address
6F77 C1          5 173 pop     bc                          ; restore BC register
6F78 C9          5 174 ret

; File #6: C:\Users\Antonio Luque\source\Repos\Hex\Z80CodeFiles\Brainiac.z80asm

6F79             6 1 ; ----------------------------------------------------------------------------------------------------------------------
6F79             6 2 ; Brainiac.z80asm
6F79             6 3 ; Coded by Einar Saukas: https://spectrumcomputing.co.uk/entry/31171/ZX-Spectrum/BRAINIAC
6F79             6 4 ;
6F79             6 5 ; Adapted for Hex game by Einar Saukas
6F79             6 6 ; ----------------------------------------------------------------------------------------------------------------------
6F79             6 8 MIN_VALUE               equ     0                           ; alphaBeta pruning minimum value
6F79             6 9 MAX_VALUE               equ     255                         ; alphaBeta pruning maximum value
6F79             6 11 ; ----------------------------------------------------------------------------------------------------------------------
6F79             6 12 ; BRAINIAC_best_move: execute BRAINIAC algorithm to determine best choice for specified player's next move, according to
6F79             6 13 ; specified AI difficulty level. This algorithm is implemented as recursive Minimax with alpha-beta pruning, that
6F79             6 14 ; alternates between tree nodes maximizing score (speccy move) and minimizing it (player move) depending on recursion
6F79             6 15 ; depth.
6F79             6 16 ;
6F79             6 17 ; Original source code by Einar Saukas: https://spectrumcomputing.co.uk/entry/31171/ZX-Spectrum/BRAINIAC
6F79             6 18 ;
6F79             6 19 ; Input:    A  = speccy side (FRIEND or ENEMY)
6F79             6 20 ;           IX = candidates vector address
6F79             6 21 ;
6F79             6 22 ; Output:   E  = selected position (speccy move)
6F79             6 23 ;
6F79             6 24 ; Uses:     AI_PLAYER (speccy side)
6F79             6 25 ;           AI_DEPTH (recursion depth level)
6F79             6 26 ;
6F79             6 27 ; Destroys: A, A', BC, D, HL, IX, IY
6F79             6 28 ; ----------------------------------------------------------------------------------------------------------------------
6F79             6 29 BRAINIAC_best_move:
6F79 32 99 61    6 30 ld      (AI_PLAYER), a              ; save speccy side
6F7C CD 72 74    6 32 call    PathFinder_Score            ; get board score
6F7F CD 1B 75    6 33 call    PathFinder_Candidates       ; get candidates from board potentials
6F82             6 35 ; BRAINIAC start
6F82             6 36 AI_First_Candidate
6F82 DD 7E 00    6 37 ld      a, (ix+0)                   ; A is our first candidate
6F85 5F          6 39 ld      e, a                        ; E = best speccy move (initialization)
6F86 16 00       6 40 ld      d, MIN_VALUE                ; D = alphaMax
6F88             6 42 AI_Main_Loop                                                ; for each candidate {
6F88 D5          6 43 push    de                          ;       store alphaMax and best speccy move
6F89 26 7D       6 45 ld      h, CYAN_POSITIONS/256       ;       get and store candidate position on board
6F8B 6F          6 46 ld      l, a
6F8C E5          6 47 push    hl
6F8D 3A 99 61    6 49 ld      a, (AI_PLAYER)              ;       get speccy side
6F90 CD F1 70    6 50 call    PathFinder_PutToken         ;       BRAINIAC_play
6F93 1E FF       6 51 ld      e, MAX_VALUE                ;       E = betaMin
6F95 CD AE 6F    6 52 call    Alphabeta_Min               ;       A = alphabeta_min(alphaMax, betaMin)
6F98 E1          6 54 pop     hl                          ;       restore candidate position
6F99 CD F7 70    6 55 call    PathFinder_EraseToken       ;       BRAINIAC_undo
6F9C D1          6 57 pop     de                          ;       restore alphaMax and best player node
6F9D BA          6 59 cp      d
6F9E 38 04       6 60 jr      c, AI_Main_Next
6FA0 28 02       6 61 jr      z, AI_Main_Next             ;       if (A <= alphaMax) continue
6FA2 57          6 63 ld      d, a                        ;       alphaMax = A
6FA3 5D          6 64 ld      e, l                        ;       best move = E
6FA4             6 66 AI_Main_Next
6FA4 DD 2D       6 67 dec     ixl
6FA6 DD 7E 00    6 68 ld      a, (ix+0)                   ;       A is our next candidate
6FA9 B7          6 69 or      a                           ;       repeat until no more candidates
6FAA C2 88 6F    6 70 jp      nz, AI_Main_Loop            ; }
6FAD C9          6 71 ret
6FAE             6 73 ; ----------------------------------------------------------------------------------------------------------------------
6FAE             6 74 ; Alphabeta_Min: Process a tree node of the Minimax search tree with alpha-beta pruning, when it requires MINIMIZING
6FAE             6 75 ; Speccy's score.
6FAE             6 76 ;
6FAE             6 77 ; This implementation is different from conventional alpha-beta pruning because it returns the best (lowest) betaMin
6FAE             6 78 ; value obtained so far at this subtree depth (from previous sibling nodes), when it's even lower than the best (lowest)
6FAE             6 79 ; score at this tree node only. In practice that's OK, since the existence of a lower betaMin in a previous sibling node
6FAE             6 80 ; would make parent node discard the node's betaMin value and adopt the even lower betaMin value from a previous sibling
6FAE             6 81 ; node anyway. This change was useful to allow a highly optimized Assembly implementation with a more efficient register
6FAE             6 82 ; allocation. The only drawback was that, whenever a parent node obtains the same best score from 2 child nodes, it must
6FAE             6 83 ; always choose the child node evaluated first, since the other child node node may not really have the same score and
6FAE             6 84 ; could be just reproducing the best score from its sibling.
6FAE             6 85 ;
6FAE             6 86 ; Original source code by Einar Saukas: https://spectrumcomputing.co.uk/entry/31171/ZX-Spectrum/BRAINIAC
6FAE             6 87 ;
6FAE             6 88 ; Input:    D = alphaMax
6FAE             6 89 ;           E = betaMin
6FAE             6 90 ;
6FAE             6 91 ; Output:   A = "improved" betaMin
6FAE             6 92 ;           D = alphaMax
6FAE             6 93 ;           E = "improved" betaMin
6FAE             6 94 ;
6FAE             6 95 ; Uses:     AI_PLAYER (speccy side)
6FAE             6 96 ;           AI_DEPTH (recursion depth level)
6FAE             6 97 ;
6FAE             6 98 ; Destroys: BC, HL, IX, IY
6FAE             6 99 ; ----------------------------------------------------------------------------------------------------------------------
6FAE             6 100 Alphabeta_Min:
6FAE D5          6 101 push    de
6FAF             6 103 ; check if last speccy move is a winner one
6FAF CD 72 74    6 105 call    PathFinder_Score            ; if (speccy won)
6FB2 B7          6 106 or      a
6FB3 C2 BD 6F    6 107 jp      nz, Alphabeta_Min_Candidates
6FB6 3A 9A 61    6 108 ld      a, (AI_DEPTH)
6FB9 C6 E0       6 109 add     a, 224                      ;     return 224+depth
6FBB D1          6 110 pop     de
6FBC C9          6 111 ret
6FBD             6 113 Alphabeta_Min_Candidates
6FBD CD 1B 75    6 114 call    PathFinder_Candidates       ; find candidates for next move
6FC0 D1          6 115 pop     de
6FC1 DD 7E 00    6 117 ld      a, (ix+0)                   ; A is our first candidate
6FC4 21 9A 61    6 119 ld      hl, AI_DEPTH
6FC7 35          6 120 dec     (hl)                        ; depth--
6FC8 CA 08 70    6 121 jp      z, Heuristic_Min            ; if (depth == 0) return heuristic_min
6FCB             6 123 Alphabeta_Min_Loop                                          ; for each candidate {
6FCB D5          6 124 push    de                          ;       store alphaMax and betaMin
6FCC 26 7D       6 126 ld      h, CYAN_POSITIONS/256       ;       get and store candidate position on board
6FCE 6F          6 127 ld      l, a
6FCF E5          6 128 push    hl
6FD0 3A 99 61    6 130 ld      a, (AI_PLAYER)              ;       get speccy side
6FD3 EE 7C       6 131 xor     $7C                         ;       switch to player side
6FD5 CD F1 70    6 132 call    PathFinder_PutToken         ;       BRAINIAC_play
6FD8 CD 4C 70    6 133 call    Alphabeta_Max               ;       A = alphabeta_max(alphaMax, betaMin)
6FDB E1          6 135 pop     hl                          ;       restore candidate position
6FDC CD F7 70    6 136 call    PathFinder_EraseToken       ;       BRAINIAC_undo
6FDF D1          6 138 pop     de                          ;       restore alphaMax and betaMin
6FE0 BB          6 140 cp      e
6FE1 30 06       6 141 jr      nc, Alphabeta_Min_Next      ;       if (A >= betaMin) continue
6FE3 BA          6 143 cp      d
6FE4 38 12       6 144 jr      c, Alphabeta_Min_Exit
6FE6 28 10       6 145 jr      z, Alphabeta_Min_Exit       ;       if (A <= alphaMax) { depth++; return A }
6FE8 5F          6 147 ld      e, a                        ;       betaMin = A
6FE9             6 149 Alphabeta_Min_Next
6FE9 DD 2D       6 150 dec     ixl
6FEB DD 7E 00    6 151 ld      a, (ix+0)                   ;       A is our next candidate
6FEE B7          6 152 or      a                           ;       repeat until no more candidates
6FEF C2 CB 6F    6 153 jp      nz, Alphabeta_Min_Loop      ; }
6FF2 7B          6 155 ld      a, e                        ; return betaMin
6FF3 21 9A 61    6 157 ld      hl, AI_DEPTH
6FF6 34          6 158 inc     (hl)                        ; depth++
6FF7 C9          6 159 ret
6FF8             6 161 Alphabeta_Min_Exit
6FF8 5F          6 162 ld      e, a                        ; (discard remaining candidates)
6FF9 AF          6 163 xor     a
6FFA             6 164 Alphabeta_Min_Skip
6FFA DD 2D       6 165 dec     ixl
6FFC DD BE 00    6 166 cp      (ix+0)
6FFF C2 FA 6F    6 167 jp      nz, Alphabeta_Min_Skip
7002 7B          6 168 ld      a, e
7003 21 9A 61    6 170 ld      hl, AI_DEPTH
7006 34          6 171 inc     (hl)                        ; (depth++)
7007 C9          6 172 ret
7008             6 174 ; ----------------------------------------------------------------------------------------------------------------------
7008             6 175 ; Heuristic_Min: Specialized routine to process the lowest tree node (depth zero) of the Minimax search tree with alpha-
7008             6 176 ; beta pruning, when it requires MINIMIZING Speccy's score.
7008             6 177 ;
7008             6 178 ; Technically "Heuristic_Min" works exactly like "Alphabeta_Min_Loop", except it directly evaluates board for each child
7008             6 179 ; node instead of calling "Alphabeta_Max" recursively. Although it would be easier to just let it invoke "Alphabeta_Max"
7008             6 180 ; again to obtain the evaluated board, this simple optimization is responsible for making BRAINIAC almost 2 seconds
7008             6 181 ; faster.
7008             6 182 ;
7008             6 183 ; Original source code by Einar Saukas: https://spectrumcomputing.co.uk/entry/31171/ZX-Spectrum/BRAINIAC
7008             6 184 ;
7008             6 185 ; Input:    A = first candidate
7008             6 186 ;           D = alphaMax
7008             6 187 ;           E = betaMin
7008             6 188 ;
7008             6 189 ; Output:   A = "improved" betaMin
7008             6 190 ;           D = alphaMax
7008             6 191 ;           E = "improved" betaMin
7008             6 192 ;
7008             6 193 ; Uses:     AI_PLAYER (speccy side)
7008             6 194 ;           AI_DEPTH (recursion depth level)
7008             6 195 ;
7008             6 196 ; Destroys: BC, HL, IX, IY
7008             6 197 ; ----------------------------------------------------------------------------------------------------------------------
7008             6 198 Heuristic_Min:                                              ; for each candidate {
7008 D5          6 199 push    de                          ;       store alphaMax and betaMin
7009 26 7D       6 201 ld      h, CYAN_POSITIONS/256       ;       get and store candidate position on board
700B 6F          6 202 ld      l, a
700C E5          6 203 push    hl
700D 3A 99 61    6 205 ld      a, (AI_PLAYER)              ;       get speccy side
7010 EE 7C       6 206 xor     $7C                         ;       switch to player side
7012 CD F1 70    6 207 call    PathFinder_PutToken         ;       BRAINIAC_play
7015 CD 72 74    6 209 call    PathFinder_Score            ;       if (player won)
7018 FE FF       6 210 cp      -1
701A C2 1F 70    6 211 jp      nz, Heuristic_Min_Continue
701D 3E 20       6 212 ld      a, 32                       ;           A = 32
701F             6 213 Heuristic_Min_Continue
701F E1          6 214 pop     hl
7020 CD F7 70    6 215 call    PathFinder_EraseToken       ;       BRAINIAC_undo
7023 D1          6 217 pop     de
7024 BB          6 219 cp      e
7025 30 06       6 220 jr      nc, Heuristic_Min_Next      ;       if (A >= betaMin) continue
7027 BA          6 222 cp      d
7028 38 12       6 223 jr      c, Heuristic_Min_Exit
702A 28 10       6 224 jr      z, Heuristic_Min_Exit       ;       if (A <= alphaMax) { depth++; return A }
702C 5F          6 226 ld      e, a                        ;       betaMin = A
702D             6 228 Heuristic_Min_Next
702D DD 2D       6 229 dec     ixl
702F DD 7E 00    6 230 ld      a, (ix+0)                   ;       A is our next candidate
7032 B7          6 231 or      a                           ;       repeat until no more candidates
7033 C2 08 70    6 232 jp      nz, Heuristic_Min           ; }
7036 7B          6 234 ld      a, e                        ; return betaMin
7037 21 9A 61    6 236 ld      hl, AI_DEPTH
703A 34          6 237 inc     (hl)                        ; depth++
703B C9          6 238 ret
703C             6 240 Heuristic_Min_Exit
703C 5F          6 241 ld      e, a                        ; (discard remaining candidates)
703D AF          6 242 xor     a
703E             6 243 Heuristic_Min_Skip
703E DD 2D       6 244 dec     ixl
7040 DD BE 00    6 245 cp      (ix+0)
7043 C2 3E 70    6 246 jp      nz, Heuristic_Min_Skip
7046 7B          6 247 ld      a, e
7047 21 9A 61    6 249 ld      hl, AI_DEPTH
704A 34          6 250 inc     (hl)                        ; (depth++)
704B C9          6 251 ret
704C             6 253 ; ----------------------------------------------------------------------------------------------------------------------
704C             6 254 ; Alphabeta_Max: Process a tree node of the Minimax search tree with alpha-beta pruning, when it requires MAXIMIZING
704C             6 255 ; Speccy's score.
704C             6 256 ;
704C             6 257 ; This implementation is different from conventional alpha-beta pruning because it returns the best (highest) alphaMax
704C             6 258 ; value obtained so far at this subtree depth (from previous sibling nodes), when it's even higher than the best
704C             6 259 ; (highest) score at this tree node only. In practice that's OK, since the existence of a higher alphaMax in a previous
704C             6 260 ; sibling node would make parent node discard the node's alphaMax value and adopt the even higher alphaMax value from a
704C             6 261 ; previous sibling node anyway. This change was useful to allow a highly optimized Assembly implementation with a more
704C             6 262 ; efficient register allocation. The only drawback was that, whenever a parent node obtains the same best score from 2
704C             6 263 ; child nodes, it must always choose the child node evaluated first, since the other child node node may not really have
704C             6 264 ; the same score and could be just reproducing the best score from its sibling.
704C             6 265 ;
704C             6 266 ; Original source code by Einar Saukas: https://spectrumcomputing.co.uk/entry/31171/ZX-Spectrum/BRAINIAC
704C             6 267 ;
704C             6 268 ; Input:    D = alphaMax
704C             6 269 ;           E = betaMin
704C             6 270 ;
704C             6 271 ; Output:   A = "improved" alphaMax
704C             6 272 ;           D = "improved" alphaMax
704C             6 273 ;           E = betaMin
704C             6 274 ;
704C             6 275 ; Uses:     AI_PLAYER (speccy side)
704C             6 276 ;           AI_DEPTH (recursion depth level)
704C             6 277 ;
704C             6 278 ; Destroys: BC, HL, IX, IY
704C             6 279 ; ----------------------------------------------------------------------------------------------------------------------
704C             6 280 Alphabeta_Max:
704C D5          6 281 push    de
704D             6 283 ; check if last player move is a winner one
704D CD 72 74    6 285 call    PathFinder_Score            ; if (player won)
7050 FE FF       6 286 cp      -1
7052 C2 5D 70    6 287 jp      nz, Alphabeta_Max_Candidates
7055 3A 9A 61    6 288 ld      a, (AI_DEPTH)
7058 2F          6 289 cpl
7059 C6 21       6 290 add     a, 32+1                     ;     return 32-depth
705B D1          6 291 pop     de
705C C9          6 292 ret
705D             6 294 Alphabeta_Max_Candidates
705D CD 1B 75    6 295 call    PathFinder_Candidates       ; find candidates for next move
7060 D1          6 296 pop     de
7061 DD 7E 00    6 298 ld      a, (ix+0)                   ; A is our first candidate
7064 21 9A 61    6 300 ld      hl, AI_DEPTH
7067 35          6 301 dec     (hl)                        ; depth--
7068 CA A6 70    6 302 jp      z, Heuristic_Max            ; if (depth == 0) return heuristic_max
706B             6 304 Alphabeta_Max_Loop                                          ; for each candidate {
706B D5          6 305 push    de                          ;       store alphaMax and betaMin
706C 26 7D       6 307 ld      h, CYAN_POSITIONS/256       ;       get and store candidate position on board
706E 6F          6 308 ld      l, a
706F E5          6 309 push    hl
7070 3A 99 61    6 311 ld      a, (AI_PLAYER)              ;       get speccy side
7073 CD F1 70    6 312 call    PathFinder_PutToken         ;       BRAINIAC_play
7076 CD AE 6F    6 313 call    Alphabeta_Min               ;       A = alphabeta_min(alphaMax, betaMin)
7079 E1          6 315 pop     hl                          ;       restore candidate position
707A CD F7 70    6 316 call    PathFinder_EraseToken       ;       BRAINIAC_undo
707D D1          6 318 pop     de                          ;       restore alphaMax and betaMin
707E BA          6 320 cp      d
707F 38 06       6 321 jr      c, Alphabeta_Max_Next
7081 28 04       6 322 jr      z, Alphabeta_Max_Next       ;       if (A <= alphaMax) continue
7083 BB          6 324 cp      e
7084 30 10       6 325 jr      nc, Alphabeta_Max_Exit      ;       if (A >= betaMin) { depth++; return A }
7086 57          6 327 ld      d, a                        ;       alphaMax = A
7087             6 329 Alphabeta_Max_Next
7087 DD 2D       6 330 dec     ixl
7089 DD 7E 00    6 331 ld      a, (ix+0)                   ;       A is our next candidate
708C B7          6 332 or      a                           ;       repeat until no more candidates
708D C2 6B 70    6 333 jp      nz, Alphabeta_Max_Loop      ; }
7090 7A          6 335 ld      a, d                        ; return alphaMax
7091 21 9A 61    6 337 ld      hl, AI_DEPTH
7094 34          6 338 inc     (hl)                        ; depth++
7095 C9          6 339 ret
7096             6 341 Alphabeta_Max_Exit
7096 57          6 342 ld      d, a                        ; (discard remaining candidates)
7097 AF          6 343 xor     a
7098             6 344 Alphabeta_Max_Skip
7098 DD 2D       6 345 dec     ixl
709A DD BE 00    6 346 cp      (ix+0)
709D C2 98 70    6 347 jp      nz, Alphabeta_Max_Skip
70A0 7A          6 348 ld      a, d
70A1 21 9A 61    6 350 ld      hl, AI_DEPTH
70A4 34          6 351 inc     (hl)                        ; (depth++)
70A5 C9          6 352 ret
70A6             6 354 ; ----------------------------------------------------------------------------------------------------------------------
70A6             6 355 ; Heuristic_Max: Specialized routine to process the lowest tree node (depth zero) of the Minimax search tree with alpha-
70A6             6 356 ; beta pruning, when it requires MAXIMIZING Speccy's score.
70A6             6 357 ;
70A6             6 358 ; Technically "Heuristic_Max" works exactly like "Alphabeta_Max_Loop", except it directly evaluates board for each child
70A6             6 359 ; node instead of calling "Alphabeta_Min" recursively. Although it would be easier to just let it invoke "Alphabeta_Min"
70A6             6 360 ; again to obtain the evaluated board, this simple optimization is responsible for making BRAINIAC almost 2 seconds
70A6             6 361 ; faster.
70A6             6 362 ;
70A6             6 363 ; Original source code by Einar Saukas: https://spectrumcomputing.co.uk/entry/31171/ZX-Spectrum/BRAINIAC
70A6             6 364 ;
70A6             6 365 ; Input:    A = first candidate
70A6             6 366 ;           D = alphaMax
70A6             6 367 ;           E = betaMin
70A6             6 368 ;
70A6             6 369 ; Returns:  A = "improved" alphaMax
70A6             6 370 ;           D = "improved" alphaMax
70A6             6 371 ;           E = betaMin
70A6             6 372 ;
70A6             6 373 ; Uses:     AI_PLAYER (speccy side)
70A6             6 374 ;           AI_DEPTH (recursion depth level)
70A6             6 375 ;
70A6             6 376 ; Destroys: BC, HL, IX, IY
70A6             6 377 ; ----------------------------------------------------------------------------------------------------------------------
70A6             6 378 Heuristic_Max:                                              ; for each candidate {
70A6 D5          6 379 push    de                          ;       store alphaMax and betaMin
70A7 26 7D       6 381 ld      h, CYAN_POSITIONS/256       ;       get and store candidate position on board
70A9 6F          6 382 ld      l, a
70AA E5          6 383 push    hl
70AB 3A 99 61    6 385 ld      a, (AI_PLAYER)              ;       get speccy side
70AE CD F1 70    6 386 call    PathFinder_PutToken         ;       (BRAINIAC_play)
70B1 CD 72 74    6 388 call    PathFinder_Score            ;       if (speccy won)
70B4 B7          6 389 or      a
70B5 C2 BA 70    6 390 jp      nz, Heuristic_Max_Continue
70B8 3E E0       6 391 ld      a, 224                      ;           A = 224
70BA             6 392 Heuristic_Max_Continue
70BA E1          6 393 pop     hl                          ;       restore candidate position
70BB CD F7 70    6 394 call    PathFinder_EraseToken       ;       BRAINIAC_undo
70BE D1          6 396 pop     de                          ;       restore alphaMax and betaMin
70BF BA          6 398 cp      d
70C0 38 06       6 399 jr      c, Heuristic_Max_Next
70C2 28 04       6 400 jr      z, Heuristic_Max_Next       ;       if (A <= alphaMax) continue
70C4 BB          6 402 cp      e
70C5 30 10       6 403 jr      nc, Heuristic_Max_Exit      ;       if (A >= betaMin) { depth++; return A }
70C7 57          6 405 ld      d, a                        ;       alphaMax = A
70C8             6 407 Heuristic_Max_Next
70C8 DD 2D       6 408 dec     ixl
70CA DD 7E 00    6 409 ld      a, (ix+0)                   ;       A is our next candidate
70CD B7          6 410 or      a                           ;       repeat until no more candidates
70CE C2 A6 70    6 411 jp      nz, Heuristic_Max           ; }
70D1 7A          6 413 ld      a, d                        ; return alphaMax
70D2 21 9A 61    6 415 ld      hl, AI_DEPTH
70D5 34          6 416 inc     (hl)                        ; depth++
70D6 C9          6 417 ret
70D7             6 419 Heuristic_Max_Exit
70D7 57          6 420 ld      d, a                        ; (discard remaining candidates)
70D8 AF          6 421 xor     a
70D9             6 422 Heuristic_Max_Skip
70D9 DD 2D       6 423 dec     ixl
70DB DD BE 00    6 424 cp      (ix+0)
70DE C2 D9 70    6 425 jp      nz, Heuristic_Max_Skip
70E1 7A          6 426 ld      a, d
70E2 21 9A 61    6 428 ld      hl, AI_DEPTH
70E5 34          6 429 inc     (hl)                        ; (depth++)
70E6 C9          6 430 ret

; File #7: C:\Users\Antonio Luque\source\Repos\Hex\Z80CodeFiles\PathFinder.z80asm

70E7             7 1 ; ----------------------------------------------------------------------------------------------------------------------
70E7             7 2 ; PathFinder.z80asm
70E7             7 3 ; Coded by Einar Saukas: https://spectrumcomputing.co.uk/entry/28178/ZX-Spectrum/PATHFINDER
70E7             7 4 ;
70E7             7 5 ; Adapted by Antonio Luque and Einar Saukas to be used as heuristic in Hex game.
70E7             7 6 ; Based on chapter 5 of Jack van Rijswijck's thesis - https://webdocs.cs.ualberta.ca/~hayward/theses/jackmsc.pdf
70E7             7 7 ; ----------------------------------------------------------------------------------------------------------------------
70E7             7 9 CYAN                    equ     $01                         ; cyan side
70E7             7 10 RED                     equ     $02                         ; red side
70E7             7 11 WIDTH                   equ     $08                         ; distance to up-left/down-right neighbor
70E7             7 12 EMPTY                   equ     $00                         ; empty positions on the board
70E7             7 13 SKIPPED                 equ     $01                         ; skipped positions on the board
70E7             7 14 FRIEND                  equ     $02                         ; positions occupied by friendly tokens on the board
70E7             7 15 VICTORY                 equ     $03                         ; internal value if victory
70E7             7 16 ENEMY                   equ     $7E                         ; positions occupied by opponent tokens on the board
70E7             7 18 CYAN_POSITIONS          equ     $7D00                       ; a 256-aligned memory area reserved for cyan positions
70E7             7 19 RED_POSITIONS           equ     $7E00                       ; a 256-aligned memory area reserved for red positions
70E7             7 20 CANDIDATES              equ     $7F00                       ; a 256-aligned memory area reserved to store candidates
70E7             7 22 ; ----------------------------------------------------------------------------------------------------------------------
70E7             7 23 ; PathFinder_Friend: return if current player is FRIEND or ENEMY from the perspective of the cyan player
70E7             7 24 ;
70E7             7 25 ; Input:    -
70E7             7 26 ;
70E7             7 27 ; Output:   A = FRIEND, if current token color is cyan
70E7             7 28 ;           A = ENEMY, if current token color is red
70E7             7 29 ;
70E7             7 30 ; Uses:     TOKEN_COLOR (current token color)
70E7             7 31 ;
70E7             7 32 ; Destroys: -
70E7             7 33 ; ----------------------------------------------------------------------------------------------------------------------
70E7             7 34 PathFinder_Friend:
70E7 3A 9E 61    7 35 ld      a, (TOKEN_COLOR)            ; get current player color
70EA 1F          7 36 rra                                 ; is current player color cyan?
70EB 3E 02       7 37 ld      a, FRIEND                   ; set FRIEND in A
70ED D8          7 38 ret     c                           ; yes, return FRIEND 
70EE EE 7C       7 39 xor     $7C                         ; no, return ENEMY
70F0 C9          7 40 ret
70F1             7 42 ; ----------------------------------------------------------------------------------------------------------------------
70F1             7 43 ; PathFinder_PutToken: put a token on both CYAN_POSITIONS and RED_POSITIONS areas
70F1             7 44 ;
70F1             7 45 ; Input:    A  = either FRIEND or ENEMY from the perspective of cyan player
70F1             7 46 ;           HL = CYAN_POSITIONS token address
70F1             7 47 ;
70F1             7 48 ; Output:   -
70F1             7 49 ;
70F1             7 50 ; Destroys: -
70F1             7 51 ; ----------------------------------------------------------------------------------------------------------------------
70F1             7 52 PathFinder_PutToken:
70F1 77          7 53 ld      (hl), a                     ; put token at cyan position
70F2 24          7 54 inc     h                           ; move HL to red position address
70F3 EE 7C       7 55 xor     $7C                         ; invert side
70F5 77          7 56 ld      (hl), a                     ; put token at red position
70F6 C9          7 57 ret
70F7             7 59 ; ----------------------------------------------------------------------------------------------------------------------
70F7             7 60 ; PathFinder_EraseToken: erase a token from both CYAN_POSITIONS and RED_POSITIONS areas
70F7             7 61 ;
70F7             7 62 ; Input:    HL = CYAN_POSITIONS token address
70F7             7 63 ;
70F7             7 64 ; Output:   -
70F7             7 65 ;
70F7             7 66 ; Destroys: -
70F7             7 67 ; ----------------------------------------------------------------------------------------------------------------------
70F7             7 68 PathFinder_EraseToken:
70F7 36 00       7 69 ld      (hl), EMPTY                 ; erase token at cyan position
70F9 24          7 70 inc     h                           ; move HL to red position address
70FA 36 00       7 71 ld      (hl), EMPTY                 ; erase token at red position
70FC C9          7 72 ret
70FD             7 74 ; ----------------------------------------------------------------------------------------------------------------------
70FD             7 75 ; PathFinder_CopyPositions: copy from CYAN_POSITIONS or RED_POSITIONS area to its corresponding board
70FD             7 76 ;
70FD             7 77 ; Input:    DE = cyan or red board address (destiny)
70FD             7 78 ;           HL = CYAN_POSITIONS or RED_POSITIONS address (origin)
70FD             7 79 ;
70FD             7 80 ; Output:   -
70FD             7 81 ;
70FD             7 82 ; Destroys: BC, DE, HL
70FD             7 83 ; ----------------------------------------------------------------------------------------------------------------------
70FD             7 84 PathFinder_CopyPositions:
70FD 01 31 00    7 85 ld      bc, 7*7                     ; number of positions to be copied
7100             7 86 PathFinder_CopyLoop
7100 2C          7 87 inc     l                           ; skip borders on positions
7101 2C          7 88 inc     l
7102 1C          7 89 inc     e                           ; skip borders on board
7103 1C          7 90 inc     e
7104 ED A0       7 91 ldi                                 ; copy a row of 7 positions
7106 ED A0       7 92 ldi
7108 ED A0       7 93 ldi
710A ED A0       7 94 ldi
710C ED A0       7 95 ldi
710E ED A0       7 96 ldi
7110 ED A0       7 97 ldi
7112 EA 00 71    7 98 jp      pe, PathFinder_CopyLoop     ; repeat for each row
7115 C9          7 99 ret
7116             7 101 ; ----------------------------------------------------------------------------------------------------------------------
7116             7 102 ; PathFinder_Update: update current board position during heuristic function evaluation
7116             7 103 ;
7116             7 104 ; This is an approach to Jack van Rijswijck's "two-distance" metric. The two-distance is defined as "one more than the
7116             7 105 ; second lowest distance of p's neighbors to q, with the proviso that the two-distance equals 1 if p and q are directly
7116             7 106 ; adjacent".
7116             7 107 ;
7116             7 108 ; The position will be updated with a number that indicates two-distance from goal (stored in lowest 6 bits), and a flag
7116             7 109 ; that indicates a position occupied by a friendly token (stored in 6th bit). Therefore this position is updated as
7116             7 110 ; follows, depending on current content:
7116             7 111 ;
7116             7 112 ; * SKIPPED: 1 + distance of neighbor closest to goal
7116             7 113 ; * FRIEND:  distance of neighbor closest to goal
7116             7 114 ; * EMPTY:   1 + distance of neighbor closest to goal, if current distance is friendly, SKIPPED otherwise
7116             7 115 ;
7116             7 116 ; Input:    Z  = flag set when (HL) is FRIEND
7116             7 117 ;           C  = current distance (also with a flag at 6th bit that indicates a friendly position)
7116             7 118 ;           HL = current position address (on either cyan boards or red boards)
7116             7 119 ;
7116             7 120 ; Output:   -
7116             7 121 ;
7116             7 122 ; Destroys: B, DE
7116             7 123 ; ----------------------------------------------------------------------------------------------------------------------
7116             7 124 PathFinder_Update:
7116 28 12       7 125 jr      z, PathFinder_Friendly      ; if Z flag is set, update friend distance
7118 46          7 126 ld      b, (hl)                     ; check current position
7119 10 1A       7 127 djnz    PathFinder_EMPTY
711B             7 128 ; if (HL) = SKIPPED, then set (HL) = C+1 and insert HL at queue tail
711B             7 129 PathFinder_Skipped:
711B 71          7 130 ld      (hl), c                     ; save current distance in current position
711C 34          7 131 inc     (hl)                        ; increment distance of current position
711D CB B6       7 132 res     6, (hl)                     ; reset friendly token flag
711F EB          7 133 ex      de, hl                      ; store current position in DE
7120             7 134 @Queue_Tail
7120 21 00 00    7 135 ld      hl, $0000                   ; HL points to queue tail address (changed before call)
7123 2C          7 136 inc     l                           ; move queue tail down
7124 73          7 137 ld      (hl), e                     ; store position into queue tail
7125 22 21 71    7 138 ld      (@Queue_Tail+1), hl         ; update queue tail
7128 EB          7 139 ex      de, hl                      ; restore current position
7129 C9          7 140 ret
712A             7 141 ; if (HL) = FRIEND, then set (HL) = C and insert HL at queue head
712A             7 142 PathFinder_Friendly
712A 71          7 143 ld      (hl), c                     ; save current distance in current position
712B CB F6       7 144 set     6, (hl)                     ; set friendly token flag
712D 45          7 145 ld      b, l                        ; save current position in B
712E D1          7 146 pop     de                          ; preserve RET address
712F E3          7 147 ex      (sp), hl                    ; retrieve queue head
7130 70          7 148 ld      (hl), b                     ; push this position into queue head
7131 2D          7 149 dec     l                           ; move queue head up
7132 E3          7 150 ex      (sp), hl                    ; update queue head
7133 D5          7 151 push    de                          ; restore RET address
7134 C9          7 152 ret
7135             7 153 ; if (HL) = EMPTY, then set (HL) = C+1 if current distance is friendly, set (HL) = SKIPPED otherwise
7135             7 154 PathFinder_EMPTY
7135 CB 71       7 155 bit     6, c                        ; is current distance friendly?
7137 20 E2       7 156 jr      nz, PathFinder_Skipped      ; yes, set (HL) = C+1 and insert HL in queue tail
7139 34          7 157 inc     (hl)                        ; set (HL) = SKIPPED to find the second lowest distance
713A C9          7 158 ret
713B             7 160 ; ----------------------------------------------------------------------------------------------------------------------
713B             7 161 ; PathFinder_Cyan_UpDown: set up 'Path_Finder' routine to calculate CYAN two-distances from UP to DOWN edge
713B             7 162 ;
713B             7 163 ; Input:    -
713B             7 164 ;
713B             7 165 ; Output:   A = -1, if down edge couldn't be reached
713B             7 166 ;           A =  0, if there is chain of connected cyan tokens between the two edges
713B             7 167 ;           A = last edge position visited (-1), otherwise
713B             7 168 ;
713B             7 169 ; Uses:     @Queue_Tail (queue pointer in 'PathFinder_Update' routine)
713B             7 170 ;
713B             7 171 ; Destroys: BC, DE, HL, IY
713B             7 172 ; ----------------------------------------------------------------------------------------------------------------------
713B             7 173 PathFinder_Cyan_UpDown:
713B 21 07 7D    7 174 ld      hl, CYAN_POSITIONS+7        ; HL points to cyan positions address (up-right corner)
713E 11 07 61    7 175 ld      de, CYAN_BOARD_UP_DOWN+7    ; DE points to cyan board up-down address (up-right corner)
7141 CD FD 70    7 176 call    PathFinder_CopyPositions    ; copy from cyan positions to cyan board up-down
7144             7 178 ; entry point for PathFinder_VictoryPath
7144             7 179 PathFinder_Cyan_CheckPath:
7144 FD 21 00 09 7 180 ld      iy, $0900                   ; IYH = distance to check edge positions
7148             7 181 ; IYL = last edge position visited
7148 21 00 60    7 182 ld      hl, CYAN_QUEUE_AREA         ; HL points to cyan queue area address
714B 22 21 71    7 183 ld      (@Queue_Tail+1), hl         ; initialize cyan queue tail
714E E5          7 184 push    hl                          ; store cyan queue head
714F             7 186 ; set up cyan board (up-down) start positions distances
714F 21 09 61    7 188 ld      hl, CYAN_BOARD_UP_DOWN+9    ; HL points to cyan board up-down address (1st position)
7152 0E 43       7 189 ld      c, VICTORY+$40              ; set start positions distance + friendly flag
7154 3E 02       7 190 ld      a, FRIEND                   ; set distance to compare with
7156 BE          7 191 cp      (hl)                        ; check 1st start position distance
7157 D4 16 71    7 192 call    nc, PathFinder_Update       ; if FRIEND >= distance, update distance
715A 2C          7 193 inc     l                           ; move HL to next start position address
715B BE          7 194 cp      (hl)                        ; check 2nd start position distance
715C D4 16 71    7 195 call    nc, PathFinder_Update       ; (repeat for each start position)
715F 2C          7 196 inc     l
7160 BE          7 197 cp      (hl)                        ; check 3rd start position distance
7161 D4 16 71    7 198 call    nc, PathFinder_Update
7164 2C          7 199 inc     l
7165 BE          7 200 cp      (hl)                        ; check 4th start position distance
7166 D4 16 71    7 201 call    nc, PathFinder_Update
7169 2C          7 202 inc     l
716A BE          7 203 cp      (hl)                        ; check 5th start position distance
716B D4 16 71    7 204 call    nc, PathFinder_Update
716E 2C          7 205 inc     l
716F BE          7 206 cp      (hl)                        ; check 6th start position distance
7170 D4 16 71    7 207 call    nc, PathFinder_Update
7173 2C          7 208 inc     l
7174 C3 61 72    7 209 jp      Path_Finder_First           ; calculate two-distances of cyan board (up-down)
7177             7 211 ; ----------------------------------------------------------------------------------------------------------------------
7177             7 212 ; PathFinder_Cyan_DownUp: set up Path_Finder routine to calculate CYAN two-distance from DOWN to UP edge
7177             7 213 ;
7177             7 214 ; Input:    -
7177             7 215 ;
7177             7 216 ; Output:   A = -1, if up edge couldn't be reached
7177             7 217 ;           A =  0, if there is chain of connected cyan tokens between the two edges
7177             7 218 ;           A = last edge position visited (-1), otherwise
7177             7 219 ;
7177             7 220 ; Uses:     @Queue_Tail (queue pointer in 'PathFinder_Update' routine)
7177             7 221 ;
7177             7 222 ; Destroys: BC, DE, HL, IY
7177             7 223 ; ----------------------------------------------------------------------------------------------------------------------
7177             7 224 PathFinder_Cyan_DownUp:
7177 21 07 7D    7 225 ld      hl, CYAN_POSITIONS+7        ; HL points to cyan positions address (up-right corner)
717A 11 4F 61    7 226 ld      de, CYAN_BOARD_DOWN_UP-1    ; DE points to cyan board down-up address (up-right corner)
717D CD FD 70    7 227 call    PathFinder_CopyPositions    ; copy from cyan positions to cyan board down-up
7180 FD 21 00 F7 7 229 ld      iy, $F700                   ; IYH = distance to check edge positions
7184             7 230 ; IYL = last edge position visited
7184 2A 21 71    7 231 ld      hl, (@Queue_Tail+1)         ; retreive cyan queue tail
7187 E5          7 232 push    hl                          ; initialize cyan queue head
7188             7 234 ; set up cyan board (down-up) start positions distances
7188 EB          7 236 ex      de, hl                      ; (take advantage of last "CopyPositions" execution)
7189 2D          7 237 dec     l                           ; move HL to cyan boad down-up address (last position)
718A 0E 43       7 238 ld      c, VICTORY+$40              ; set start positions distance + friendly flag
718C 3E 02       7 239 ld      a, FRIEND                   ; set distance to compare with
718E BE          7 240 cp      (hl)                        ; check 1st start position distance
718F D4 16 71    7 241 call    nc, PathFinder_Update       ; if FRIEND >= distance, update distance
7192 2D          7 242 dec     l                           ; move HL to next start position address
7193 BE          7 243 cp      (hl)                        ; check 2nd start position distance
7194 D4 16 71    7 244 call    nc, PathFinder_Update       ; (repeat for each start position)
7197 2D          7 245 dec     l
7198 BE          7 246 cp      (hl)                        ; check 3rd start position distance
7199 D4 16 71    7 247 call    nc, PathFinder_Update
719C 2D          7 248 dec     l
719D BE          7 249 cp      (hl)                        ; check 4th start position distance
719E D4 16 71    7 250 call    nc, PathFinder_Update
71A1 2D          7 251 dec     l
71A2 BE          7 252 cp      (hl)                        ; check 5th start position distance
71A3 D4 16 71    7 253 call    nc, PathFinder_Update
71A6 2D          7 254 dec     l
71A7 BE          7 255 cp      (hl)                        ; check 6th start position distance
71A8 D4 16 71    7 256 call    nc, PathFinder_Update
71AB 2D          7 257 dec     l
71AC C3 61 72    7 258 jp      Path_Finder_First           ; calculate two-distances of cyan board (down-up)
71AF             7 260 ; ----------------------------------------------------------------------------------------------------------------------
71AF             7 261 ; PathFinder_Red_LeftRight: set up Path_Finder routine to calculate RED two-distance from LEFT to RIGHT edge
71AF             7 262 ;
71AF             7 263 ; Input:    -
71AF             7 264 ;
71AF             7 265 ; Output:   A = -1, if right edge couldn't be reached
71AF             7 266 ;           A =  0, if there is chain of connected cyan tokens between the two edges
71AF             7 267 ;           A = last edge position visited (-1), otherwise
71AF             7 268 ;
71AF             7 269 ; Uses:     @Queue_Tail (queue pointer in 'PathFinder_Update' routine)
71AF             7 270 ;
71AF             7 271 ; Destroys: BC, DE, HL, IY
71AF             7 272 ; ----------------------------------------------------------------------------------------------------------------------
71AF             7 273 PathFinder_Red_LeftRight:
71AF 21 07 7E    7 274 ld      hl, RED_POSITIONS+7         ; HL points to red positions address (up-right corner)
71B2 11 07 64    7 275 ld      de, RED_BOARD_LEFT_RIGHT+7  ; DE points to red board left-right addr. (up-right corner)
71B5 CD FD 70    7 276 call    PathFinder_CopyPositions    ; copy from red positions to red board left-right
71B8             7 278 ; entry point for PathFinder_VictoryPath
71B8             7 279 PathFinder_Red_CheckPath
71B8 FD 21 00 01 7 280 ld      iy, $0100                   ; IYH = distance to check edge positions
71BC             7 281 ; IYL = last edge position visited
71BC 21 00 63    7 282 ld      hl, RED_QUEUE_AREA          ; HL points to red queue area address
71BF 22 21 71    7 283 ld      (@Queue_Tail+1), hl         ; initialize red queue tail
71C2 E5          7 284 push    hl                          ; store red queue head
71C3             7 286 ; set up red board (left-right) start positions distances
71C3 21 09 64    7 288 ld      hl, RED_BOARD_LEFT_RIGHT+9  ; HL points to red board left-right address (1st position)
71C6 0E 43       7 289 ld      c, VICTORY+$40              ; set start positions distance + friendly flag
71C8 3E 02       7 290 ld      a, FRIEND                   ; set distance to compare with
71CA BE          7 291 cp      (hl)                        ; check 1st start position distance
71CB D4 16 71    7 292 call    nc, PathFinder_Update       ; if FRIEND >= distance, update distance
71CE 2E 12       7 293 ld      l, (RED_BOARD_LEFT_RIGHT+18)%256
71D0 BE          7 294 cp      (hl)                        ; check 2nd start position distance
71D1 D4 16 71    7 295 call    nc, PathFinder_Update       ; (repeat for each start position)
71D4 2E 1B       7 296 ld      l, (RED_BOARD_LEFT_RIGHT+27)%256
71D6 BE          7 297 cp      (hl)                        ; check 3rd start position distance
71D7 D4 16 71    7 298 call    nc, PathFinder_Update
71DA 2E 24       7 299 ld      l, (RED_BOARD_LEFT_RIGHT+36)%256
71DC BE          7 300 cp      (hl)                        ; check 4th start position distance
71DD D4 16 71    7 301 call    nc, PathFinder_Update
71E0 2E 2D       7 302 ld      l, (RED_BOARD_LEFT_RIGHT+45)%256
71E2 BE          7 303 cp      (hl)                        ; check 5th start position distance
71E3 D4 16 71    7 304 call    nc, PathFinder_Update
71E6 2E 36       7 305 ld      l, (RED_BOARD_LEFT_RIGHT+54)%256
71E8 BE          7 306 cp      (hl)                        ; check 6th start position distance
71E9 D4 16 71    7 307 call    nc, PathFinder_Update
71EC 2E 3F       7 308 ld      l, (RED_BOARD_LEFT_RIGHT+63)%256
71EE C3 61 72    7 309 jp      Path_Finder_First           ; calculate two-distances of red board (left-right)
71F1             7 311 ; ----------------------------------------------------------------------------------------------------------------------
71F1             7 312 ; PathFinder_Red_RightLeft: set up Path_Finder routine to calculate RED two-distance from RIGHT to LEFT edge
71F1             7 313 ;
71F1             7 314 ; Input:    -
71F1             7 315 ;
71F1             7 316 ; Output:   A = -1, if left edge couldn't be reached
71F1             7 317 ;           A =  0, if there is chain of connected cyan tokens between the two edges
71F1             7 318 ;           A = last edge position visited (-1), otherwise
71F1             7 319 ;
71F1             7 320 ; Uses:     @Queue_Tail (queue pointer in 'PathFinder_Update' routine)
71F1             7 321 ;
71F1             7 322 ; Destroys: BC, DE, HL, IY
71F1             7 323 ; ----------------------------------------------------------------------------------------------------------------------
71F1             7 324 PathFinder_Red_RightLeft:
71F1 21 07 7E    7 325 ld      hl, RED_POSITIONS+7         ; HL points to red positions address (up-right corner)
71F4 11 4F 64    7 326 ld      de, RED_BOARD_RIGHT_LEFT-1  ; DE points to red board right-left addr. (up-right corner)
71F7 CD FD 70    7 327 call    PathFinder_CopyPositions    ; copy from red positions to red board right-left
71FA FD 21 00 FF 7 329 ld      iy, $FF00                   ; IYH = distance to check edge positions
71FE             7 330 ; IYL = last edge position visited
71FE 2A 21 71    7 331 ld      hl, (@Queue_Tail+1)         ; retreive red queue tail
7201 E5          7 332 push    hl                          ; initialize red queue head
7202             7 334 ; set up red board (right-left) start positions distances
7202 EB          7 336 ex      de, hl                      ; take advantage of last "CopyPositions" execution
7203 2D          7 337 dec     l                           ; move HL to red board right-left address (last position)
7204 0E 43       7 338 ld      c, VICTORY+$40              ; set start positions distance + friendly flag
7206 3E 02       7 339 ld      a, FRIEND                   ; set distance to compare with
7208 BE          7 340 cp      (hl)                        ; check 1st start position distance
7209 D4 16 71    7 341 call    nc, PathFinder_Update       ; if FRIEND >= distance, update distance
720C 2E 84       7 342 ld      l, (RED_BOARD_RIGHT_LEFT+52)%256
720E BE          7 343 cp      (hl)                        ; check 2nd start position distance
720F D4 16 71    7 344 call    nc, PathFinder_Update       ; (repeat for each start position)
7212 2E 7B       7 345 ld      l, (RED_BOARD_RIGHT_LEFT+43)%256
7214 BE          7 346 cp      (hl)                        ; check 3rd start position distance
7215 D4 16 71    7 347 call    nc, PathFinder_Update
7218 2E 72       7 348 ld      l, (RED_BOARD_RIGHT_LEFT+34)%256
721A BE          7 349 cp      (hl)                        ; check 4th start position distance
721B D4 16 71    7 350 call    nc, PathFinder_Update
721E 2E 69       7 351 ld      l, (RED_BOARD_RIGHT_LEFT+25)%256
7220 BE          7 352 cp      (hl)                        ; check 5th start position distance
7221 D4 16 71    7 353 call    nc, PathFinder_Update
7224 2E 60       7 354 ld      l, (RED_BOARD_RIGHT_LEFT+16)%256
7226 BE          7 355 cp      (hl)                        ; check 6th start position distance
7227 D4 16 71    7 356 call    nc, PathFinder_Update
722A 2E 57       7 357 ld      l, (RED_BOARD_RIGHT_LEFT+7)%256
722C C3 61 72    7 358 jp      Path_Finder_First           ; calculate red two-distance (right-left)
722F             7 360 ; ----------------------------------------------------------------------------------------------------------------------
722F             7 361 ; Path_Finder: calculate two-distance metric for each board position
722F             7 362 ;
722F             7 363 ; The algorithm is implemented running PATHFINDER, starting at the corresponding side of the input board
722F             7 364 ;
722F             7 365 ; Input:    HL  = cyan or red queue area address
722F             7 366 ;           IYH = distance to check edge positions
722F             7 367 ;           IYL = 0
722F             7 368 ;
722F             7 369 ; Output:   A = -1, if corresponding edge couldn't be reached
722F             7 370 ;           A =  0, if there is chain of connected (color) tokens between the two edges
722F             7 371 ;           A = last edge position visited (-1), otherwise
722F             7 372 ;
722F             7 373 ; Uses:     @Queue_Tail (queue pointer in 'PathFinder_Update' routine)
722F             7 374 ;
722F             7 375 ; Destroys: DE, HL, IY
722F             7 376 ; ----------------------------------------------------------------------------------------------------------------------
722F             7 377 Path_Finder:
722F 2C          7 378 inc     l                           ; move queue head down
7230 E5          7 379 push    hl                          ; preserve queue head address
7231 6E          7 380 ld      l, (hl)                     ; retrieve next position to be checked
7232 24          7 381 inc     h                           ; move HL to corresponding board address
7233 4E          7 382 ld      c, (hl)                     ; retrieve distance from this position to start
7234 5D          7 383 ld      e, l                        ; store current position
7235             7 385 ; look for adjacent positions
7235 7D          7 387 ld      a, l                        ; get current position
7236 FD 84       7 388 add     a, iyh                      ; add distance to check edge positions
7238 6F          7 389 ld      l, a                        ; move HL to calculated position address
7239 CB 7E       7 390 bit     7, (hl)                     ; is it an edge?
723B 20 34       7 391 jr      nz, Path_Finder_Adjacent    ; yes, process adjacent positions
723D 3E 02       7 393 ld      a, FRIEND                   ; set distance to compare with
723F             7 394 ; return point from PathFinder_Adjacent
723F             7 395 Path_Finder_Neighbors
723F 6B          7 396 ld      l, e                        ; restore current position to be checked
7240 2C          7 397 inc     l                           ; move HL to right neighbor address
7241 BE          7 398 cp      (hl)                        ; check right neighbor distance
7242 D4 16 71    7 399 call    nc, PathFinder_Update       ; if FRIEND >= distance, update distance
7245 2D          7 400 dec     l                           ; move HL to left neighbor address
7246 2D          7 401 dec     l
7247 BE          7 402 cp      (hl)                        ; check left neighbor distance
7248 D4 16 71    7 403 call    nc, PathFinder_Update       ; (repeat for each neighbor)
724B 11 F8 FF    7 404 ld      de, -WIDTH
724E 19          7 405 add     hl, de
724F BE          7 406 cp      (hl)                        ; check upper-left neighbor distance
7250 D4 16 71    7 407 call    nc, PathFinder_Update
7253 2C          7 408 inc     l
7254 BE          7 409 cp      (hl)                        ; check upper-right neighbor distance
7255 D4 16 71    7 410 call    nc, PathFinder_Update
7258 11 10 00    7 411 ld      de, WIDTH*2
725B 19          7 412 add     hl, de
725C BE          7 413 cp      (hl)                        ; check lower-left neighbor distance
725D D4 16 71    7 414 call    nc, PathFinder_Update
7260 2C          7 415 inc     l
7261             7 416 Path_Finder_First
7261 BE          7 417 cp      (hl)                        ; check lower-right neighbor distance
7262 D4 16 71    7 418 call    nc, PathFinder_Update
7265 E1          7 419 pop     hl                          ; retreive queue head address
7266 3A 21 71    7 420 ld      a, (@Queue_Tail+1)          ; get queue tail address (low-byte)
7269 BD          7 421 cp      l                           ; is queue empty?
726A C2 2F 72    7 422 jp      nz, Path_Finder             ; no, repeat until queue is empty
726D FD 7D       7 424 ld      a, iyl                      ; get last edge position visited
726F 3D          7 425 dec     a                           ; return A = -1, if the edge couldn't be reached
7270 C9          7 426 ret
7271             7 428 ; ----------------------------------------------------------------------------------------------------------------------
7271             7 429 ; Check adjacent hexagons.
7271             7 430 ;
7271             7 431 ; This is an approach to update the two-distance of adjacent positions. As explained in Jack van Rijswijck's thesis:
7271             7 432 ; "two cells are adjacent if they share a common edge on the board."
7271             7 433 ;
7271             7 434 ; Input:    E  = current position
7271             7 435 ;           C  = current distance (with a flag at 6th bit that indicates a friendly position)
7271             7 436 ;           HL = current edge position address (a flag in 7th bit indicates an edge position and the lowest 3 bits the
7271             7 437 ;                edge number)
7271             7 438 ;
7271             7 439 ; Output:   A = 0, if there is a chain of connected tokens of the same color between the two edges.
7271             7 440 ;           A = FRIEND and E = current position, otherwise.
7271             7 441 ;
7271             7 442 ; Destroys: DE, HL
7271             7 443 ; ----------------------------------------------------------------------------------------------------------------------
7271             7 444 Path_Finder_Adjacent
7271 3E 43       7 445 ld      a, VICTORY+$40              ; set victory distance + friendly flag
7273 B9          7 446 cp      c                           ; is current distance victory and friendly?
7274 28 0E       7 447 jr      z, Path_Finder_Abort        ; yes, abort path_finder
7276 FD 6B       7 449 ld      iyl, e                      ; update last edge position visited
7278 54          7 450 ld      d, h                        ; store pointer to current position address in DE
7279 6E          7 451 ld      l, (hl)                     ; get current edge position
727A CB 25       7 452 sla     l                           ; calculate vector table routine index
727C 24          7 453 inc     h                           ; move HL to (cyan or red) vector table routine address
727D 7E          7 454 ld      a, (hl)                     ; get low byte of vector table routine address
727E 2C          7 455 inc     l                           ; move HL to high byte of vector table routine address
727F 66          7 456 ld      h, (hl)                     ; get high byte of vector table routine address
7280 6F          7 457 ld      l, a                        ; HL points to 'PathFinder_[COLOR]_Edge_[n]' routine address
7281 3E 02       7 458 ld      a, FRIEND                   ; set distance to compare with
7283 E9          7 459 jp      (hl)                        ; jump to 'PathFinder_[COLOR]_Edge_[n]' routine
7284             7 460 Path_Finder_Abort
7284 E1          7 461 pop     hl                          ; restore queue head address
7285 AF          7 462 xor     a                           ; return A = 0
7286 C9          7 463 ret
7287             7 465 ; ----------------------------------------------------------------------------------------------------------------------
7287             7 466 ;  Check two-distance of RED adjacents
7287             7 467 ; ----------------------------------------------------------------------------------------------------------------------
7287             7 468 PathFinder_RED_Edge_0
7287 EB          7 469 ex      de, hl                      ; restore pointer to current position address
7288 11 12 00    7 470 ld      de, 9*2                     ; calculate distance to adjacent #2
728B 19          7 471 add     hl, de                      ; move HL to adjacent #2 address
728C BE          7 472 cp      (hl)                        ; check adjacent #2 distance
728D D4 16 71    7 473 call    nc, PathFinder_Update       ; if FRIEND >= adjacent #2 distance, update distance
7290 11 09 00    7 474 ld      de, 9                       ; calculate distance to adjacent #3
7293 19          7 475 add     hl, de                      ; move HL to adjacent #3 address
7294 BE          7 476 cp      (hl)                        ; check adjacent #3 distance
7295 D4 16 71    7 477 call    nc, PathFinder_Update       ; (repeat for each adjacent)
7298 11 09 00    7 478 ld      de, 9
729B 19          7 479 add     hl, de
729C BE          7 480 cp      (hl)                        ; check adjacent #4 distance
729D D4 16 71    7 481 call    nc, PathFinder_Update
72A0 11 09 00    7 482 ld      de, 9
72A3 19          7 483 add     hl, de
72A4 BE          7 484 cp      (hl)                        ; check adjacent #5 distance
72A5 D4 16 71    7 485 call    nc, PathFinder_Update
72A8 11 09 00    7 486 ld      de, 9
72AB 19          7 487 add     hl, de
72AC BE          7 488 cp      (hl)                        ; check adjacent #6 distance
72AD D4 16 71    7 489 call    nc, PathFinder_Update
72B0 FD 5D       7 490 ld      e, iyl                      ; restore current position
72B2 C3 3F 72    7 491 jp      Path_Finder_Neighbors       ; continue processing neighbors
72B5             7 493 PathFinder_RED_Edge_1
72B5 EB          7 494 ex      de, hl                      ; restore pointer to current position address
72B6 11 12 00    7 495 ld      de, 9*2
72B9 19          7 496 add     hl, de
72BA BE          7 497 cp      (hl)                        ; check adjacent #3 distance
72BB D4 16 71    7 498 call    nc, PathFinder_Update
72BE 11 09 00    7 499 ld      de, 9
72C1 19          7 500 add     hl, de
72C2 BE          7 501 cp      (hl)                        ; check adjacent #4 distance
72C3 D4 16 71    7 502 call    nc, PathFinder_Update
72C6 11 09 00    7 503 ld      de, 9
72C9 19          7 504 add     hl, de
72CA BE          7 505 cp      (hl)                        ; check adjacent #5 distance
72CB D4 16 71    7 506 call    nc, PathFinder_Update
72CE 11 09 00    7 507 ld      de, 9
72D1 19          7 508 add     hl, de
72D2 BE          7 509 cp      (hl)                        ; check adjacent #6 distance
72D3 D4 16 71    7 510 call    nc, PathFinder_Update
72D6 FD 5D       7 511 ld      e, iyl                      ; restore current position
72D8 C3 3F 72    7 512 jp      Path_Finder_Neighbors       ; continue processing neighbors
72DB             7 514 PathFinder_RED_Edge_2
72DB EB          7 515 ex      de, hl                      ; restore pointer to current position address
72DC 11 12 00    7 516 ld      de, 9*2
72DF 19          7 517 add     hl, de
72E0 BE          7 518 cp      (hl)                        ; check adjacent #4 distance
72E1 D4 16 71    7 519 call    nc, PathFinder_Update
72E4 11 09 00    7 520 ld      de, 9
72E7 19          7 521 add     hl, de
72E8 BE          7 522 cp      (hl)                        ; check adjacent #5 distance
72E9 D4 16 71    7 523 call    nc, PathFinder_Update
72EC 11 09 00    7 524 ld      de, 9
72EF 19          7 525 add     hl, de
72F0 BE          7 526 cp      (hl)                        ; check adjacent #6 distance
72F1 D4 16 71    7 527 call    nc, PathFinder_Update
72F4 11 CA FF    7 528 ld      de, -9*6
72F7 19          7 529 add     hl, de
72F8 BE          7 530 cp      (hl)                        ; check adjacent #0 distance
72F9 D4 16 71    7 531 call    nc, PathFinder_Update
72FC FD 5D       7 532 ld      e, iyl                      ; restore current position
72FE C3 3F 72    7 533 jp      Path_Finder_Neighbors       ; continue processing neighbors
7301             7 535 PathFinder_RED_Edge_3
7301 EB          7 536 ex      de, hl                      ; restore pointer to current position address
7302 11 E5 FF    7 537 ld      de, -9*3
7305 19          7 538 add     hl, de
7306 BE          7 539 cp      (hl)                        ; check adjacent #0 distance
7307 D4 16 71    7 540 call    nc, PathFinder_Update
730A 11 09 00    7 541 ld      de, 9
730D 19          7 542 add     hl, de
730E BE          7 543 cp      (hl)                        ; check adjacent #1 distance
730F D4 16 71    7 544 call    nc, PathFinder_Update
7312 11 24 00    7 545 ld      de, 9*4
7315 19          7 546 add     hl, de
7316 BE          7 547 cp      (hl)                        ; check adjacent #5 distance
7317 D4 16 71    7 548 call    nc, PathFinder_Update
731A 11 09 00    7 549 ld      de, 9
731D 19          7 550 add     hl, de
731E BE          7 551 cp      (hl)                        ; check adjacent #6 distance
731F D4 16 71    7 552 call    nc, PathFinder_Update
7322 FD 5D       7 553 ld      e, iyl                      ; restore current position
7324 C3 3F 72    7 554 jp      Path_Finder_Neighbors       ; continue processing neighbors
7327             7 556 PathFinder_RED_Edge_4
7327 EB          7 557 ex      de, hl                      ; restore pointer to current position address
7328 11 12 00    7 558 ld      de, 9*2
732B 19          7 559 add     hl, de
732C BE          7 560 cp      (hl)                        ; check adjacent #6 distance
732D D4 16 71    7 561 call    nc, PathFinder_Update
7330 11 CA FF    7 562 ld      de, -9*6
7333 19          7 563 add     hl, de
7334 BE          7 564 cp      (hl)                        ; check adjacent #0 distance
7335 D4 16 71    7 565 call    nc, PathFinder_Update
7338 11 09 00    7 566 ld      de, 9
733B 19          7 567 add     hl, de
733C BE          7 568 cp      (hl)                        ; check adjacent #1 distance
733D D4 16 71    7 569 call    nc, PathFinder_Update
7340 11 09 00    7 570 ld      de, 9
7343 19          7 571 add     hl, de
7344 BE          7 572 cp      (hl)                        ; check adjacent #2 distance
7345 D4 16 71    7 573 call    nc, PathFinder_Update
7348 FD 5D       7 574 ld      e, iyl                      ; restore current position
734A C3 3F 72    7 575 jp      Path_Finder_Neighbors       ; continue processing neighbors
734D             7 577 PathFinder_RED_Edge_5
734D EB          7 578 ex      de, hl                      ; restore pointer to current position address
734E 11 D3 FF    7 579 ld      de, -9*5
7351 19          7 580 add     hl, de
7352 BE          7 581 cp      (hl)                        ; check adjacent #0 distance
7353 D4 16 71    7 582 call    nc, PathFinder_Update
7356 11 09 00    7 583 ld      de, 9
7359 19          7 584 add     hl, de
735A BE          7 585 cp      (hl)                        ; check adjacent #1 distance
735B D4 16 71    7 586 call    nc, PathFinder_Update
735E 11 09 00    7 587 ld      de, 9
7361 19          7 588 add     hl, de
7362 BE          7 589 cp      (hl)                        ; check adjacent #2 distance
7363 D4 16 71    7 590 call    nc, PathFinder_Update
7366 11 09 00    7 591 ld      de, 9
7369 19          7 592 add     hl, de
736A BE          7 593 cp      (hl)                        ; check adjacent #3 distance
736B D4 16 71    7 594 call    nc, PathFinder_Update
736E FD 5D       7 595 ld      e, iyl                      ; restore current position
7370 C3 3F 72    7 596 jp      Path_Finder_Neighbors       ; continue processing neighbors
7373             7 598 PathFinder_RED_Edge_6
7373 EB          7 599 ex      de, hl                      ; restore pointer to current position address
7374 11 CA FF    7 600 ld      de, -9*6
7377 19          7 601 add     hl, de
7378 BE          7 602 cp      (hl)                        ; check adjacent #0 distance
7379 D4 16 71    7 603 call    nc, PathFinder_Update
737C 11 09 00    7 604 ld      de, 9
737F 19          7 605 add     hl, de
7380 BE          7 606 cp      (hl)                        ; check adjacent #1 distance
7381 D4 16 71    7 607 call    nc, PathFinder_Update
7384 11 09 00    7 608 ld      de, 9
7387 19          7 609 add     hl, de
7388 BE          7 610 cp      (hl)                        ; check adjacent #2 distance
7389 D4 16 71    7 611 call    nc, PathFinder_Update
738C 11 09 00    7 612 ld      de, 9
738F 19          7 613 add     hl, de
7390 BE          7 614 cp      (hl)                        ; check adjacent #3 distance
7391 D4 16 71    7 615 call    nc, PathFinder_Update
7394 11 09 00    7 616 ld      de, 9
7397 19          7 617 add     hl, de
7398 BE          7 618 cp      (hl)                        ; check adjacent #4 distance
7399 D4 16 71    7 619 call    nc, PathFinder_Update
739C FD 5D       7 620 ld      e, iyl                      ; restore current position
739E C3 3F 72    7 621 jp      Path_Finder_Neighbors       ; continue processing neighbors
73A1             7 623 ; ----------------------------------------------------------------------------------------------------------------------
73A1             7 624 ;  Check two-distance of CYAN adjacents
73A1             7 625 ; ----------------------------------------------------------------------------------------------------------------------
73A1             7 626 PathFinder_CYAN_Edge_0
73A1 EB          7 627 ex      de, hl                      ; restore pointer to current position address
73A2 2C          7 628 inc     l
73A3 2C          7 629 inc     l
73A4 BE          7 630 cp      (hl)                        ; check adjacent #2 distance
73A5 D4 16 71    7 631 call    nc, PathFinder_Update
73A8 2C          7 632 inc     l
73A9 BE          7 633 cp      (hl)                        ; check adjacent #3 distance
73AA D4 16 71    7 634 call    nc, PathFinder_Update
73AD 2C          7 635 inc     l
73AE BE          7 636 cp      (hl)                        ; check adjacent #4 distance
73AF D4 16 71    7 637 call    nc, PathFinder_Update
73B2 2C          7 638 inc     l
73B3 BE          7 639 cp      (hl)                        ; check adjacent of edge number 5
73B4 D4 16 71    7 640 call    nc, PathFinder_Update
73B7 2C          7 641 inc     l
73B8 BE          7 642 cp      (hl)                        ; check adjacent of edge number 6
73B9 D4 16 71    7 643 call    nc, PathFinder_Update
73BC FD 5D       7 644 ld      e, iyl                      ; restore current position
73BE C3 3F 72    7 645 jp      Path_Finder_Neighbors       ; continue processing neighbors
73C1             7 647 PathFinder_CYAN_Edge_1
73C1 EB          7 648 ex      de, hl                      ; restore pointer to current position address
73C2 2C          7 649 inc     l
73C3 2C          7 650 inc     l
73C4 BE          7 651 cp      (hl)                        ; check adjacent #3 distance
73C5 D4 16 71    7 652 call    nc, PathFinder_Update
73C8 2C          7 653 inc     l
73C9 BE          7 654 cp      (hl)                        ; check adjacent #4 distance
73CA D4 16 71    7 655 call    nc, PathFinder_Update
73CD 2C          7 656 inc     l
73CE BE          7 657 cp      (hl)                        ; check adjacent #5 distance
73CF D4 16 71    7 658 call    nc, PathFinder_Update
73D2 2C          7 659 inc     l
73D3 BE          7 660 cp      (hl)                        ; check adjacent #6 distance
73D4 D4 16 71    7 661 call    nc, PathFinder_Update
73D7 FD 5D       7 662 ld      e, iyl                      ; restore current position
73D9 C3 3F 72    7 663 jp      Path_Finder_Neighbors       ; continue processing neighbors
73DC             7 665 PathFinder_CYAN_Edge_2
73DC EB          7 666 ex      de, hl                      ; restore pointer to current position address
73DD 2D          7 667 dec     l
73DE 2D          7 668 dec     l
73DF BE          7 669 cp      (hl)                        ; check adjacent #0 distance
73E0 D4 16 71    7 670 call    nc, PathFinder_Update
73E3 2C          7 671 inc     l
73E4 2C          7 672 inc     l
73E5 2C          7 673 inc     l
73E6 2C          7 674 inc     l
73E7 BE          7 675 cp      (hl)                        ; check adjacent #4 distance
73E8 D4 16 71    7 676 call    nc, PathFinder_Update
73EB 2C          7 677 inc     l
73EC BE          7 678 cp      (hl)                        ; check adjacent #5 distance
73ED D4 16 71    7 679 call    nc, PathFinder_Update
73F0 2C          7 680 inc     l
73F1 BE          7 681 cp      (hl)                        ; check adjacent #6 distance
73F2 D4 16 71    7 682 call    nc, PathFinder_Update
73F5 FD 5D       7 683 ld      e, iyl                      ; restore current position
73F7 C3 3F 72    7 684 jp      Path_Finder_Neighbors       ; continue processing neighbors
73FA             7 686 PathFinder_CYAN_Edge_3
73FA EB          7 687 ex      de, hl                      ; restore pointer to current position address
73FB 2D          7 688 dec     l
73FC 2D          7 689 dec     l
73FD 2D          7 690 dec     l
73FE BE          7 691 cp      (hl)                        ; check adjacent #0 distance
73FF D4 16 71    7 692 call    nc, PathFinder_Update
7402 2C          7 693 inc     l
7403 BE          7 694 cp      (hl)                        ; check adjacent #1 distance
7404 D4 16 71    7 695 call    nc, PathFinder_Update
7407 2C          7 696 inc     l
7408 2C          7 697 inc     l
7409 2C          7 698 inc     l
740A 2C          7 699 inc     l
740B BE          7 700 cp      (hl)                        ; check adjacent #5 distance
740C D4 16 71    7 701 call    nc, PathFinder_Update
740F 2C          7 702 inc     l
7410 BE          7 703 cp      (hl)                        ; check adjacent #6 distance
7411 D4 16 71    7 704 call    nc, PathFinder_Update
7414 FD 5D       7 705 ld      e, iyl                      ; restore current position
7416 C3 3F 72    7 706 jp      Path_Finder_Neighbors       ; continue processing neighbors
7419             7 708 PathFinder_CYAN_Edge_4
7419 EB          7 709 ex      de, hl                      ; restore pointer to current position address
741A 2C          7 710 inc     l
741B 2C          7 711 inc     l
741C BE          7 712 cp      (hl)                        ; check adjacent #6 distance
741D D4 16 71    7 713 call    nc, PathFinder_Update
7420 2D          7 714 dec     l
7421 2D          7 715 dec     l
7422 2D          7 716 dec     l
7423 2D          7 717 dec     l
7424 BE          7 718 cp      (hl)                        ; check adjacent #2 distance
7425 D4 16 71    7 719 call    nc, PathFinder_Update
7428 2D          7 720 dec     l
7429 BE          7 721 cp      (hl)                        ; check adjacent #1 distance
742A D4 16 71    7 722 call    nc, PathFinder_Update
742D 2D          7 723 dec     l
742E BE          7 724 cp      (hl)                        ; check adjacent #0 distance
742F D4 16 71    7 725 call    nc, PathFinder_Update
7432 FD 5D       7 726 ld      e, iyl                      ; restore current position
7434 C3 3F 72    7 727 jp      Path_Finder_Neighbors       ; continue processing neighbors
7437             7 729 PathFinder_CYAN_Edge_5
7437 EB          7 730 ex      de, hl                      ; restore pointer to current position address
7438 2D          7 731 dec     l
7439 2D          7 732 dec     l
743A BE          7 733 cp      (hl)                        ; check adjacent #3 distance
743B D4 16 71    7 734 call    nc, PathFinder_Update
743E 2D          7 735 dec     l
743F BE          7 736 cp      (hl)                        ; check adjacent #2 distance
7440 D4 16 71    7 737 call    nc, PathFinder_Update
7443 2D          7 738 dec     l
7444 BE          7 739 cp      (hl)                        ; check adjacent #1 distance
7445 D4 16 71    7 740 call    nc, PathFinder_Update
7448 2D          7 741 dec     l
7449 BE          7 742 cp      (hl)                        ; check adjacent #0 distance
744A D4 16 71    7 743 call    nc, PathFinder_Update
744D FD 5D       7 744 ld      e, iyl                      ; restore current position
744F C3 3F 72    7 745 jp      Path_Finder_Neighbors       ; continue processing neighbors
7452             7 747 PathFinder_CYAN_Edge_6
7452 EB          7 748 ex      de, hl                      ; restore pointer to current position address
7453 2D          7 749 dec     l
7454 2D          7 750 dec     l
7455 BE          7 751 cp      (hl)                        ; check adjacent #4 distance
7456 D4 16 71    7 752 call    nc, PathFinder_Update
7459 2D          7 753 dec     l
745A BE          7 754 cp      (hl)                        ; check adjacent #3 distance
745B D4 16 71    7 755 call    nc, PathFinder_Update
745E 2D          7 756 dec     l
745F BE          7 757 cp      (hl)                        ; check adjacent #2 distance
7460 D4 16 71    7 758 call    nc, PathFinder_Update
7463 2D          7 759 dec     l
7464 BE          7 760 cp      (hl)                        ; check adjacent #1 distance
7465 D4 16 71    7 761 call    nc, PathFinder_Update
7468 2D          7 762 dec     l
7469 BE          7 763 cp      (hl)                        ; check adjacent #0 distance
746A D4 16 71    7 764 call    nc, PathFinder_Update
746D FD 5D       7 765 ld      e, iyl                      ; restore current position
746F C3 3F 72    7 766 jp      Path_Finder_Neighbors       ; continue processing neighbors
7472             7 768 ; ----------------------------------------------------------------------------------------------------------------------
7472             7 769 ; PathFinder_Score: calculate board score depending on speccy color
7472             7 770 ;
7472             7 771 ; Input:    -
7472             7 772 ;
7472             7 773 ; Output:   A = -1, if speccy can't reach his opposite edge
7472             7 774 ;           A =  0, if speccy has a chain of connected tokens between the two edges or if player cant reach his edge
7472             7 775 ;           A = speccy heuristic evaluation, otherwise
7472             7 776 ;
7472             7 777 ; Uses:     AI_PLAYER (speccy side)
7472             7 778 ;
7472             7 779 ; Destroys: A', BC, DE, HL, IY
7472             7 780 ; ----------------------------------------------------------------------------------------------------------------------
7472             7 781 PathFinder_Score:
7472 3A 99 61    7 782 ld      a, (AI_PLAYER)              ; get speecy side
7475 FE 02       7 783 cp      FRIEND                      ; is it FRIEND?
7477 28 31       7 784 jr      z, PathFinder_CyanScore     ; yes, calculate CYAN score
7479             7 786 ; ----------------------------------------------------------------------------------------------------------------------
7479             7 787 ; PathFinder_RedScore: calculate red score
7479             7 788 ;
7479             7 789 ; Input:    -
7479             7 790 ;
7479             7 791 ; Output:   A = -1, if red can't reach his opposite edge
7479             7 792 ;           A =  0, if there a chain of connected red tokens between the two edges or if cyan can't reach his edge
7479             7 793 ;           A = red heuristic evaluation, otherwise
7479             7 794 ;
7479             7 795 ; Uses:     POTENTIALS (board potential and attack mobility)
7479             7 796 ;
7479             7 797 ; Destroys: A', BC, DE, HL, IY
7479             7 798 ; ----------------------------------------------------------------------------------------------------------------------
7479             7 799 PathFinder_RedScore
7479 CD AF 71    7 800 call    PathFinder_Red_LeftRight    ; calculate RED two-distance from LEFT to RIGHT edge
747C C8          7 801 ret     z                           ; if red has a chain of connected tokens, return A = 0
747D 08          7 802 ex      af, af'                     ; save first result
747E CD F1 71    7 803 call    PathFinder_Red_RightLeft    ; calculate RED two-distance from RIGHT to LEFT edge
7481 47          7 804 ld      b, a                        ; save second result
7482 08          7 805 ex      af, af'                     ; restore first result
7483 90          7 806 sub     b                           ; subtract both results
7484 78          7 807 ld      a, b                        ; restore second result
7485 C8          7 808 ret     z                           ; if red can't reach his opposite edge, return A = -1
7486 CD 3B 71    7 810 call    PathFinder_Cyan_UpDown      ; calculate CYAN two-distance from UP to DOWN edge
7489 08          7 811 ex      af, af'                     ; save result
748A CD 77 71    7 812 call    PathFinder_Cyan_DownUp      ; calculate CYAN two-distance from DOWN to UP edge
748D 47          7 813 ld      b, a                        ; save second result
748E 08          7 814 ex      af, af'                     ; restore first result
748F 90          7 815 sub     b                           ; subtract both results
7490 C8          7 816 ret     z                           ; if cyan can't reach his opposite edge, return A = 0
7491 21 09 64    7 818 ld      hl, RED_BOARD_LEFT_RIGHT+9  ; HL points to red board left-right address (1st position)
7494 11 51 64    7 819 ld      de, RED_BOARD_RIGHT_LEFT+1  ; DE points to red board right-left address (1st position)
7497 CD E8 74    7 820 call    PathFinder_Potentials       ; calculate RED potentials
749A ED 43 97 61 7 821 ld      (POTENTIALS), bc            ; store RED potentials
749E 21 09 61    7 823 ld      hl, CYAN_BOARD_UP_DOWN+9    ; HL points to cyan board up-down address (1st position)
74A1 11 51 61    7 824 ld      de, CYAN_BOARD_DOWN_UP+1    ; DE points to cyan board down-up address (1st position)
74A4 CD E8 74    7 825 call    PathFinder_Potentials       ; calculate cyan potentials
74A7 C3 D8 74    7 826 jp      PathFinder_Evaluation       ; calculate heuristic evaluation
74AA             7 828 ; ----------------------------------------------------------------------------------------------------------------------
74AA             7 829 ; PathFinder_CyanScore: calculate cyan score
74AA             7 830 ;
74AA             7 831 ; Input:    -
74AA             7 832 ;
74AA             7 833 ; Output:   A = -1, if cyan can't reach his opposite edge
74AA             7 834 ;           A =  0, if there a chain of connected cyan tokens between the two edges or if red can't reach his edge
74AA             7 835 ;           A = cyan heuristic evaluation, otherwise
74AA             7 836 ;
74AA             7 837 ; Uses:     POTENTIALS (board potential and attack mobility)
74AA             7 838 ;
74AA             7 839 ; Destroys: A', BC, DE, HL
74AA             7 840 ; ----------------------------------------------------------------------------------------------------------------------
74AA             7 841 PathFinder_CyanScore
74AA CD 3B 71    7 842 call    PathFinder_Cyan_UpDown      ; calculate CYAN two-distance from UP to DOWN edge
74AD C8          7 843 ret     z                           ; if cyan has a chain of connected tokens, return A = 0
74AE 08          7 844 ex      af, af'                     ; save result
74AF CD 77 71    7 845 call    PathFinder_Cyan_DownUp      ; calculate CYAN two-distance from DOWN to UP edge
74B2 47          7 846 ld      b, a                        ; save second result
74B3 08          7 847 ex      af, af'                     ; restore first result
74B4 90          7 848 sub     b                           ; subtract both results
74B5 78          7 849 ld      a, b                        ; restore second result
74B6 C8          7 850 ret     z                           ; if cyan can't reach his opposite edge, return A = -1
74B7 CD AF 71    7 852 call    PathFinder_Red_LeftRight    ; calculate RED two-distance from LEFT to RIGHT edge
74BA 08          7 853 ex      af, af'                     ; save result
74BB CD F1 71    7 854 call    PathFinder_Red_RightLeft    ; calculate RED two-distance from RIGHT to LEFT edge
74BE 47          7 855 ld      b, a                        ; save second result
74BF 08          7 856 ex      af, af'                     ; restore first result
74C0 90          7 857 sub     b                           ; subtract both results
74C1 C8          7 858 ret     z                           ; if red can't reach his opposite edge, return A = 0
74C2 21 09 61    7 860 ld      hl, CYAN_BOARD_UP_DOWN+9    ; HL points to cyan board up-down address (1st position)
74C5 11 51 61    7 861 ld      de, CYAN_BOARD_DOWN_UP+1    ; DE points to cyan board down-up address (1st position)
74C8 CD E8 74    7 862 call    PathFinder_Potentials       ; calculate cyan potentials
74CB ED 43 97 61 7 863 ld      (POTENTIALS), bc            ; save cyan potentials
74CF 21 09 64    7 865 ld      hl, RED_BOARD_LEFT_RIGHT+9  ; HL points to red board left-right address (1st position)
74D2 11 51 64    7 866 ld      de, RED_BOARD_RIGHT_LEFT+1  ; DE points to red board right-left address (1st position)
74D5 CD E8 74    7 867 call    PathFinder_Potentials       ; calculate red potentials
74D8             7 868 ; ----------------------------------------------------------------------------------------------------------------------
74D8             7 869 ; PathFinder_Evaluation: calculate heuristic evaluation.
74D8             7 870 ; The original evaluation function (from cyan perspective) is described in Jack van Rijswijck's thesis as:
74D8             7 871 ;
74D8             7 872 ;                                       e = M (pC - pR) - (aC - aR)
74D8             7 873 ; where:
74D8             7 874 ;   pC = cyan board potential
74D8             7 875 ;   pR = red board potential
74D8             7 876 ;   aC = cyan attack mobility
74D8             7 877 ;   aR = red attack mobility
74D8             7 878 ;    M = a large number
74D8             7 879 ;
74D8             7 880 ; This adaptation uses an "invert" result to better fit BRAINIAC process.
74D8             7 881 ;
74D8             7 882 ; Input:    B = opponent attack mobility
74D8             7 883 ;           C = opponent board potential
74D8             7 884 ;
74D8             7 885 ; Output:   A = heuristic evaluation
74D8             7 886 ;
74D8             7 887 ; Destroys: E, HL
74D8             7 888 ; ----------------------------------------------------------------------------------------------------------------------
74D8             7 889 PathFinder_Evaluation:
74D8 21 98 61    7 890 ld      hl, POTENTIALS+1            ; HL points to color attack mobility address
74DB 78          7 891 ld      a, b                        ; get opponent's attack mobility
74DC 96          7 892 sub     (hl)                        ; subtract attack mobilities -> (aC - aR)
74DD 5F          7 893 ld      e, a                        ; save the result in E
74DE 2D          7 894 dec     l                           ; move HL to player's board potential address
74DF 79          7 895 ld      a, c                        ; get opponent's board potential
74E0 96          7 896 sub     (hl)                        ; subtract potentials -> (pC - pR)
74E1 87          7 897 add     a, a                        ; multiply by 8 -> M (pC - pR)
74E2 87          7 898 add     a, a
74E3 87          7 899 add     a, a
74E4 93          7 900 sub     e                           ; subtract result of attack mobilities subtraction
74E5             7 901 ; -> M (pC - pR) - (aC - aR)
74E5 EE 80       7 902 xor     $80                         ; invert sign for easier further comparative
74E7 C9          7 903 ret                                 ; return A = -1 * (M (pC - pR) - (aC - aR))
74E8             7 905 ; ----------------------------------------------------------------------------------------------------------------------
74E8             7 906 ; PathFinder_Potentials: calculate board potential and attack mobility
74E8             7 907 ;
74E8             7 908 ; * A cell's Cyan potential is defined as the sum of its Cyan two-distance to both cyan edges; its Red potential is the
74E8             7 909 ;   sum of its Red two-distance to both red edges. The board potential is defined as the lowest potential that occurs on
74E8             7 910 ;   the board.
74E8             7 911 ; * The attack mobility is defined for each player as the number of cells that realize that player's board potential.
74E8             7 912 ;
74E8             7 913 ; Input:    HL = cyan board or red board address
74E8             7 914 ;           DE = cyan board or red board address
74E8             7 915 ;
74E8             7 916 ; Output:   B = attack mobility
74E8             7 917 ;           C = board potential
74E8             7 918 ;
74E8             7 919 ; Destroys: A, DE, HL, IYL
74E8             7 920 ; ----------------------------------------------------------------------------------------------------------------------
74E8             7 921 PathFinder_Potentials:
74E8 01 FF 00    7 922 ld      bc, $00FF                   ; initialize attack mobility and board potential
74EB FD 2E 3D    7 923 ld      iyl, 61                     ; number of cells to be checked (loop counter)
74EE             7 924 Potentials_Loop
74EE 7E          7 925 ld      a, (hl)                     ; get cell's two-distance pointed by HL
74EF FE 40       7 926 cp      $40                         ; is cell occupied or border?
74F1 30 16       7 927 jr      nc, Potentials_Next         ; yes, skip to next cell
74F3 FE 04       7 928 cp      $04                         ; cell distance was not updated?
74F5 38 1A       7 929 jr      c, Potentials_Infinite      ; yes, set cell potential as "infinite" and skip
74F7 1A          7 930 ld      a, (de)                     ; get cell's two-distance pointed by DE
74F8 FE 04       7 931 cp      $04                         ; cell distance was not updated?
74FA 38 15       7 932 jr      c, Potentials_Infinite      ; yes, set cell potential as "infinite" and skip
74FC 86          7 933 add     a, (hl)                     ; sum both two-distances (calculate cell potential)
74FD 77          7 934 ld      (hl), a                     ; save potential in the cell pointed by HL
74FE B9          7 935 cp      c                           ; is the new potential >= board potential?
74FF D2 05 75    7 936 jp      nc, Potentials_Mobility     ; yes, check attack mobility
7502 4F          7 937 ld      c, a                        ; no, board potential = new potential
7503 06 01       7 938 ld      b, 1                        ; restart attack mobility
7505             7 939 Potentials_Mobility
7505 C2 09 75    7 940 jp      nz, Potentials_Next         ; if (potential <> last potential) skip to next cell
7508 04          7 941 inc     b                           ; else, increment attack mobility
7509             7 942 Potentials_Next
7509 1C          7 943 inc     e                           ; move to next cell of each board
750A 2C          7 944 inc     l
750B FD 2D       7 945 dec     iyl                         ; decrement loop counter
750D C2 EE 74    7 946 jp      nz, Potentials_Loop         ; repeat until end of boards
7510 C9          7 947 ret
7511             7 948 Potentials_Infinite
7511 CB FE       7 949 set     7, (hl)                     ; set cell potential as "infinite"
7513 1C          7 950 inc     e                           ; move to next cell of each board
7514 2C          7 951 inc     l
7515 FD 2D       7 952 dec     iyl                         ; decrement loop counter
7517 C2 EE 74    7 953 jp      nz, Potentials_Loop         ; repeat until end of boards
751A C9          7 954 ret
751B             7 956 ; ----------------------------------------------------------------------------------------------------------------------
751B             7 957 ; PathFinder_Candidates: search candidates based on score result and boards potentials
751B             7 958 ;
751B             7 959 ; Input:    A  = -1, 0 or heuristic result
751B             7 960 ;           IX = candidates area address
751B             7 961 ;
751B             7 962 ; Output:   IX = first candidate address
751B             7 963 ;
751B             7 964 ; Uses:     AI_PLAYER (speccy side)
751B             7 965 ;
751B             7 966 ; Destroys: A, A', BC, DE, HL
751B             7 967 ; ----------------------------------------------------------------------------------------------------------------------
751B             7 968 PathFinder_Candidates:
751B DD 36 00 00 7 969 ld      (ix+0), 0                   ; set candidates endmarker
751F B7          7 971 or      a                           ; A = 0?
7520 28 3D       7 972 jr      z, Candidates_Winner        ; yes, fill candidates for winner color
7522 3C          7 973 inc     a                           ; A = -1?
7523 28 45       7 974 jr      z, Candidates_Defeat        ; yes, fill candidates for defeated color
7525             7 976 ; if score is not -1 nor 0, fill candidates from total potentials
7525 21 09 61    7 978 ld      hl, CYAN_BOARD_UP_DOWN+9    ; HL points to cyan board up-down address (1st position)
7528 11 09 64    7 979 ld      de, RED_BOARD_LEFT_RIGHT+9  ; DE points to red board left-right address (1st position)
752B CD E8 74    7 980 call    PathFinder_Potentials       ; process candidates from total potentials
752E 79          7 982 ld      a, c                        ; set board potential in A
752F 08          7 983 ex      af, af'                     ; save board potential
7530 50          7 984 ld      d, b                        ; store attack mobility
7531 DD 5D       7 985 ld      e, ixl                      ; store candidates position
7533             7 987 ; insert the second best board potentials in candidates area
7533             7 988 Candidates_2ndBest
7533 2E 09       7 989 ld      l, 9                        ; HL points to board potentials address (1st position)
7535 0C          7 990 inc     c                           ; increment board potential
7536 79          7 991 ld      a, c                        ; A = second best potential
7537 FE 20       7 992 cp      $20                         ; is potential >= $20? (2nd best max potential)
7539 30 13       7 993 jr      nc, Candidates_2ndBest_Exit ; yes, stop searching 2nd best potential
753B 06 3D       7 994 ld      b, 61                       ; number of cells to be checked (loop counter)
753D             7 995 Candidates_2ndBest_Loop
753D BE          7 996 cp      (hl)                        ; is current board potential = 2nd best board potential?
753E C2 46 75    7 997 jp      nz, Candidates_2ndBest_Next ; no, skip to next potential
7541 DD 2C       7 998 inc     ixl                         ; yes, insert candidate
7543 DD 75 00    7 999 ld      (ix+0), l
7546             7 1000 Candidates_2ndBest_Next
7546 2C          7 1001 inc     l                           ; move HL to next board potential address
7547 10 F4       7 1002 djnz    Candidates_2ndBest_Loop     ; repeat for each cell
7549 DD 7D       7 1003 ld      a, ixl                      ; A = current candidates position
754B BB          7 1004 cp      e                           ; new candidates inserted?
754C 28 E5       7 1005 jr      z, Candidates_2ndBest       ; no, repeat until new candidates inserted
754E             7 1006 Candidates_2ndBest_Exit
754E 42          7 1007 ld      b, d                        ; restore attack mobility
754F 08          7 1008 ex      af, af'                     ; restore board potential
7550             7 1010 ; insert the best board potentials in candidates area
7550             7 1011 Candidates_Best
7550 2E 08       7 1012 ld      l, 8                        ; HL points to board potential address (1st position -1)
7552             7 1013 Candidates_Best_Loop
7552 2C          7 1014 inc     l                           ; move HL to next board potential address
7553 BE          7 1015 cp      (hl)                        ; is current board potential equal to best board potential?
7554 C2 52 75    7 1016 jp      nz, Candidates_Best_Loop    ; no, next potential
7557 DD 2C       7 1017 inc     ixl                         ; yes, insert candidate
7559 DD 75 00    7 1018 ld      (ix+0), l
755C 10 F4       7 1019 djnz    Candidates_Best_Loop        ; repeat for each cell
755E C9          7 1020 ret
755F             7 1022 ; ----------------------------------------------------------------------------------------------------------------------
755F             7 1023 ; Fill candidates for winner color
755F             7 1024 ; ----------------------------------------------------------------------------------------------------------------------
755F             7 1025 Candidates_Winner
755F 3A 99 61    7 1026 ld      a, (AI_PLAYER)              ; check speccy side
7562 FE 02       7 1027 cp      FRIEND                      ; is it friend?
7564 CA 77 75    7 1028 jp      z, Candidates_Cyan_Potential; yes, fill candidates from cyan potentials
7567 C3 8A 75    7 1029 jp      Candidates_Red_Potential    ; no, fill candidates from red potentials
756A             7 1031 ; ----------------------------------------------------------------------------------------------------------------------
756A             7 1032 ; Fill candidates for defeated color
756A             7 1033 ; ----------------------------------------------------------------------------------------------------------------------
756A             7 1034 Candidates_Defeat
756A 3A 99 61    7 1035 ld      a, (AI_PLAYER)              ; check speccy side
756D FE 02       7 1036 cp      FRIEND                      ; is it friend?
756F 28 13       7 1037 jr      z, Candidates_Red           ; yes, fill candidates from red potentials
7571             7 1039 ; if RED is defeated, candidates are chosen from cyan board potentials
7571 CD 3B 71    7 1041 call    PathFinder_Cyan_UpDown      ; calculate cyan two-distance from UP to DOWN edge
7574 CD 77 71    7 1042 call    PathFinder_Cyan_DownUp      ; calculate cyan two-distance from DOWN to UP edge
7577             7 1043 Candidates_Cyan_Potential
7577 21 09 61    7 1044 ld      hl, CYAN_BOARD_UP_DOWN+9    ; HL points to cyan board up-down address (1st position)
757A 11 51 61    7 1045 ld      de, CYAN_BOARD_DOWN_UP+1    ; DE points to cyan board down-up address (1st position)
757D CD E8 74    7 1046 call    PathFinder_Potentials       ; calculate cyan potentials
7580 79          7 1048 ld      a, c                        ; set board potential in A
7581 C3 50 75    7 1049 jp      Candidates_Best             ; fill only the best candidates
7584             7 1051 ; if CYAN is defeated, candidates are chosen from red board potentials
7584             7 1052 Candidates_Red
7584 CD AF 71    7 1053 call    PathFinder_Red_LeftRight    ; calculate red two-distance from LEFT to RIGHT edge
7587 CD F1 71    7 1054 call    PathFinder_Red_RightLeft    ; calculate red two-distance from RIGHT to LEFT edge
758A             7 1055 Candidates_Red_Potential
758A 21 09 64    7 1056 ld      hl, RED_BOARD_LEFT_RIGHT+9  ; HL points to red board left-right address (1st pos.)
758D 11 51 64    7 1057 ld      de, RED_BOARD_RIGHT_LEFT+1  ; DE points to red board right-left address (1st position)
7590 CD E8 74    7 1058 call    PathFinder_Potentials       ; calculate red potentials
7593 79          7 1060 ld      a, c                        ; set board potential in A
7594 C3 50 75    7 1061 jp      Candidates_Best             ; fill only the best candidates
7597             7 1063 ; ----------------------------------------------------------------------------------------------------------------------
7597             7 1064 ; PathFinder_VictoryPath: calculate current player victory path
7597             7 1065 ;
7597             7 1066 ; Input:    -
7597             7 1067 ;
7597             7 1068 ; Output:   A = -1, if there isn't a victory path
7597             7 1069 ;           A = start position (-1) of the victory path, otherwise
7597             7 1070 ;
7597             7 1071 ; Uses:     TOKEN_COLOR (current token color)
7597             7 1072 ;
7597             7 1073 ; Destroys: BC, DE, HL, IY
7597             7 1074 ; ----------------------------------------------------------------------------------------------------------------------
7597             7 1075 PathFinder_VictoryPath:
7597 3A 9E 61    7 1076 ld      a, (TOKEN_COLOR)            ; get current token color
759A FE 05       7 1077 cp      CYAN_COLOR                  ; if it is cyan, check victory path for cyan player
759C 28 0C       7 1078 jr      z, PathFinder_VictoryPath_Cyan
759E CD AF 71    7 1080 call    PathFinder_Red_LeftRight    ; execute Path_Finder RED two-distance from LEFT to RIGHT
75A1 21 45 64    7 1081 ld      hl, RED_BOARD_LEFT_RIGHT+69 ; HL points to red board left-right address (last position)
75A4 CD B6 75    7 1082 call    PathFinder_PrepareBoard     ; prepare board to calculate victory path
75A7 C3 B8 71    7 1083 jp      PathFinder_Red_CheckPath    ; calculate RED victory path
75AA             7 1085 PathFinder_VictoryPath_Cyan
75AA CD 3B 71    7 1086 call    PathFinder_Cyan_UpDown      ; execute Path_Finder CYAN two-distance from UP to DOWN
75AD 21 45 61    7 1087 ld      hl, CYAN_BOARD_UP_DOWN+69   ; HL points to cyan board up-down address (last position)
75B0 CD B6 75    7 1088 call    PathFinder_PrepareBoard     ; prepare board to calculate victory path
75B3 C3 44 71    7 1089 jp      PathFinder_Cyan_CheckPath   ; calculate CYAN victory path
75B6             7 1091 ; ----------------------------------------------------------------------------------------------------------------------
75B6             7 1092 ; PathFinder_PrepareBoard: update '[color]_BOARD_XX_YY', changing VICTORY+$40 to 1, everything else to ENEMY.
75B6             7 1093 ; Immediately after 'Path_Finder_[color]' returned VICTORY, you can execute this routine, then execute 'Path_Finder_
75B6             7 1094 ; [color]' again to find a victory path.
75B6             7 1095 ;
75B6             7 1096 ; Coded by Einar Saukas
75B6             7 1097 ;
75B6             7 1098 ; Input:    HL = pointer to last position of [color]_BOARD
75B6             7 1099 ;
75B6             7 1100 ; Output:   -
75B6             7 1101 ;
75B6             7 1102 ; Destroys: A, BC, HL
75B6             7 1103 ; ----------------------------------------------------------------------------------------------------------------------
75B6             7 1104 PathFinder_PrepareBoard:
75B6 3E 43       7 1105 ld      a, VICTORY+$40              ; set victory distance + friendly flag
75B8 0E 07       7 1106 ld      c, 7                        ; 7 rows
75BA             7 1107 PrepareBoard_Row
75BA 06 07       7 1108 ld      b, 7                        ; 7 columns
75BC             7 1109 PrepareBoard_Column
75BC BE          7 1110 cp      (hl)                        ; is it win condition?
75BD 36 01       7 1111 ld      (hl), 1                     ; save 1 by default
75BF 28 02       7 1112 jr      z, PrepareBoard_Next        ; yes, next position
75C1 36 7E       7 1113 ld      (hl), ENEMY                 ; no, save ENEMY
75C3             7 1114 PrepareBoard_Next
75C3 2D          7 1115 dec     l                           ; HL points to next board position
75C4 10 F6       7 1116 djnz    PrepareBoard_Column         ; repeat for each column
75C6 2D          7 1118 dec     l                           ; skip borders
75C7 2D          7 1119 dec     l
75C8 0D          7 1120 dec     c                           ; decrement rows
75C9 20 EF       7 1121 jr      nz, PrepareBoard_Row        ; repeat for each row
75CB C9          7 1122 ret
75CC             7 1124 ; ----------------------------------------------------------------------------------------------------------------------
75CC             7 1125 ; PathFinder_BrightPath: animate and highlight the hexagons included in shortest path when match ends
75CC             7 1126 ;
75CC             7 1127 ; Input:    A  = start position of the victory path
75CC             7 1128 ;           HL = [color]_QUEUE_AREA address
75CC             7 1129 ;
75CC             7 1130 ; Output:   -
75CC             7 1131 ;
75CC             7 1132 ; Uses:     TOKEN_COLOR (current token color)
75CC             7 1133 ;
75CC             7 1134 ; Destroys: A, BC, DE, HL, IX
75CC             7 1135 ; ----------------------------------------------------------------------------------------------------------------------
75CC             7 1136 PathFinder_BrightPath:
75CC 44          7 1137 ld      b, h                        ; store high byte of QUEUE_AREA address
75CD 21 9E 61    7 1138 ld      hl, TOKEN_COLOR             ; get current token color address
75D0 CB F6       7 1139 set     6, (hl)                     ; switch on bright attribute
75D2 21 CA 6D    7 1140 ld      hl, Draw_Token_Delay+1      ; set delay duration for animate hexagons
75D5 36 04       7 1141 ld      (hl), 4
75D7 60          7 1142 ld      h, b                        ; restore high byte of QUEUE_AREA address
75D8 6F          7 1143 ld      l, a                        ; move HL to the start position of the victory path
75D9 24          7 1144 inc     h
75DA 4E          7 1145 ld      c, (hl)                     ; set current victory path length in C
75DB 06 03       7 1146 ld      b, VICTORY                  ; set victory length in B
75DD 18 1C       7 1147 jr      BrightPath_Position         ; animate and highlight the hexagon position
75DF             7 1148 BrightPath_Neighbor
75DF 2C          7 1149 inc     l                           ; move HL to left neighbor address
75E0 BE          7 1150 cp      (hl)                        ; is it the same as current victory path length?
75E1 28 18       7 1151 jr      z, BrightPath_Position      ; yes, animate and highlight the hexagon position
75E3 2D          7 1152 dec     l                           ; move HL to right neighbor address
75E4 2D          7 1153 dec     l
75E5 BE          7 1154 cp      (hl)                        ; is it the same as current victory path length?
75E6 28 13       7 1155 jr      z, BrightPath_Position      ; yes, animate and highlight the hexagon position
75E8 11 F8 FF    7 1156 ld      de, -WIDTH                  ; move HL to upper-right neighbor address
75EB 19          7 1157 add     hl, de
75EC BE          7 1158 cp      (hl)                        ; is it the same as current victory path length?
75ED 28 0C       7 1159 jr      z, BrightPath_Position      ; yes, animate and highlight the hexagon position
75EF 2C          7 1160 inc     l                           ; move HL to upper-left neighbor address
75F0 BE          7 1161 cp      (hl)                        ; is it the same as current victory path length?
75F1 28 08       7 1162 jr      z, BrightPath_Position      ; yes, animate and highlight the hexagon position
75F3 11 10 00    7 1163 ld      de, WIDTH*2                 ; move HL to lower-right neighbor address
75F6 19          7 1164 add     hl, de
75F7 BE          7 1165 cp      (hl)                        ; is it the same as current victory path length?
75F8 28 01       7 1166 jr      z, BrightPath_Position      ; yes, animate and highlight the hexagon position
75FA 2C          7 1167 inc     l                           ; move HL to lower-left neighbor address
75FB             7 1168 BrightPath_Position
75FB C5          7 1169 push    bc                          ; store current victory path length
75FC E5          7 1170 push    hl                          ; store current position pointer
75FD CD 7B 6D    7 1171 call    Main_Board2Indexes          ; convert a board position into a board indexes
7600 CD B6 6D    7 1172 call    Draw_Token                  ; animate hexagon sprite on the screen
7603 DD 21 E7 64 7 1173 ld      ix, TOKEN_FX                ; IX points to token tone parameters address
7607 CD C1 76    7 1174 call    Sound_FX                    ; play sound effect
760A E1          7 1175 pop     hl                          ; restore current position pointer
760B C1          7 1176 pop     bc                          ; restore current victory path length
760C 0D          7 1177 dec     c                           ; decrement current victory path length
760D 79          7 1178 ld      a, c                        ; set current victory path length in A
760E B8          7 1179 cp      b                           ; has reached victory length?
760F 20 CE       7 1180 jr      nz, BrightPath_Neighbor     ; repeat for each neighbor until reach victory length
7611 21 9E 61    7 1182 ld      hl, TOKEN_COLOR             ; get current token color address
7614 CB B6       7 1183 res     6, (hl)                     ; switch off bright attribute
7616 C9          7 1184 ret

; File #8: C:\Users\Antonio Luque\source\Repos\Hex\Z80CodeFiles\Timer.z80asm

7617             8 1 ; ----------------------------------------------------------------------------------------------------------------------
7617             8 2 ; Timer.z80asm
7617             8 3 ; Coded by Antonio Luque
7617             8 4 ;
7617             8 5 ; Based on disassembly of "Chess" (c) 1982 Psion
7617             8 6 ; ----------------------------------------------------------------------------------------------------------------------
7617             8 8 ; ----------------------------------------------------------------------------------------------------------------------
7617             8 9 ; Timer_Interrupt: interrupt routine to manage players' timers
7617             8 10 ;
7617             8 11 ; Input:    -
7617             8 12 ;
7617             8 13 ; Output:   -
7617             8 14 ;
7617             8 15 ; Uses:     TIMER_FLAG (0 = timer stopped, 1 = cyan timer on, 2 = red timer on)
7617             8 16 ;
7617             8 17 ; Destroys: BC', DE', HL'
7617             8 18 ; ----------------------------------------------------------------------------------------------------------------------
7617             8 19 Timer_Interrupt:
7617 F5          8 20 push    af                          ; store AF register
7618 D9          8 21 exx                                 ; store BC, DE and HL registers
7619 3A E8 62    8 23 ld      a, (TIMER_FLAG)             ; check timer flag
761C B7          8 24 or      a                           ; is timer stopped?
761D CA 46 76    8 25 jp      z, Timer_Exit               ; yes, exit routine
7620 21 EC 62    8 27 ld      hl, RED_TIMER               ; HL points to red's interrupt counter address
7623 3D          8 28 dec     a                           ; is red timer on?
7624 C2 2A 76    8 29 jp      nz, Timer_Counters          ; yes, check interrupt counter 
7627 21 E9 62    8 30 ld      hl, CYAN_TIMER              ; HL points to cyan's interrupt counter address
762A             8 31 Timer_Counters
762A 35          8 32 dec     (hl)                        ; decrement interrupt counter
762B C2 46 76    8 33 jp      nz, Timer_Exit              ; if not 0, exit routine
762E 36 32       8 35 ld      (hl), 50                    ; restart interrupt counter
7630 23          8 36 inc     hl                          ; move HL to seconds counter address
7631 3E 01       8 37 ld      a, 1                        ; increment seconds counter
7633 86          8 38 add     a, (hl)
7634 27          8 39 daa                                 ; convert to BCD (Binary-Coded-Decimal)
7635 77          8 40 ld      (hl), a                     ; store seconds
7636 FE 60       8 41 cp      $60                         ; 60 seconds reached?
7638 C2 43 76    8 42 jp      nz, Timer_Show              ; no, show timer
763B 36 00       8 43 ld      (hl), 0                     ; restart seconds counter
763D 23          8 44 inc     hl                          ; move HL to minutes counter address
763E 3E 01       8 45 ld      a, 1                        ; increment minutes counter
7640 86          8 46 add     a, (hl)
7641 27          8 47 daa                                 ; convert to BCD (Binary-Coded-Decimal)
7642 77          8 48 ld      (hl), a                     ; store minutes
7643             8 49 Timer_Show
7643 CD 4A 76    8 50 call    Timer_Display               ; display timer on the screen
7646             8 51 Timer_Exit
7646 D9          8 52 exx                                 ; restore BC, DE and HL registers
7647 F1          8 53 pop     af                          ; restore AF register
7648 FB          8 55 ei                                  ; enable interrupts
7649 C9          8 56 ret
764A             8 58 ; ----------------------------------------------------------------------------------------------------------------------
764A             8 59 ; Timer_Display: display a timer on the screen
764A             8 60 ;
764A             8 61 ; Input:    -
764A             8 62 ;
764A             8 63 ; Output:   -
764A             8 64 ;
764A             8 65 ; Uses:     TIMER_FLAG (0 = timer stopped, 1 = cyan timer on, 2 = red timer on)
764A             8 66 ;
764A             8 67 ; Destroys: A, BC, DE, HL
764A             8 68 ; ----------------------------------------------------------------------------------------------------------------------
764A             8 69 Timer_Display:
764A 01 EE 62    8 70 ld      bc, RED_TIMER+2             ; BC points to red's minutes counter address
764D 11 E2 48    8 71 ld      de, $48E2                   ; DE points to red's minutes screen address
7650 3A E8 62    8 72 ld      a, (TIMER_FLAG)             ; check timer flag
7653 3D          8 73 dec     a                           ; is cyan timer on?
7654 C2 5D 76    8 74 jp      nz, Timer_Display_Min       ; no, jump to display minutes counter
7657 01 EB 62    8 75 ld      bc, CYAN_TIMER+2            ; BC points to cyan's minutes counter address
765A 11 78 40    8 76 ld      de, $4078                   ; DE points to cyan's minutes screen address
765D             8 77 Timer_Display_Min
765D CD 62 76    8 78 call    Timer_Display_MinSec        ; display minutes counter on screen
7660 0B          8 79 dec     bc                          ; BC points to seconds counter address
7661 1C          8 80 inc     e                           ; DE points to seconds screen address
7662             8 81 Timer_Display_MinSec:
7662 0A          8 82 ld      a, (bc)                     ; set min/sec counter in A
7663 1F          8 83 rra                                 ; move tens digit to the first 4th bits of A
7664 1F          8 84 rra
7665 1F          8 85 rra
7666 1F          8 86 rra
7667 CD 6B 76    8 87 call    Timer_Display_Digit         ; display tens digit on screen
766A 0A          8 88 ld      a, (bc)                     ; set min/sec counter in A 
766B             8 89 Timer_Display_Digit:
766B E6 0F       8 90 and     %00001111                   ; discard the last 4th bits of the digit
766D D5          8 91 push    de                          ; store digit screen address
766E 21 97 64    8 93 ld      hl, TIMER_DIGITS            ; HL points to timer digits (graphics) address
7671 87          8 94 add     a, a                        ; a digit is 8 bytes long
7672 87          8 95 add     a, a
7673 87          8 96 add     a, a
7674 85          8 97 add     a, l                        ; set digit index in HL
7675 6F          8 98 ld      l, a
7676 7E          8 100 ld      a, (hl)                     ; get digit tile
7677 12          8 101 ld      (de), a                     ; put it on screen address
7678 14          8 102 inc     d                           ; move DE to next pixel-line address
7679 2C          8 103 inc     l                           ; move HL to next digit tile address
767A 7E          8 104 ld      a, (hl)                     ; (repeat 7 more times)
767B 12          8 105 ld      (de), a
767C 14          8 106 inc     d
767D 2C          8 107 inc     l
767E 7E          8 108 ld      a, (hl)
767F 12          8 109 ld      (de), a
7680 14          8 110 inc     d
7681 2C          8 111 inc     l
7682 7E          8 112 ld      a, (hl)
7683 12          8 113 ld      (de), a
7684 14          8 114 inc     d
7685 2C          8 115 inc     l
7686 7E          8 116 ld      a, (hl)
7687 12          8 117 ld      (de), a
7688 14          8 118 inc     d
7689 2C          8 119 inc     l
768A 7E          8 120 ld      a, (hl)
768B 12          8 121 ld      (de), a
768C 14          8 122 inc     d
768D 2C          8 123 inc     l
768E 7E          8 124 ld      a, (hl)
768F 12          8 125 ld      (de), a
7690 14          8 126 inc     d
7691 2C          8 127 inc     l
7692 7E          8 128 ld      a, (hl)
7693 12          8 129 ld      (de), a
7694 D1          8 131 pop     de                          ; restore digit screen address
7695 1C          8 132 inc     e                           ; move screen address to next column
7696 C9          8 133 ret
7697             8 135 ; ----------------------------------------------------------------------------------------------------------------------
7697             8 136 ; Timer_Display_All: display cyan and red timers
7697             8 137 ;
7697             8 138 ; Input:    -
7697             8 139 ;
7697             8 140 ; Output:   -
7697             8 141 ;
7697             8 142 ; Uses:     TIMER_FLAG (0 = timer stopped, 1 = cyan timer on, 2 = red timer on)
7697             8 143 ;
7697             8 144 ; Destroys: BC, DE, HL
7697             8 145 ; ----------------------------------------------------------------------------------------------------------------------
7697             8 146 Timer_Display_All:
7697 3E 01       8 147 ld      a, 1                        ; set cyan timer on
7699 32 E8 62    8 148 ld      (TIMER_FLAG), a
769C CD 4A 76    8 149 call    Timer_Display               ; display cyan timer
769F 3E 02       8 151 ld      a, 2                        ; set red timer on
76A1 32 E8 62    8 152 ld      (TIMER_FLAG), a
76A4 CD 4A 76    8 153 call    Timer_Display               ; display red timer
76A7 AF          8 155 xor     a                           ; stop timers
76A8 32 E8 62    8 156 ld      (TIMER_FLAG), a
76AB C9          8 157 ret
76AC             8 159 ; ----------------------------------------------------------------------------------------------------------------------
76AC             8 160 ; Timer_Reset: initialize cyan and red timers
76AC             8 161 ;
76AC             8 162 ; Input:    -
76AC             8 163 ;
76AC             8 164 ; Output:   -
76AC             8 165 ;
76AC             8 166 ; Destroys: HL
76AC             8 167 ; ----------------------------------------------------------------------------------------------------------------------
76AC             8 168 Timer_Reset:
76AC 21 E9 62    8 169 ld      hl, CYAN_TIMER              ; HL points to cyan timer address
76AF 36 32       8 171 ld      (hl), 50                    ; set interrupt counter (1/50 seconds)
76B1 23          8 172 inc     hl                          ; move HL to cyan's seconds counter address
76B2 36 00       8 173 ld      (hl), 0                     ; reset seconds counter
76B4 23          8 174 inc     hl                          ; move HL to cyan's minutes counter address
76B5 36 00       8 175 ld      (hl), 0                     ; reset minutes counter
76B7 23          8 176 inc     hl                          ; move HL to red's interrupt counter
76B8 36 32       8 178 ld      (hl), 50                    ; set interrupt counter (1/50 seconds)
76BA 23          8 179 inc     hl                          ; move HL to red's seconds counter address
76BB 36 00       8 180 ld      (hl), 0                     ; reset seconds counter
76BD 23          8 181 inc     hl                          ; move HL to red's minutes counter address
76BE 36 00       8 182 ld      (hl), 0                     ; reset minutes counter
76C0 C9          8 183 ret

; File #9: C:\Users\Antonio Luque\source\Repos\Hex\Z80CodeFiles\Sound.z80asm

76C1             9 1 ; ----------------------------------------------------------------------------------------------------------------------
76C1             9 2 ; Sound.z80asm
76C1             9 3 ; Coded with BeepFX player tool by Shiru: https://shiru.untergrund.net/software.shtml
76C1             9 4 ;
76C1             9 5 ; Adapted for Hex game by Antonio Luque
76C1             9 6 ; ----------------------------------------------------------------------------------------------------------------------
76C1             9 8 ; ----------------------------------------------------------------------------------------------------------------------
76C1             9 9 ; Sound_FX: play a sound effect (tone) defined by many parameters
76C1             9 10 ; 
76C1             9 11 ; Input:    IX = tone parameters address
76C1             9 12 ;
76C1             9 13 ; Output:   -
76C1             9 14 ;
76C1             9 15 ; Destroys: A, BC, DE, HL, IY
76C1             9 16 ; ----------------------------------------------------------------------------------------------------------------------
76C1             9 17 Sound_FX:
76C1 F3          9 18 di                                  ; disable interrupts
76C2 DD 4E 00    9 20 ld      c, (ix+0)                   ; BC = frames
76C5 DD 46 01    9 21 ld      b, (ix+1)
76C8 DD 5E 02    9 22 ld      e, (ix+2)                   ; DE = frame length
76CB DD 56 03    9 23 ld      d, (ix+3)
76CE D5          9 24 push    de                          ; store frame length in IY
76CF FD E1       9 25 pop     iy
76D1 DD 5E 04    9 26 ld      e, (ix+4)                   ; DE = pitch
76D4 DD 56 05    9 27 ld      d, (ix+5)
76D7 21 00 00    9 28 ld      hl, 0                       ; reset HL
76DA             9 30 Sound_FX_Frames
76DA C5          9 31 push    bc                          ; store frames
76DB FD E5       9 32 push    iy                          ; restore frame length in BC
76DD C1          9 33 pop     bc
76DE             9 34 Sound_FX_FrameLength
76DE 19          9 35 add     hl, de                      ; HL = incremented pitch
76DF 7C          9 36 ld      a, h                        ; compares with fixed duty cycle ($80 for 50% square wave)
76E0 FE 80       9 37 cp      $80                         ; if (incremented pitch < duty cycle)
76E2 9F          9 38 sbc     a, a                        ;    { A = %11111111 } else { A = %00000000 }
76E3 E6 10       9 39 and     %00010000                   ; toggling bit 4 controls the internal speaker
76E5 F6 00       9 40 or      0                           ; keep border unchanged, dummy (7t)
76E7 D3 FE       9 41 out     ($FE), a                    ; send bit to internal speaker
76E9 3A 00 00    9 42 ld      a, (0)                      ; dummy (13t)
76EC 0B          9 43 dec     bc                          ; decrement frame length
76ED 78          9 44 ld      a, b                        ; check frame length
76EE B1          9 45 or      c                           ; frame length = 0?
76EF C2 DE 76    9 46 jp      nz, Sound_FX_FrameLength    ; no, repeat "frame length" times (loop = 88t)
76F2 DD 4E 06    9 48 ld      c, (ix+6)                   ; BC = pitch slide
76F5 DD 46 07    9 49 ld      b, (ix+7)
76F8 EB          9 50 ex      de, hl                      ; HL = current pitch
76F9 09          9 51 add     hl, bc                      ; increment pitch with pitch slide
76FA EB          9 52 ex      de, hl                      ; DE = new pitch
76FB C1          9 54 pop     bc                          ; restore frames
76FC 0B          9 55 dec     bc                          ; decrement frames
76FD 78          9 56 ld      a, b                        ; check frames
76FE B1          9 57 or      c                           ; frames = 0?
76FF 20 D9       9 58 jr      nz, Sound_FX_Frames         ; no, repeat "frames" times
7701 FB          9 60 ei                                  ; enable interrupts
7702 C9          9 61 ret

; File #10: C:\Users\Antonio Luque\source\Repos\Hex\Z80CodeFiles\Screen.z80asm

7703             10 1 ; ----------------------------------------------------------------------------------------------------------------------
7703             10 2 ; Screen.z80asm
7703             10 3 ; Coded by Antonio Luque
7703             10 4 ; ----------------------------------------------------------------------------------------------------------------------
7703             10 6 BLUE_INK                equ     %00000001                   ; attributes: flash 0, bright 0, paper 0, ink 1
7703             10 7 BLUE_PAPER              equ     %00001000                   ; attributes: flash 0, bright 0, paper 1, ink 0
7703             10 8 WHITE_PAPER             equ     %00111000                   ; attributes: flash 0, bright 0, paper 7, ink 0
7703             10 9 WHITE                   equ     %00000111                   ; attributes: flash 0, bright 0, paper 0, ink 7
7703             10 10 BRIGHT                  equ     %01000000                   ; mask to apply bright to attributes
7703             10 11 FLASH                   equ     %10000000                   ; mask to apply flash to attributes
7703             10 12 WHITE_FLASH0            equ     WHITE+BRIGHT                ; attributes: flash 0, bright 1, paper 0, ink 7
7703             10 13 WHITE_FLASH1            equ     WHITE+BRIGHT+FLASH          ; attributes: flash 1, bright 1, paper 0, ink 7
7703             10 15 ; ----------------------------------------------------------------------------------------------------------------------
7703             10 16 ; Screen_Clear: fill in black the whole screen area and attributes area
7703             10 17 ;
7703             10 18 ; Input:    -
7703             10 19 ;
7703             10 20 ; Output:   -
7703             10 21 ;
7703             10 22 ; Destroys: BC, DE, HL
7703             10 23 ; ----------------------------------------------------------------------------------------------------------------------
7703             10 24 Screen_Clear:
7703 21 00 40    10 25 ld      hl, $4000                   ; HL points to start of the screen address
7706 11 01 40    10 26 ld      de, $4001                   ; DE points to next byte of the screen address
7709 75          10 27 ld      (hl), l                     ; set first pixel-byte in black
770A 01 FF 1A    10 28 ld      bc, 6144-1+768              ; length of screen area (-1 already set) + attributes area 
770D ED B0       10 29 ldir                                ; fill the rest of screen area and attributes area in black
770F C9          10 30 ret
7710             10 32 ; ----------------------------------------------------------------------------------------------------------------------
7710             10 33 ; Screen_Letters: draw the two rows of letters on the screen (a..g)
7710             10 34 ;
7710             10 35 ; Input:    -
7710             10 36 ;
7710             10 37 ; Output:   -
7710             10 38 ;
7710             10 39 ; Destroys: A, BC, DE, HL, IX
7710             10 40 ; ----------------------------------------------------------------------------------------------------------------------
7710             10 41 Screen_Letters:
7710 21 66 45    10 42 ld      hl, $4566                   ; HL points to first letter screen address (top row)
7713 DD 21 66 58 10 43 ld      ix, $5866                   ; IX points to first letter attribute address (top row)
7717 CD 21 77    10 44 call    Screen_Letters_Row          ; draw top row of letters
771A 21 6D 51    10 45 ld      hl, $516D                   ; HL points to first letter screen address (bottom row)
771D DD 21 6D 5A 10 46 ld      ix, $5A6D                   ; IX points to first letter attribute address (bottom row)
7721             10 47 Screen_Letters_Row:
7721 11 5E 66    10 48 ld      de, LETTER_SPRITES          ; DE points to letter sprites address
7724 06 07       10 49 ld      b, 7                        ; number of letters (loop counter)
7726             10 50 Screen_Letter_Loop
7726 E5          10 51 push    hl                          ; store letter screen address
7727 CD EE 6D    10 52 call    Draw_Sprite_LetterNum       ; draw letter at screen address
772A E1          10 53 pop     hl                          ; restore letter screen address
772B 2C          10 54 inc     l                           ; move HL to next screen address
772C 2C          10 55 inc     l
772D DD 36 00 05 10 56 ld      (ix+0), CYAN_COLOR          ; set letter color (2 bytes)
7731 DD 36 20 05 10 57 ld      (ix+32), CYAN_COLOR
7735 DD 2C       10 58 inc     ixl                         ; move IX to next attribute address
7737 DD 2C       10 59 inc     ixl
7739 10 EB       10 60 djnz    Screen_Letter_Loop          ; repeat for each letter
773B C9          10 61 ret
773C             10 63 ; ----------------------------------------------------------------------------------------------------------------------
773C             10 64 ; Screen_Numbers: draw the two columns of numbers on the screen (1-7)
773C             10 65 ;
773C             10 66 ; Input:    -
773C             10 67 ;
773C             10 68 ; Output:   -
773C             10 69 ;
773C             10 70 ; Destroys: A, BC, DE, HL, IX, IY
773C             10 71 ; ----------------------------------------------------------------------------------------------------------------------
773C             10 72 Screen_Numbers:
773C 11 A4 66    10 73 ld      de, NUMBER_SPRITES          ; DE points to numbers sprites
773F FD 21 EF 62 10 74 ld      iy, NUMBER_SCREEN           ; IY points to numbers screen addresses
7743 DD 21 A5 58 10 75 ld      ix, $58A5                   ; IX points to first number attribute address
7747 06 07       10 76 ld      b, 7                        ; number of numbers (loop counter)
7749             10 77 Screen_Number_Loop
7749 FD 6E 00    10 78 ld      l, (iy+0)                   ; HL points to number screen address
774C FD 66 01    10 79 ld      h, (iy+1)
774F E5          10 80 push    hl                          ; store pointer to number screen address
7750 D5          10 81 push    de                          ; store pointer to sprite address
7751 CD EE 6D    10 82 call    Draw_Sprite_LetterNum       ; draw number at screen address
7754 D1          10 83 pop     de                          ; restore pointer to sprite address
7755 E1          10 84 pop     hl                          ; restore pointer to number screen address
7756 DD 36 00 02 10 85 ld      (ix+0), RED_COLOR           ; set number color (2 bytes)
775A DD 36 20 02 10 86 ld      (ix+32), RED_COLOR
775E 7D          10 87 ld      a, l                        ; move HL to screen address of the 2nd column
775F C6 0F       10 88 add     a, 15
7761 6F          10 89 ld      l, a
7762 CD EE 6D    10 90 call    Draw_Sprite_LetterNum       ; draw number at screen address
7765 DD 36 0F 02 10 91 ld      (ix+15), RED_COLOR          ; set number color (2 bytes)
7769 DD 36 2F 02 10 92 ld      (ix+47), RED_COLOR
776D 78          10 93 ld      a, b                        ; save loop counter
776E 01 41 00    10 94 ld      bc, 65                      ; displacement of next attribute address
7771 DD 09       10 95 add     ix, bc                      ; move IX to next attribute address
7773 FD 23       10 96 inc     iy                          ; move IY to next number screen address
7775 FD 23       10 97 inc     iy
7777 47          10 98 ld      b, a                        ; restore loop counter
7778 10 CF       10 99 djnz    Screen_Number_Loop          ; repeat for each number
777A C9          10 100 ret
777B             10 102 ; ----------------------------------------------------------------------------------------------------------------------
777B             10 103 ; Screen_Frame: draw the screen frame on the screen
777B             10 104 ;
777B             10 105 ; Input:    -
777B             10 106 ;
777B             10 107 ; Output:   -
777B             10 108 ;
777B             10 109 ; Destroys: A, BC, DE, HL, IX
777B             10 110 ; ----------------------------------------------------------------------------------------------------------------------
777B             10 111 Screen_Frame:
777B 11 28 62    10 112 ld      de, STR_LEVELTEXT           ; DE points to "Level" string address
777E 21 09 40    10 113 ld      hl, $4009                   ; HL points to screen address of the string
7781 CD 53 6F    10 114 call    Print_String                ; print "Level"
7784 CD C0 77    10 115 call    Screen_Vertical_Bars        ; draw the vertical bars of frame
7787 01 8D 62    10 117 ld      bc, FRAME_MAP               ; BC points to the frame tiles indexes
778A 21 00 40    10 118 ld      hl, $4000                   ; HL points to the screen address of the up-border
778D CD 93 77    10 119 call    Screen_Frame_Border         ; draw up-border
7790 21 E0 50    10 120 ld      hl, $50E0                   ; HL points to the screen address of the bottom-border
7793             10 121 Screen_Frame_Border:
7793 DD 2E 20    10 122 ld      ixl, 32                     ; border width in bytes (loop counter)
7796             10 123 Screen_Frame_Loop
7796 0A          10 124 ld      a, (bc)                     ; get tile index
7797 FE FF       10 125 cp      -1                          ; is it -1?
7799 28 06       10 126 jr      z, Screen_Frame_Next        ; yes, there is no tile to print
779B 11 0E 65    10 127 ld      de, FRAME_TILES             ; DE points to tiles array
779E CD 62 6F    10 128 call    Print_Tile                  ; print frame tile
77A1             10 129 Screen_Frame_Next
77A1 2C          10 130 inc     l                           ; HL points to the next screen address (next column)
77A2 03          10 131 inc     bc                          ; BC points to the next tile index
77A3 DD 2D       10 132 dec     ixl                         ; decrement loop counter
77A5 20 EF       10 133 jr      nz, Screen_Frame_Loop       ; repeat for each tile
77A7 DD 21 07 58 10 135 ld      ix, $5807                   ; IX points to the "concave left" tile screen position
77AB DD 36 00 08 10 136 ld      (ix+0), BLUE_PAPER          ; color tile
77AF DD 36 0A 08 10 137 ld      (ix+10), BLUE_PAPER         ; color "concave right" tile
77B3 DD 21 F1 5A 10 138 ld      ix, $5AF1                   ; IX points to the "convex left" tile screen position
77B7 DD 36 00 01 10 139 ld      (ix+0), BLUE_INK            ; color tile
77BB DD 36 04 01 10 140 ld      (ix+4), BLUE_INK            ; color "convex right" tile
77BF C9          10 141 ret
77C0             10 143 ; ----------------------------------------------------------------------------------------------------------------------
77C0             10 144 ; Screen_Vertical_Bars: draw the vertical bars of the frame on the screen
77C0             10 145 ;
77C0             10 146 ; Input:    -
77C0             10 147 ;
77C0             10 148 ; Output:   -
77C0             10 149 ;
77C0             10 150 ; Destroys: A, BC, HL
77C0             10 151 ; ----------------------------------------------------------------------------------------------------------------------
77C0             10 152 Screen_Vertical_Bars:
77C0 21 20 40    10 153 ld      hl, $4020                   ; HL points to left bar screen address
77C3 CD C9 77    10 154 call    Screen_Vertical_Bar         ; draw left bar
77C6 21 3F 40    10 155 ld      hl, $403F                   ; HL points to right bar screen address
77C9             10 156 Screen_Vertical_Bar:
77C9 06 B0       10 157 ld      b, 176                      ; number of pixel lines (loop counter)
77CB             10 158 Screen_Vertical_Loop
77CB 36 3C       10 159 ld      (hl), %00111100             ; draw pixel byte of bar
77CD CD FA 6D    10 160 call    Draw_Down_PixelLine         ; move HL to the next pixel-line address
77D0 10 F9       10 161 djnz    Screen_Vertical_Loop        ; repeat for each pixel line
77D2 C9          10 162 ret
77D3             10 164 ; ----------------------------------------------------------------------------------------------------------------------
77D3             10 165 ; Screen_Tokens: draw the fixed tokens on the screen
77D3             10 166 ;
77D3             10 167 ; Input:    -
77D3             10 168 ;
77D3             10 169 ; Output:   -
77D3             10 170 ;
77D3             10 171 ; Uses:     TOKEN_COLOR (current token color)
77D3             10 172 ;
77D3             10 173 ; Destroys: A, BC, DE, HL, IX
77D3             10 174 ; ----------------------------------------------------------------------------------------------------------------------
77D3             10 175 Screen_Tokens:
77D3 3E 05       10 176 ld      a, CYAN_COLOR               ; set token color
77D5 21 BA 44    10 177 ld      hl, $44BA                   ; HL points to the fixed cyan token screen address
77D8 CD E0 77    10 178 call    Screen_Tokens_Draw          ; draw cyan fixed token
77DB 3E 02       10 180 ld      a, RED_COLOR                ; set token color
77DD 21 24 54    10 181 ld      hl, $5424                   ; HL points to the fixed red token screen address 
77E0             10 182 Screen_Tokens_Draw:
77E0 32 9E 61    10 183 ld      (TOKEN_COLOR), a            ; save token color
77E3 CD 09 6E    10 184 call    Draw_Hexagon_Color          ; color fixed token area
77E6 DD 77 40    10 185 ld      (ix+64), a                  ; the fixed tokens are 3 bytes (attributes) high, so we have
77E9 DD 77 41    10 186 ld      (ix+65), a                  ; to color the remaining 2 bytes that have not been colored
77EC 11 3E 66    10 187 ld      de, HEXAGON_TOKEN           ; DE points to token sprite address
77EF C3 DB 6D    10 188 jp      Draw_Sprite_Hexagon         ; draw fixed token
77F2             10 190 ; ----------------------------------------------------------------------------------------------------------------------
77F2             10 191 ; Screen_Timer_Quotes: draw the timer quotes ('  '') on the screen
77F2             10 192 ;
77F2             10 193 ; Input:    -
77F2             10 194 ;
77F2             10 195 ; Output:   -
77F2             10 196 ;
77F2             10 197 ; Destroys: IX
77F2             10 198 ; ----------------------------------------------------------------------------------------------------------------------
77F2             10 199 Screen_Timer_Quotes:
77F2 DD 21 7A 40 10 200 ld      ix, $407A                   ; IX points to the screen address of the cyan timer quotes 
77F6 DD 36 00 08 10 201 ld      (ix+0), %00001000           ; draw 1st half of simple quote (')
77FA DD 36 03 0A 10 202 ld      (ix+3), %00001010           ; draw 1st half of double quotes (")
77FE DD 24       10 203 inc     ixh                         ; move IX to the next screen pixel-line
7800 DD 36 00 08 10 204 ld      (ix+0), %00001000           ; draw 2nd half of simple quote (')
7804 DD 36 03 0A 10 205 ld      (ix+3), %00001010           ; draw 2nd half of double quotes (")
7808 DD 26 58    10 206 ld      ixh, $58                    ; move IX to the attribute address
780B DD 36 00 07 10 207 ld      (ix+0), WHITE               ; color simple quote
780F DD 36 03 07 10 208 ld      (ix+3), WHITE               ; color double quotes
7813 DD 21 E4 48 10 210 ld      ix, $48E4                   ; IX points to the screen address of the red timer quotes
7817 DD 36 00 08 10 211 ld      (ix+0), %00001000           ; draw 1st half of simple quote (')
781B DD 36 03 0A 10 212 ld      (ix+3), %00001010           ; draw 1st half of double quotes (")
781F DD 24       10 213 inc     ixh                         ; move IX to the next screen pixel-line
7821 DD 36 00 08 10 214 ld      (ix+0), %00001000           ; draw 2nd half of simple quote (')
7825 DD 36 03 0A 10 215 ld      (ix+3), %00001010           ; draw 2nd half of double quotes (")
7829 DD 26 59    10 216 ld      ixh, $59                    ; move IX to the attribute address
782C DD 36 00 07 10 217 ld      (ix+0), WHITE               ; color simple quote
7830 DD 36 03 07 10 218 ld      (ix+3), WHITE               ; color double quotes
7834 C9          10 219 ret
7835             10 221 ; ----------------------------------------------------------------------------------------------------------------------
7835             10 222 ; Screen_Color_Statics: apply color to some statics items of the screen
7835             10 223 ;
7835             10 224 ; Input:    -
7835             10 225 ;
7835             10 226 ; Output:   -
7835             10 227 ;
7835             10 228 ; Destroys: BC, IX
7835             10 229 ; ----------------------------------------------------------------------------------------------------------------------
7835             10 230 Screen_Color_Statics:
7835 DD 21 78 58 10 231 ld      ix, $5878                   ; IX points to the attr. address of the cyan player timer
7839 0E 07       10 232 ld      c, WHITE                    ; set color in C
783B CD 65 78    10 233 call    Screen_Apply_Color          ; apply color
783E DD 2E 98    10 234 ld      ixl, $98                    ; IX points to the attr. address of the cyan player name
7841 0E 05       10 235 ld      c, CYAN_COLOR               ; set color in C
7843 CD 65 78    10 236 call    Screen_Apply_Color          ; apply color
7846 DD 21 18 59 10 237 ld      ix, $5918                   ; IX points to the attr. address of the cyan player messages
784A 0E 47       10 238 ld      c, WHITE+BRIGHT             ; set color in C
784C CD 65 78    10 239 call    Screen_Apply_Color          ; apply color
784F DD 2E E2    10 240 ld      ixl, $E2                    ; IX points to the attr. address of the red player timer
7852 0E 07       10 241 ld      c, WHITE                    ; set color in C
7854 CD 65 78    10 242 call    Screen_Apply_Color          ; apply color
7857 DD 21 02 5A 10 243 ld      ix, $5A02                   ; IX points to the attr. address of the red player name
785B 0E 02       10 244 ld      c, RED_COLOR                ; set color in C
785D CD 65 78    10 245 call    Screen_Apply_Color          ; apply color
7860 DD 2E 82    10 246 ld      ixl, $82                    ; IX points to the attr. address of the red player messages
7863 0E 47       10 247 ld      c, WHITE+BRIGHT             ; set color in C
7865             10 248 Screen_Apply_Color:
7865 06 06       10 249 ld      b, 6                        ; number of bytes to be colored (loop counter)
7867             10 250 Screen_Apply_Color_Loop:
7867 DD 71 00    10 251 ld      (ix+0), c                   ; apply color
786A DD 2C       10 252 inc     ixl                         ; move IX to the next attribute address
786C 10 F9       10 253 djnz    Screen_Apply_Color_Loop     ; repeat for each byte
786E C9          10 254 ret
786F             10 256 ; ----------------------------------------------------------------------------------------------------------------------
786F             10 257 ; Screen_Last_Level: show last level screen and input game level
786F             10 258 ;
786F             10 259 ; Input:    -
786F             10 260 ;
786F             10 261 ; Output:   -
786F             10 262 ;
786F             10 263 ; Uses:     GAME_LEVEL (current game level)
786F             10 264 ;
786F             10 265 ; Destroys: A, BC, DE, HL, IX, IY
786F             10 266 ; ----------------------------------------------------------------------------------------------------------------------
786F             10 267 Screen_Last_Level:
786F 11 3C 68    10 268 ld      de, STR_PRESSKEY            ; DE points to "Press any key" string address
7872 21 AD 50    10 269 ld      hl, $50AD                   ; HL points to string screen address
7875 CD 53 6F    10 270 call    Print_String                ; print "Press any key"
7878 DD 21 AD 5A 10 271 ld      ix, $5AAD                   ; IX points to string attributes address
787C 01 38 0D    10 272 ld      bc, 13*256+WHITE_PAPER      ; B = string length (loop counter), C = color attributes
787F CD 67 78    10 273 call    Screen_Apply_Color_Loop     ; apply color to string area
7882 CD BF 6E    10 274 call    Input_Key_Scan              ; wait for a key pressed
7885 CD 03 77    10 276 call    Screen_Clear                ; fill in black the whole screen area and attributes area
7888 CD 48 7C    10 277 call    Screen_Hexagons             ; draw menu hexagons ("HEX 2")
788B DD 21 C7 59 10 278 ld      ix, $59C7                   ; IX points to "CONGRATULATIONS" string attributes address
788F 01 C7 11    10 279 ld      bc, 17*256+WHITE_FLASH1     ; B = string length (loop counter), C = color attributes
7892 CD 67 78    10 280 call    Screen_Apply_Color_Loop     ; apply color to string area
7895 11 B4 68    10 281 ld      de, STR_CONGRATS            ; DE points to string address
7898 21 C7 48    10 282 ld      hl, $48C7                   ; HL points to string screen address
789B CD 53 6F    10 283 call    Print_String                ; print "CONGRATULATIONS"
789E DD 21 EF 64 10 284 ld      ix, WINNER_FX               ; IX points to winner tone parameters address
78A2 CD C1 76    10 285 call    Sound_FX                    ; play sound fx
78A5 F3          10 287 di                                  ; disable interrupts
78A6 DD 21 42 5A 10 288 ld      ix, $5A42                   ; IX points to "Well done!..." string attributes address
78AA 01 07 1C    10 289 ld      bc, 28*256+WHITE            ; B = string length (loop counter), C = color attributes
78AD CD 67 78    10 290 call    Screen_Apply_Color_Loop     ; apply color to string area
78B0 11 C6 68    10 291 ld      de, STR_LAST_LEVEL          ; DE points to string address
78B3 21 42 50    10 292 ld      hl, $5042                   ; HL points to string screen address
78B6 CD 53 6F    10 293 call    Print_String                ; print "Well done!..."
78B9 DD 2E 82    10 294 ld      ixl, $82                    ; IX points to "Choose..." string attributes address
78BC 06 18       10 295 ld      b, 24                       ; string length-4 (loop counter)
78BE CD 67 78    10 296 call    Screen_Apply_Color_Loop     ; apply color to string area
78C1 DD 36 01 78 10 297 ld      (ix+1), WHITE_PAPER+BRIGHT  ; set color for last characters ("1-4")
78C5 DD 36 02 78 10 298 ld      (ix+2), WHITE_PAPER+BRIGHT
78C9 DD 36 03 78 10 299 ld      (ix+3), WHITE_PAPER+BRIGHT
78CD 13          10 300 inc     de                          ; move DE to next string address
78CE 2E 82       10 301 ld      l, $82                      ; HL points to string screen address
78D0 CD 53 6F    10 302 call    Print_String                ; print "Choose..."
78D3             10 303 Screen_Choose_Level
78D3 CD BF 6E    10 304 call    Input_Key_Scan              ; wait for a key pressed
78D6 FE 31       10 305 cp      '1'                         ; is it < '1' ?
78D8 38 F9       10 306 jr      c, Screen_Choose_Level      ; yes, wait for a key pressed
78DA FE 35       10 307 cp      '5'                         ; is it >= '5' ?
78DC 30 F5       10 308 jr      nc, Screen_Choose_Level     ; yes, wait for a key pressed
78DE D6 31       10 309 sub     $31                         ; convert ASCII into level number (-1)
78E0 21 9D 61    10 310 ld      hl, GAME_LEVEL              ; HL points to game level address
78E3 77          10 311 ld      (hl), a                     ; save chosen game level (-1)
78E4 C9          10 312 ret
78E5             10 314 ; ----------------------------------------------------------------------------------------------------------------------
78E5             10 315 ; Screen_ThreeRow: color the three-in-a-row marks according to the current three row counter
78E5             10 316 ;
78E5             10 317 ; Input:    -
78E5             10 318 ;
78E5             10 319 ; Output:   -
78E5             10 320 ;
78E5             10 321 ; Uses:     LEVEL_COLOR (current level color for frame border)
78E5             10 322 ;           THREE_ROW (three-in-a-row counter)
78E5             10 323 ;
78E5             10 324 ; Destroys: A, C, HL, IX
78E5             10 325 ; ----------------------------------------------------------------------------------------------------------------------
78E5             10 326 Screen_ThreeRow:
78E5 21 9C 61    10 327 ld      hl, LEVEL_COLOR             ; HL points to level color address
78E8 4E          10 328 ld      c, (hl)                     ; save level color in C
78E9 CD 01 79    10 329 call    Screen_Clear_ThreeRow       ; clear all three-in-a-row marks
78EC 3A 0E 62    10 330 ld      a, (THREE_ROW)              ; A = three-in-a-row counter
78EF B7          10 331 or      a                           ; is it 0?
78F0 C8          10 332 ret     z                           ; yes, return
78F1 3D          10 333 dec     a                           ; is it 1?
78F2 28 09       10 334 jr      z, Screen_ThreeRow_1        ; yes, color first mark
78F4 3D          10 335 dec     a                           ; is it 2?
78F5 28 03       10 336 jr      z, Screen_ThreeRow_2        ; yes color 2nd and 1st marks
78F7 DD 71 00    10 337 ld      (ix+0), c                   ; color 3rd mark
78FA             10 338 Screen_ThreeRow_2
78FA DD 71 01    10 339 ld      (ix+1), c                   ; color 2nd mark
78FD             10 340 Screen_ThreeRow_1
78FD DD 71 02    10 341 ld      (ix+2), c                   ; color 1st mark
7900 C9          10 342 ret
7901             10 344 ; ----------------------------------------------------------------------------------------------------------------------
7901             10 345 ; Screen_Clear_ThreeRow: clear all three-in-a-row marks
7901             10 346 ;
7901             10 347 ; Input:    -
7901             10 348 ;
7901             10 349 ; Output:   IX = three-in-a-row marks attribute address
7901             10 350 ;
7901             10 351 ; Destroys: -
7901             10 352 ; ----------------------------------------------------------------------------------------------------------------------
7901             10 353 Screen_Clear_ThreeRow:
7901 DD 21 F2 5A 10 354 ld      ix, $5AF2                   ; IX points to attribute address of three-in-a-row marks
7905 DD 36 00 01 10 355 ld      (ix+0), BLUE_INK            ; clear all three-in-a-row marks
7909 DD 36 01 01 10 356 ld      (ix+1), BLUE_INK
790D DD 36 02 01 10 357 ld      (ix+2), BLUE_INK
7911 C9          10 358 ret
7912             10 360 ; ----------------------------------------------------------------------------------------------------------------------
7912             10 361 ; Screen_Frame_Color: set up frame color and print level number depending on current level
7912             10 362 ;
7912             10 363 ; Input:    HL = game level address
7912             10 364 ;
7912             10 365 ; Output:   -
7912             10 366 ;
7912             10 367 ; Uses:     LEVEL_COLOR (current level color for frame border)
7912             10 368 ;
7912             10 369 ; Destroys: A, BC, DE, HL
7912             10 370 ; ----------------------------------------------------------------------------------------------------------------------
7912             10 371 Screen_Frame_Color:
7912 06 00       10 372 ld      b, 0                        ; set game level in BC
7914 4E          10 373 ld      c, (hl)
7915 3E 30       10 374 ld      a, $30                      ; convert game level number to game level character
7917 81          10 375 add     a, c
7918 21 0F 40    10 376 ld      hl, $400F                   ; HL points to screen address of game level
791B CD 5F 6F    10 377 call    Print_Char                  ; print game level
791E 21 0E 62    10 378 ld      hl, ROW_COLOR_MAP-1         ; HL points to color map address (adjusted for index 0)
7921 09          10 379 add     hl, bc                      ; use BC as index for color map address
7922 7E          10 380 ld      a, (hl)                     ; A = level color
7923 CD 38 79    10 381 call    Screen_Tiles_Color          ; color the frame according to the current level
7926 E6 07       10 382 and     %00000111                   ; mask color
7928 32 9C 61    10 383 ld      (LEVEL_COLOR), a            ; save masked color
792B 17          10 384 rla                                 ; rotate to text level color
792C 17          10 385 rla
792D 17          10 386 rla
792E 21 08 58    10 387 ld      hl, $5808                   ; HL points to attribute address of level text
7931 06 09       10 388 ld      b, 9                        ; length of level text (loop counter)
7933             10 389 Screen_Level_Loop
7933 77          10 390 ld      (hl), a                     ; apply color to level text
7934 2C          10 391 inc     l                           ; HL points to attr address of next character of level text
7935 10 FC       10 392 djnz    Screen_Level_Loop           ; repeat for each character of level text
7937 C9          10 393 ret
7938             10 395 ; ----------------------------------------------------------------------------------------------------------------------
7938             10 396 ; Screen_Tiles_Color: apply color to the frame tiles
7938             10 397 ;
7938             10 398 ; Input:    A = color to apply
7938             10 399 ;
7938             10 400 ; Output:   -
7938             10 401 ;
7938             10 402 ; Destroys: BC, DE, HL
7938             10 403 ; ----------------------------------------------------------------------------------------------------------------------
7938             10 404 Screen_Tiles_Color:
7938             10 405 ; color up row
7938 21 01 58    10 407 ld      hl, $5801                   ; HL points to attribute address of the the frame tile 
793B 06 06       10 408 ld      b, 6                        ; number of tiles (loop counter)
793D             10 409 Screen_Tiles_URow1
793D 77          10 410 ld      (hl), a                     ; apply color
793E 2C          10 411 inc     l                           ; move HL to the next attribute address
793F 10 FC       10 412 djnz    Screen_Tiles_URow1          ; repeat for each tile
7941 2E 12       10 413 ld      l, $12                      ; move HL to the next attribute address
7943 06 0D       10 414 ld      b, 13                       ; number of tiles (loop counter)
7945             10 415 Screen_Tiles_URow2
7945 77          10 416 ld      (hl), a                     ; apply color
7946 2C          10 417 inc     l                           ; move HL to the next attribute address
7947 10 FC       10 418 djnz    Screen_Tiles_URow2          ; repeat for each tile
7949             10 420 ; color vertical bars
7949 2E 00       10 422 ld      l, 0                        ; move HL to the next attribute address
794B 11 1F 00    10 423 ld      de, 31                      ; attribute address displacement (for each bar)
794E 0E 03       10 424 ld      c, 3                        ; number of screen thirds (outer loop counter)
7950             10 425 Screen_Tiles_VBar1
7950 06 08       10 426 ld      b, 8                        ; number of tiles (inner loop counter)
7952             10 427 Screen_Tiles_VBar2
7952 77          10 428 ld      (hl), a                     ; apply color
7953 19          10 429 add     hl, de                      ; move HL to the right column
7954 77          10 430 ld      (hl), a                     ; apply color
7955 2C          10 431 inc     l                           ; move HL to the next attribute address
7956 10 FA       10 432 djnz    Screen_Tiles_VBar2          ; repeat for each tile
7958 24          10 433 inc     h                           ; move HL to the next screen third
7959 0D          10 434 dec     c                           ; decrement number of thirds
795A 20 F4       10 435 jr      nz, Screen_Tiles_VBar1      ; repeat for each third
795C             10 437 ; color bottom row
795C 21 E1 5A    10 439 ld      hl, $5AE1                   ; HL points to attribute address of the the frame tile
795F 06 10       10 440 ld      b, 16                       ; number of tiles (loop counter)
7961             10 441 Screen_Tiles_BRow1
7961 77          10 442 ld      (hl), a                     ; apply color
7962 2C          10 443 inc     l                           ; move HL to the next attribute address
7963 10 FC       10 444 djnz    Screen_Tiles_BRow1          ; repeat for each tile
7965 2E F6       10 445 ld      l, $F6                      ; move HL to the next attribute address
7967 06 09       10 446 ld      b, 9                        ; number of tiles (loop counter)
7969             10 447 Screen_Tiles_BRow2
7969 77          10 448 ld      (hl), a                     ; apply color
796A 2C          10 449 inc     l                           ; move HL to the next attribute address
796B 10 FC       10 450 djnz    Screen_Tiles_BRow2          ; repeat for each tile
796D C9          10 451 ret
796E             10 453 ; ----------------------------------------------------------------------------------------------------------------------
796E             10 454 ; Screen_Menu: show main menu and wait for an option
796E             10 455 ;
796E             10 456 ; Input:    -
796E             10 457 ;
796E             10 458 ; Output:   -
796E             10 459 ;
796E             10 460 ; Uses:     GAME_LEVEL (current game level)
796E             10 461 ;
796E             10 462 ; Destroys: A, BC, DE, HL, IX, IY
796E             10 463 ; ----------------------------------------------------------------------------------------------------------------------
796E             10 464 Screen_Menu:
796E CD 03 77    10 465 call    Screen_Clear                ; fill in black the whole screen area and attributes area
7971 CD 48 7C    10 466 call    Screen_Hexagons             ; draw menu hexagons ("HEX 2")
7974             10 467 Screen_Menu_Strings
7974 21 80 59    10 468 ld      hl, $5980                   ; HL points to menu text area attributes address
7977 11 81 59    10 469 ld      de, $5981                   ; DE points to next byte of menu text area attr. address
797A 36 00       10 470 ld      (hl), 0                     ; set first attribute text area in black
797C 01 7F 01    10 471 ld      bc, 32*12-1                 ; length of text area attributes (-1 already set)
797F ED B0       10 472 ldir                                ; set the rest of text area attributes in black
7981 DD 21 CA 59 10 474 ld      ix, $59CA                   ; IX points to "Start new game" string attr. address (+1)
7985 DD 36 FF 78 10 475 ld      (ix-1), WHITE_PAPER+BRIGHT  ; set color of first letter
7989 01 47 0D    10 476 ld      bc, 13*256+WHITE_FLASH0     ; B = string length-1 (loop counter), C = color attributes
798C CD 67 78    10 477 call    Screen_Apply_Color_Loop     ; apply color to string area
798F 11 80 67    10 478 ld      de, STR_OPTIONS             ; DE points to string address
7992 21 C9 48    10 479 ld      hl, $48C9                   ; HL points to string screen address
7995 CD 53 6F    10 480 call    Print_String                ; print "Start new game"
7998 DD 21 2A 5A 10 481 ld      ix, $5A2A                   ; IX points to "How to play" string attributes address (+1)
799C DD 36 FF 78 10 482 ld      (ix-1), WHITE_PAPER+BRIGHT  ; set color of first letter
79A0 06 0A       10 483 ld      b, 10                       ; string length-1 (loop counter)
79A2 CD 67 78    10 484 call    Screen_Apply_Color_Loop     ; apply color to string area
79A5 13          10 485 inc     de                          ; move DE to "How to play" string address
79A6 21 29 50    10 486 ld      hl, $5029                   ; HL points to string screen address
79A9 CD 53 6F    10 487 call    Print_String                ; print "How to play"
79AC DD 2E 8A    10 488 ld      ixl, $8A                    ; IX points to "Credits" string attributes address (+1)
79AF DD 36 FF 78 10 489 ld      (ix-1), WHITE_PAPER+BRIGHT  ; set color of first letter
79B3 CD 65 78    10 490 call    Screen_Apply_Color          ; apply color to string area
79B6 13          10 491 inc     de                          ; move DE to "Credits" string address
79B7 2E 89       10 492 ld      l, $89                      ; HL points to string screen address
79B9 CD 53 6F    10 493 call    Print_String                ; print "Credits"
79BC             10 494 Screen_Menu_Options
79BC CD BF 6E    10 495 call    Input_Key_Scan              ; wait for a key pressed
79BF FE 73       10 496 cp      's'                         ; is it 's'?
79C1 C8          10 497 ret     z                           ; yes, return
79C2 FE 63       10 498 cp      'c'                         ; is it 'c'?
79C4 CA D8 7B    10 499 jp      z, Screen_Menu_Credits      ; yes, show credits
79C7 FE 68       10 500 cp      'h'                         ; is it 'h'?
79C9 20 F1       10 501 jr      nz, Screen_Menu_Options     ; no, repeat until key pressed = 's' or 'c' or 'h'
79CB             10 503 ; ----------------------------------------------------------------------------------------------------------------------
79CB             10 504 ; Show "How to play" pages
79CB             10 505 ; ----------------------------------------------------------------------------------------------------------------------
79CB             10 506 Screen_Menu_How2Play
79CB CD 03 77    10 507 call    Screen_Clear                ; fill in black the whole screen area and attributes area
79CE CD 10 77    10 508 call    Screen_Letters              ; draw the two rows of letters on the screen (a..g)
79D1 CD 3C 77    10 509 call    Screen_Numbers              ; draw the two columns of numbers on the screen (1..7)
79D4 CD 7B 77    10 510 call    Screen_Frame                ; draw the screen frame
79D7 21 9D 61    10 512 ld      hl, GAME_LEVEL              ; HL points to game level address (needed for color frame)
79DA 34          10 513 inc     (hl)                        ; increment game level (GAME_LEVEL = 1)
79DB CD 12 79    10 514 call    Screen_Frame_Color          ; set up frame color depending on current level
79DE CD 01 79    10 515 call    Screen_Clear_ThreeRow       ; clear all three-in-a-row marks
79E1 11 4A 68    10 517 ld      de, STR_BUTTONS             ; DE points to "Next" string address
79E4 21 DB 50    10 518 ld      hl, $50DB                   ; HL points to string screen address
79E7 CD 53 6F    10 519 call    Print_String                ; print "Next"
79EA 13          10 520 inc     de                          ; move DE to "Back" string address
79EB 21 C1 50    10 521 ld      hl, $50C1                   ; HL points to string screen address
79EE CD 53 6F    10 522 call    Print_String                ; print "Back"
79F1             10 524 Screen_How2Play_RED
79F1 21 5E 58    10 525 ld      hl, $5876-24                ; HL points to cyan text area attributes address (-24)
79F4 CD 82 7C    10 526 call    Screen_Clear_Text           ; clear text area attributes
79F7 CD 9B 6D    10 527 call    Draw_Board                  ; draw an empty hexagons board
79FA             10 529 ; text for RED
79FA DD 21 01 5A 10 531 ld      ix, $5A01                   ; IX points to "Connect" string attributes address
79FE 01 07 07    10 532 ld      bc, 7*256+WHITE             ; B = string length (loop counter), C = color attributes
7A01 CD 67 78    10 533 call    Screen_Apply_Color_Loop     ; apply color to string area
7A04 11 5D 68    10 534 ld      de, STR_HELP1               ; DE points to string address
7A07 21 01 50    10 535 ld      hl, $5001                   ; HL points to string screen address
7A0A CD 53 6F    10 536 call    Print_String                ; print "Connect"
7A0D DD 2E 21    10 537 ld      ixl, $21                    ; IX points to "left and" string attributes address
7A10 06 08       10 538 ld      b, 8                        ; string length (loop counter)
7A12 CD 67 78    10 539 call    Screen_Apply_Color_Loop     ; apply color to string area
7A15 13          10 540 inc     de                          ; move DE to "left and" string address
7A16 2E 21       10 541 ld      l, $21                      ; HL points to string screen address
7A18 CD 53 6F    10 542 call    Print_String                ; print "left and"
7A1B DD 2E 41    10 543 ld      ixl, $41                    ; IX points to "right" string attributes address
7A1E 06 05       10 544 ld      b, 5                        ; set string length (loop counter)
7A20 CD 67 78    10 545 call    Screen_Apply_Color_Loop     ; apply color to string area
7A23 11 75 68    10 546 ld      de, STR_HELP3_RED           ; DE points to "right" string address
7A26 2E 41       10 547 ld      l, $41                      ; HL points to string screen address
7A28 CD 53 6F    10 548 call    Print_String                ; print "right"
7A2B DD 2E 61    10 549 ld      ixl, $61                    ; IX points to "borders" string attributes address
7A2E 06 07       10 550 ld      b, 7                        ; set string length (loop counter)
7A30 CD 67 78    10 551 call    Screen_Apply_Color_Loop     ; apply color to string area
7A33 11 80 68    10 552 ld      de, STR_HELP4               ; DE points to "borders" string address
7A36 2E 61       10 553 ld      l, $61                      ; HL points to string screen address
7A38 CD 53 6F    10 554 call    Print_String                ; print "borders"
7A3B DD 2E 81    10 555 ld      ixl, $81                    ; IX points to "to win" string attributes address
7A3E CD 65 78    10 556 call    Screen_Apply_Color          ; apply color to string area
7A41 13          10 557 inc     de                          ; move DE to "to win" string address
7A42 2E 81       10 558 ld      l, $81                      ; HL points to string screen address
7A44 CD 53 6F    10 559 call    Print_String                ; print "to win"
7A47 DD 21 E3 59 10 560 ld      ix, $59E3                   ; IX points to "RED" string attributes address
7A4B 01 42 03    10 561 ld      bc, 3*256+RED_COLOR+BRIGHT  ; B = string length (loop counter), C = color attributes
7A4E CD 67 78    10 562 call    Screen_Apply_Color_Loop     ; apply color to string area
7A51 11 54 68    10 563 ld      de, STR_RED                 ; DE points to "RED" string address
7A54 21 E3 48    10 564 ld      hl, $48E3                   ; HL points to string screen address
7A57 CD 53 6F    10 565 call    Print_String                ; print "RED"
7A5A             10 567 ; draw RED sample board
7A5A FD 21 3A 67 10 569 ld      iy, SAMPLE_BOARD_RED        ; IY points to sample board (red) screen addresses
7A5E 11 3E 66    10 570 ld      de, HEXAGON_TOKEN           ; DE points to token sprite address
7A61 06 07       10 571 ld      b, 7                        ; number of red+bright tokens (loop counter)
7A63 3E 42       10 572 ld      a, RED_COLOR+BRIGHT         ; set token color
7A65 32 9E 61    10 573 ld      (TOKEN_COLOR), a            ; save token color
7A68 CD 6D 7C    10 574 call    Screen_Hexagons_Loop        ; draw tokens
7A6B 06 02       10 575 ld      b, 2                        ; number of red tokens (loop counter)
7A6D 3E 02       10 576 ld      a, RED_COLOR                ; set token color
7A6F 32 9E 61    10 577 ld      (TOKEN_COLOR), a            ; save token color
7A72 CD 6D 7C    10 578 call    Screen_Hexagons_Loop        ; draw tokens
7A75 06 09       10 579 ld      b, 9                        ; number of cyan tokens (loop counter)
7A77 3E 05       10 580 ld      a, CYAN_COLOR               ; set token color
7A79 32 9E 61    10 581 ld      (TOKEN_COLOR), a            ; save token color
7A7C CD 6D 7C    10 582 call    Screen_Hexagons_Loop        ; draw tokens
7A7F             10 584 ; wait for "Next" option pressed
7A7F DD 21 C1 5A 10 586 ld      ix, $5AC1                   ; IX points to "Back" string attribute address
7A83 01 00 04    10 587 ld      bc, $0400                   ; B = string length (loop counter), C = attributes (black)
7A86 CD 67 78    10 588 call    Screen_Apply_Color_Loop     ; hide "Back" string
7A89 DD 2E DC    10 589 ld      ixl, $DC                    ; IX points to "Next" string attribute address (+1)
7A8C DD 36 FF 78 10 590 ld      (ix-1), WHITE_PAPER+BRIGHT  ; set color of first letter
7A90 01 47 03    10 591 ld      bc, 3*256+WHITE_FLASH0      ; B = string length-1 (loop counter), C = color attributes
7A93 CD 67 78    10 592 call    Screen_Apply_Color_Loop     ; apply color to string area
7A96             10 593 Screen_How2PlayRED_End
7A96 CD BF 6E    10 594 call    Input_Key_Scan              ; wait for a key pressed
7A99 FE 6E       10 595 cp      'n'                         ; is it 'n'?
7A9B 20 F9       10 596 jr      nz, Screen_How2PlayRED_End  ; no, repeat until key pressed = 'n'
7A9D             10 598 Screen_How2Play_CYAN
7A9D 21 0F 58    10 599 ld      hl, $580F                   ; HL points to level number attribute address
7AA0 CB BE       10 600 res     7, (hl)                     ; reset flash attribute
7AA2 26 40       10 601 ld      h, $40                      ; HL points to level number screen address
7AA4 3E 31       10 602 ld      a, '1'                      ; set level number (char)
7AA6 CD 5F 6F    10 603 call    Print_Char                  ; print '1'
7AA9 CD 01 79    10 604 call    Screen_Clear_ThreeRow       ; clear all three-in-a-row marks
7AAC 21 C9 59    10 606 ld      hl, $59E1-24                ; HL points to red text area attributes address (-24)
7AAF CD 82 7C    10 607 call    Screen_Clear_Text           ; clear text area attributes
7AB2 CD 9B 6D    10 608 call    Draw_Board                  ; draw an empty hexagons board
7AB5             10 610 ; text for CYAN
7AB5 DD 21 98 58 10 612 ld      ix, $5898                   ; IX points to "Connect" string attributes address
7AB9 01 07 07    10 613 ld      bc, 7*256+WHITE             ; B = string length (loop counter), C = color attributes
7ABC CD 67 78    10 614 call    Screen_Apply_Color_Loop     ; apply color to string area
7ABF 11 5D 68    10 615 ld      de, STR_HELP1               ; DE points to "Connect" string address
7AC2 21 98 40    10 616 ld      hl, $4098                   ; HL points to string screen address
7AC5 CD 53 6F    10 617 call    Print_String                ; print "Connect"
7AC8 DD 2E B9    10 618 ld      ixl, $B9                    ; IX points to "up and" string attributes address
7ACB CD 65 78    10 619 call    Screen_Apply_Color          ; apply color to string area
7ACE 11 6E 68    10 620 ld      de, STR_HELP2_CYAN          ; DE points to "up and" string address
7AD1 2E B9       10 621 ld      l, $B9                      ; HL points to string screen address
7AD3 CD 53 6F    10 622 call    Print_String                ; print "up and"
7AD6 DD 2E DB    10 623 ld      ixl, $DB                    ; IX points to "down" string attributes address
7AD9 06 04       10 624 ld      b, 4                        ; string length (loop counter)
7ADB CD 67 78    10 625 call    Screen_Apply_Color_Loop     ; apply color to string area
7ADE 11 7B 68    10 626 ld      de, STR_HELP3_CYAN          ; DE points to "down" string address
7AE1 2E DB       10 627 ld      l, $DB                      ; HL points to string screen address
7AE3 CD 53 6F    10 628 call    Print_String                ; print "down"
7AE6 DD 2E F8    10 629 ld      ixl, $F8                    ; IX points to "borders" string attributes address
7AE9 06 07       10 630 ld      b, 7                        ; string length (loop counter)
7AEB CD 67 78    10 631 call    Screen_Apply_Color_Loop     ; apply color to string area
7AEE 13          10 632 inc     de                          ; move DE to "borders" string address
7AEF 2E F8       10 633 ld      l, $F8                      ; HL points to string screen address
7AF1 CD 53 6F    10 634 call    Print_String                ; print "borders"
7AF4 DD 21 19 59 10 635 ld      ix, $5919                   ; IX points to "to win" string attributes address
7AF8 CD 65 78    10 636 call    Screen_Apply_Color          ; apply color to string area
7AFB 13          10 637 inc     de                          ; move DE to "to win" string address
7AFC 21 19 48    10 638 ld      hl, $4819                   ; HL points to string screen address
7AFF CD 53 6F    10 639 call    Print_String                ; print "to win"
7B02 DD 21 7A 58 10 640 ld      ix, $587A                   ; IX points to "CYAN" string attributes address
7B06 01 45 04    10 641 ld      bc, $0445                   ; B = string length (loop counter)
7B09             10 642 ; C = color attributes (cyan+bright)
7B09 CD 67 78    10 643 call    Screen_Apply_Color_Loop     ; apply color to string area
7B0C 11 58 68    10 644 ld      de, STR_CYAN                ; DE points to "CYAN" string address
7B0F 21 7A 40    10 645 ld      hl, $407A                   ; HL points to string screen address
7B12 CD 53 6F    10 646 call    Print_String                ; print "CYAN"
7B15             10 648 ; draw CYAN sample board
7B15 FD 21 5E 67 10 650 ld      iy, SAMPLE_BOARD_CYAN       ; IY points to sample board (cyan) screen addresses
7B19 11 3E 66    10 651 ld      de, HEXAGON_TOKEN           ; DE points to token sprite address
7B1C 06 07       10 652 ld      b, 7                        ; number of cyan+bright tokens (loop counter)
7B1E 3E 45       10 653 ld      a, CYAN_COLOR+BRIGHT        ; set token color
7B20 32 9E 61    10 654 ld      (TOKEN_COLOR), a            ; save token color
7B23 CD 6D 7C    10 655 call    Screen_Hexagons_Loop        ; draw tokens
7B26 06 02       10 656 ld      b, 2                        ; number of cyan tokens (loop counter)
7B28 3E 05       10 657 ld      a, CYAN_COLOR               ; set token color
7B2A 32 9E 61    10 658 ld      (TOKEN_COLOR), a            ; save token color
7B2D CD 6D 7C    10 659 call    Screen_Hexagons_Loop        ; draw tokens
7B30 06 08       10 660 ld      b, 8                        ; number of red tokens (loop counter)
7B32 3E 02       10 661 ld      a, RED_COLOR                ; set token color
7B34 32 9E 61    10 662 ld      (TOKEN_COLOR), a            ; save token color
7B37 CD 6D 7C    10 663 call    Screen_Hexagons_Loop        ; draw tokens
7B3A             10 665 ; wait for "Next" or "Back" options pressed
7B3A DD 21 C2 5A 10 667 ld      ix, $5AC2                   ; IX points to "Back" string attributes address (+1)
7B3E DD 36 FF 78 10 668 ld      (ix-1), WHITE_PAPER+BRIGHT  ; set color of first letter
7B42 01 47 03    10 669 ld      bc, 3*256+WHITE_FLASH0      ; B = string length (-1), C = color attributes
7B45 CD 67 78    10 670 call    Screen_Apply_Color_Loop     ; apply color to string area
7B48             10 671 Screen_How2PlayCYAN_End
7B48 CD BF 6E    10 672 call    Input_Key_Scan              ; wait for a key pressed
7B4B FE 62       10 673 cp      'b'                         ; is it 'b'?
7B4D CA F1 79    10 674 jp      z, Screen_How2Play_RED      ; yes, show RED page
7B50 FE 6E       10 675 cp      'n'                         ; is it 'n'?
7B52 20 F4       10 676 jr      nz, Screen_How2PlayCYAN_End ; no, repeat until key pressed = 'n' or 'b'
7B54             10 678 Screen_How2Play_LevelUp
7B54 21 5E 58    10 679 ld      hl, $5876-24                ; HL points to cyan text area attributes address (-24)
7B57 CD 82 7C    10 680 call    Screen_Clear_Text           ; clear text area attributes
7B5A             10 682 ; text for Level Up
7B5A DD 21 21 5A 10 684 ld      ix, $5A21                   ; IX points to "Win three" string attributes address
7B5E 01 07 09    10 685 ld      bc, 9*256+WHITE             ; B = string length (loop counter), C = color attributes
7B61 CD 67 78    10 686 call    Screen_Apply_Color_Loop     ; apply color to string area
7B64 11 8F 68    10 687 ld      de, STR_HELP                ; DE points to "Win three" string address
7B67 21 21 50    10 688 ld      hl, $5021                   ; HL points to string screen address
7B6A CD 53 6F    10 689 call    Print_String                ; print "Win three"
7B6D DD 2E 41    10 690 ld      ixl, $41                    ; IX points to "times in" string attributes address
7B70 06 08       10 691 ld      b, 8                        ; string length (loop counter)
7B72 CD 67 78    10 692 call    Screen_Apply_Color_Loop     ; apply color to string area
7B75 13          10 693 inc     de                          ; move DE to "times in" string address
7B76 2E 41       10 694 ld      l, $41                      ; HL points to string screen address
7B78 CD 53 6F    10 695 call    Print_String                ; print "times in"
7B7B DD 2E 61    10 696 ld      ixl, $61                    ; IX points to "a row to" string attributes address
7B7E 06 08       10 697 ld      b, 8                        ; string length (loop counter)
7B80 CD 67 78    10 698 call    Screen_Apply_Color_Loop     ; apply color to string area
7B83 13          10 699 inc     de                          ; move DE to "a row to" string address
7B84 2E 61       10 700 ld      l, $61                      ; HL points to string screen address
7B86 CD 53 6F    10 701 call    Print_String                ; print "a row to"
7B89 DD 2E 81    10 702 ld      ixl, $81                    ; IX points to "level up" string attributes address
7B8C 06 08       10 703 ld      b, 8                        ; string length (loop counter)
7B8E CD 67 78    10 704 call    Screen_Apply_Color_Loop     ; apply color to string area
7B91 13          10 705 inc     de                          ; move DE to "level up" string address
7B92 2E 81       10 706 ld      l, $81                      ; HL points to string screen address
7B94 CD 53 6F    10 707 call    Print_String                ; print "level up"
7B97             10 709 ; reset bright of cyan tokens
7B97 FD 21 5E 67 10 711 ld      iy, SAMPLE_BOARD_CYAN       ; IY points to sample board (cyan) screen addresses
7B9B 11 3E 66    10 712 ld      de, HEXAGON_TOKEN           ; DE points to token sprite address
7B9E 06 07       10 713 ld      b, 7                        ; number of cyan+bright tokens (loop counter)
7BA0 3E 05       10 714 ld      a, CYAN_COLOR               ; set new token color
7BA2 32 9E 61    10 715 ld      (TOKEN_COLOR), a            ; save color
7BA5 CD 6D 7C    10 716 call    Screen_Hexagons_Loop        ; draw tokens
7BA8             10 718 ; set flash attribute of level number and three-in-a-row marks
7BA8 21 0F 58    10 720 ld      hl, $580F                   ; HL points to level number attribute address
7BAB CB FE       10 721 set     7, (hl)                     ; set flash attribute
7BAD 21 0F 40    10 722 ld      hl, $400F                   ; HL points to level number screen address
7BB0 3E 32       10 723 ld      a, '2'                      ; set new level
7BB2 CD 5F 6F    10 724 call    Print_Char                  ; print new level
7BB5 DD 21 F2 5A 10 725 ld      ix, $5AF2                   ; IX points to three-in-a-row attribute address
7BB9 DD 36 00 B8 10 726 ld      (ix+0), WHITE_PAPER+FLASH   ; set flash attributes
7BBD DD 36 01 B8 10 727 ld      (ix+1), WHITE_PAPER+FLASH
7BC1 DD 36 02 B8 10 728 ld      (ix+2), WHITE_PAPER+FLASH
7BC5             10 730 ; wait for "Next" or "Back" options pressed
7BC5             10 732 Screen_How2Play_End
7BC5 CD BF 6E    10 733 call    Input_Key_Scan              ; wait for a key pressed
7BC8 FE 62       10 734 cp      'b'                         ; is it 'b'?
7BCA CA 9D 7A    10 735 jp      z, Screen_How2Play_CYAN     ; yes, show CYAN page
7BCD FE 6E       10 736 cp      'n'                         ; is it 'n'?
7BCF 20 F4       10 737 jr      nz, Screen_How2Play_End     ; no, repeat until key pressed = 'b' or 'n'
7BD1 21 9D 61    10 739 ld      hl, GAME_LEVEL              ; HL points to game level address
7BD4 35          10 740 dec     (hl)                        ; decrement game level (GAME_LEVEL = 0)
7BD5 C3 6E 79    10 741 jp      Screen_Menu                 ; return to main menu
7BD8             10 743 ; ----------------------------------------------------------------------------------------------------------------------
7BD8             10 744 ; Show credits
7BD8             10 745 ; ----------------------------------------------------------------------------------------------------------------------
7BD8             10 746 Screen_Menu_Credits
7BD8 DD 21 84 59 10 747 ld      ix, $5984                   ; IX points to "Design..." string attributes address
7BDC 01 47 19    10 748 ld      bc, 25*256+WHITE_FLASH0     ; B = string length (loop counter), C = color attributes
7BDF CD 67 78    10 749 call    Screen_Apply_Color_Loop     ; apply color to string area
7BE2 11 A3 67    10 750 ld      de, STR_CREDITS             ; DE points to "Design..." string address
7BE5 21 84 48    10 751 ld      hl, $4884                   ; HL points to string screen address
7BE8 CD 53 6F    10 752 call    Print_String                ; print "Design..."
7BEB DD 2E C4    10 753 ld      ixl, $C4                    ; IX points to "Code..." string attributes address
7BEE 06 19       10 754 ld      b, 25                       ; string length (loop counter)
7BF0 CD 67 78    10 755 call    Screen_Apply_Color_Loop     ; apply color to string area
7BF3 13          10 756 inc     de                          ; move DE to to "Code..." string address
7BF4 2E C4       10 757 ld      l, $C4                      ; HL points to string screen address
7BF6 CD 53 6F    10 758 call    Print_String                ; print "Code..."
7BF9 DD 2E E4    10 759 ld      ixl, $E4                    ; IX points to "Einar Saukas" string attributes address
7BFC 06 18       10 760 ld      b, 24                       ; string length (loop counter)
7BFE CD 67 78    10 761 call    Screen_Apply_Color_Loop     ; apply color to string area
7C01 13          10 762 inc     de                          ; move DE to "Einar Saukas" string address
7C02 2E E4       10 763 ld      l, $E4                      ; HL points to string screen address
7C04 CD 53 6F    10 764 call    Print_String                ; print "Einar Saukas"
7C07 DD 21 24 5A 10 765 ld      ix, $5A24                   ; IX points to "Font..." string attributes address
7C0B 06 18       10 766 ld      b, 24                       ; string length (loop counter)
7C0D CD 67 78    10 767 call    Screen_Apply_Color_Loop     ; apply color to string area
7C10 13          10 768 inc     de                          ; move DE to "Font..." string address
7C11 21 24 50    10 769 ld      hl, $5024                   ; HL points to string screen address
7C14 CD 53 6F    10 770 call    Print_String                ; print "Font..."
7C17 DD 2E 64    10 771 ld      ixl, $64                    ; IX points to "Graphics..." string attributes address
7C1A 06 18       10 772 ld      b, 24                       ; string length (loop counter)
7C1C CD 67 78    10 773 call    Screen_Apply_Color_Loop     ; apply color to string area
7C1F 13          10 774 inc     de                          ; move DE to "Graphics..." string address
7C20 2E 64       10 775 ld      l, $64                      ; HL points to string screen address
7C22 CD 53 6F    10 776 call    Print_String                ; print "Graphics..."
7C25 DD 2E 84    10 777 ld      ixl, $84                    ; IX points to "Antonio Luque" string attributes address
7C28 06 19       10 778 ld      b, 25                       ; string length (loop counter)
7C2A CD 67 78    10 779 call    Screen_Apply_Color_Loop     ; apply color to string area
7C2D 13          10 780 inc     de                          ; move DE to "Antonio Luque" string address
7C2E 2E 84       10 781 ld      l, $84                      ; HL points to string screen address
7C30 CD 53 6F    10 782 call    Print_String                ; print "Antonio Luque"
7C33 DD 2E E9    10 783 ld      ixl, $E9                    ; IX points to "Press any key" string attributes address
7C36 01 38 0D    10 784 ld      bc, 13*256+WHITE_PAPER      ; B = string length (loop counter), C = color attributes
7C39 CD 67 78    10 785 call    Screen_Apply_Color_Loop     ; apply color to string area
7C3C 13          10 786 inc     de                          ; move DE to "Press any key" string address
7C3D 2E E9       10 787 ld      l, $E9                      ; HL points to string screen address
7C3F CD 53 6F    10 788 call    Print_String                ; print "Press any key"
7C42 CD BF 6E    10 789 call    Input_Key_Scan              ; wait for a key pressed
7C45 C3 74 79    10 790 jp      Screen_Menu_Strings         ; return to main menu
7C48             10 792 ; ----------------------------------------------------------------------------------------------------------------------
7C48             10 793 ; Screen_Menu_Hexagons: draw menu hexagons on screen
7C48             10 794 ;
7C48             10 795 ; Input:    -
7C48             10 796 ;
7C48             10 797 ; Output:   -
7C48             10 798 ;
7C48             10 799 ; Uses:     TOKEN_COLOR (current token color)
7C48             10 800 ;
7C48             10 801 ; Destroys: A, BC, DE, HL, IX, IY
7C48             10 802 ; ----------------------------------------------------------------------------------------------------------------------
7C48             10 803 Screen_Hexagons:
7C48 FD 21 EA 66 10 804 ld      iy, MENU_HEXAGONS           ; IY points to menu hexagons screen addresses
7C4C 3E 07       10 805 ld      a, WHITE                    ; set hexagon color
7C4E 32 9E 61    10 806 ld      (TOKEN_COLOR), a            ; save hexagon color
7C51 11 7E 65    10 807 ld      de, HEXAGON_EMPTY           ; DE points to empty hexagon sprite address
7C54 06 1C       10 808 ld      b, 28                       ; number of empty hexagons (loop counter)
7C56 CD 6D 7C    10 809 call    Screen_Hexagons_Loop        ; draw empty hexagons
7C59 3E 05       10 810 ld      a, CYAN_COLOR               ; set token color
7C5B 32 9E 61    10 811 ld      (TOKEN_COLOR), a            ; save hexagon color
7C5E 11 3E 66    10 812 ld      de, HEXAGON_TOKEN           ; DE points to token sprite address
7C61 06 06       10 813 ld      b, 6                        ; number of cyan tokens (loop counter)
7C63 CD 6D 7C    10 814 call    Screen_Hexagons_Loop        ; draw cyan tokens
7C66 3E 02       10 815 ld      a, RED_COLOR                ; set token color
7C68 32 9E 61    10 816 ld      (TOKEN_COLOR), a            ; save hexagon color
7C6B 06 06       10 817 ld      b, 6                        ; number of red tokens (loop counter)
7C6D             10 818 Screen_Hexagons_Loop:
7C6D FD 6E 00    10 819 ld      l, (iy+0)                   ; HL points to hexagon/token screen address
7C70 FD 66 01    10 820 ld      h, (iy+1)
7C73 CD 09 6E    10 821 call    Draw_Hexagon_Color          ; apply color to hexagon/token area
7C76 D5          10 822 push    de                          ; store hexagon/token sprite address
7C77 CD DB 6D    10 823 call    Draw_Sprite_Hexagon         ; draw hexagon sprite
7C7A D1          10 824 pop     de                          ; restore hexagon/token sprite address
7C7B FD 23       10 825 inc     iy                          ; move IY to next hexagon/token screen address
7C7D FD 23       10 826 inc     iy
7C7F 10 EC       10 827 djnz    Screen_Hexagons_Loop        ; repeat for each hexagon/token
7C81 C9          10 828 ret
7C82             10 830 ; ----------------------------------------------------------------------------------------------------------------------
7C82             10 831 ; Screen_Clear_Text: clean a text attributes area
7C82             10 832 ;
7C82             10 833 ; Input:    HL = text area attributes address
7C82             10 834 ;
7C82             10 835 ; Output:   -
7C82             10 836 ;
7C82             10 837 ; Destroys: BC, DE, HL
7C82             10 838 ; ----------------------------------------------------------------------------------------------------------------------
7C82             10 839 Screen_Clear_Text:
7C82 01 30 00    10 840 ld      bc, 8*6                     ; length of attributes area: width x height (in bytes)
7C85             10 841 Screen_ClearText_Loop
7C85 11 18 00    10 842 ld      de, 24                      ; displacement for each text row
7C88 19          10 843 add     hl, de                      ; add displacement to text area attributes address
7C89 54          10 844 ld      d, h                        ; DE points to text area attributes address
7C8A 5D          10 845 ld      e, l
7C8B 36 00       10 846 ld      (hl), 0                     ; set attributes color (black) for 1st byte of current row
7C8D 13          10 847 inc     de                          ; move DE to next byte attribute address
7C8E ED A0       10 848 ldi                                 ; set attributes color for the rest of bytes of current row
7C90 ED A0       10 849 ldi
7C92 ED A0       10 850 ldi
7C94 ED A0       10 851 ldi
7C96 ED A0       10 852 ldi
7C98 ED A0       10 853 ldi
7C9A ED A0       10 854 ldi
7C9C ED A0       10 855 ldi
7C9E EA 85 7C    10 856 jp      pe, Screen_ClearText_Loop   ; repeat for each row
7CA1 C9          10 857 ret

; File #0: C:\Users\Antonio Luque\source\Repos\Hex\Z80CodeFiles\Hex2.z80asm

7CA2             0 19 ; ----------------------------------------------------------------------------------------------------------------------
7CA2             0 20 ; Credits and acknowledgements:
7CA2             0 21 ;
7CA2             0 22 ; - Einar Saukas and his amazing BRAINIAC: https://spectrumcomputing.co.uk/entry/31171/ZX-Spectrum/BRAINIAC,
7CA2             0 23 ;   PATHFINDER adaptation: https://spectrumcomputing.co.uk/entry/28178/ZX-Spectrum/PATHFINDER, loading screen,
7CA2             0 24 ;   "King+" font and TOKEN graphics.
7CA2             0 25 ; - Greg Surma article: https://gsurma.medium.com/hex-creating-intelligent-opponents-with-minimax-driven-ai-part-1-%CE%B
7CA2             0 26 ;   1-%CE%B2-pruning-cc1df850e5bd
7CA2             0 27 ; - Jack van Rijswijck's thesis: https://webdocs.cs.ualberta.ca/~hayward/theses/jackmsc.pdf
7CA2             0 28 ; - ChibiAkumas lessons: https://www.chibiakumas.com/z80/simplesamples.php#LessonS2
7CA2             0 29 ; - Santiago Romero assembler course: https://wiki.speccy.org/cursos/ensamblador/indice
7CA2             0 30 ;
7CA2             0 31 ; - Special thanks to my wife Sonia.
7CA2             0 32 ; ----------------------------------------------------------------------------------------------------------------------
