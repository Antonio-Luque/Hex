
; File #0: C:\Users\Antonio\source\repos\Hex\Z80CodeFiles\Hex2.z80asm

8000             0 1 ; ----------------------------------------------------------------------------------------------------------------------
8000             0 2 ; Hex2.z80asm
8000             0 3 ; Coded by Antonio Luque
8000             0 4 ;
8000             0 5 ; Build file
8000             0 6 ; ----------------------------------------------------------------------------------------------------------------------

; File #1: C:\Users\Antonio\source\repos\Hex\Z80CodeFiles\Data.z80asm

8000             1 1 ; ----------------------------------------------------------------------------------------------------------------------
8000             1 2 ; Data.z80asm
8000             1 3 ; Coded by Antonio Luque
8000             1 4 ;
8000             1 5 ; Definition of data, variables and tables
8000             1 6 ; ----------------------------------------------------------------------------------------------------------------------
8000             1 8 STACK                   ORG     $6000
6000             1 10 ; ----------------------------------------------------------------------------------------------------------------------
6000             1 11 ; Circular queue
6000             1 12 ; ----------------------------------------------------------------------------------------------------------------------
6000 00 00 00 00 1 13 CYAN_QUEUE_AREA         DEFS    256
6004 00 00 00 00 1 13 
6008 00 00 00 00 1 13 
600C 00 00 00 00 1 13 
6010 00 00 00 00 1 13 
6014 00 00 00 00 1 13 
6018 00 00 00 00 1 13 
601C 00 00 00 00 1 13 
6020 00 00 00 00 1 13 
6024 00 00 00 00 1 13 
6028 00 00 00 00 1 13 
602C 00 00 00 00 1 13 
6030 00 00 00 00 1 13 
6034 00 00 00 00 1 13 
6038 00 00 00 00 1 13 
603C 00 00 00 00 1 13 
6040 00 00 00 00 1 13 
6044 00 00 00 00 1 13 
6048 00 00 00 00 1 13 
604C 00 00 00 00 1 13 
6050 00 00 00 00 1 13 
6054 00 00 00 00 1 13 
6058 00 00 00 00 1 13 
605C 00 00 00 00 1 13 
6060 00 00 00 00 1 13 
6064 00 00 00 00 1 13 
6068 00 00 00 00 1 13 
606C 00 00 00 00 1 13 
6070 00 00 00 00 1 13 
6074 00 00 00 00 1 13 
6078 00 00 00 00 1 13 
607C 00 00 00 00 1 13 
6080 00 00 00 00 1 13 
6084 00 00 00 00 1 13 
6088 00 00 00 00 1 13 
608C 00 00 00 00 1 13 
6090 00 00 00 00 1 13 
6094 00 00 00 00 1 13 
6098 00 00 00 00 1 13 
609C 00 00 00 00 1 13 
60A0 00 00 00 00 1 13 
60A4 00 00 00 00 1 13 
60A8 00 00 00 00 1 13 
60AC 00 00 00 00 1 13 
60B0 00 00 00 00 1 13 
60B4 00 00 00 00 1 13 
60B8 00 00 00 00 1 13 
60BC 00 00 00 00 1 13 
60C0 00 00 00 00 1 13 
60C4 00 00 00 00 1 13 
60C8 00 00 00 00 1 13 
60CC 00 00 00 00 1 13 
60D0 00 00 00 00 1 13 
60D4 00 00 00 00 1 13 
60D8 00 00 00 00 1 13 
60DC 00 00 00 00 1 13 
60E0 00 00 00 00 1 13 
60E4 00 00 00 00 1 13 
60E8 00 00 00 00 1 13 
60EC 00 00 00 00 1 13 
60F0 00 00 00 00 1 13 
60F4 00 00 00 00 1 13 
60F8 00 00 00 00 1 13 
60FC 00 00 00 00 1 13 
6100             1 15 ; ----------------------------------------------------------------------------------------------------------------------
6100             1 16 ; CYAN BOARDS: these boards must be located immediately after cyan queue area!
6100             1 17 ; 
6100             1 18 ; These boards hold a determined position of the board from cyan perspective. They are used to calculate CYAN "two-
6100             1 19 ; distance" (Jack van Rijswijck) from UP to DOWN edges and CYAN two-distance from DOWN to UP edges. The cyan UP-DOWN
6100             1 20 ; board is also used to store CYAN potentials and TOTAL potentials.
6100             1 21 ; 
6100             1 22 ; The values of $7F form the border of the board. The UP and DOWN edges are identified with 7th bit set and the lowest 3
6100             1 23 ; bits are the edge number. The rest of bytes indicates "two-distance" from goal (stored in lowest 6 bits), and a flag
6100             1 24 ; that indicates a position occupied by a friendly token (stored in 6th bit).
6100             1 25 ; ----------------------------------------------------------------------------------------------------------------------
6100             1 26 CYAN_BOARD_UP_DOWN:
6100 7F 7F 7F 7F 1 27 DEFB      $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F
6104 7F 7F 7F 7F 1 27 
6108 7F 00 00 00 1 28 DEFB    $7F, $00, $00, $00, $00, $00, $00, $00, $7F
610C 00 00 00 00 1 28 
6110 7F          1 28 
6111 7F 00 00 00 1 29 DEFB       $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6115 00 00 00 00 1 29 
6119 7F          1 29 
611A 7F 00 00 00 1 30 DEFB          $7F, $00, $00, $00, $00, $00, $00, $00, $7F
611E 00 00 00 00 1 30 
6122 7F          1 30 
6123 7F 00 00 00 1 31 DEFB             $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6127 00 00 00 00 1 31 
612B 7F          1 31 
612C 7F 00 00 00 1 32 DEFB                $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6130 00 00 00 00 1 32 
6134 7F          1 32 
6135 7F 00 00 00 1 33 DEFB                   $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6139 00 00 00 00 1 33 
613D 7F          1 33 
613E 7F 00 00 00 1 34 DEFB                      $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6142 00 00 00 00 1 34 
6146 7F          1 34 
6147 7F 80 81 82 1 35 DEFB                         $7F, $80, $81, $82, $83, $84, $85, $86, $7F
614B 83 84 85 86 1 35 
614F 7F          1 35 
6150             1 36 CYAN_BOARD_DOWN_UP:
6150 7F 00 00 00 1 37 DEFB    $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6154 00 00 00 00 1 37 
6158 7F          1 37 
6159 7F 00 00 00 1 38 DEFB       $7F, $00, $00, $00, $00, $00, $00, $00, $7F
615D 00 00 00 00 1 38 
6161 7F          1 38 
6162 7F 00 00 00 1 39 DEFB          $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6166 00 00 00 00 1 39 
616A 7F          1 39 
616B 7F 00 00 00 1 40 DEFB             $7F, $00, $00, $00, $00, $00, $00, $00, $7F
616F 00 00 00 00 1 40 
6173 7F          1 40 
6174 7F 00 00 00 1 41 DEFB                $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6178 00 00 00 00 1 41 
617C 7F          1 41 
617D 7F 00 00 00 1 42 DEFB                   $7F, $00, $00, $00, $00, $00, $00, $00, $7F
6181 00 00 00 00 1 42 
6185 7F          1 42 
6186 7F 00 00 00 1 43 DEFB                      $7F, $00, $00, $00, $00, $00, $00, $00, $7F
618A 00 00 00 00 1 43 
618E 7F          1 43 
618F 7F 7F 7F 7F 1 44 DEFB                         $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F
6193 7F 7F 7F 7F 1 44 
6197             1 46 ; ----------------------------------------------------------------------------------------------------------------------
6197             1 47 ; Variables
6197             1 48 ; ----------------------------------------------------------------------------------------------------------------------
6197             1 49 POTENTIALS:                                                 ; (must be in a 256-byte boundary)
6197 00          1 50 DEFB    0                           ; board potential
6198 00          1 51 DEFB    0                           ; attack mobility
6199 00          1 52 AI_PLAYER               DEFB    0                           ; speccy side (FRIEND or ENEMY)
619A 00          1 53 AI_DEPTH                DEFB    0                           ; recursion depth level (1-4)
619B 00          1 54 MOVE_NUMBER             DEFB    0                           ; current move number
619C 00          1 55 LEVEL_COLOR             DEFB    0                           ; current level color for frame border
619D 00          1 56 GAME_LEVEL              DEFB    0                           ; current game level (1-4)
619E 00          1 57 TOKEN_COLOR             DEFB    0                           ; current token color
619F 05          1 58 PLAYER_COLOR            DEFB    5                           ; current player color
61A0             1 60 ; ----------------------------------------------------------------------------------------------------------------------
61A0             1 61 ; Screen addresses look-up table for board hexagons
61A0             1 62 ;
61A0             1 63 ; The first column contains the screen addresses high byte
61A0             1 64 ; The rest of bytes are the screen addresses low byte
61A0             1 65 ; ----------------------------------------------------------------------------------------------------------------------
61A0             1 66 BOARD_MAP:
61A0 40 A6 A8 AA 1 67 DEFB    $40, $A6, $A8, $AA, $AC, $AE, $B0, $B2
61A4 AC AE B0 B2 1 67 
61A8 40 E7 E9 EB 1 68 DEFB    $40, $E7, $E9, $EB, $ED, $EF, $F1, $F3
61AC ED EF F1 F3 1 68 
61B0 48 28 2A 2C 1 69 DEFB    $48, $28, $2A, $2C, $2E, $30, $32, $34
61B4 2E 30 32 34 1 69 
61B8 48 69 6B 6D 1 70 DEFB    $48, $69, $6B, $6D, $6F, $71, $73, $75
61BC 6F 71 73 75 1 70 
61C0 48 AA AC AE 1 71 DEFB    $48, $AA, $AC, $AE, $B0, $B2, $B4, $B6
61C4 B0 B2 B4 B6 1 71 
61C8 48 EB ED EF 1 72 DEFB    $48, $EB, $ED, $EF, $F1, $F3, $F5, $F7
61CC F1 F3 F5 F7 1 72 
61D0 50 2C 2E 30 1 73 DEFB    $50, $2C, $2E, $30, $32, $34, $36, $38
61D4 32 34 36 38 1 73 
61D8             1 75 ; ----------------------------------------------------------------------------------------------------------------------
61D8             1 76 ; Keyboard array map
61D8             1 77 ; ----------------------------------------------------------------------------------------------------------------------
61D8 20 7A 78 63 1 78 KEY_MAP                 DEFM    " zxcvasdfgqwert1234509876poiuy\x0Dlkjh  mnb"
61DC 76 61 73 64 1 78 
61E0 66 67 71 77 1 78 
61E4 65 72 74 31 1 78 
61E8 32 33 34 35 1 78 
61EC 30 39 38 37 1 78 
61F0 36 70 6F 69 1 78 
61F4 75 79 0D 6C 1 78 
61F8 6B 6A 68 20 1 78 
61FC 20 6D 6E 62 1 78 
6200             1 80 ;ORG     $6200
6200             1 81 ; ----------------------------------------------------------------------------------------------------------------------
6200             1 82 ; Vector table of routines (must be aligned at the next page of cyan board arrays)
6200             1 83 ; ----------------------------------------------------------------------------------------------------------------------
6200             1 84 CYAN_VECTOR_TABLE:
6200 73 73       1 85 DEFW    PathFinder_CYAN_Edge_0
6202 93 73       1 86 DEFW    PathFinder_CYAN_Edge_1
6204 AE 73       1 87 DEFW    PathFinder_CYAN_Edge_2
6206 CC 73       1 88 DEFW    PathFinder_CYAN_Edge_3
6208 EB 73       1 89 DEFW    PathFinder_CYAN_Edge_4
620A 09 74       1 90 DEFW    PathFinder_CYAN_Edge_5
620C 24 74       1 91 DEFW    PathFinder_CYAN_Edge_6
620E             1 93 ; ----------------------------------------------------------------------------------------------------------------------
620E             1 94 ; Variables and strings
620E             1 95 ; ----------------------------------------------------------------------------------------------------------------------
620E 00          1 96 THREE_ROW               DEFB    0                           ; three-in-a-row counter
620F 0F 0E 0C 0B 1 97 ROW_COLOR_MAP           DEFB    15, 14, 12, 11, 13, 10      ; level-color map for frame border
6213 0D 0A       1 97 
6215 00 2D 30 00 1 98 STR_MOVE                DEFB    0, '-', '0', 0, '\0'        ; formatted move string
6219 00          1 98 
621A 53 70 65 63 1 99 STR_SPECCY              DEFM    "Speccy\0"
621E 63 79 00    1 99 
6221 50 6C 61 79 1 100 STR_PLAYER              DEFM    "Player\0"
6225 65 72 00    1 100 
6228 4C 65 76 65 1 101 STR_LEVELTEXT           DEFM    "Level\0"
622C 6C 00       1 101 
622E 46 49 4C 4C 1 102 STR_FILLED              DEFM    "FILLED\0"
6232 45 44 00    1 102 
6235 57 41 49 54 1 103 STR_WAIT                DEFM    "WAIT\0"
6239 00          1 103 
623A 20 57 49 4E 1 104 STR_WINNER              DEFM    " WINS \0"
623E 53 20 00    1 104 
6241 20 20 20 20 1 105 STR_EMPTY4              DEFM    "    \0"
6245 00          1 105 
6246 20 20 20 20 1 106 STR_EMPTY6              DEFM    "      \0"
624A 20 20 00    1 106 
624D             1 108 ; ----------------------------------------------------------------------------------------------------------------------
624D             1 109 ; Conversion table: from position to XY board indexes
624D             1 110 ; ----------------------------------------------------------------------------------------------------------------------
624D             1 111 BOARD_COORDINATES:
624D 00 00 00 00 1 112 DEFB    $00, $00, $00, $00, $00, $00, $00, $00
6251 00 00 00 00 1 112 
6255 00 09 0A 0B 1 113 DEFB    $00, $09, $0A, $0B, $0C, $0D, $0E, $0F
6259 0C 0D 0E 0F 1 113 
625D 00 12 13 14 1 114 DEFB    $00, $12, $13, $14, $15, $16, $17, $18
6261 15 16 17 18 1 114 
6265 00 1B 1C 1D 1 115 DEFB    $00, $1B, $1C, $1D, $1E, $1F, $20, $21
6269 1E 1F 20 21 1 115 
626D 00 24 25 26 1 116 DEFB    $00, $24, $25, $26, $27, $28, $29, $2A
6271 27 28 29 2A 1 116 
6275 00 2D 2E 2F 1 117 DEFB    $00, $2D, $2E, $2F, $30, $31, $32, $33
6279 30 31 32 33 1 117 
627D 00 36 37 38 1 118 DEFB    $00, $36, $37, $38, $39, $3A, $3B, $3C
6281 39 3A 3B 3C 1 118 
6285 00 3F 40 41 1 119 DEFB    $00, $3F, $40, $41, $42, $43, $44, $45
6289 42 43 44 45 1 119 
628D             1 121 ; ----------------------------------------------------------------------------------------------------------------------
628D             1 122 ; Graphics map indexes for the frame tiles
628D             1 123 ; ----------------------------------------------------------------------------------------------------------------------
628D             1 124 FRAME_MAP:
628D 00 01 01 01 1 125 DEFB      0,   1,   1,   1,   1,   1,   2,   3
6291 01 01 02 03 1 125 
6295 04 FF FF FF 1 126 DEFB      4,  -1,  -1,  -1,  -1,  -1,  -1,  -1
6299 FF FF FF FF 1 126 
629D 05 06 07 01 1 127 DEFB      5,   6,   7,   1,   1,   1,   1,   1
62A1 01 01 01 01 1 127 
62A5 01 01 01 01 1 128 DEFB      1,   1,   1,   1,   1,   1,   1,   8
62A9 01 01 01 08 1 128 
62AD 09 01 01 01 1 129 DEFB      9,   1,   1,   1,   1,   1,   1,   1
62B1 01 01 01 01 1 129 
62B5 01 01 01 01 1 130 DEFB      1,   1,   1,   1,   1,   1,   1,   1
62B9 01 01 01 01 1 130 
62BD 0A 06 0D 0D 1 131 DEFB     10,   6,  13,  13,  13,   3,  11,   1
62C1 0D 03 0B 01 1 131 
62C5 01 01 01 01 1 132 DEFB      1,   1,   1,   1,   1,   1,   1,  12
62C9 01 01 01 0C 1 132 
62CD             1 134 ; ----------------------------------------------------------------------------------------------------------------------
62CD             1 135 ; Definition of a small "Opening Book" for speccy first move
62CD             1 136 ; ----------------------------------------------------------------------------------------------------------------------
62CD             1 137 OPENINGS:
62CD 0F 14 16 17 1 138 DEFB    $0F, $14, $16, $17, $18, $1C, $1D
62D1 18 1C 1D    1 138 
62D4 1E 1F 20 24 1 139 DEFB    $1E, $1F, $20, $24, $25, $26, $27
62D8 25 26 27    1 139 
62DB 28 29 2A 2E 1 140 DEFB    $28, $29, $2A, $2E, $2F, $30, $31
62DF 2F 30 31    1 140 
62E2 32 36 37 38 1 141 DEFB    $32, $36, $37, $38, $3A, $3F
62E6 3A 3F       1 141 
62E8             1 143 ; ----------------------------------------------------------------------------------------------------------------------
62E8             1 144 ; Timer variables
62E8             1 145 ; ----------------------------------------------------------------------------------------------------------------------
62E8 00          1 146 TIMER_FLAG              DEFB    0                           ; 0 = timer stopped, 1 = cyan timer on, 2 = red timer on
62E9             1 147 ; for each timer:
62E9             1 148 ;   1st byte = interrupt counter (incremented each 1/50 seconds)
62E9             1 149 ;   2nd byte = seconds counter
62E9             1 150 ;   3th byte = minutes counter
62E9 32 00 00    1 151 CYAN_TIMER              DEFB    50, 0, 0
62EC 32 00 00    1 152 RED_TIMER               DEFB    50, 0, 0
62EF             1 154 ; ----------------------------------------------------------------------------------------------------------------------
62EF             1 155 ; Screen addresses look-up array for board numbers
62EF             1 156 ; ----------------------------------------------------------------------------------------------------------------------
62EF             1 157 NUMBER_SCREEN:
62EF A5 43 E6 43 1 158 DEFW    $43A5, $43E6, $4B27, $4B68, $4BA9, $4BEA, $532B
62F3 27 4B 68 4B 1 158 
62F7 A9 4B EA 4B 1 158 
62FB 2B 53       1 158 
62FD FF FF FF    1 160 FILLER_1                DEFB    $FF, $FF, $FF               ; filler to align next block (not used)
6300             1 162 ;ORG     $6300
6300             1 163 ; ----------------------------------------------------------------------------------------------------------------------
6300             1 164 ; Circular queue
6300             1 165 ; ----------------------------------------------------------------------------------------------------------------------
6300 00 00 00 00 1 166 RED_QUEUE_AREA          DEFS    256                         ; 256-aligned block reserved for circular queue
6304 00 00 00 00 1 166 
6308 00 00 00 00 1 166 
630C 00 00 00 00 1 166 
6310 00 00 00 00 1 166 
6314 00 00 00 00 1 166 
6318 00 00 00 00 1 166 
631C 00 00 00 00 1 166 
6320 00 00 00 00 1 166 
6324 00 00 00 00 1 166 
6328 00 00 00 00 1 166 
632C 00 00 00 00 1 166 
6330 00 00 00 00 1 166 
6334 00 00 00 00 1 166 
6338 00 00 00 00 1 166 
633C 00 00 00 00 1 166 
6340 00 00 00 00 1 166 
6344 00 00 00 00 1 166 
6348 00 00 00 00 1 166 
634C 00 00 00 00 1 166 
6350 00 00 00 00 1 166 
6354 00 00 00 00 1 166 
6358 00 00 00 00 1 166 
635C 00 00 00 00 1 166 
6360 00 00 00 00 1 166 
6364 00 00 00 00 1 166 
6368 00 00 00 00 1 166 
636C 00 00 00 00 1 166 
6370 00 00 00 00 1 166 
6374 00 00 00 00 1 166 
6378 00 00 00 00 1 166 
637C 00 00 00 00 1 166 
6380 00 00 00 00 1 166 
6384 00 00 00 00 1 166 
6388 00 00 00 00 1 166 
638C 00 00 00 00 1 166 
6390 00 00 00 00 1 166 
6394 00 00 00 00 1 166 
6398 00 00 00 00 1 166 
639C 00 00 00 00 1 166 
63A0 00 00 00 00 1 166 
63A4 00 00 00 00 1 166 
63A8 00 00 00 00 1 166 
63AC 00 00 00 00 1 166 
63B0 00 00 00 00 1 166 
63B4 00 00 00 00 1 166 
63B8 00 00 00 00 1 166 
63BC 00 00 00 00 1 166 
63C0 00 00 00 00 1 166 
63C4 00 00 00 00 1 166 
63C8 00 00 00 00 1 166 
63CC 00 00 00 00 1 166 
63D0 00 00 00 00 1 166 
63D4 00 00 00 00 1 166 
63D8 00 00 00 00 1 166 
63DC 00 00 00 00 1 166 
63E0 00 00 00 00 1 166 
63E4 00 00 00 00 1 166 
63E8 00 00 00 00 1 166 
63EC 00 00 00 00 1 166 
63F0 00 00 00 00 1 166 
63F4 00 00 00 00 1 166 
63F8 00 00 00 00 1 166 
63FC 00 00 00 00 1 166 
6400             1 168 ; ----------------------------------------------------------------------------------------------------------------------
6400             1 169 ; RED BOARDS: these boards must be located immediately after red queue area!
6400             1 170 ; 
6400             1 171 ; These boards hold a determined position of the board from red perspective. They are used to calculate RED "two-
6400             1 172 ; distance" (Jack van Rijswijck) from LEFT to RIGHT edges and RED two-distance from RIGHT to LEFT edges. The red
6400             1 173 ; LEFT-RIGHT board is also used to store RED potentials.
6400             1 174 ; 
6400             1 175 ; The values of $7F form the border of the board. The LEFT-RIGHT edges are identified with Bit 7 set and the lowest 3
6400             1 176 ; bits are the edge number. The rest of bytes indicates "two-distance" from goal (stored in lowest 6 bits), and a flag
6400             1 177 ; that indicates a position occupied by a friendly token (stored in 6th bit).
6400             1 178 ; ----------------------------------------------------------------------------------------------------------------------
6400             1 179 RED_BOARD_LEFT_RIGHT:
6400 7F 7F 7F 7F 1 180 DEFB      $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F
6404 7F 7F 7F 7F 1 180 
6408 7F 00 00 00 1 181 DEFB    $7F, $00, $00, $00, $00, $00, $00, $00, $80
640C 00 00 00 00 1 181 
6410 80          1 181 
6411 7F 00 00 00 1 182 DEFB       $7F, $00, $00, $00, $00, $00, $00, $00, $81
6415 00 00 00 00 1 182 
6419 81          1 182 
641A 7F 00 00 00 1 183 DEFB          $7F, $00, $00, $00, $00, $00, $00, $00, $82
641E 00 00 00 00 1 183 
6422 82          1 183 
6423 7F 00 00 00 1 184 DEFB             $7F, $00, $00, $00, $00, $00, $00, $00, $83
6427 00 00 00 00 1 184 
642B 83          1 184 
642C 7F 00 00 00 1 185 DEFB                $7F, $00, $00, $00, $00, $00, $00, $00, $84
6430 00 00 00 00 1 185 
6434 84          1 185 
6435 7F 00 00 00 1 186 DEFB                   $7F, $00, $00, $00, $00, $00, $00, $00, $85
6439 00 00 00 00 1 186 
643D 85          1 186 
643E 7F 00 00 00 1 187 DEFB                      $7F, $00, $00, $00, $00, $00, $00, $00, $86
6442 00 00 00 00 1 187 
6446 86          1 187 
6447 7F 7F 7F 7F 1 188 DEFB                         $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F
644B 7F 7F 7F 7F 1 188 
644F 7F          1 188 
6450             1 189 RED_BOARD_RIGHT_LEFT:
6450 80 00 00 00 1 190 DEFB    $80, $00, $00, $00, $00, $00, $00, $00, $7F
6454 00 00 00 00 1 190 
6458 7F          1 190 
6459 81 00 00 00 1 191 DEFB       $81, $00, $00, $00, $00, $00, $00, $00, $7F
645D 00 00 00 00 1 191 
6461 7F          1 191 
6462 82 00 00 00 1 192 DEFB          $82, $00, $00, $00, $00, $00, $00, $00, $7F
6466 00 00 00 00 1 192 
646A 7F          1 192 
646B 83 00 00 00 1 193 DEFB             $83, $00, $00, $00, $00, $00, $00, $00, $7F
646F 00 00 00 00 1 193 
6473 7F          1 193 
6474 84 00 00 00 1 194 DEFB                $84, $00, $00, $00, $00, $00, $00, $00, $7F
6478 00 00 00 00 1 194 
647C 7F          1 194 
647D 85 00 00 00 1 195 DEFB                   $85, $00, $00, $00, $00, $00, $00, $00, $7F
6481 00 00 00 00 1 195 
6485 7F          1 195 
6486 86 00 00 00 1 196 DEFB                      $86, $00, $00, $00, $00, $00, $00, $00, $7F
648A 00 00 00 00 1 196 
648E 7F          1 196 
648F 7F 7F 7F 7F 1 197 DEFB                         $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F
6493 7F 7F 7F 7F 1 197 
6497             1 199 ; ----------------------------------------------------------------------------------------------------------------------
6497             1 200 ; Timer digits graphics. Must be in a 256 bytes boundary
6497             1 201 ; ----------------------------------------------------------------------------------------------------------------------
6497             1 202 TIMER_DIGITS:
6497 00 0F 0B 0B 1 203 DEFB    $00, $0F, $0B, $0B, $0B, $0F, $00, $00
649B 0B 0F 00 00 1 203 
649F 00 06 0E 06 1 204 DEFB    $00, $06, $0E, $06, $06, $06, $00, $00
64A3 06 06 00 00 1 204 
64A7 00 0F 03 0F 1 205 DEFB    $00, $0F, $03, $0F, $08, $0F, $00, $00
64AB 08 0F 00 00 1 205 
64AF 00 0F 03 07 1 206 DEFB    $00, $0F, $03, $07, $03, $0F, $00, $00
64B3 03 0F 00 00 1 206 
64B7 00 0B 0B 0F 1 207 DEFB    $00, $0B, $0B, $0F, $03, $03, $00, $00
64BB 03 03 00 00 1 207 
64BF 00 0F 08 0F 1 208 DEFB    $00, $0F, $08, $0F, $03, $0F, $00, $00
64C3 03 0F 00 00 1 208 
64C7 00 0F 0C 0F 1 209 DEFB    $00, $0F, $0C, $0F, $0D, $0F, $00, $00
64CB 0D 0F 00 00 1 209 
64CF 00 0F 03 03 1 210 DEFB    $00, $0F, $03, $03, $03, $03, $00, $00
64D3 03 03 00 00 1 210 
64D7 00 0F 0B 0F 1 211 DEFB    $00, $0F, $0B, $0F, $0B, $0F, $00, $00
64DB 0B 0F 00 00 1 211 
64DF 00 0F 0B 0F 1 212 DEFB    $00, $0F, $0B, $0F, $03, $0F, $00, $00
64E3 03 0F 00 00 1 212 
64E7             1 214 ; ----------------------------------------------------------------------------------------------------------------------
64E7             1 215 ; Tone parameters for sound effects
64E7             1 216 ; ----------------------------------------------------------------------------------------------------------------------
64E7             1 217 ; for each tone (from left to right):
64E7             1 218 ;   - number of frames in the block, slide changes applied once per frame (1..65536)
64E7             1 219 ;   - length of a frame (1..65536)
64E7             1 220 ;   - tone pitch, lower numbers for lower tone (1..65536)
64E7             1 221 ;   - pitch slide, this value is added to pitch every frame (-32767..32768)
64E7             1 222 ; ----------------------------------------------------------------------------------------------------------------------
64E7 01 00 E8 03 1 223 TOKEN_FX                DEFW       1, 1000, 1400,   0
64EB 78 05 00 00 1 223 
64EF 05 00 88 13 1 224 WINNER_FX               DEFW       5, 5000,  200, 100
64F3 C8 00 64 00 1 224 
64F7 E8 03 0A 00 1 225 FILLED_FX               DEFW    1000,   10,  100,   0
64FB 64 00 00 00 1 225 
64FF FF          1 227 FILLER_2                DEFB    $FF                         ; filler to align next block (not used)
6500             1 229 ;ORG     $6500
6500             1 230 ; ----------------------------------------------------------------------------------------------------------------------
6500             1 231 ; Vector table of routines (must be aligned at the next page of red board arrays)
6500             1 232 ; ----------------------------------------------------------------------------------------------------------------------
6500             1 233 RED_VECTOR_TABLE:
6500 59 72       1 234 DEFW    PathFinder_RED_Edge_0
6502 87 72       1 235 DEFW    PathFinder_RED_Edge_1
6504 AD 72       1 236 DEFW    PathFinder_RED_Edge_2
6506 D3 72       1 237 DEFW    PathFinder_RED_Edge_3
6508 F9 72       1 238 DEFW    PathFinder_RED_Edge_4
650A 1F 73       1 239 DEFW    PathFinder_RED_Edge_5
650C 45 73       1 240 DEFW    PathFinder_RED_Edge_6
650E             1 242 ; ----------------------------------------------------------------------------------------------------------------------
650E             1 243 ; Graphics for the screen frame
650E             1 244 ; ----------------------------------------------------------------------------------------------------------------------
650E             1 245 FRAME_TILES:
650E 00 00 1F 3F 1 246 DEFB    $00, $00, $1F, $3F, $3F, $3F, $3C, $3C
6512 3F 3F 3C 3C 1 246 
6516 00 00 FF FF 1 247 DEFB    $00, $00, $FF, $FF, $FF, $FF, $00, $00
651A FF FF 00 00 1 247 
651E 00 00 FF FE 1 248 DEFB    $00, $00, $FF, $FE, $FE, $FF, $00, $00
6522 FE FF 00 00 1 248 
6526 03 07 0F 0F 1 249 DEFB    $03, $07, $0F, $0F, $0F, $0F, $07, $03
652A 0F 0F 07 03 1 249 
652E FF FE FC FC 1 250 DEFB    $FF, $FE, $FC, $FC, $FC, $FC, $FE, $FF
6532 FC FC FE FF 1 250 
6536 FF 7F 3F 3F 1 251 DEFB    $FF, $7F, $3F, $3F, $3F, $3F, $7F, $FF
653A 3F 3F 7F FF 1 251 
653E C0 E0 F0 F0 1 252 DEFB    $C0, $E0, $F0, $F0, $F0, $F0, $E0, $C0
6542 F0 F0 E0 C0 1 252 
6546 00 00 FF 7F 1 253 DEFB    $00, $00, $FF, $7F, $7F, $FF, $00, $00
654A 7F FF 00 00 1 253 
654E 00 00 F8 FC 1 254 DEFB    $00, $00, $F8, $FC, $FC, $FC, $3C, $3C
6552 FC FC 3C 3C 1 254 
6556 3C 3C 3F 3F 1 255 DEFB    $3C, $3C, $3F, $3F, $3F, $1F, $00, $00
655A 3F 1F 00 00 1 255 
655E 00 00 FE FF 1 256 DEFB    $00, $00, $FE, $FF, $FF, $FE, $00, $00
6562 FF FE 00 00 1 256 
6566 00 00 7F FF 1 257 DEFB    $00, $00, $7F, $FF, $FF, $7F, $00, $00
656A FF 7F 00 00 1 257 
656E 3C 3C FC FC 1 258 DEFB    $3C, $3C, $FC, $FC, $FC, $F8, $00, $00
6572 FC F8 00 00 1 258 
6576 00 00 38 7C 1 259 DEFB    $00, $00, $38, $7C, $7C, $38, $00, $00
657A 7C 38 00 00 1 259 
657E             1 261 ; ----------------------------------------------------------------------------------------------------------------------
657E             1 262 ; Hexagon sprites
657E             1 263 ; ----------------------------------------------------------------------------------------------------------------------
657E             1 264 HEXAGON_EMPTY:
657E 07 E0 18 18 1 265 DEFB    $07, $E0, $18, $18, $20, $04, $24, $04
6582 20 04 24 04 1 265 
6586 48 02 48 02 1 266 DEFB    $48, $02, $48, $02, $40, $02, $40, $02
658A 40 02 40 02 1 266 
658E 40 02 40 02 1 267 DEFB    $40, $02, $40, $02, $40, $12, $40, $12
6592 40 12 40 12 1 267 
6596 20 24 20 04 1 268 DEFB    $20, $24, $20, $04, $18, $18, $07, $E0
659A 18 18 07 E0 1 268 
659E             1 269 HEXAGON_SPRITE:
659E 03 C0 0C 30 1 270 DEFB    $03, $C0, $0C, $30, $10, $08, $12, $08
65A2 10 08 12 08 1 270 
65A6 24 04 24 04 1 271 DEFB    $24, $04, $24, $04, $20, $04, $20, $04
65AA 20 04 20 04 1 271 
65AE 20 04 20 04 1 272 DEFB    $20, $04, $20, $04, $20, $24, $20, $24
65B2 20 24 20 24 1 272 
65B6 10 48 10 08 1 273 DEFB    $10, $48, $10, $08, $0C, $30, $03, $C0
65BA 0C 30 03 C0 1 273 
65BE 01 80 02 40 1 275 DEFB    $01, $80, $02, $40, $04, $20, $09, $10
65C2 04 20 09 10 1 275 
65C6 0A 10 0A 10 1 276 DEFB    $0A, $10, $0A, $10, $08, $10, $08, $10
65CA 08 10 08 10 1 276 
65CE 08 10 08 10 1 277 DEFB    $08, $10, $08, $10, $08, $50, $08, $50
65D2 08 50 08 50 1 277 
65D6 08 90 04 20 1 278 DEFB    $08, $90, $04, $20, $02, $40, $01, $80
65DA 02 40 01 80 1 278 
65DE 00 80 00 80 1 280 DEFB    $00, $80, $00, $80, $00, $80, $00, $80
65E2 00 80 00 80 1 280 
65E6 00 80 00 80 1 281 DEFB    $00, $80, $00, $80, $00, $80, $00, $80
65EA 00 80 00 80 1 281 
65EE 00 80 00 80 1 282 DEFB    $00, $80, $00, $80, $00, $80, $00, $80
65F2 00 80 00 80 1 282 
65F6 00 80 00 80 1 283 DEFB    $00, $80, $00, $80, $00, $80, $00, $80
65FA 00 80 00 80 1 283 
65FE 01 80 02 40 1 285 DEFB    $01, $80, $02, $40, $05, $A0, $0B, $D0
6602 05 A0 0B D0 1 285 
6606 0B D0 0B D0 1 286 DEFB    $0B, $D0, $0B, $D0, $0B, $D0, $0B, $D0
660A 0B D0 0B D0 1 286 
660E 0B D0 0B D0 1 287 DEFB    $0B, $D0, $0B, $D0, $0B, $D0, $0B, $D0
6612 0B D0 0B D0 1 287 
6616 0B D0 05 A0 1 288 DEFB    $0B, $D0, $05, $A0, $02, $40, $01, $80
661A 02 40 01 80 1 288 
661E 03 C0 0C 30 1 290 DEFB    $03, $C0, $0C, $30, $13, $C8, $17, $E8
6622 13 C8 17 E8 1 290 
6626 2F F4 2F F4 1 291 DEFB    $2F, $F4, $2F, $F4, $2F, $F4, $2F, $F4
662A 2F F4 2F F4 1 291 
662E 2F F4 2F F4 1 292 DEFB    $2F, $F4, $2F, $F4, $2F, $F4, $2F, $F4
6632 2F F4 2F F4 1 292 
6636 17 E8 13 C8 1 293 DEFB    $17, $E8, $13, $C8, $0C, $30, $03, $C0
663A 0C 30 03 C0 1 293 
663E             1 294 HEXAGON_TOKEN:
663E 07 E0 18 18 1 295 DEFB    $07, $E0, $18, $18, $27, $E4, $2F, $F4
6642 27 E4 2F F4 1 295 
6646 5F FA 5F FA 1 296 DEFB    $5F, $FA, $5F, $FA, $5F, $FA, $5F, $FA
664A 5F FA 5F FA 1 296 
664E 5F FA 5F FA 1 297 DEFB    $5F, $FA, $5F, $FA, $5F, $FA, $5F, $FA
6652 5F FA 5F FA 1 297 
6656 2F F4 27 E4 1 298 DEFB    $2F, $F4, $27, $E4, $18, $18, $07, $E0
665A 18 18 07 E0 1 298 
665E             1 300 ; ----------------------------------------------------------------------------------------------------------------------
665E             1 301 ; Board letter sprites
665E             1 302 ; ----------------------------------------------------------------------------------------------------------------------
665E             1 303 LETTER_SPRITES:
665E 3C 7E FF C3 1 304 DEFB    $3C, $7E, $FF, $C3, $F3, $C3, $D3, $C3, $7E, $3C
6662 F3 C3 D3 C3 1 304 
6666 7E 3C       1 304 
6668 3C 7E CF CF 1 305 DEFB    $3C, $7E, $CF, $CF, $C3, $CB, $CB, $C3, $7E, $3C
666C C3 CB CB C3 1 305 
6670 7E 3C       1 305 
6672 3C 7E FF E3 1 306 DEFB    $3C, $7E, $FF, $E3, $CF, $CF, $CF, $E3, $7E, $3C
6676 CF CF CF E3 1 306 
667A 7E 3C       1 306 
667C 3C 7E F3 F3 1 307 DEFB    $3C, $7E, $F3, $F3, $C3, $D3, $D3, $C3, $7E, $3C
6680 C3 D3 D3 C3 1 307 
6684 7E 3C       1 307 
6686 3C 7E FF E3 1 308 DEFB    $3C, $7E, $FF, $E3, $CB, $C3, $CF, $E3, $7E, $3C
668A CB C3 CF E3 1 308 
668E 7E 3C       1 308 
6690 3C 7E E3 CF 1 309 DEFB    $3C, $7E, $E3, $CF, $C7, $CF, $CF, $CF, $7E, $3C
6694 C7 CF CF CF 1 309 
6698 7E 3C       1 309 
669A 3C 7E FF E3 1 310 DEFB    $3C, $7E, $FF, $E3, $D3, $D3, $E3, $F3, $46, $3C
669E D3 D3 E3 F3 1 310 
66A2 46 3C       1 310 
66A4             1 312 ; ----------------------------------------------------------------------------------------------------------------------
66A4             1 313 ; Board number sprites
66A4             1 314 ; ----------------------------------------------------------------------------------------------------------------------
66A4             1 315 NUMBER_SPRITES:
66A4 3C 7E E7 C7 1 316 DEFB    $3C, $7E, $E7, $C7, $E7, $E7, $E7, $E7, $7E, $3C
66A8 E7 E7 E7 E7 1 316 
66AC 7E 3C       1 316 
66AE 3C 7E E7 D3 1 317 DEFB    $3C, $7E, $E7, $D3, $F3, $E7, $CF, $C3, $7E, $3C
66B2 F3 E7 CF C3 1 317 
66B6 7E 3C       1 317 
66B8 3C 7E C7 F3 1 318 DEFB    $3C, $7E, $C7, $F3, $E3, $F3, $F3, $C7, $7E, $3C
66BC E3 F3 F3 C7 1 318 
66C0 7E 3C       1 318 
66C2 3C 7E D3 D3 1 319 DEFB    $3C, $7E, $D3, $D3, $C3, $F3, $F3, $F3, $7E, $3C
66C6 C3 F3 F3 F3 1 319 
66CA 7E 3C       1 319 
66CC 3C 7E C3 CF 1 320 DEFB    $3C, $7E, $C3, $CF, $C7, $F3, $F3, $C7, $7E, $3C
66D0 C7 F3 F3 C7 1 320 
66D4 7E 3C       1 320 
66D6 3C 7E E3 CF 1 321 DEFB    $3C, $7E, $E3, $CF, $C3, $CB, $CB, $C3, $7E, $3C
66DA C3 CB CB C3 1 321 
66DE 7E 3C       1 321 
66E0 3C 7E C3 F3 1 322 DEFB    $3C, $7E, $C3, $F3, $F3, $E7, $E7, $E7, $7E, $3C
66E4 F3 E7 E7 E7 1 322 
66E8 7E 3C       1 322 
66EA             1 324 ; ----------------------------------------------------------------------------------------------------------------------
66EA             1 325 ; Screen addresses for menu hexagons
66EA             1 326 ; ----------------------------------------------------------------------------------------------------------------------
66EA             1 327 MENU_HEXAGONS:
66EA 01 40 05 40 1 328 DEFW    $4001, $4005, $4008, $400C, $400F, $4013, $401A
66EE 08 40 0C 40 1 328 
66F2 0F 40 13 40 1 328 
66F6 1A 40       1 328 
66F8 45 40 48 40 1 329 DEFW    $4045, $4048, $4052, $405D, $4081, $4083, $4085
66FC 52 40 5D 40 1 329 
6700 81 40 83 40 1 329 
6704 85 40       1 329 
6706 88 40 8A 40 1 330 DEFW    $4088, $408A, $4091, $409D, $40C1, $40D0, $40D9
670A 91 40 9D 40 1 330 
670E C1 40 D0 40 1 330 
6712 D9 40       1 330 
6714 05 48 08 48 1 331 DEFW    $4805, $4808, $480A, $4813, $4819, $481B, $481D
6718 0A 48 13 48 1 331 
671C 19 48 1B 48 1 331 
6720 1D 48       1 331 
6722 0A 40 59 40 1 332 DEFW    $400A, $4059, $40BB, $40C5, $40D2, $480C, $401C
6726 BB 40 C5 40 1 332 
672A D2 40 0C 48 1 332 
672E 1C 40       1 332 
6730 41 40 50 40 1 333 DEFW    $4041, $4050, $40C8, $4801, $480F
6734 C8 40 01 48 1 333 
6738 0F 48       1 333 
673A             1 334 SAMPLE_BOARD_RED:
673A 69 48 6B 48 1 335 DEFW    $4869, $486B, $482C, $482E, $40EF, $40F1, $40B2
673E 2C 48 2E 48 1 335 
6742 EF 40 F1 40 1 335 
6746 B2 40       1 335 
6748 E9 40 6F 48 1 336 DEFW    $40E9, $486F, $4830, $40F3, $48AA, $40AC, $48EF
674C 30 48 F3 40 1 336 
6750 AA 48 AC 40 1 336 
6754 EF 48       1 336 
6756 2A 48 6D 48 1 337 DEFW    $482A, $486D, $40ED, $48AE
675A ED 40 AE 48 1 337 
675E             1 338 SAMPLE_BOARD_CYAN:
675E AE 40 EF 40 1 339 DEFW    $40AE, $40EF, $4830, $486F, $48AE, $48EF, $502E
6762 30 48 6F 48 1 339 
6766 AE 48 EF 48 1 339 
676A 2E 50       1 339 
676C AC 48 B4 48 1 340 DEFW    $48AC, $48B4, $486B, $486D, $482E, $40F1, $40F3
6770 6B 48 6D 48 1 340 
6774 2E 48 F1 40 1 340 
6778 F3 40       1 340 
677A 73 48 B2 48 1 341 DEFW    $4873, $48B2, $5030
677E 30 50       1 341 
6780             1 343 ; ----------------------------------------------------------------------------------------------------------------------
6780             1 344 ; Strings
6780             1 345 ; ----------------------------------------------------------------------------------------------------------------------
6780             1 346 STR_OPTIONS:
6780 53 74 61 72 1 347 DEFM    "Start new game\0"
6784 74 20 6E 65 1 347 
6788 77 20 67 61 1 347 
678C 6D 65 00    1 347 
678F 48 6F 77 20 1 348 DEFM    "How to play\0"
6793 74 6F 20 70 1 348 
6797 6C 61 79 00 1 348 
679B 43 72 65 64 1 349 DEFM    "Credits\0"
679F 69 74 73 00 1 349 
67A3 44 65 73 69 1 350 STR_DESIGN              DEFM    "Design:     \0"
67A7 67 6E 3A 20 1 350 
67AB 20 20 20 20 1 350 
67AF 00          1 350 
67B0 43 6F 64 65 1 351 STR_CODE                DEFM    "Code:       \0"
67B4 3A 20 20 20 1 351 
67B8 20 20 20 20 1 351 
67BC 00          1 351 
67BD 46 6F 6E 74 1 352 STR_FONT                DEFM    "Font:       \0"
67C1 3A 20 20 20 1 352 
67C5 20 20 20 20 1 352 
67C9 00          1 352 
67CA 47 72 61 70 1 353 STR_GRAPHICS            DEFM    "Graphics:   \0"
67CE 68 69 63 73 1 353 
67D2 3A 20 20 20 1 353 
67D6 00          1 353 
67D7 45 69 6E 61 1 354 STR_EINAR               DEFM    "Einar Saukas\0"
67DB 72 20 53 61 1 354 
67DF 75 6B 61 73 1 354 
67E3 00          1 354 
67E4 20 20 20 20 1 355 STR_EMPTY12             DEFM    "            \0"
67E8 20 20 20 20 1 355 
67EC 20 20 20 20 1 355 
67F0 00          1 355 
67F1 41 6E 74 6F 1 356 STR_ANTONIO             DEFM    "Antonio Luque\0"
67F5 6E 69 6F 20 1 356 
67F9 4C 75 71 75 1 356 
67FD 65 00       1 356 
67FF 50 72 65 73 1 357 STR_PRESSKEY            DEFM    "Press any key\0"
6803 73 20 61 6E 1 357 
6807 79 20 6B 65 1 357 
680B 79 00       1 357 
680D             1 358 STR_BUTTONS:
680D 4E 65 78 74 1 359 DEFM    "Next\0"
6811 00          1 359 
6812 42 61 63 6B 1 360 DEFM    "Back\0"
6816 00          1 360 
6817 52 45 44 00 1 361 STR_RED                 DEFM    "RED\0"
681B 43 59 41 4E 1 362 STR_CYAN                DEFM    "CYAN\0"
681F 00          1 362 
6820 43 6F 6E 6E 1 363 STR_HELP1               DEFM    "Connect\0"
6824 65 63 74 00 1 363 
6828 6C 65 66 74 1 364 STR_HELP2_RED           DEFM    "left and\0"
682C 20 61 6E 64 1 364 
6830 00          1 364 
6831 75 70 20 61 1 365 STR_HELP2_CYAN          DEFM    "up and\0"
6835 6E 64 00    1 365 
6838 72 69 67 68 1 366 STR_HELP3_RED           DEFM    "right\0"
683C 74 00       1 366 
683E 64 6F 77 6E 1 367 STR_HELP3_CYAN          DEFM    "down\0"
6842 00          1 367 
6843 62 6F 72 64 1 368 STR_HELP4               DEFM    "borders\0"
6847 65 72 73 00 1 368 
684B 74 6F 20 77 1 369 STR_HELP5               DEFM    "to win\0"
684F 69 6E 00    1 369 
6852             1 370 STR_HELP:
6852 57 69 6E 20 1 371 DEFM    "Win three\0"
6856 74 68 72 65 1 371 
685A 65 00       1 371 
685C 74 69 6D 65 1 372 DEFM    "times in\0"
6860 73 20 69 6E 1 372 
6864 00          1 372 
6865 61 20 72 6F 1 373 DEFM    "a row to\0"
6869 77 20 74 6F 1 373 
686D 00          1 373 
686E 6C 65 76 65 1 374 DEFM    "level up\0"
6872 6C 20 75 70 1 374 
6876 00          1 374 
6877 20 43 4F 4E 1 375 STR_CONGRATS            DEFM    " CONGRATULATIONS \0"
687B 47 52 41 54 1 375 
687F 55 4C 41 54 1 375 
6883 49 4F 4E 53 1 375 
6887 20 00       1 375 
6889             1 376 STR_LAST_LEVEL:
6889 57 65 6C 6C 1 377 DEFM    "Well done! Last level passed\0"
688D 20 64 6F 6E 1 377 
6891 65 21 20 4C 1 377 
6895 61 73 74 20 1 377 
6899 6C 65 76 65 1 377 
689D 6C 20 70 61 1 377 
68A1 73 73 65 64 1 377 
68A5 00          1 377 
68A6 43 68 6F 6F 1 378 DEFM    "Choose level to restart, 1-4\0"
68AA 73 65 20 6C 1 378 
68AE 65 76 65 6C 1 378 
68B2 20 74 6F 20 1 378 
68B6 72 65 73 74 1 378 
68BA 61 72 74 2C 1 378 
68BE 20 31 2D 34 1 378 
68C2 00          1 378 
68C3             1 380 ; ----------------------------------------------------------------------------------------------------------------------
68C3             1 381 ; Based on "King" font https://spectrumcomputing.co.uk/entry/25245/ZX-Spectrum/ZX-ALFA
68C3             1 382 ; this font was designed by Einar Saukas for Hex game
68C3             1 383 ; ----------------------------------------------------------------------------------------------------------------------
68C3             1 384 FONT:
68C3 00 00 00 00 1 385 INCLUDEBIN "King+.bin"
68C7 00 00 00 00 1 385 
68CB 00 18 18 18 1 385 
68CF 00 18 18 00 1 385 
68D3 00 24 24 00 1 385 
68D7 00 00 00 00 1 385 
68DB 00 24 7E 24 1 385 
68DF 24 7E 24 00 1 385 
68E3 00 08 3E 28 1 385 
68E7 3E 0A 3E 08 1 385 
68EB 00 62 64 08 1 385 
68EF 10 26 46 00 1 385 
68F3 00 10 28 10 1 385 
68F7 2A 44 3A 00 1 385 
68FB 00 18 30 00 1 385 
68FF 00 00 00 00 1 385 
6903 06 0C 08 08 1 385 
6907 08 0C 06 00 1 385 
690B 60 30 10 10 1 385 
690F 10 30 60 00 1 385 
6913 00 00 14 08 1 385 
6917 3E 08 14 00 1 385 
691B 00 00 08 08 1 385 
691F 3E 08 08 00 1 385 
6923 00 00 00 00 1 385 
6927 00 0C 18 30 1 385 
692B 00 00 00 7E 1 385 
692F 7E 00 00 00 1 385 
6933 00 00 00 00 1 385 
6937 30 70 70 00 1 385 
693B 02 06 0C 18 1 385 
693F 30 60 40 00 1 385 
6943 00 7E 62 62 1 385 
6947 62 62 7E 00 1 385 
694B 00 18 38 18 1 385 
694F 18 18 3C 00 1 385 
6953 00 38 4C 4C 1 385 
6957 18 30 7C 00 1 385 
695B 00 3C 62 0C 1 385 
695F 06 66 3C 00 1 385 
6963 00 30 30 30 1 385 
6967 30 34 3E 04 1 385 
696B 00 7E 60 7E 1 385 
696F 06 66 3C 00 1 385 
6973 00 30 60 7C 1 385 
6977 66 66 3C 00 1 385 
697B 00 7E 46 0C 1 385 
697F 18 30 60 00 1 385 
6983 00 3C 66 3C 1 385 
6987 66 66 3C 00 1 385 
698B 00 3C 66 66 1 385 
698F 3E 06 3C 00 1 385 
6993 00 00 08 18 1 385 
6997 00 08 18 00 1 385 
699B 00 00 04 0C 1 385 
699F 00 0C 18 30 1 385 
69A3 00 00 04 08 1 385 
69A7 10 08 04 00 1 385 
69AB 00 00 00 3E 1 385 
69AF 00 3E 00 00 1 385 
69B3 00 00 10 08 1 385 
69B7 04 08 10 00 1 385 
69BB 00 3C 42 04 1 385 
69BF 08 00 08 00 1 385 
69C3 00 3C 4A 56 1 385 
69C7 5E 40 3C 00 1 385 
69CB 00 7E 46 46 1 385 
69CF 7E 46 46 00 1 385 
69D3 00 7C 62 7C 1 385 
69D7 62 62 7C 00 1 385 
69DB 00 7E 66 60 1 385 
69DF 60 66 7E 00 1 385 
69E3 00 7C 46 46 1 385 
69E7 46 46 7C 00 1 385 
69EB 00 7E 60 7C 1 385 
69EF 60 60 7E 00 1 385 
69F3 00 7E 60 7C 1 385 
69F7 60 60 60 00 1 385 
69FB 00 3E 62 60 1 385 
69FF 66 66 3E 00 1 385 
6A03 00 62 62 7E 1 385 
6A07 62 62 62 00 1 385 
6A0B 00 18 18 18 1 385 
6A0F 18 18 18 00 1 385 
6A13 00 0C 0C 0C 1 385 
6A17 0C 4C 38 00 1 385 
6A1B 00 66 64 68 1 385 
6A1F 7E 46 66 00 1 385 
6A23 00 60 60 60 1 385 
6A27 60 60 7E 00 1 385 
6A2B 00 7E 56 56 1 385 
6A2F 56 56 56 00 1 385 
6A33 00 7E 46 46 1 385 
6A37 46 46 46 00 1 385 
6A3B 00 7E 62 62 1 385 
6A3F 62 62 7E 00 1 385 
6A43 00 7E 62 62 1 385 
6A47 7E 60 60 00 1 385 
6A4B 00 7C 64 64 1 385 
6A4F 64 64 7E 00 1 385 
6A53 00 7C 62 64 1 385 
6A57 7C 46 46 00 1 385 
6A5B 00 7E 60 7E 1 385 
6A5F 06 06 7E 00 1 385 
6A63 00 7E 18 18 1 385 
6A67 18 18 18 00 1 385 
6A6B 00 62 62 62 1 385 
6A6F 62 62 7E 00 1 385 
6A73 00 62 62 62 1 385 
6A77 62 34 18 00 1 385 
6A7B 00 6A 6A 6A 1 385 
6A7F 6A 6A 7E 00 1 385 
6A83 00 62 62 34 1 385 
6A87 4E 46 46 00 1 385 
6A8B 00 62 62 7E 1 385 
6A8F 18 18 18 00 1 385 
6A93 00 7E 06 1C 1 385 
6A97 38 60 7E 00 1 385 
6A9B 00 0E 08 08 1 385 
6A9F 08 08 0E 00 1 385 
6AA3 00 00 40 20 1 385 
6AA7 10 08 04 00 1 385 
6AAB 00 70 10 10 1 385 
6AAF 10 10 70 00 1 385 
6AB3 00 08 1C 2A 1 385 
6AB7 08 08 08 08 1 385 
6ABB 00 00 00 00 1 385 
6ABF 00 00 00 FF 1 385 
6AC3 0C 12 10 38 1 385 
6AC7 10 10 3E 00 1 385 
6ACB 00 00 3C 06 1 385 
6ACF 7E 46 7E 00 1 385 
6AD3 00 60 60 7E 1 385 
6AD7 62 62 7E 00 1 385 
6ADB 00 00 7E 62 1 385 
6ADF 60 62 7E 00 1 385 
6AE3 00 06 06 7E 1 385 
6AE7 46 46 7E 00 1 385 
6AEB 00 00 7E 46 1 385 
6AEF 7E 60 7E 00 1 385 
6AF3 00 1E 30 3C 1 385 
6AF7 30 30 30 00 1 385 
6AFB 00 00 7E 46 1 385 
6AFF 46 3E 06 3E 1 385 
6B03 00 60 60 7C 1 385 
6B07 66 66 66 00 1 385 
6B0B 00 18 00 38 1 385 
6B0F 18 18 3C 00 1 385 
6B13 00 0C 00 0C 1 385 
6B17 0C 0C 4C 38 1 385 
6B1B 00 20 2C 38 1 385 
6B1F 38 2C 26 00 1 385 
6B23 00 18 18 18 1 385 
6B27 18 18 0E 00 1 385 
6B2B 00 00 6C 56 1 385 
6B2F 56 56 46 00 1 385 
6B33 00 00 7C 46 1 385 
6B37 46 46 46 00 1 385 
6B3B 00 00 3C 46 1 385 
6B3F 46 46 3C 00 1 385 
6B43 00 00 7C 66 1 385 
6B47 66 7C 60 60 1 385 
6B4B 00 00 3E 46 1 385 
6B4F 46 3E 06 06 1 385 
6B53 00 00 3C 62 1 385 
6B57 60 60 60 00 1 385 
6B5B 00 00 3C 60 1 385 
6B5F 3C 06 3C 00 1 385 
6B63 00 30 78 30 1 385 
6B67 30 30 1C 00 1 385 
6B6B 00 00 46 46 1 385 
6B6F 46 46 3C 00 1 385 
6B73 00 00 46 46 1 385 
6B77 2C 3C 18 00 1 385 
6B7B 00 00 46 56 1 385 
6B7F 56 56 2C 00 1 385 
6B83 00 00 46 2C 1 385 
6B87 18 2C 46 00 1 385 
6B8B 00 00 46 46 1 385 
6B8F 46 3E 06 3C 1 385 
6B93 00 00 7E 0C 1 385 
6B97 18 30 7E 00 1 385 
6B9B 00 0E 08 30 1 385 
6B9F 08 08 0E 00 1 385 
6BA3 00 08 08 08 1 385 
6BA7 08 2A 1C 08 1 385 
6BAB 00 70 10 0C 1 385 
6BAF 10 10 70 00 1 385 
6BB3 00 14 28 00 1 385 
6BB7 00 00 00 00 1 385 
6BBB FF 81 81 81 1 385 
6BBF 81 81 81 FF 1 385 

; File #2: C:\Users\Antonio\source\repos\Hex\Z80CodeFiles\Main.z80asm

6BC3             2 1 ; ----------------------------------------------------------------------------------------------------------------------
6BC3             2 2 ; Main.z80asm
6BC3             2 3 ; Coded by Antonio Luque
6BC3             2 4 ; ----------------------------------------------------------------------------------------------------------------------
6BC3             2 6 CYAN_COLOR              EQU     %00000101                   ; attributes: flash 0, bright 0, paper 0, ink 5
6BC3             2 7 RED_COLOR               EQU     %00000010                   ; attributes: flash 0, bright 0, paper 0, ink 2
6BC3             2 9 ; ----------------------------------------------------------------------------------------------------------------------
6BC3             2 10 ; Entry point of the program - Initialization
6BC3             2 11 ; ----------------------------------------------------------------------------------------------------------------------
6BC3             2 12 Main                    ENT     $                           ; SpectNet IDE pragma: defines the entry code of the program
6BC3 F3          2 14 di                                  ; disable interrupts
6BC4             2 16 ; allocate jump to interrupt routine at address $5CA1 (pointed by IY+103)
6BC4 21 F0 75    2 18 ld      hl, Timer_Interrupt         ; HL points to interrupt routine address
6BC7 FD 36 67 C3 2 19 ld      (iy+103), $C3               ; 'jp' opcode
6BCB FD 75 68    2 20 ld      (iy+104), l                 ; Low byte of interrupt routine address
6BCE FD 74 69    2 21 ld      (iy+105), h                 ; High byte of interrupt routine address
6BD1 3E 2E       2 22 ld      a, $2E                      ; High byte of interrupt vector address
6BD3 ED 47       2 23 ld      i, a                        ; set interrupt vector address
6BD5 ED 5E       2 24 im      2                           ; set interrupt mode 2
6BD7             2 26 ; When the ULA triggers an interrupt it doesn't put any device ID in the data bus. When no value
6BD7             2 27 ; is placed on the Spectrum's data bus, this acquires the value of 8 signals one ($FF). So, the
6BD7             2 28 ; resultant vector address is formed as follows:
6BD7             2 29 ;
6BD7             2 30 ;                           ( I * $100 ) + $FF = $2E00 + $FF = $2EFF
6BD7             2 31 ; Source: 
6BD7             2 32 ; https://wiki.speccy.org/cursos/ensamblador/interrupciones#modo-im-2-en-spectrum-16k
6BD7             2 33 ;
6BD7             2 34 ; The value pointed at ROM address $2EFF is $5CA1. This address belongs to the calculator's
6BD7             2 35 ; memory area and it is used by some ROM routines, but none of them are called by HEX2 program.
6BD7 31 00 60    2 37 ld      sp, STACK                   ; move stack
6BDA AF          2 39 xor     a                           ; set border color (black)
6BDB D3 FE       2 40 out     ($FE), a
6BDD CD 47 79    2 41 call    Screen_Menu                 ; show main menu and wait for an option
6BE0             2 43 ; ----------------------------------------------------------------------------------------------------------------------
6BE0             2 44 ; Start new game
6BE0             2 45 ; ----------------------------------------------------------------------------------------------------------------------
6BE0             2 46 Main_Start
6BE0 CD DC 76    2 47 call    Screen_Clear                ; fill in black the whole screen area and attributes area
6BE3 CD E9 76    2 48 call    Screen_Letters              ; draw the two rows of letters on the screen (a..g)
6BE6 CD 15 77    2 49 call    Screen_Numbers              ; draw the two columns of numbers on the screen (1..7)
6BE9 CD 54 77    2 50 call    Screen_Frame                ; draw the screen frame
6BEC CD AC 77    2 51 call    Screen_Tokens               ; draw the fixed tokens on the screen
6BEF CD CB 77    2 52 call    Screen_Timer_Quotes         ; draw the timer quotes (' ") on the screen
6BF2 CD 0E 78    2 53 call    Screen_Color_Statics        ; apply color to statics items of the screen
6BF5 FB          2 55 ei                                  ; enable interrupts
6BF6             2 57 ; ----------------------------------------------------------------------------------------------------------------------
6BF6             2 58 ; New level
6BF6             2 59 ; ----------------------------------------------------------------------------------------------------------------------
6BF6             2 60 Main_New_Level
6BF6 3E 04       2 61 ld      a, 4                        ; maximum level
6BF8 21 9D 61    2 62 ld      hl, GAME_LEVEL              ; HL points to game level address
6BFB BE          2 63 cp      (hl)                        ; level 4 achieved?
6BFC 20 05       2 64 jr      nz, Main_Increment_Level    ; no, increment game level
6BFE CD 48 78    2 65 call    Screen_Last_Level           ; show last level screen and input game level
6C01 18 DD       2 66 jr      Main_Start                  ; start a new game
6C03             2 67 Main_Increment_Level
6C03 34          2 68 inc     (hl)                        ; increment game level
6C04 CD EB 78    2 69 call    Screen_Frame_Color          ; set up frame color depending on current level
6C07 CD DA 78    2 70 call    Screen_Clear_ThreeRow       ; clear all three-in-a-row marks
6C0A AF          2 71 xor     a                           ; initialize three-in-a-row counter
6C0B 32 0E 62    2 72 ld      (THREE_ROW), a
6C0E             2 74 ; ----------------------------------------------------------------------------------------------------------------------
6C0E             2 75 ; Start new match
6C0E             2 76 ; ----------------------------------------------------------------------------------------------------------------------
6C0E             2 77 Main_Start_Match
6C0E             2 78 ; set up timers and clear last messages
6C0E CD 85 76    2 80 call    Timer_Reset                 ; reset timers
6C11 CD 70 76    2 81 call    Timer_Display_All           ; display timers
6C14 CD D2 6E    2 82 call    Print_Clear_Alert           ; clear last alert
6C17 3E 02       2 83 ld      a, RED_COLOR                ; set red color in A
6C19 32 9E 61    2 84 ld      (TOKEN_COLOR), a            ; save token color
6C1C CD FC 6E    2 85 call    Print_Clear_Move            ; clear red player last move
6C1F             2 87 ; swap players' colors
6C1F 3A 9F 61    2 89 ld      a, (PLAYER_COLOR)           ; get current player color
6C22 EE 07       2 90 xor     %00000111                   ; swap color
6C24 32 9F 61    2 91 ld      (PLAYER_COLOR), a           ; save swapped player color
6C27 CD B4 6E    2 92 call    Print_Players               ; print "Player" and "Speccy" strings
6C2A             2 94 ; initialize positions and draw empty board
6C2A 21 00 7D    2 96 ld      hl, CYAN_POSITIONS          ; HL points to cyan positions address
6C2D 11 01 7D    2 97 ld      de, CYAN_POSITIONS+1        ; DE points to cyan positions (+1) address
6C30 36 00       2 98 ld      (hl), EMPTY                 ; set first position as empty
6C32 01 FF 01    2 99 ld      bc, 256*2-1                 ; length of cyan + red positions areas (-1 already set)
6C35 ED B0       2 100 ldir                                ; fill the rest of positions as empty
6C37 CD 65 6D    2 101 call    Draw_Board                  ; draw an empty hexagons board
6C3A             2 103 ; initialize draw token delay, move number and token color
6C3A 3E 0A       2 105 ld      a, 10                       ; set delay duration in 'Draw_Token' routine
6C3C 32 94 6D    2 106 ld      (@Token_Delay+1), a
6C3F 3E 01       2 107 ld      a, 1                        ; initialize move number
6C41 32 9B 61    2 108 ld      (MOVE_NUMBER), a
6C44 3E 05       2 109 ld      a, CYAN_COLOR               ; first player token color
6C46             2 111 ; ----------------------------------------------------------------------------------------------------------------------
6C46             2 112 ; Process players moves - Match loop
6C46             2 113 ; ----------------------------------------------------------------------------------------------------------------------
6C46             2 114 Main_Match_Loop
6C46             2 115 ; check player turn
6C46 32 9E 61    2 117 ld      (TOKEN_COLOR), a            ; save current token color
6C49 21 9F 61    2 118 ld      hl, PLAYER_COLOR            ; HL points to player color address
6C4C BE          2 119 cp      (hl)                        ; check player color
6C4D CC F6 6C    2 120 call    z, Main_GetPlayer_Move      ; if player color = current token color, get player move
6C50 C4 AB 6C    2 121 call    nz, Main_GetSpeccy_Move     ; else, get speccy move (previous call always set Z flag)
6C53             2 123 ; update positions with player/speccy move
6C53 CD BC 70    2 125 call    PathFinder_Friend           ; get player/speccy side
6C56 CD C5 70    2 126 call    PathFinder_PutToken         ; put token on cyan and red positions
6C59             2 128 ; draw token on the board
6C59 AF          2 130 xor     a                           ; stop timers
6C5A 32 E8 62    2 131 ld      (TIMER_FLAG), a
6C5D CD 80 6D    2 132 call    Draw_Token                  ; animate hexagon sprite on the screen
6C60 DD 21 E7 64 2 133 ld      ix, TOKEN_FX                ; IX points to token tone parameters address
6C64 CD 9A 76    2 134 call    Sound_FX                    ; play sound effect
6C67             2 136 ; check for a winner
6C67 CD 6C 75    2 138 call    PathFinder_VictoryPath      ; check current player victory path
6C6A 3C          2 139 inc     a                           ; is there a victory path?
6C6B 20 0C       2 140 jr      nz, Main_Match_End          ; yes, match ends
6C6D 21 9B 61    2 142 ld      hl, MOVE_NUMBER             ; HL points to move number address
6C70 34          2 143 inc     (hl)                        ; increment move number
6C71             2 145 ; swap players' token color
6C71 3A 9E 61    2 147 ld      a, (TOKEN_COLOR)            ; get current token color
6C74 EE 07       2 148 xor     %00000111                   ; swap token color
6C76 C3 46 6C    2 149 jp      Main_Match_Loop             ; repeat match loop
6C79             2 151 ; ----------------------------------------------------------------------------------------------------------------------
6C79             2 152 ; Current player wins the match
6C79             2 153 ; ----------------------------------------------------------------------------------------------------------------------
6C79             2 154 Main_Match_End
6C79 CD A2 75    2 155 call    PathFinder_BrightPath       ; animate and highlight the winner path
6C7C 11 3A 62    2 157 ld      de, STR_WINNER              ; DE points to "WINS" string address
6C7F CD DA 6E    2 158 call    Print_Alert                 ; print string
6C82 DD 21 EF 64 2 159 ld      ix, WINNER_FX               ; IX points to winner tone parameters address
6C86 CD 9A 76    2 160 call    Sound_FX                    ; play sound fx
6C89 3A 9E 61    2 162 ld      a, (TOKEN_COLOR)            ; get current token color
6C8C 21 9F 61    2 163 ld      hl, PLAYER_COLOR            ; get player color
6C8F BE          2 164 cp      (hl)                        ; check player color
6C90 21 0E 62    2 165 ld      hl, THREE_ROW               ; HL points to three-in-a-row counter
6C93 28 04       2 166 jr      z, Main_ThreeRow_Increment  ; if player color = current token color, increment counter
6C95 35          2 167 dec     (hl)                        ; decrement three-in-a-row counter
6C96 F2 9A 6C    2 168 jp      p, Main_ThreeRow_Show       ; if not negative (-1), show marks
6C99             2 169 Main_ThreeRow_Increment
6C99 34          2 170 inc     (hl)                        ; increment three-in-a-row counter
6C9A             2 171 Main_ThreeRow_Show
6C9A CD BE 78    2 172 call    Screen_ThreeRow             ; show three-in-a-row marks
6C9D 3E FF       2 173 ld      a, 255                      ; set delay duration
6C9F CD 55 6D    2 174 call    Main_Delay                  ; execute delay
6CA2 3E 03       2 175 ld      a, 3                        ; check three row counter
6CA4 BE          2 176 cp      (hl)                        ; is it 3?
6CA5 CA F6 6B    2 177 jp      z, Main_New_Level           ; yes, start a new level
6CA8 C3 0E 6C    2 178 jp      Main_Start_Match            ; start a new match
6CAB             2 180 ; ----------------------------------------------------------------------------------------------------------------------
6CAB             2 181 ; Main_GetSpeccy_Move: get the speccy move
6CAB             2 182 ;
6CAB             2 183 ; Input:     A = current token color
6CAB             2 184 ;
6CAB             2 185 ; Output:   BC = hexagon board indexes (B:column, C:row)
6CAB             2 186 ;           HL = CYAN_POSITIONS move address
6CAB             2 187 ;
6CAB             2 188 ; Uses:     MOVE_NUMBER (current move number)
6CAB             2 189 ;           GAME_LEVEL (current game level)
6CAB             2 190 ;           AI_DEPTH (recursion depth level)
6CAB             2 191 ;           STR_MOVE (formatted move string)
6CAB             2 192 ;
6CAB             2 193 ; Destroys: A, DE, IX, IY
6CAB             2 194 ; ----------------------------------------------------------------------------------------------------------------------
6CAB             2 195 Main_GetSpeccy_Move:
6CAB E6 03       2 196 and     %00000011                   ; calculate speccy's timer flag based on current token color
6CAD 32 E8 62    2 197 ld      (TIMER_FLAG), a             ; (re)start speccy timer
6CB0 CD F4 6E    2 199 call    Print_Wait                  ; print "WAIT" message
6CB3 3A 9B 61    2 200 ld      a, (MOVE_NUMBER)            ; get move number
6CB6 3D          2 201 dec     a                           ; is it cyan first move?
6CB7 28 2A       2 202 jr      z, Main_GetSpeccy_Book      ; yes, get move from opening book
6CB9 DD 21 00 7F 2 204 ld      ix, CANDIDATES              ; IX points to candidates list address
6CBD 3A 9D 61    2 205 ld      a, (GAME_LEVEL)             ; get game level
6CC0 32 9A 61    2 206 ld      (AI_DEPTH), a               ; save recursion depth level
6CC3 CD BC 70    2 207 call    PathFinder_Friend           ; get speccy side
6CC6 CD 48 6F    2 208 call    BRAINIAC_best_move          ; get speccy best move
6CC9 6B          2 209 ld      l, e                        ; set node index in L
6CCA             2 210 Main_GetSpeccy_Positions
6CCA 26 7D       2 211 ld      h, CYAN_POSITIONS/256       ; HL points to CYAN_POSITIONS move address
6CCC E5          2 212 push    hl                          ; store CYAN_POSITIONS move address
6CCD CD 43 6D    2 213 call    Main_Board2Indexes          ; convert board position to indexes
6CD0 78          2 214 ld      a, b                        ; get 1..7 column
6CD1 C6 60       2 215 add     a, $60                      ; adjust to charset ('a'..'g')
6CD3 32 15 62    2 216 ld      (STR_MOVE+0), a             ; put it on formatted move string
6CD6 79          2 217 ld      a, c                        ; get 1..7 row
6CD7 C6 30       2 218 add     a, $30                      ; adjust to charset ('1'..'7')
6CD9 32 18 62    2 219 ld      (STR_MOVE+3), a             ; put it on formatted move string
6CDC C5          2 220 push    bc                          ; store hexagon board indexes
6CDD CD 04 6F    2 221 call    Print_Move                  ; print Speccy move
6CE0 C1          2 222 pop     bc                          ; restore hexagon board indexes
6CE1 E1          2 223 pop     hl                          ; restore CYAN_POSITIONS move address
6CE2 C9          2 224 ret
6CE3             2 225 Main_GetSpeccy_Book
6CE3 ED 5F       2 226 ld      a, r                        ; get a pseudo-random number (0..127)
6CE5 E6 1F       2 227 and     %00011111                   ; number is in range (0..31)
6CE7 FE 1B       2 228 cp      27                          ; is it >= 27?
6CE9 30 F8       2 229 jr      nc, Main_GetSpeccy_Book     ; yes, repeat until range is (0..26)
6CEB 21 CD 62    2 230 ld      hl, OPENINGS                ; HL points to opening book address
6CEE 16 00       2 231 ld      d, 0                        ; set index in DE
6CF0 5F          2 232 ld      e, a
6CF1 19          2 233 add     hl, de                      ; HL points to move index address
6CF2 6E          2 234 ld      l, (hl)                     ; get move from opening book
6CF3 C3 CA 6C    2 235 jp      Main_GetSpeccy_Positions    ; get speccy move positions
6CF6             2 237 ; ----------------------------------------------------------------------------------------------------------------------
6CF6             2 238 ; Main_GetPlayer_Move: get a legal (empty hexagon) move from player
6CF6             2 239 ;
6CF6             2 240 ; Input:     A = current token color
6CF6             2 241 ;
6CF6             2 242 ; Output:   BC = hexagon board indexes (B:column, C:row)
6CF6             2 243 ;           HL = CYAN_POSITIONS move address
6CF6             2 244 ;           Z  = flag set
6CF6             2 245 ;
6CF6             2 246 ; Uses:     STR_MOVE (formatted move string)
6CF6             2 247 ;
6CF6             2 248 ; Destroys: A, DE, IX
6CF6             2 249 ; ----------------------------------------------------------------------------------------------------------------------
6CF6             2 250 Main_GetPlayer_Move:
6CF6 E6 03       2 251 and     %00000011                   ; calculate player's timer flag based on current token color
6CF8 32 E8 62    2 252 ld      (TIMER_FLAG), a             ; (re)start player timer
6CFB             2 253 Main_GetPlayer_Input
6CFB CD FC 6E    2 254 call    Print_Clear_Move            ; clear player last move
6CFE CD EF 6D    2 255 call    Input_Move                  ; wait for input player move
6D01 CD 04 6F    2 256 call    Print_Move                  ; print player move
6D04 3A 15 62    2 258 ld      a, (STR_MOVE+0)             ; get column ('a'..'g')
6D07 D6 60       2 259 sub     $60                         ; convert to number (1..7)
6D09 47          2 260 ld      b, a                        ; set column index in B
6D0A 3A 18 62    2 261 ld      a, (STR_MOVE+3)             ; get row ('1'..'7')
6D0D D6 30       2 262 sub     $30                         ; convert to number (1..7)
6D0F 4F          2 263 ld      c, a                        ; set row index in C
6D10 11 4D 62    2 264 ld      de, BOARD_COORDINATES       ; DE points to board coordinates address
6D13 CD 35 6D    2 265 call    Main_Search_Table           ; search board position in board coordinates
6D16 6E          2 266 ld      l, (hl)                     ; set board position of player move
6D17 26 7D       2 267 ld      h, CYAN_POSITIONS/256       ; HL points to CYAN_POSITIONS move address
6D19 3E 00       2 268 ld      a, EMPTY                    ; check position
6D1B BE          2 269 cp      (hl)                        ; is position empty?
6D1C C8          2 270 ret     z                           ; yes, return with Z flag set
6D1D             2 272 ; illegal player move (position not empty)
6D1D 11 2E 62    2 274 ld      de, STR_FILLED              ; DE points to "FILLED" string address
6D20 CD DA 6E    2 275 call    Print_Alert                 ; print string
6D23 DD 21 F7 64 2 276 ld      ix, FILLED_FX               ; IX points to filled tone parameters address
6D27 CD 9A 76    2 277 call    Sound_FX                    ; play sound fx
6D2A 3E 50       2 278 ld      a, 80                       ; set delay counter
6D2C CD 55 6D    2 279 call    Main_Delay                  ; execute delay
6D2F CD D2 6E    2 280 call    Print_Clear_Alert           ; clear alert message
6D32 C3 FB 6C    2 281 jp      Main_GetPlayer_Input        ; repeat player input until move is legal
6D35             2 283 ; ----------------------------------------------------------------------------------------------------------------------
6D35             2 284 ; Main_Search_Table: search an element in a 8x8 bytes table
6D35             2 285 ;
6D35             2 286 ; Input:    BC = element indexes (B = column, C = row)
6D35             2 287 ;           DE = table address in which to search for the element
6D35             2 288 ;
6D35             2 289 ; Output:   DE = address of first element in the C row of the table
6D35             2 290 ;           HL = address of the element in the BC indexes of the table
6D35             2 291 ;
6D35             2 292 ; Destroys: A
6D35             2 293 ; ----------------------------------------------------------------------------------------------------------------------
6D35             2 294 Main_Search_Table:
6D35 79          2 295 ld      a, c                        ; first, get the C row in table
6D36 87          2 296 add     a, a                        ; a row is 8 bytes long
6D37 87          2 297 add     a, a
6D38 87          2 298 add     a, a
6D39 6F          2 299 ld      l, a                        ; set index in HL
6D3A 26 00       2 300 ld      h, 0
6D3C 19          2 301 add     hl, de                      ; HL points to the address of C row 
6D3D EB          2 302 ex      de, hl                      ; put it on DE
6D3E 68          2 303 ld      l, b                        ; set B index in HL
6D3F 26 00       2 304 ld      h, 0
6D41 19          2 305 add     hl, de                      ; HL points to the address of BC indexes
6D42 C9          2 306 ret
6D43             2 308 ; ----------------------------------------------------------------------------------------------------------------------
6D43             2 309 ; Main_Board2Indexes: convert a board position into a board indexes
6D43             2 310 ;
6D43             2 311 ; Input:    L  = board position
6D43             2 312 ;
6D43             2 313 ; Output:   BC = board indexes (B = column, C = row)
6D43             2 314 ;
6D43             2 315 ; Destroys: HL
6D43             2 316 ; ----------------------------------------------------------------------------------------------------------------------
6D43             2 317 Main_Board2Indexes:
6D43 7D          2 318 ld      a, l                        ; set board position in A to compare later
6D44 21 8D 62    2 320 ld      hl, BOARD_COORDINATES+64    ; HL points to last board position address (+1)
6D47 0E 07       2 321 ld      c, 7                        ; 7 rows
6D49             2 322 Main_Board2Indexes_Row
6D49 06 07       2 323 ld      b, 7                        ; 7 columns
6D4B             2 324 Main_Board2Indexes_Col
6D4B 2B          2 325 dec     hl                          ; move HL to next board position address
6D4C BE          2 326 cp      (hl)                        ; is A the position?
6D4D C8          2 327 ret     z                           ; yes, return board indexes
6D4E 10 FB       2 328 djnz    Main_Board2Indexes_Col      ; repeat for each column
6D50 2B          2 329 dec     hl                          ; skip borders
6D51 0D          2 330 dec     c                           ; decrement row
6D52 C3 49 6D    2 331 jp      Main_Board2Indexes_Row      ; loop until find position
6D55             2 333 ; ----------------------------------------------------------------------------------------------------------------------
6D55             2 334 ; Main_Delay: execute a delay
6D55             2 335 ;
6D55             2 336 ; Input:    A = delay counter
6D55             2 337 ;
6D55             2 338 ; Output:   -
6D55             2 339 ;
6D55             2 340 ; Destroys: A
6D55             2 341 ; ----------------------------------------------------------------------------------------------------------------------
6D55             2 342 Main_Delay:
6D55 C5          2 343 push    bc                          ; store BC register
6D56             2 344 Main_Delay_Outer
6D56 F5          2 345 push    af                          ; store delay counter (outer loop)
6D57 01 B0 04    2 346 ld      bc, 1200                    ; set inner loop counter in BC
6D5A             2 347 Main_Delay_Inner
6D5A 0B          2 348 dec     bc                          ; decrement inner loop counter
6D5B 78          2 349 ld      a, b                        ; check inner loop counter
6D5C B1          2 350 or      c
6D5D 20 FB       2 351 jr      nz, Main_Delay_Inner        ; repeat until inner loop counter = 0
6D5F F1          2 352 pop     af                          ; restore delay counter
6D60 3D          2 353 dec     a                           ; decrement delay counter
6D61 20 F3       2 354 jr      nz, Main_Delay_Outer        ; repeat until delay counter = 0
6D63 C1          2 355 pop     bc                          ; restore BC register
6D64 C9          2 356 ret

; File #3: C:\Users\Antonio\source\repos\Hex\Z80CodeFiles\Draw.z80asm

6D65             3 1 ; ----------------------------------------------------------------------------------------------------------------------
6D65             3 2 ; Draw.z80asm
6D65             3 3 ; Coded by Antonio Luque
6D65             3 4 ; ----------------------------------------------------------------------------------------------------------------------
6D65             3 6 ; ----------------------------------------------------------------------------------------------------------------------
6D65             3 7 ; Draw_Board: draw an empty 7x7 hexagons board on the screen
6D65             3 8 ;
6D65             3 9 ; Input:    -
6D65             3 10 ;
6D65             3 11 ; Output:   -
6D65             3 12 ;
6D65             3 13 ; Uses:     TOKEN_COLOR (current token color)
6D65             3 14 ;
6D65             3 15 ; Destroys: A, BC, DE, HL, IXL
6D65             3 16 ; ----------------------------------------------------------------------------------------------------------------------
6D65             3 17 Draw_Board:
6D65 3E 07       3 18 ld      a, WHITE                    ; set empty hexagon color
6D67 32 9E 61    3 19 ld      (TOKEN_COLOR), a            ; store hexagon color
6D6A 0E 07       3 20 ld      c, 7                        ; 7 rows
6D6C             3 21 Draw_Board_Row
6D6C 06 07       3 22 ld      b, 7                        ; 7 columns
6D6E             3 23 Draw_Board_Column
6D6E CD 9B 6D    3 24 call    Draw_GetHEX_Screen          ; get hexagon screen address
6D71 CD D3 6D    3 25 call    Draw_Hexagon_Color          ; apply color to hexagon area
6D74 11 7E 65    3 26 ld      de, HEXAGON_EMPTY           ; DE points to hexagon sprite address
6D77 CD A5 6D    3 27 call    Draw_Sprite_Hexagon         ; draw an empty hexagon at screen address
6D7A 10 F2       3 28 djnz    Draw_Board_Column           ; repeat for each column
6D7C 0D          3 29 dec     c                           ; decrement row
6D7D 20 ED       3 30 jr      nz, Draw_Board_Row          ; repeat for each row
6D7F C9          3 31 ret
6D80             3 33 ; ----------------------------------------------------------------------------------------------------------------------
6D80             3 34 ; Draw_Token: animate an hexagon sprite on the screen
6D80             3 35 ;
6D80             3 36 ; Input:    BC = hexagon board indexes (B:column, C:row)
6D80             3 37 ;
6D80             3 38 ; Output:   -
6D80             3 39 ;
6D80             3 40 ; Destroys: A, BC, DE, HL, IXL
6D80             3 41 ; ----------------------------------------------------------------------------------------------------------------------
6D80             3 42 Draw_Token:
6D80 CD 9B 6D    3 43 call    Draw_GetHEX_Screen          ; get hexagon screen address
6D83 01 04 06    3 44 ld      bc, $0604                   ; B = number of sprites, C = sprite number to change color
6D86 11 9E 65    3 45 ld      de, HEXAGON_SPRITE          ; DE points to hexagon sprite address
6D89             3 46 Draw_Token_Loop
6D89 E5          3 47 push    hl                          ; store hexagon screen address
6D8A CD A5 6D    3 48 call    Draw_Sprite_Hexagon         ; draw hexagon sprite
6D8D E1          3 49 pop     hl                          ; restore hexagon screen address
6D8E 78          3 50 ld      a, b                        ; check loop counter
6D8F B9          3 51 cp      c                           ; is it 4?
6D90 CC D3 6D    3 52 call    z, Draw_Hexagon_Color       ; yes, apply color to hexagon area
6D93             3 53 @Token_Delay
6D93 3E 00       3 54 ld      a, 0                        ; set delay duration (changed before calling this routine)
6D95 CD 55 6D    3 55 call    Main_Delay                  ; execute delay
6D98 10 EF       3 56 djnz    Draw_Token_Loop             ; repeat for each hexagon sprite
6D9A C9          3 57 ret
6D9B             3 59 ; ----------------------------------------------------------------------------------------------------------------------
6D9B             3 60 ; Draw_GetHEX_Screen: get the screen address of an hexagon on board
6D9B             3 61 ;
6D9B             3 62 ; Input:    BC = hexagon board indexes (B:column, C:row)
6D9B             3 63 ;
6D9B             3 64 ; Output:   HL = hexagon screen address 
6D9B             3 65 ;
6D9B             3 66 ; Destroys: A, DE
6D9B             3 67 ; ----------------------------------------------------------------------------------------------------------------------
6D9B             3 68 Draw_GetHEX_Screen:
6D9B 11 98 61    3 69 ld      de, BOARD_MAP-8             ; DE points to board hexagons screen addresses table (-8)
6D9E CD 35 6D    3 70 call    Main_Search_Table           ; search the screen address of the hexagon in table
6DA1 6E          3 71 ld      l, (hl)                     ; set the low byte of the screen address in L
6DA2 1A          3 72 ld      a, (de)                     ; set the high byte of the screen address in H
6DA3 67          3 73 ld      h, a
6DA4 C9          3 74 ret
6DA5             3 76 ; ----------------------------------------------------------------------------------------------------------------------
6DA5             3 77 ; Draw_Sprite_Hexagon: draw an hexagon sprite on the screen
6DA5             3 78 ;
6DA5             3 79 ; Input:    DE = hexagon sprite address
6DA5             3 80 ;           HL = hexagon screen address
6DA5             3 81 ;
6DA5             3 82 ; Output:   DE = next hexagon sprite address
6DA5             3 83 ;
6DA5             3 84 ; Destroys: A, HL, IXL
6DA5             3 85 ; ----------------------------------------------------------------------------------------------------------------------
6DA5             3 86 Draw_Sprite_Hexagon:
6DA5 DD 2E 10    3 87 ld      ixl, 16                     ; hexagon sprite height in bytes (loop counter)
6DA8             3 88 Draw_Sprite_HexLoop
6DA8 1A          3 89 ld      a, (de)                     ; get sprite byte
6DA9 77          3 90 ld      (hl), a                     ; put sprite byte on screen
6DAA 13          3 91 inc     de                          ; move DE to next sprite byte address
6DAB 2C          3 92 inc     l                           ; move HL to next screen column
6DAC 1A          3 93 ld      a, (de)                     ; get sprite byte
6DAD 77          3 94 ld      (hl), a                     ; put sprite byte on screen
6DAE 13          3 95 inc     de                          ; move DE to next sprite byte
6DAF 2D          3 96 dec     l                           ; move HL to previous screen column
6DB0 CD C4 6D    3 97 call    Draw_Down_PixelLine         ; move HL down one pixel-line
6DB3 DD 2D       3 98 dec     ixl                         ; decrement sprite height
6DB5 20 F1       3 99 jr      nz, Draw_Sprite_HexLoop     ; repeat for each byte in sprite
6DB7 C9          3 100 ret
6DB8             3 102 ; ----------------------------------------------------------------------------------------------------------------------
6DB8             3 103 ; Draw_Sprite_LetterNum: draw a letter/number sprite at screen address
6DB8             3 104 ;
6DB8             3 105 ; Input:    DE = letter/number sprite address
6DB8             3 106 ;           HL = letter/number screen address
6DB8             3 107 ;
6DB8             3 108 ; Output:   DE = next letter/number sprite address
6DB8             3 109 ;
6DB8             3 110 ; Destroys: A, C, HL
6DB8             3 111 ; ----------------------------------------------------------------------------------------------------------------------
6DB8             3 112 Draw_Sprite_LetterNum:
6DB8 0E 0A       3 113 ld      c, 10                       ; letter/number sprite height in bytes (loop counter)
6DBA             3 114 Draw_Sprite_Loop
6DBA 1A          3 115 ld      a, (de)                     ; get sprite byte
6DBB 77          3 116 ld      (hl), a                     ; put sprite byte on screen
6DBC 13          3 117 inc     de                          ; move DE to next sprite byte address
6DBD CD C4 6D    3 118 call    Draw_Down_PixelLine         ; move HL down one pixel-line
6DC0 0D          3 119 dec     c                           ; decrement sprite height
6DC1 20 F7       3 120 jr      nz, Draw_Sprite_Loop        ; repeat for each byte in sprite
6DC3 C9          3 121 ret
6DC4             3 123 ; ----------------------------------------------------------------------------------------------------------------------
6DC4             3 124 ; Draw_Down_PixelLine: move HL down one pixel-line
6DC4             3 125 ; Source: https://spectrumcomputing.co.uk/forums/viewtopic.php?p=35272#p35272
6DC4             3 126 ;
6DC4             3 127 ; The screen address of a pixel-line is encoded as follows:
6DC4             3 128 ;
6DC4             3 129 ;             H           |           L
6DC4             3 130 ;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
6DC4             3 131 ;  07|06|05|04|03|02|01|00|07|06|05|04|03|02|01|00
6DC4             3 132 ;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
6DC4             3 133 ;   0| 1| 0|Y7|Y6|Y2|Y1|Y0|Y5|Y4|Y3|X4|X3|X2|X1|X0
6DC4             3 134 ;
6DC4             3 135 ; where:
6DC4             3 136 ;   Y = pixel position: Y7,Y6,Y5,Y4,Y3,Y2,Y1,Y0 (0-191)
6DC4             3 137 ;   X = byte  position:  0, 0, 0,X4,X3,X2,X1,X0 (0-31)
6DC4             3 138 ;
6DC4             3 139 ; Input:    HL = pixel-line address
6DC4             3 140 ;
6DC4             3 141 ; Output:   HL = next (down) pixel-line address
6DC4             3 142 ;
6DC4             3 143 ; Destroys: A
6DC4             3 144 ; ----------------------------------------------------------------------------------------------------------------------
6DC4             3 145 Draw_Down_PixelLine:
6DC4 24          3 146 inc     h                           ; move HL down one pixel-line
6DC5 7C          3 147 ld      a, h                        ; get high byte of pixel-line address
6DC6 E6 07       3 148 and     %00000111                   ; is pixel-line address inside a character line?
6DC8 C0          3 149 ret     nz                          ; yes, return
6DC9 7D          3 150 ld      a, l                        ; get low byte of pixel-line address (at this point Y6 = 1)
6DCA C6 20       3 151 add     a, 32                       ; add size of char line (add extra bit into Y3-Y5)
6DCC 6F          3 152 ld      l, a                        ; move HL down one character line
6DCD D8          3 153 ret     c                           ; a third was crossed? yes, return
6DCE 7C          3 154 ld      a, h                        ; get high byte of pixel-line address
6DCF D6 08       3 155 sub     8                           ; clean up the bit from Y6
6DD1 67          3 156 ld      h, a                        ; HL points to next (down) pixel-line address
6DD2 C9          3 157 ret
6DD3             3 159 ; ----------------------------------------------------------------------------------------------------------------------
6DD3             3 160 ; Draw_Hexagon_Color: color an hexagon sprite on the screen
6DD3             3 161 ; Source: https://spectrumcomputing.co.uk/forums/viewtopic.php?p=42285#p42285
6DD3             3 162 ;
6DD3             3 163 ; This routine converts a screen address (HL) into an attribute address (IX):
6DD3             3 164 ;
6DD3             3 165 ;             H           |           L
6DD3             3 166 ;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
6DD3             3 167 ;  07|06|05|04|03|02|01|00|07|06|05|04|03|02|01|00
6DD3             3 168 ;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
6DD3             3 169 ;   0| 1| 0|Y7|Y6|Y2|Y1|Y0|Y5|Y4|Y3|X4|X3|X2|X1|X0      screen address
6DD3             3 170 ;
6DD3             3 171 ;            IXH          |          IXL
6DD3             3 172 ;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
6DD3             3 173 ;  07|06|05|04|03|02|01|00|07|06|05|04|03|02|01|00
6DD3             3 174 ;  --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
6DD3             3 175 ;   0| 1| 0| 1| 1| 0|Y7|Y6|Y5|Y4|Y3|X4|X3|X2|X1|X0      attribute address
6DD3             3 176 ;
6DD3             3 177 ; where:
6DD3             3 178 ;   Y = pixel position: Y7,Y6,Y5,Y4,Y3,Y2,Y1,Y0 (0-191)
6DD3             3 179 ;   X = byte  position:  0, 0, 0,X4,X3,X2,X1,X0 (0-31)
6DD3             3 180 ;
6DD3             3 181 ; Input:    HL = screen address of the hexagon
6DD3             3 182 ;
6DD3             3 183 ; Output:   IX = attribute address of the hexagon
6DD3             3 184 ;
6DD3             3 185 ; Uses:     TOKEN_COLOR (current token color)
6DD3             3 186 ;
6DD3             3 187 ; Destroys: A
6DD3             3 188 ; ----------------------------------------------------------------------------------------------------------------------
6DD3             3 189 Draw_Hexagon_Color:
6DD3 7C          3 190 ld      a, h                        ; get high byte of screen address
6DD4 F6 87       3 191 or      %10000111                   ; mask Y0-Y2 and set bit 7 on
6DD6 1F          3 192 rra                                 ; shift Y7-Y6 two positions
6DD7 1F          3 193 rra
6DD8 CB 3F       3 194 srl     a                           ; shift Y7-Y6 to last positions and set bit 7 off
6DDA DD 67       3 195 ld      ixh, a                      ; set high byte of attribute address in IXH
6DDC 7D          3 196 ld      a, l                        ; (the low byte for attribute address doesn't change)
6DDD DD 6F       3 197 ld      ixl, a                      ; set low byte of attribute address in IXL
6DDF 3A 9E 61    3 198 ld      a, (TOKEN_COLOR)            ; get current token color
6DE2 DD 77 00    3 199 ld      (ix+0), a                   ; set hexagon color (4 bytes)
6DE5 DD 77 01    3 200 ld      (ix+1), a
6DE8 DD 77 20    3 201 ld      (ix+32), a
6DEB DD 77 21    3 202 ld      (ix+33), a
6DEE C9          3 203 ret

; File #4: C:\Users\Antonio\source\repos\Hex\Z80CodeFiles\Input.z80asm

6DEF             4 1 ; ----------------------------------------------------------------------------------------------------------------------
6DEF             4 2 ; Input.z80asm
6DEF             4 3 ; Coded by Antonio Luque
6DEF             4 4 ; ----------------------------------------------------------------------------------------------------------------------
6DEF             4 6 MAX_CHARS               EQU     2                           ; maximum of input chars
6DEF             4 8 ; ----------------------------------------------------------------------------------------------------------------------
6DEF             4 9 ; Input_Move: wait for the input of a movement through the keyboard
6DEF             4 10 ;
6DEF             4 11 ; Based on assembler course by sromero:
6DEF             4 12 ; https://wiki.speccy.org/cursos/ensamblador/gfx4_fuentes#lectura-de-texto-desde-teclado
6DEF             4 13 ;
6DEF             4 14 ; Input:    -
6DEF             4 15 ;
6DEF             4 16 ; Output:   -
6DEF             4 17 ;
6DEF             4 18 ; Uses:     TOKEN_COLOR (current token color)
6DEF             4 19 ;           STR_MOVE (formatted move string)
6DEF             4 20 ;
6DEF             4 21 ; Destroys: A, BC, DE, HL, IX
6DEF             4 22 ; ----------------------------------------------------------------------------------------------------------------------
6DEF             4 23 Input_Move:
6DEF 01 00 02    4 24 ld      bc, MAX_CHARS*256           ; B = maximum of input chars, C = chars counter
6DF2 DD 21 83 5A 4 26 ld      ix, $5A83                   ; IX points to attribute address of RED input text
6DF6 21 83 50    4 27 ld      hl, $5083                   ; HL points to screen address of RED input text
6DF9 3A 9E 61    4 28 ld      a, (TOKEN_COLOR)            ; check current player color
6DFC FE 02       4 29 cp      RED_COLOR                   ; is RED the current token color?
6DFE 28 07       4 30 jr      z, Input_Start              ; yes, start input
6E00 DD 21 19 59 4 31 ld      ix, $5919                   ; IX points to attribute address of CYAN input text
6E04 21 19 48    4 32 ld      hl, $4819                   ; HL points to screen address of CYAN input text
6E07             4 33 Input_Start
6E07 DD 36 00 C7 4 34 ld      (ix+0), WHITE_FLASH1        ; set attributes for cursor (flash)
6E0B 3E 5F       4 35 ld      a, '_'                      ; text input cursor
6E0D CD 2E 6F    4 36 call    Print_Char                  ; print cursor
6E10             4 37 Input_Loop
6E10 CD 88 6E    4 38 call    Input_Key_Scan              ; scan for a key pressed
6E13 FE 0D       4 39 cp      13                          ; is it ENTER?
6E15 28 64       4 40 jr      z, Input_Enter              ; yes, perform enter pressed
6E17 FE 30       4 41 cp      '0'                         ; is it "delete"? (char '0' acts as delete, without Shift)
6E19 28 42       4 42 jr      z, Input_Delete             ; yes, perform delete char
6E1B 57          4 43 ld      d, a                        ; store char in D
6E1C 79          4 44 ld      a, c                        ; check number of chars inserted
6E1D B8          4 45 cp      b                           ; chars limit reached?
6E1E 28 F0       4 46 jr      z, Input_Loop               ; yes, repeat input loop
6E20 B7          4 48 or      a                           ; is it the first char?
6E21 20 21       4 49 jr      nz, Input_Numbers           ; no, perform input of second char
6E23             4 51 ; restrict first char to 'a'-'g'
6E23 7A          4 53 ld      a, d                        ; restore char
6E24 FE 61       4 54 cp      'a'                         ; is it < 'a'?
6E26 38 E8       4 55 jr      c, Input_Loop               ; yes, repeat input loop (char is not allowed)
6E28 FE 68       4 56 cp      'g'+1                       ; is it > 'g'?
6E2A 30 E4       4 57 jr      nc, Input_Loop              ; yes, repeat input loop (char is not allowed)
6E2C             4 59 ; char is valid as column
6E2C 32 15 62    4 61 ld      (STR_MOVE+0), a             ; save char in player move
6E2F DD 36 00 47 4 62 ld      (ix+0), WHITE_FLASH0        ; restore attributes (no flash)
6E33 CD 2E 6F    4 63 call    Print_Char                  ; print key pressed
6E36 0C          4 64 inc     c                           ; increment chars counter
6E37 2C          4 65 inc     l                           ; increment X position of current input screen location
6E38 DD 2C       4 66 inc     ixl                         ; increment X position of current input attr location
6E3A 3E 2D       4 67 ld      a, '-'                      ; set dash char
6E3C CD 2E 6F    4 68 call    Print_Char                  ; print dash char
6E3F 2C          4 69 inc     l                           ; increment X position of current input screen location
6E40 DD 2C       4 70 inc     ixl                         ; increment X position of current input attr location
6E42 18 C3       4 71 jr      Input_Start                 ; get next char (do until ENTER is pressed)
6E44             4 72 Input_Numbers
6E44             4 73 ; restrict second char to '1'-'7'
6E44 7A          4 75 ld      a, d                        ; restore char
6E45 FE 31       4 76 cp      '1'                         ; is it < '1'?
6E47 38 C7       4 77 jr      c, Input_Loop               ; yes, repeat input loop (char is not allowed)
6E49 FE 38       4 78 cp      '7'+1                       ; is it > '7'?
6E4B 30 C3       4 79 jr      nc, Input_Loop              ; yes, repeat input loop (char is not allowed)
6E4D             4 81 ; char is valid as row
6E4D 32 18 62    4 83 ld      (STR_MOVE+3), a             ; save char in player move
6E50 DD 36 00 47 4 84 ld      (ix+0), WHITE_FLASH0        ; restore attributes (no flash)
6E54 CD 2E 6F    4 85 call    Print_Char                  ; print key pressed
6E57 0C          4 86 inc     c                           ; increment chars counter
6E58 2C          4 87 inc     l                           ; increment X position of current input screen location
6E59 DD 2C       4 88 inc     ixl                         ; increment X position of current input attr location
6E5B 18 AA       4 89 jr      Input_Start                 ; get next char (do until ENTER is pressed)
6E5D             4 91 ; player pressed "delete" (char '0')
6E5D             4 92 Input_Delete
6E5D 79          4 93 ld      a, c                        ; get char counter
6E5E B7          4 94 or      a                           ; is it 0?
6E5F 28 AF       4 95 jr      z, Input_Loop               ; repeat input loop (no chars to delete)
6E61 DD 36 00 47 4 97 ld      (ix+0), WHITE_FLASH0        ; restore attributes (no flash)
6E65 B8          4 98 cp      b                           ; is it the first char?
6E66 28 08       4 99 jr      z, Input_Delete_Char        ; yes, continue delete
6E68 3E 20       4 100 ld      a, ' '                      ; empty char
6E6A CD 2E 6F    4 101 call    Print_Char                  ; delete cursor and last char
6E6D 2D          4 102 dec     l                           ; decrement X position of input screen location
6E6E DD 2D       4 103 dec     ixl                         ; decrement X position of input attr location
6E70             4 104 Input_Delete_Char
6E70 0D          4 105 dec     c                           ; decrement char counter
6E71 3E 20       4 106 ld      a, ' '                      ; empty char
6E73 CD 2E 6F    4 107 call    Print_Char                  ; delete cursor and last char
6E76 2D          4 108 dec     l                           ; decrement X position of player input screen location
6E77 DD 2D       4 109 dec     ixl                         ; decrement X position of player input attr location
6E79 18 8C       4 110 jr      Input_Start                 ; get next char
6E7B             4 112 ; player pressed ENTER
6E7B             4 113 Input_Enter
6E7B 79          4 114 ld      a, c                        ; check char counter  
6E7C B8          4 115 cp      b                           ; is it < MAX_CHARS?
6E7D 38 91       4 116 jr      c, Input_Loop               ; yes, repeat input loop (move is incomplete)
6E7F DD 36 00 47 4 118 ld      (ix+0), WHITE_FLASH0        ; restore attributes (no flash)
6E83 3E 20       4 119 ld      a, ' '                      ; empty char
6E85 C3 2E 6F    4 120 jp      Print_Char                  ; delete cursor and return via Print_Char
6E88             4 122 ; ----------------------------------------------------------------------------------------------------------------------
6E88             4 123 ; Input_Key_Scan: wait for a key pressed and return its ASCII code
6E88             4 124 ;
6E88             4 125 ;                           Bit
6E88             4 126 ;  Port  |   0   |   1   |   2   |   3   |   4   |
6E88             4 127 ;  ------+-------+-------+-------+-------+-------+
6E88             4 128 ;  $FEFE | Shift |   Z   |   X   |   C   |   V   |
6E88             4 129 ;  $FDFE |   A   |   S   |   D   |   F   |   G   |
6E88             4 130 ;  $FBFE |   Q   |   W   |   E   |   R   |   T   |
6E88             4 131 ;  $F7FE |   1   |   2   |   3   |   4   |   5   |
6E88             4 132 ;  $EFFE |   0   |   9   |   8   |   7   |   6   |
6E88             4 133 ;  $DFFE |   P   |   O   |   I   |   U   |   Y   |
6E88             4 134 ;  $BFFE | Enter |   L   |   K   |   J   |   H   |
6E88             4 135 ;  $7FFE | Space |  Sym  |   M   |   N   |   B   |
6E88             4 136 ;
6E88             4 137 ;  Bits are set to 0 for any key that is pressed and 1 for any key that is not pressed
6E88             4 138 ;
6E88             4 139 ; Input:    -
6E88             4 140 ;
6E88             4 141 ; Output:   A = ASCII code of key pressed
6E88             4 142 ;
6E88             4 143 ; Destroys: DE
6E88             4 144 ; ----------------------------------------------------------------------------------------------------------------------
6E88             4 145 Input_Key_Scan:
6E88 C5          4 146 push    bc                          ; store registers
6E89 E5          4 147 push    hl
6E8A             4 148 Input_Key_Released
6E8A 01 FE FE    4 149 ld      bc, $FEFE                   ; set keyboard port (see above)
6E8D             4 150 Input_Key_Released_Line
6E8D ED 78       4 151 in      a, (c)                      ; read port
6E8F 2F          4 152 cpl                                 ; invert bits
6E90 E6 1F       4 153 and     %00011111                   ; check 0 to 4 bits
6E92 20 F6       4 154 jr      nz, Input_Key_Released      ; repeat from the beginning until no key is pressed
6E94 CB 00       4 155 rlc     b                           ; move BC to the next port
6E96 38 F5       4 156 jr      c, Input_Key_Released_Line  ; repeat for each port
6E98 11 05 00    4 157 ld      de, 5                       ; number of keys in each port (KEY_MAP displacement)
6E9B             4 158 Input_Key_Pressed_Begin
6E9B 21 D8 61    4 159 ld      hl, KEY_MAP                 ; HL points to KEY_MAP array
6E9E             4 160 Input_Key_Pressed_Line
6E9E ED 78       4 161 in      a, (c)                      ; read port
6EA0 2F          4 162 cpl                                 ; invert bits
6EA1 E6 1F       4 163 and     %00011111                   ; check 0 to 4 bits
6EA3 20 08       4 164 jr      nz, Input_Key_Pressed       ; if any key is pressed, process it
6EA5 19          4 165 add     hl, de                      ; HL points to the next KEY_MAP block
6EA6 CB 00       4 166 rlc     b                           ; move BC to the next port
6EA8 38 F4       4 167 jr      c, Input_Key_Pressed_Line   ; repeat for each port
6EAA 18 EF       4 168 jr      Input_Key_Pressed_Begin     ; repeat from the beginning until any key is pressed
6EAC             4 169 Input_Key_Next
6EAC 23          4 170 inc     hl                          ; move HL to the next character
6EAD             4 171 Input_Key_Pressed
6EAD 1F          4 172 rra                                 ; rotate bits of port readed
6EAE 30 FC       4 173 jr      nc, Input_Key_Next          ; repeat until find the key pressed
6EB0 7E          4 174 ld      a, (hl)                     ; return key pressed (ASCII) in A
6EB1 E1          4 175 pop     hl                          ; restore registers
6EB2 C1          4 176 pop     bc
6EB3 C9          4 177 ret

; File #5: C:\Users\Antonio\source\repos\Hex\Z80CodeFiles\Print.z80asm

6EB4             5 1 ; ----------------------------------------------------------------------------------------------------------------------
6EB4             5 2 ; Print.z80asm
6EB4             5 3 ; Coded by Antonio Luque
6EB4             5 4 ; ----------------------------------------------------------------------------------------------------------------------
6EB4             5 6 CHAR_SET                EQU     FONT-256                    ; address of character set data, adjusted for ASCII codes
6EB4             5 8 ; ----------------------------------------------------------------------------------------------------------------------
6EB4             5 9 ; Print_Players: print "Player" and "Speccy" strings in the corresponding positions
6EB4             5 10 ;
6EB4             5 11 ; Input:    A = player color (CYAN_COLOR or RED_COLOR)
6EB4             5 12 ;
6EB4             5 13 ; Output:   -
6EB4             5 14 ;
6EB4             5 15 ; Destroys: A, BC, DE, HL
6EB4             5 16 ; ----------------------------------------------------------------------------------------------------------------------
6EB4             5 17 Print_Players:
6EB4 11 21 62    5 18 ld      de, STR_PLAYER              ; DE points to "Player" string address
6EB7 01 1A 62    5 19 ld      bc, STR_SPECCY              ; BC points to "Speccy" string address
6EBA 21 02 50    5 20 ld      hl, $5002                   ; HL points to red string screen address
6EBD FE 02       5 21 cp      RED_COLOR                   ; is player color red?
6EBF 28 06       5 22 jr      z, Print_Players_Strings    ; yes, print players strings
6EC1 11 1A 62    5 23 ld      de, STR_SPECCY              ; DE points to "Speccy" string address
6EC4 01 21 62    5 24 ld      bc, STR_PLAYER              ; BC points to "Player" string address
6EC7             5 25 Print_Players_Strings
6EC7 CD 21 6F    5 26 call    Print_String                ; print "Player" or "Speccy"
6ECA 50          5 27 ld      d, b                        ; DE points to "Player" or "Speccy" string address
6ECB 59          5 28 ld      e, c
6ECC 21 98 40    5 29 ld      hl, $4098                   ; HL points to cyan string screen address
6ECF C3 21 6F    5 30 jp      Print_String                ; print "Player" or "Speccy"
6ED2             5 32 ; ----------------------------------------------------------------------------------------------------------------------
6ED2             5 33 ; Print_Clear_Alert: clear a printed alert message below the current player input move
6ED2             5 34 ;
6ED2             5 35 ; Input:    -
6ED2             5 36 ; Output:   -
6ED2             5 37 ; Destroys: A, BC, DE, HL, IX
6ED2             5 38 ; ----------------------------------------------------------------------------------------------------------------------
6ED2             5 39 Print_Clear_Alert:
6ED2 11 46 62    5 40 ld      de, STR_EMPTY6              ; DE points to a 6 blanks string address
6ED5 0E 47       5 41 ld      c, WHITE_FLASH0             ; set (clear) alert message color
6ED7 C3 DC 6E    5 42 jp      Print_Alert_XY              ; print (clear) alert string
6EDA             5 44 ; ----------------------------------------------------------------------------------------------------------------------
6EDA             5 45 ; Print_Alert: print an alert message below the current player input move
6EDA             5 46 ;
6EDA             5 47 ; Input:    DE = alert message string address
6EDA             5 48 ;
6EDA             5 49 ; Output:   -
6EDA             5 50 ;
6EDA             5 51 ; Uses:     TOKEN_COLOR (current token color)
6EDA             5 52 ;
6EDA             5 53 ; Destroys: A, BC, DE, HL, IX
6EDA             5 54 ; ----------------------------------------------------------------------------------------------------------------------
6EDA             5 55 Print_Alert:
6EDA 0E C7       5 56 ld      c, WHITE_FLASH1             ; set alert message color
6EDC             5 57 Print_Alert_XY
6EDC DD 21 A2 5A 5 58 ld      ix, $5AA2                   ; IX points to red alert string attribute address
6EE0 21 A2 50    5 59 ld      hl, $50A2                   ; HL points to red alert string screen address
6EE3 3A 9E 61    5 60 ld      a, (TOKEN_COLOR)            ; check current token color
6EE6 FE 02       5 61 cp      RED_COLOR                   ; is token color red?
6EE8 28 34       5 62 jr      z, Print_String_Color       ; yes, print alert string with color
6EEA DD 21 38 59 5 63 ld      ix, $5938                   ; IX points to cyan alert string attribute address
6EEE 21 38 48    5 64 ld      hl, $4838                   ; HL points to cyan alert string screen address
6EF1 C3 1E 6F    5 65 jp      Print_String_Color          ; print alert string with color
6EF4             5 67 ; ----------------------------------------------------------------------------------------------------------------------
6EF4             5 68 ; Print_Wait: print "WAIT" message at current player input move location 
6EF4             5 69 ;
6EF4             5 70 ; Input:    -
6EF4             5 71 ;
6EF4             5 72 ; Output:   -
6EF4             5 73 ;
6EF4             5 74 ; Destroys: A, BC, DE, HL, IX
6EF4             5 75 ; ----------------------------------------------------------------------------------------------------------------------
6EF4             5 76 Print_Wait:
6EF4 11 35 62    5 77 ld      de, STR_WAIT                ; DE points to "WAIT" string address
6EF7 0E C7       5 78 ld      c, WHITE_FLASH1             ; set wait message color
6EF9 C3 09 6F    5 79 jp      Print_Move_XY               ; print wait string
6EFC             5 81 ; ----------------------------------------------------------------------------------------------------------------------
6EFC             5 82 ; Clear_Move: clear a printed player move at current player input move location 
6EFC             5 83 ;
6EFC             5 84 ; Input:    -
6EFC             5 85 ;
6EFC             5 86 ; Output:   -
6EFC             5 87 ;
6EFC             5 88 ; Destroys: A, BC, DE, HL, IX
6EFC             5 89 ; ----------------------------------------------------------------------------------------------------------------------
6EFC             5 90 Print_Clear_Move:
6EFC 11 41 62    5 91 ld      de, STR_EMPTY4              ; DE points to a 4 blanks string address
6EFF 0E 47       5 92 ld      c, WHITE_FLASH0             ; set (clear) move string color
6F01 C3 09 6F    5 93 jp      Print_Move_XY               ; print (clear) move string
6F04             5 95 ; ----------------------------------------------------------------------------------------------------------------------
6F04             5 96 ; Print_Move: print a formatted move at current player input move location 
6F04             5 97 ;
6F04             5 98 ; Input:    -
6F04             5 99 ;
6F04             5 100 ; Output:   -
6F04             5 101 ;
6F04             5 102 ; Uses:     TOKEN_COLOR (current token color)
6F04             5 103 ;
6F04             5 104 ; Destroys: A, BC, DE, HL, IX
6F04             5 105 ; ----------------------------------------------------------------------------------------------------------------------
6F04             5 106 Print_Move:
6F04 11 15 62    5 107 ld      de, STR_MOVE                ; DE points to formatted move string address
6F07 0E 47       5 108 ld      c, WHITE_FLASH0             ; set string color
6F09             5 109 Print_Move_XY
6F09 DD 21 82 5A 5 110 ld      ix, $5A82                   ; IX points to red move attribute address
6F0D 21 83 50    5 111 ld      hl, $5083                   ; HL points to red move screen address
6F10 3A 9E 61    5 112 ld      a, (TOKEN_COLOR)            ; check current token color
6F13 FE 02       5 113 cp      RED_COLOR                   ; is token color red?
6F15 28 07       5 114 jr      z, Print_String_Color       ; yes, print move string with color
6F17 DD 21 18 59 5 115 ld      ix, $5918                   ; IX points to cyan move attribute address
6F1B 21 19 48    5 116 ld      hl, $4819                   ; HL points to cyan move screen address
6F1E             5 117 Print_String_Color
6F1E CD 3E 78    5 118 call    Screen_Apply_Color_6        ; apply color to string area
6F21             5 119 ; ----------------------------------------------------------------------------------------------------------------------
6F21             5 120 ; Print_String: print a string on the screen
6F21             5 121 ; Based on assembler course by sromero: https://wiki.speccy.org/cursos/ensamblador/gfx4_fuentes
6F21             5 122 ;
6F21             5 123 ; Input:    DE = string address (ending with 0)
6F21             5 124 ;           HL = string screen address
6F21             5 125 ;
6F21             5 126 ; Output:   -
6F21             5 127 ;
6F21             5 128 ; Destroys: A, DE, HL
6F21             5 129 ; ----------------------------------------------------------------------------------------------------------------------
6F21             5 130 Print_String:
6F21 1A          5 131 ld      a, (de)                     ; get string character
6F22 B7          5 132 or      a                           ; is it 0? (end of string)
6F23 C8          5 133 ret     z                           ; yes, return
6F24 D5          5 134 push    de                          ; store pointer to string address
6F25 CD 2E 6F    5 135 call    Print_Char                  ; print character
6F28 D1          5 136 pop     de                          ; restore pointer to string address
6F29 13          5 137 inc     de                          ; move DE to next string character
6F2A 2C          5 138 inc     l                           ; move HL to next screen column
6F2B C3 21 6F    5 139 jp      Print_String                ; repeat until end of string
6F2E             5 141 ; ----------------------------------------------------------------------------------------------------------------------
6F2E             5 142 ; Print_Char: print a character on the screen
6F2E             5 143 ;
6F2E             5 144 ; Input:    A  = character to print (ASCII)
6F2E             5 145 ;           HL = character screen address
6F2E             5 146 ;
6F2E             5 147 ; Output:   -
6F2E             5 148 ;
6F2E             5 149 ; Destroys: A, DE
6F2E             5 150 ; ----------------------------------------------------------------------------------------------------------------------
6F2E             5 151 Print_Char:
6F2E 11 C3 67    5 152 ld      de, CHAR_SET                ; DE points to charset address
6F31             5 153 Print_Tile:
6F31 E5          5 154 push    hl                          ; store pointer to character/tile screen address
6F32 26 00       5 155 ld      h, 0                        ; set character/tile index in HL
6F34 6F          5 156 ld      l, a
6F35 29          5 157 add     hl, hl                      ; a character/tile is 8 bytes long
6F36 29          5 158 add     hl, hl
6F37 29          5 159 add     hl, hl
6F38 19          5 160 add     hl, de                      ; move HL to character/tile address
6F39 EB          5 161 ex      de, hl                      ; DE points to character/tile address
6F3A E1          5 162 pop     hl                          ; restore pointer to character/tile screen address
6F3B C5          5 163 push    bc                          ; store BC register
6F3C 4C          5 164 ld      c, h                        ; save high byte of character/tile screen address
6F3D 06 08       5 165 ld      b, 8                        ; number of character/tile bytes (loop counter)
6F3F             5 166 Print_Tile_Pixels
6F3F 1A          5 167 ld      a, (de)                     ; get character/tile byte
6F40 77          5 168 ld      (hl), a                     ; put character/tile byte on screen
6F41 13          5 169 inc     de                          ; move DE to next character/tile byte
6F42 24          5 170 inc     h                           ; move HL down one pixel-line
6F43 10 FA       5 171 djnz    Print_Tile_Pixels           ; repeat for each character/tile bytes
6F45 61          5 172 ld      h, c                        ; restore high byte of character/tile screen address
6F46 C1          5 173 pop     bc                          ; restore BC register
6F47 C9          5 174 ret

; File #6: C:\Users\Antonio\source\repos\Hex\Z80CodeFiles\Brainiac.z80asm

6F48             6 1 ; ----------------------------------------------------------------------------------------------------------------------
6F48             6 2 ; Brainiac.z80asm
6F48             6 3 ; Coded by Einar Saukas: https://spectrumcomputing.co.uk/entry/31171/ZX-Spectrum/BRAINIAC
6F48             6 4 ;
6F48             6 5 ; Adapted for Hex game by Einar Saukas
6F48             6 6 ; ----------------------------------------------------------------------------------------------------------------------
6F48             6 8 MIN_VALUE               EQU     0                           ; alphaBeta pruning minimum value
6F48             6 9 MAX_VALUE               EQU     255                         ; alphaBeta pruning maximum value
6F48             6 11 ; ----------------------------------------------------------------------------------------------------------------------
6F48             6 12 ; BRAINIAC_best_move: execute BRAINIAC algorithm to determine best choice for specified player's next move, according to
6F48             6 13 ; specified AI difficulty level. This algorithm is implemented as recursive Minimax with alpha-beta pruning, that
6F48             6 14 ; alternates between tree nodes maximizing score (speccy move) and minimizing it (player move) depending on recursion
6F48             6 15 ; depth.
6F48             6 16 ;
6F48             6 17 ; Original source code by Einar Saukas: https://spectrumcomputing.co.uk/entry/31171/ZX-Spectrum/BRAINIAC
6F48             6 18 ;
6F48             6 19 ; Input:    A   = speccy side (FRIEND or ENEMY)
6F48             6 20 ;           IX  = candidates vector address
6F48             6 21 ;           P/V = flag unset if speccy side is FRIEND, flag set if speccy side is ENEMY
6F48             6 22 ;
6F48             6 23 ; Output:   E  = selected position (speccy move)
6F48             6 24 ;
6F48             6 25 ; Uses:     AI_PLAYER (speccy side)
6F48             6 26 ;           AI_DEPTH (recursion depth level)
6F48             6 27 ;
6F48             6 28 ; Destroys: A, A', BC, D, HL, IX, IY
6F48             6 29 ; ----------------------------------------------------------------------------------------------------------------------
6F48             6 30 BRAINIAC_best_move:
6F48 32 99 61    6 31 ld      (AI_PLAYER), a              ; save speccy side
6F4B CD 44 74    6 33 call    PathFinder_Score            ; get board score (needed to get candidates)
6F4E CD E7 74    6 34 call    PathFinder_Candidates       ; get candidates from board potentials
6F51             6 36 ; BRAINIAC start
6F51             6 37 AI_First_Candidate
6F51 DD 7E 00    6 38 ld      a, (ix+0)                   ; A is our first candidate
6F54 5F          6 40 ld      e, a                        ; E = best speccy move (initialization)
6F55 16 00       6 41 ld      d, MIN_VALUE                ; D = alphaMax
6F57             6 43 AI_Main_Loop                                                ; for each candidate {
6F57 D5          6 44 push    de                          ;       store alphaMax and best speccy move
6F58 26 7D       6 46 ld      h, CYAN_POSITIONS/256       ;       get and store candidate position on board
6F5A 6F          6 47 ld      l, a
6F5B E5          6 48 push    hl
6F5C 3A 99 61    6 50 ld      a, (AI_PLAYER)              ;       get speccy side
6F5F CD C5 70    6 51 call    PathFinder_PutToken         ;       BRAINIAC_play
6F62 EE 7C       6 52 xor     $7C                         ;       restore speccy side
6F64 1E FF       6 53 ld      e, MAX_VALUE                ;       E = betaMin
6F66 CD 7F 6F    6 54 call    Alphabeta_Min               ;       A = alphabeta_min(alphaMax, betaMin)
6F69 E1          6 56 pop     hl                          ;       restore candidate position
6F6A CD CB 70    6 57 call    PathFinder_EraseToken       ;       BRAINIAC_undo
6F6D D1          6 59 pop     de                          ;       restore alphaMax and best player node
6F6E BA          6 61 cp      d
6F6F 38 04       6 62 jr      c, AI_Main_Next
6F71 28 02       6 63 jr      z, AI_Main_Next             ;       if (A <= alphaMax) continue
6F73 57          6 65 ld      d, a                        ;       alphaMax = A
6F74 5D          6 66 ld      e, l                        ;       best move = E
6F75             6 68 AI_Main_Next
6F75 DD 2D       6 69 dec     ixl
6F77 DD 7E 00    6 70 ld      a, (ix+0)                   ;       A is our next candidate
6F7A B7          6 71 or      a                           ;       repeat until no more candidates
6F7B C2 57 6F    6 72 jp      nz, AI_Main_Loop            ; }
6F7E C9          6 73 ret
6F7F             6 75 ; ----------------------------------------------------------------------------------------------------------------------
6F7F             6 76 ; Alphabeta_Min: Process a tree node of the Minimax search tree with alpha-beta pruning, when it requires MINIMIZING
6F7F             6 77 ; Speccy's score.
6F7F             6 78 ;
6F7F             6 79 ; This implementation is different from conventional alpha-beta pruning because it returns the best (lowest) betaMin
6F7F             6 80 ; value obtained so far at this subtree depth (from previous sibling nodes), when it's even lower than the best (lowest)
6F7F             6 81 ; score at this tree node only. In practice that's OK, since the existence of a lower betaMin in a previous sibling node
6F7F             6 82 ; would make parent node discard the node's betaMin value and adopt the even lower betaMin value from a previous sibling
6F7F             6 83 ; node anyway. This change was useful to allow a highly optimized Assembly implementation with a more efficient register
6F7F             6 84 ; allocation. The only drawback was that, whenever a parent node obtains the same best score from 2 child nodes, it must
6F7F             6 85 ; always choose the child node evaluated first, since the other child node node may not really have the same score and
6F7F             6 86 ; could be just reproducing the best score from its sibling.
6F7F             6 87 ;
6F7F             6 88 ; Original source code by Einar Saukas: https://spectrumcomputing.co.uk/entry/31171/ZX-Spectrum/BRAINIAC
6F7F             6 89 ;
6F7F             6 90 ; Input:    A   = speccy side (FRIEND or ENEMY)
6F7F             6 91 ;           D   = alphaMax
6F7F             6 92 ;           E   = betaMin
6F7F             6 93 ;           P/V = flag unset if speccy side is FRIEND, flag set if speccy side is ENEMY
6F7F             6 94 ;
6F7F             6 95 ; Output:   A = "improved" betaMin
6F7F             6 96 ;           D = alphaMax
6F7F             6 97 ;           E = "improved" betaMin
6F7F             6 98 ;
6F7F             6 99 ; Uses:     AI_PLAYER (speccy side)
6F7F             6 100 ;           AI_DEPTH (recursion depth level)
6F7F             6 101 ;
6F7F             6 102 ; Destroys: BC, HL, IX, IY
6F7F             6 103 ; ----------------------------------------------------------------------------------------------------------------------
6F7F             6 104 Alphabeta_Min:
6F7F D5          6 105 push    de
6F80             6 107 ; check if last speccy move is a winner one
6F80 CD 44 74    6 109 call    PathFinder_Score            ; if (speccy won)
6F83 B7          6 110 or      a
6F84 C2 8E 6F    6 111 jp      nz, Alphabeta_Min_Candidates
6F87 3A 9A 61    6 112 ld      a, (AI_DEPTH)
6F8A C6 E0       6 113 add     a, 224                      ;     return 224+depth
6F8C D1          6 114 pop     de
6F8D C9          6 115 ret
6F8E             6 117 Alphabeta_Min_Candidates
6F8E CD E7 74    6 118 call    PathFinder_Candidates       ; find candidates for next move
6F91 D1          6 119 pop     de
6F92 DD 7E 00    6 121 ld      a, (ix+0)                   ; A is our first candidate
6F95 21 9A 61    6 123 ld      hl, AI_DEPTH
6F98 35          6 124 dec     (hl)                        ; depth--
6F99 CA D9 6F    6 125 jp      z, Heuristic_Min            ; if (depth == 0) return heuristic_min
6F9C             6 127 Alphabeta_Min_Loop                                          ; for each candidate {
6F9C D5          6 128 push    de                          ;       store alphaMax and betaMin
6F9D 26 7D       6 130 ld      h, CYAN_POSITIONS/256       ;       get and store candidate position on board
6F9F 6F          6 131 ld      l, a
6FA0 E5          6 132 push    hl
6FA1 3A 99 61    6 134 ld      a, (AI_PLAYER)              ;       get speccy side
6FA4 EE 7C       6 135 xor     $7C                         ;       switch to player side
6FA6 CD C5 70    6 136 call    PathFinder_PutToken         ;       BRAINIAC_play
6FA9 CD 1D 70    6 137 call    Alphabeta_Max               ;       A = alphabeta_max(alphaMax, betaMin)
6FAC E1          6 139 pop     hl                          ;       restore candidate position
6FAD CD CB 70    6 140 call    PathFinder_EraseToken       ;       BRAINIAC_undo
6FB0 D1          6 142 pop     de                          ;       restore alphaMax and betaMin
6FB1 BB          6 144 cp      e
6FB2 30 06       6 145 jr      nc, Alphabeta_Min_Next      ;       if (A >= betaMin) continue
6FB4 BA          6 147 cp      d
6FB5 38 12       6 148 jr      c, Alphabeta_Min_Exit
6FB7 28 10       6 149 jr      z, Alphabeta_Min_Exit       ;       if (A <= alphaMax) { depth++; return A }
6FB9 5F          6 151 ld      e, a                        ;       betaMin = A
6FBA             6 153 Alphabeta_Min_Next
6FBA DD 2D       6 154 dec     ixl
6FBC DD 7E 00    6 155 ld      a, (ix+0)                   ;       A is our next candidate
6FBF B7          6 156 or      a                           ;       repeat until no more candidates
6FC0 C2 9C 6F    6 157 jp      nz, Alphabeta_Min_Loop      ; }
6FC3 7B          6 159 ld      a, e                        ; return betaMin
6FC4 21 9A 61    6 161 ld      hl, AI_DEPTH
6FC7 34          6 162 inc     (hl)                        ; depth++
6FC8 C9          6 163 ret
6FC9             6 165 Alphabeta_Min_Exit
6FC9 5F          6 166 ld      e, a                        ; (discard remaining candidates)
6FCA AF          6 167 xor     a
6FCB             6 168 Alphabeta_Min_Skip
6FCB DD 2D       6 169 dec     ixl
6FCD DD BE 00    6 170 cp      (ix+0)
6FD0 C2 CB 6F    6 171 jp      nz, Alphabeta_Min_Skip
6FD3 7B          6 172 ld      a, e
6FD4 21 9A 61    6 174 ld      hl, AI_DEPTH
6FD7 34          6 175 inc     (hl)                        ; (depth++)
6FD8 C9          6 176 ret
6FD9             6 178 ; ----------------------------------------------------------------------------------------------------------------------
6FD9             6 179 ; Heuristic_Min: Specialized routine to process the lowest tree node (depth zero) of the Minimax search tree with alpha-
6FD9             6 180 ; beta pruning, when it requires MINIMIZING Speccy's score.
6FD9             6 181 ;
6FD9             6 182 ; Technically "Heuristic_Min" works exactly like "Alphabeta_Min_Loop", except it directly evaluates board for each child
6FD9             6 183 ; node instead of calling "Alphabeta_Max" recursively. Although it would be easier to just let it invoke "Alphabeta_Max"
6FD9             6 184 ; again to obtain the evaluated board, this simple optimization is responsible for making BRAINIAC almost 2 seconds
6FD9             6 185 ; faster.
6FD9             6 186 ;
6FD9             6 187 ; Original source code by Einar Saukas: https://spectrumcomputing.co.uk/entry/31171/ZX-Spectrum/BRAINIAC
6FD9             6 188 ;
6FD9             6 189 ; Input:    A = first candidate
6FD9             6 190 ;           D = alphaMax
6FD9             6 191 ;           E = betaMin
6FD9             6 192 ;
6FD9             6 193 ; Output:   A = "improved" betaMin
6FD9             6 194 ;           D = alphaMax
6FD9             6 195 ;           E = "improved" betaMin
6FD9             6 196 ;
6FD9             6 197 ; Uses:     AI_PLAYER (speccy side)
6FD9             6 198 ;           AI_DEPTH (recursion depth level)
6FD9             6 199 ;
6FD9             6 200 ; Destroys: BC, HL, IX, IY
6FD9             6 201 ; ----------------------------------------------------------------------------------------------------------------------
6FD9             6 202 Heuristic_Min:                                              ; for each candidate {
6FD9 D5          6 203 push    de                          ;       store alphaMax and betaMin
6FDA 26 7D       6 205 ld      h, CYAN_POSITIONS/256       ;       get and store candidate position on board
6FDC 6F          6 206 ld      l, a
6FDD E5          6 207 push    hl
6FDE 3A 99 61    6 209 ld      a, (AI_PLAYER)              ;       get speccy side
6FE1 EE 7C       6 210 xor     $7C                         ;       switch to player side
6FE3 CD C5 70    6 211 call    PathFinder_PutToken         ;       BRAINIAC_play
6FE6 CD 44 74    6 213 call    PathFinder_Score            ;       if (player won)
6FE9 FE FF       6 214 cp      -1
6FEB C2 F0 6F    6 215 jp      nz, Heuristic_Min_Continue
6FEE 3E 20       6 216 ld      a, 32                       ;           A = 32
6FF0             6 217 Heuristic_Min_Continue
6FF0 E1          6 218 pop     hl
6FF1 CD CB 70    6 219 call    PathFinder_EraseToken       ;       BRAINIAC_undo
6FF4 D1          6 221 pop     de
6FF5 BB          6 223 cp      e
6FF6 30 06       6 224 jr      nc, Heuristic_Min_Next      ;       if (A >= betaMin) continue
6FF8 BA          6 226 cp      d
6FF9 38 12       6 227 jr      c, Heuristic_Min_Exit
6FFB 28 10       6 228 jr      z, Heuristic_Min_Exit       ;       if (A <= alphaMax) { depth++; return A }
6FFD 5F          6 230 ld      e, a                        ;       betaMin = A
6FFE             6 232 Heuristic_Min_Next
6FFE DD 2D       6 233 dec     ixl
7000 DD 7E 00    6 234 ld      a, (ix+0)                   ;       A is our next candidate
7003 B7          6 235 or      a                           ;       repeat until no more candidates
7004 C2 D9 6F    6 236 jp      nz, Heuristic_Min           ; }
7007 7B          6 238 ld      a, e                        ; return betaMin
7008 21 9A 61    6 240 ld      hl, AI_DEPTH
700B 34          6 241 inc     (hl)                        ; depth++
700C C9          6 242 ret
700D             6 244 Heuristic_Min_Exit
700D 5F          6 245 ld      e, a                        ; (discard remaining candidates)
700E AF          6 246 xor     a
700F             6 247 Heuristic_Min_Skip
700F DD 2D       6 248 dec     ixl
7011 DD BE 00    6 249 cp      (ix+0)
7014 C2 0F 70    6 250 jp      nz, Heuristic_Min_Skip
7017 7B          6 251 ld      a, e
7018 21 9A 61    6 253 ld      hl, AI_DEPTH
701B 34          6 254 inc     (hl)                        ; (depth++)
701C C9          6 255 ret
701D             6 257 ; ----------------------------------------------------------------------------------------------------------------------
701D             6 258 ; Alphabeta_Max: Process a tree node of the Minimax search tree with alpha-beta pruning, when it requires MAXIMIZING
701D             6 259 ; Speccy's score.
701D             6 260 ;
701D             6 261 ; This implementation is different from conventional alpha-beta pruning because it returns the best (highest) alphaMax
701D             6 262 ; value obtained so far at this subtree depth (from previous sibling nodes), when it's even higher than the best
701D             6 263 ; (highest) score at this tree node only. In practice that's OK, since the existence of a higher alphaMax in a previous
701D             6 264 ; sibling node would make parent node discard the node's alphaMax value and adopt the even higher alphaMax value from a
701D             6 265 ; previous sibling node anyway. This change was useful to allow a highly optimized Assembly implementation with a more
701D             6 266 ; efficient register allocation. The only drawback was that, whenever a parent node obtains the same best score from 2
701D             6 267 ; child nodes, it must always choose the child node evaluated first, since the other child node node may not really have
701D             6 268 ; the same score and could be just reproducing the best score from its sibling.
701D             6 269 ;
701D             6 270 ; Original source code by Einar Saukas: https://spectrumcomputing.co.uk/entry/31171/ZX-Spectrum/BRAINIAC
701D             6 271 ;
701D             6 272 ; Input:    A   = speccy side (FRIEND or ENEMY)
701D             6 273 ;           D   = alphaMax
701D             6 274 ;           E   = betaMin
701D             6 275 ;           P/V = flag unset if speccy side is FRIEND, flag set if speccy side is ENEMY
701D             6 276 ;
701D             6 277 ; Output:   A = "improved" alphaMax
701D             6 278 ;           D = "improved" alphaMax
701D             6 279 ;           E = betaMin
701D             6 280 ;
701D             6 281 ; Uses:     AI_PLAYER (speccy side)
701D             6 282 ;           AI_DEPTH (recursion depth level)
701D             6 283 ;
701D             6 284 ; Destroys: BC, HL, IX, IY
701D             6 285 ; ----------------------------------------------------------------------------------------------------------------------
701D             6 286 Alphabeta_Max:
701D D5          6 287 push    de
701E             6 289 ; check if last player move is a winner one
701E CD 44 74    6 291 call    PathFinder_Score            ; if (player won)
7021 FE FF       6 292 cp      -1
7023 C2 2E 70    6 293 jp      nz, Alphabeta_Max_Candidates
7026 3A 9A 61    6 294 ld      a, (AI_DEPTH)
7029 2F          6 295 cpl
702A C6 21       6 296 add     a, 32+1                     ;     return 32-depth
702C D1          6 297 pop     de
702D C9          6 298 ret
702E             6 300 Alphabeta_Max_Candidates
702E CD E7 74    6 301 call    PathFinder_Candidates       ; find candidates for next move
7031 D1          6 302 pop     de
7032 DD 7E 00    6 304 ld      a, (ix+0)                   ; A is our first candidate
7035 21 9A 61    6 306 ld      hl, AI_DEPTH
7038 35          6 307 dec     (hl)                        ; depth--
7039 CA 79 70    6 308 jp      z, Heuristic_Max            ; if (depth == 0) return heuristic_max
703C             6 310 Alphabeta_Max_Loop                                          ; for each candidate {
703C D5          6 311 push    de                          ;       store alphaMax and betaMin
703D 26 7D       6 313 ld      h, CYAN_POSITIONS/256       ;       get and store candidate position on board
703F 6F          6 314 ld      l, a
7040 E5          6 315 push    hl
7041 3A 99 61    6 317 ld      a, (AI_PLAYER)              ;       get speccy side
7044 CD C5 70    6 318 call    PathFinder_PutToken         ;       BRAINIAC_play
7047 EE 7C       6 319 xor     $7C                         ;       restore speccy side
7049 CD 7F 6F    6 320 call    Alphabeta_Min               ;       A = alphabeta_min(alphaMax, betaMin)
704C E1          6 322 pop     hl                          ;       restore candidate position
704D CD CB 70    6 323 call    PathFinder_EraseToken       ;       BRAINIAC_undo
7050 D1          6 325 pop     de                          ;       restore alphaMax and betaMin
7051 BA          6 327 cp      d
7052 38 06       6 328 jr      c, Alphabeta_Max_Next
7054 28 04       6 329 jr      z, Alphabeta_Max_Next       ;       if (A <= alphaMax) continue
7056 BB          6 331 cp      e
7057 30 10       6 332 jr      nc, Alphabeta_Max_Exit      ;       if (A >= betaMin) { depth++; return A }
7059 57          6 334 ld      d, a                        ;       alphaMax = A
705A             6 336 Alphabeta_Max_Next
705A DD 2D       6 337 dec     ixl
705C DD 7E 00    6 338 ld      a, (ix+0)                   ;       A is our next candidate
705F B7          6 339 or      a                           ;       repeat until no more candidates
7060 C2 3C 70    6 340 jp      nz, Alphabeta_Max_Loop      ; }
7063 7A          6 342 ld      a, d                        ; return alphaMax
7064 21 9A 61    6 344 ld      hl, AI_DEPTH
7067 34          6 345 inc     (hl)                        ; depth++
7068 C9          6 346 ret
7069             6 348 Alphabeta_Max_Exit
7069 57          6 349 ld      d, a                        ; (discard remaining candidates)
706A AF          6 350 xor     a
706B             6 351 Alphabeta_Max_Skip
706B DD 2D       6 352 dec     ixl
706D DD BE 00    6 353 cp      (ix+0)
7070 C2 6B 70    6 354 jp      nz, Alphabeta_Max_Skip
7073 7A          6 355 ld      a, d
7074 21 9A 61    6 357 ld      hl, AI_DEPTH
7077 34          6 358 inc     (hl)                        ; (depth++)
7078 C9          6 359 ret
7079             6 361 ; ----------------------------------------------------------------------------------------------------------------------
7079             6 362 ; Heuristic_Max: Specialized routine to process the lowest tree node (depth zero) of the Minimax search tree with alpha-
7079             6 363 ; beta pruning, when it requires MAXIMIZING Speccy's score.
7079             6 364 ;
7079             6 365 ; Technically "Heuristic_Max" works exactly like "Alphabeta_Max_Loop", except it directly evaluates board for each child
7079             6 366 ; node instead of calling "Alphabeta_Min" recursively. Although it would be easier to just let it invoke "Alphabeta_Min"
7079             6 367 ; again to obtain the evaluated board, this simple optimization is responsible for making BRAINIAC almost 2 seconds
7079             6 368 ; faster.
7079             6 369 ;
7079             6 370 ; Original source code by Einar Saukas: https://spectrumcomputing.co.uk/entry/31171/ZX-Spectrum/BRAINIAC
7079             6 371 ;
7079             6 372 ; Input:    A = first candidate
7079             6 373 ;           D = alphaMax
7079             6 374 ;           E = betaMin
7079             6 375 ;
7079             6 376 ; Returns:  A = "improved" alphaMax
7079             6 377 ;           D = "improved" alphaMax
7079             6 378 ;           E = betaMin
7079             6 379 ;
7079             6 380 ; Uses:     AI_PLAYER (speccy side)
7079             6 381 ;           AI_DEPTH (recursion depth level)
7079             6 382 ;
7079             6 383 ; Destroys: BC, HL, IX, IY
7079             6 384 ; ----------------------------------------------------------------------------------------------------------------------
7079             6 385 Heuristic_Max:                                              ; for each candidate {
7079 D5          6 386 push    de                          ;       store alphaMax and betaMin
707A 26 7D       6 388 ld      h, CYAN_POSITIONS/256       ;       get and store candidate position on board
707C 6F          6 389 ld      l, a
707D E5          6 390 push    hl
707E 3A 99 61    6 392 ld      a, (AI_PLAYER)              ;       get speccy side
7081 CD C5 70    6 393 call    PathFinder_PutToken         ;       (BRAINIAC_play)
7084 EE 7C       6 394 xor     $7C                         ;       restore speccy side
7086 CD 44 74    6 396 call    PathFinder_Score            ;       if (speccy won)
7089 B7          6 397 or      a
708A C2 8F 70    6 398 jp      nz, Heuristic_Max_Continue
708D 3E E0       6 399 ld      a, 224                      ;           A = 224
708F             6 400 Heuristic_Max_Continue
708F E1          6 401 pop     hl                          ;       restore candidate position
7090 CD CB 70    6 402 call    PathFinder_EraseToken       ;       BRAINIAC_undo
7093 D1          6 404 pop     de                          ;       restore alphaMax and betaMin
7094 BA          6 406 cp      d
7095 38 06       6 407 jr      c, Heuristic_Max_Next
7097 28 04       6 408 jr      z, Heuristic_Max_Next       ;       if (A <= alphaMax) continue
7099 BB          6 410 cp      e
709A 30 10       6 411 jr      nc, Heuristic_Max_Exit      ;       if (A >= betaMin) { depth++; return A }
709C 57          6 413 ld      d, a                        ;       alphaMax = A
709D             6 415 Heuristic_Max_Next
709D DD 2D       6 416 dec     ixl
709F DD 7E 00    6 417 ld      a, (ix+0)                   ;       A is our next candidate
70A2 B7          6 418 or      a                           ;       repeat until no more candidates
70A3 C2 79 70    6 419 jp      nz, Heuristic_Max           ; }
70A6 7A          6 421 ld      a, d                        ; return alphaMax
70A7 21 9A 61    6 423 ld      hl, AI_DEPTH
70AA 34          6 424 inc     (hl)                        ; depth++
70AB C9          6 425 ret
70AC             6 427 Heuristic_Max_Exit
70AC 57          6 428 ld      d, a                        ; (discard remaining candidates)
70AD AF          6 429 xor     a
70AE             6 430 Heuristic_Max_Skip
70AE DD 2D       6 431 dec     ixl
70B0 DD BE 00    6 432 cp      (ix+0)
70B3 C2 AE 70    6 433 jp      nz, Heuristic_Max_Skip
70B6 7A          6 434 ld      a, d
70B7 21 9A 61    6 436 ld      hl, AI_DEPTH
70BA 34          6 437 inc     (hl)                        ; (depth++)
70BB C9          6 438 ret

; File #7: C:\Users\Antonio\source\repos\Hex\Z80CodeFiles\PathFinder.z80asm

70BC             7 1 ; ----------------------------------------------------------------------------------------------------------------------
70BC             7 2 ; PathFinder.z80asm
70BC             7 3 ; Coded by Einar Saukas: https://spectrumcomputing.co.uk/entry/28178/ZX-Spectrum/PATHFINDER
70BC             7 4 ;
70BC             7 5 ; Adapted by Antonio Luque and Einar Saukas to be used as heuristic in Hex game.
70BC             7 6 ; Based on chapter 5 of Jack van Rijswijck's thesis - https://webdocs.cs.ualberta.ca/~hayward/theses/jackmsc.pdf
70BC             7 7 ; ----------------------------------------------------------------------------------------------------------------------
70BC             7 9 EMPTY                   EQU     $00                         ; empty positions on the board
70BC             7 10 SKIPPED                 EQU     $01                         ; skipped positions on the board
70BC             7 11 FRIEND                  EQU     $02                         ; positions occupied by friendly tokens on the board
70BC             7 12 ENEMY                   EQU     $7E                         ; positions occupied by opponent tokens on the board
70BC             7 13 VICTORY                 EQU     $03                         ; internal value if victory
70BC             7 14 WIDTH                   EQU     $08                         ; distance to up-left/down-right neighbor
70BC             7 16 CYAN_POSITIONS          EQU     $7D00                       ; a 256-aligned memory area reserved for cyan positions
70BC             7 17 RED_POSITIONS           EQU     $7E00                       ; a 256-aligned memory area reserved for red positions
70BC             7 18 CANDIDATES              EQU     $7F00                       ; a 256-aligned memory area reserved to store candidates
70BC             7 20 ; ----------------------------------------------------------------------------------------------------------------------
70BC             7 21 ; PathFinder_Friend: return if current player is FRIEND or ENEMY from the perspective of the cyan player
70BC             7 22 ;
70BC             7 23 ; Input:    -
70BC             7 24 ;
70BC             7 25 ; Output:   A   = FRIEND if current token color is cyan, or A = ENEMY if current token color is red
70BC             7 26 ;           P/V = flag unset if speccy side is FRIEND, flag set if speccy side is ENEMY
70BC             7 27 ;
70BC             7 28 ; Uses:     TOKEN_COLOR (current token color)
70BC             7 29 ;
70BC             7 30 ; Destroys: -
70BC             7 31 ; ----------------------------------------------------------------------------------------------------------------------
70BC             7 32 PathFinder_Friend:
70BC 3A 9E 61    7 33 ld      a, (TOKEN_COLOR)            ; get current player color
70BF EE 07       7 34 xor     $07                         ; is current player color cyan?
70C1 E0          7 35 ret     po                          ; yes, return FRIEND 
70C2 3E 7E       7 36 ld      a, ENEMY                    ; no, return ENEMY
70C4 C9          7 37 ret
70C5             7 39 ; ----------------------------------------------------------------------------------------------------------------------
70C5             7 40 ; PathFinder_PutToken: put a token on both CYAN_POSITIONS and RED_POSITIONS areas
70C5             7 41 ;
70C5             7 42 ; Input:    A  = either FRIEND or ENEMY from the perspective of cyan player
70C5             7 43 ;           HL = CYAN_POSITIONS token address
70C5             7 44 ;
70C5             7 45 ; Output:   A   = inverted side (FRIEND or ENEMY)
70C5             7 46 ;           P/V = flag unset if speccy side is FRIEND, flag set if speccy side is ENEMY
70C5             7 47 ;
70C5             7 48 ; Destroys: -
70C5             7 49 ; ----------------------------------------------------------------------------------------------------------------------
70C5             7 50 PathFinder_PutToken:
70C5 77          7 51 ld      (hl), a                     ; put token at cyan position
70C6 24          7 52 inc     h                           ; move HL to red position address
70C7 EE 7C       7 53 xor     $7C                         ; invert side
70C9 77          7 54 ld      (hl), a                     ; put token at red position
70CA C9          7 55 ret
70CB             7 57 ; ----------------------------------------------------------------------------------------------------------------------
70CB             7 58 ; PathFinder_EraseToken: erase a token from both CYAN_POSITIONS and RED_POSITIONS areas
70CB             7 59 ;
70CB             7 60 ; Input:    HL = CYAN_POSITIONS token address
70CB             7 61 ;
70CB             7 62 ; Output:   -
70CB             7 63 ;
70CB             7 64 ; Destroys: -
70CB             7 65 ; ----------------------------------------------------------------------------------------------------------------------
70CB             7 66 PathFinder_EraseToken:
70CB 36 00       7 67 ld      (hl), EMPTY                 ; erase token at cyan position
70CD 24          7 68 inc     h                           ; move HL to red position address
70CE 36 00       7 69 ld      (hl), EMPTY                 ; erase token at red position
70D0 C9          7 70 ret
70D1             7 72 ; ----------------------------------------------------------------------------------------------------------------------
70D1             7 73 ; PathFinder_CopyPositions: copy from CYAN_POSITIONS or RED_POSITIONS area to its corresponding board
70D1             7 74 ;
70D1             7 75 ; Input:    DE = cyan or red board address (destiny)
70D1             7 76 ;           HL = CYAN_POSITIONS or RED_POSITIONS address (origin)
70D1             7 77 ;
70D1             7 78 ; Output:   DE = cyan or red board address (last position+1)
70D1             7 79 ;
70D1             7 80 ; Destroys: BC, HL
70D1             7 81 ; ----------------------------------------------------------------------------------------------------------------------
70D1             7 82 PathFinder_CopyPositions:
70D1 01 31 00    7 83 ld      bc, 7*7                     ; number of positions to be copied
70D4             7 84 PathFinder_CopyLoop
70D4 2C          7 85 inc     l                           ; skip borders on positions
70D5 2C          7 86 inc     l
70D6 1C          7 87 inc     e                           ; skip borders on board
70D7 1C          7 88 inc     e
70D8 ED A0       7 89 ldi                                 ; copy a row of 7 positions
70DA ED A0       7 90 ldi
70DC ED A0       7 91 ldi
70DE ED A0       7 92 ldi
70E0 ED A0       7 93 ldi
70E2 ED A0       7 94 ldi
70E4 ED A0       7 95 ldi
70E6 EA D4 70    7 96 jp      pe, PathFinder_CopyLoop     ; repeat for each row
70E9 C9          7 97 ret
70EA             7 99 ; ----------------------------------------------------------------------------------------------------------------------
70EA             7 100 ; PathFinder_Update: update current board position during heuristic function evaluation
70EA             7 101 ;
70EA             7 102 ; This is an approach to Jack van Rijswijck's "two-distance" metric. The two-distance is defined as "one more than the
70EA             7 103 ; second lowest distance of p's neighbors to q, with the proviso that the two-distance equals 1 if p and q are directly
70EA             7 104 ; adjacent".
70EA             7 105 ;
70EA             7 106 ; The position will be updated with a number that indicates two-distance from goal (stored in lowest 6 bits), and a flag
70EA             7 107 ; that indicates a position occupied by a friendly token (stored in 6th bit). Therefore this position is updated as
70EA             7 108 ; follows, depending on current content:
70EA             7 109 ;
70EA             7 110 ; * SKIPPED: 1 + distance of neighbor closest to goal
70EA             7 111 ; * FRIEND:  distance of neighbor closest to goal
70EA             7 112 ; * EMPTY:   1 + distance of neighbor closest to goal, if current distance is friendly, SKIPPED otherwise
70EA             7 113 ;
70EA             7 114 ; Input:    Z    = flag set when (HL) is FRIEND
70EA             7 115 ;           C    = current distance (also with a flag at 6th bit that indicates a friendly position)
70EA             7 116 ;           HL   = current position address (on either cyan boards or red boards)
70EA             7 117 ;           SP+2 = queue head address (on either cyan queue or red queue areas)
70EA             7 118 ;
70EA             7 119 ; Output:   -
70EA             7 120 ;
70EA             7 121 ; Destroys: B, DE
70EA             7 122 ; ----------------------------------------------------------------------------------------------------------------------
70EA             7 123 PathFinder_Update:
70EA 28 12       7 124 jr      z, PathFinder_Friendly      ; if Z flag is set, update friend distance
70EC 46          7 125 ld      b, (hl)                     ; check current position
70ED 10 1A       7 126 djnz    PathFinder_EMPTY            ; if (hl) = EMPTY, jump below
70EF             7 127 ; if (HL) = SKIPPED, then set (HL) = C+1 and insert HL at queue tail
70EF             7 128 PathFinder_Skipped:
70EF 71          7 129 ld      (hl), c                     ; save current distance in current position
70F0 34          7 130 inc     (hl)                        ; increment distance of current position
70F1 CB B6       7 131 res     6, (hl)                     ; reset friendly token flag
70F3 EB          7 132 ex      de, hl                      ; store current position in DE
70F4             7 133 @Queue_Tail
70F4 21 00 00    7 134 ld      hl, $0000                   ; HL points to queue tail address (changed before call)
70F7 2C          7 135 inc     l                           ; move queue tail down
70F8 73          7 136 ld      (hl), e                     ; store position into queue tail
70F9 22 F5 70    7 137 ld      (@Queue_Tail+1), hl         ; update queue tail
70FC EB          7 138 ex      de, hl                      ; restore current position
70FD C9          7 139 ret
70FE             7 140 ; if (HL) = FRIEND, then set (HL) = C and insert HL at queue head
70FE             7 141 PathFinder_Friendly
70FE 71          7 142 ld      (hl), c                     ; save current distance in current position
70FF CB F6       7 143 set     6, (hl)                     ; set friendly token flag
7101 45          7 144 ld      b, l                        ; save current position in B
7102 D1          7 145 pop     de                          ; preserve RET address
7103 E3          7 146 ex      (sp), hl                    ; retrieve queue head
7104 70          7 147 ld      (hl), b                     ; push this position into queue head
7105 2D          7 148 dec     l                           ; move queue head up
7106 E3          7 149 ex      (sp), hl                    ; update queue head
7107 D5          7 150 push    de                          ; restore RET address
7108 C9          7 151 ret
7109             7 152 ; if (HL) = EMPTY, then set (HL) = C+1 if current distance is friendly, set (HL) = SKIPPED otherwise
7109             7 153 PathFinder_EMPTY
7109 CB 71       7 154 bit     6, c                        ; is current distance friendly?
710B 20 E2       7 155 jr      nz, PathFinder_Skipped      ; yes, set (HL) = C+1 and insert HL in queue tail
710D 34          7 156 inc     (hl)                        ; set (HL) = SKIPPED to find the second lowest distance
710E C9          7 157 ret
710F             7 159 ; ----------------------------------------------------------------------------------------------------------------------
710F             7 160 ; PathFinder_Cyan_UpDown: set up 'Path_Finder' routine to calculate CYAN two-distances from UP to DOWN edge
710F             7 161 ;
710F             7 162 ; Input:    -
710F             7 163 ;
710F             7 164 ; Output:   A  = -1, if down edge couldn't be reached
710F             7 165 ;           A  =  0, if there is chain of connected cyan tokens between the two edges
710F             7 166 ;           A  = last edge position visited (-1), otherwise
710F             7 167 ;           HL = cyan queue head address
710F             7 168 ;
710F             7 169 ; Uses:     @Queue_Tail (queue pointer in 'PathFinder_Update' routine)
710F             7 170 ;
710F             7 171 ; Destroys: BC, DE, IY
710F             7 172 ; ----------------------------------------------------------------------------------------------------------------------
710F             7 173 PathFinder_Cyan_UpDown:
710F 21 07 7D    7 174 ld      hl, CYAN_POSITIONS+7        ; HL points to cyan positions address (up-right corner)
7112 11 07 61    7 175 ld      de, CYAN_BOARD_UP_DOWN+7    ; DE points to cyan board up-down address (up-right corner)
7115 CD D1 70    7 176 call    PathFinder_CopyPositions    ; copy from cyan positions to cyan board up-down
7118             7 178 ; entry point for PathFinder_VictoryPath
7118             7 179 PathFinder_Cyan_CheckPath:
7118 FD 21 00 09 7 180 ld      iy, $0900                   ; IYH = distance to check edge positions
711C             7 181 ; IYL = last edge position visited
711C 26 60       7 182 ld      h, CYAN_QUEUE_AREA/256      ; HL points to cyan queue area address
711E 22 F5 70    7 183 ld      (@Queue_Tail+1), hl         ; initialize cyan queue tail
7121 E5          7 184 push    hl                          ; store cyan queue head
7122             7 186 ; set up cyan board (up-down) start positions distances
7122 21 09 61    7 188 ld      hl, CYAN_BOARD_UP_DOWN+9    ; HL points to cyan board up-down address (1st position)
7125 0E 43       7 189 ld      c, VICTORY+$40              ; set start positions distance + friendly flag
7127 3E 02       7 190 ld      a, FRIEND                   ; set distance to compare with
7129 BE          7 191 cp      (hl)                        ; check 1st start position distance
712A D4 EA 70    7 192 call    nc, PathFinder_Update       ; if FRIEND >= distance, update distance
712D 2C          7 193 inc     l                           ; move HL to next start position address
712E BE          7 194 cp      (hl)                        ; check 2nd start position distance
712F D4 EA 70    7 195 call    nc, PathFinder_Update       ; (repeat for each start position)
7132 2C          7 196 inc     l
7133 BE          7 197 cp      (hl)                        ; check 3rd start position distance
7134 D4 EA 70    7 198 call    nc, PathFinder_Update
7137 2C          7 199 inc     l
7138 BE          7 200 cp      (hl)                        ; check 4th start position distance
7139 D4 EA 70    7 201 call    nc, PathFinder_Update
713C 2C          7 202 inc     l
713D BE          7 203 cp      (hl)                        ; check 5th start position distance
713E D4 EA 70    7 204 call    nc, PathFinder_Update
7141 2C          7 205 inc     l
7142 BE          7 206 cp      (hl)                        ; check 6th start position distance
7143 D4 EA 70    7 207 call    nc, PathFinder_Update
7146 2C          7 208 inc     l
7147 C3 33 72    7 209 jp      PathFinder_First            ; calculate two-distances of cyan board (up-down)
714A             7 211 ; ----------------------------------------------------------------------------------------------------------------------
714A             7 212 ; PathFinder_Cyan_DownUp: set up Path_Finder routine to calculate CYAN two-distance from DOWN to UP edge
714A             7 213 ;
714A             7 214 ; Input:    -
714A             7 215 ;
714A             7 216 ; Output:   A  = -1, if up edge couldn't be reached
714A             7 217 ;           A  =  0, if there is chain of connected cyan tokens between the two edges
714A             7 218 ;           A  = last edge position visited (-1), otherwise
714A             7 219 ;           HL = cyan queue head address
714A             7 220 ;
714A             7 221 ; Uses:     @Queue_Tail (queue pointer in 'PathFinder_Update' routine)
714A             7 222 ;
714A             7 223 ; Destroys: BC, DE, IY
714A             7 224 ; ----------------------------------------------------------------------------------------------------------------------
714A             7 225 PathFinder_Cyan_DownUp:
714A 21 07 7D    7 226 ld      hl, CYAN_POSITIONS+7        ; HL points to cyan positions address (up-right corner)
714D 11 4F 61    7 227 ld      de, CYAN_BOARD_DOWN_UP-1    ; DE points to cyan board down-up address (up-right corner)
7150 CD D1 70    7 228 call    PathFinder_CopyPositions    ; copy from cyan positions to cyan board down-up
7153 FD 21 00 F7 7 230 ld      iy, $F700                   ; IYH = distance to check edge positions
7157             7 231 ; IYL = last edge position visited
7157 2A F5 70    7 232 ld      hl, (@Queue_Tail+1)         ; retreive cyan queue tail
715A E5          7 233 push    hl                          ; initialize cyan queue head
715B             7 235 ; set up cyan board (down-up) start positions distances
715B EB          7 237 ex      de, hl                      ; (take advantage of last "CopyPositions" execution)
715C 2D          7 238 dec     l                           ; move HL to cyan boad down-up address (last position)
715D 0E 43       7 239 ld      c, VICTORY+$40              ; set start positions distance + friendly flag
715F 3E 02       7 240 ld      a, FRIEND                   ; set distance to compare with
7161 BE          7 241 cp      (hl)                        ; check 1st start position distance
7162 D4 EA 70    7 242 call    nc, PathFinder_Update       ; if FRIEND >= distance, update distance
7165 2D          7 243 dec     l                           ; move HL to next start position address
7166 BE          7 244 cp      (hl)                        ; check 2nd start position distance
7167 D4 EA 70    7 245 call    nc, PathFinder_Update       ; (repeat for each start position)
716A 2D          7 246 dec     l
716B BE          7 247 cp      (hl)                        ; check 3rd start position distance
716C D4 EA 70    7 248 call    nc, PathFinder_Update
716F 2D          7 249 dec     l
7170 BE          7 250 cp      (hl)                        ; check 4th start position distance
7171 D4 EA 70    7 251 call    nc, PathFinder_Update
7174 2D          7 252 dec     l
7175 BE          7 253 cp      (hl)                        ; check 5th start position distance
7176 D4 EA 70    7 254 call    nc, PathFinder_Update
7179 2D          7 255 dec     l
717A BE          7 256 cp      (hl)                        ; check 6th start position distance
717B D4 EA 70    7 257 call    nc, PathFinder_Update
717E 2D          7 258 dec     l
717F C3 33 72    7 259 jp      PathFinder_First            ; calculate two-distances of cyan board (down-up)
7182             7 261 ; ----------------------------------------------------------------------------------------------------------------------
7182             7 262 ; PathFinder_Red_LeftRight: set up Path_Finder routine to calculate RED two-distance from LEFT to RIGHT edge
7182             7 263 ;
7182             7 264 ; Input:    -
7182             7 265 ;
7182             7 266 ; Output:   A  = -1, if right edge couldn't be reached
7182             7 267 ;           A  =  0, if there is chain of connected cyan tokens between the two edges
7182             7 268 ;           A  = last edge position visited (-1), otherwise
7182             7 269 ;           HL = red queue head address
7182             7 270 ;
7182             7 271 ; Uses:     @Queue_Tail (queue pointer in 'PathFinder_Update' routine)
7182             7 272 ;
7182             7 273 ; Destroys: BC, DE, IY
7182             7 274 ; ----------------------------------------------------------------------------------------------------------------------
7182             7 275 PathFinder_Red_LeftRight:
7182 21 07 7E    7 276 ld      hl, RED_POSITIONS+7         ; HL points to red positions address (up-right corner)
7185 11 07 64    7 277 ld      de, RED_BOARD_LEFT_RIGHT+7  ; DE points to red board left-right addr. (up-right corner)
7188 CD D1 70    7 278 call    PathFinder_CopyPositions    ; copy from red positions to red board left-right
718B             7 280 ; entry point for PathFinder_VictoryPath
718B             7 281 PathFinder_Red_CheckPath
718B FD 21 00 01 7 282 ld      iy, $0100                   ; IYH = distance to check edge positions
718F             7 283 ; IYL = last edge position visited
718F 26 63       7 284 ld      h, RED_QUEUE_AREA/256       ; HL points to red queue area address
7191 22 F5 70    7 285 ld      (@Queue_Tail+1), hl         ; initialize red queue tail
7194 E5          7 286 push    hl                          ; store red queue head
7195             7 288 ; set up red board (left-right) start positions distances
7195 21 09 64    7 290 ld      hl, RED_BOARD_LEFT_RIGHT+9  ; HL points to red board left-right address (1st position)
7198 0E 43       7 291 ld      c, VICTORY+$40              ; set start positions distance + friendly flag
719A 3E 02       7 292 ld      a, FRIEND                   ; set distance to compare with
719C BE          7 293 cp      (hl)                        ; check 1st start position distance
719D D4 EA 70    7 294 call    nc, PathFinder_Update       ; if FRIEND >= distance, update distance
71A0 2E 12       7 295 ld      l, (RED_BOARD_LEFT_RIGHT+18)%256
71A2 BE          7 296 cp      (hl)                        ; check 2nd start position distance
71A3 D4 EA 70    7 297 call    nc, PathFinder_Update       ; (repeat for each start position)
71A6 2E 1B       7 298 ld      l, (RED_BOARD_LEFT_RIGHT+27)%256
71A8 BE          7 299 cp      (hl)                        ; check 3rd start position distance
71A9 D4 EA 70    7 300 call    nc, PathFinder_Update
71AC 2E 24       7 301 ld      l, (RED_BOARD_LEFT_RIGHT+36)%256
71AE BE          7 302 cp      (hl)                        ; check 4th start position distance
71AF D4 EA 70    7 303 call    nc, PathFinder_Update
71B2 2E 2D       7 304 ld      l, (RED_BOARD_LEFT_RIGHT+45)%256
71B4 BE          7 305 cp      (hl)                        ; check 5th start position distance
71B5 D4 EA 70    7 306 call    nc, PathFinder_Update
71B8 2E 36       7 307 ld      l, (RED_BOARD_LEFT_RIGHT+54)%256
71BA BE          7 308 cp      (hl)                        ; check 6th start position distance
71BB D4 EA 70    7 309 call    nc, PathFinder_Update
71BE 2E 3F       7 310 ld      l, (RED_BOARD_LEFT_RIGHT+63)%256
71C0 C3 33 72    7 311 jp      PathFinder_First            ; calculate two-distances of red board (left-right)
71C3             7 313 ; ----------------------------------------------------------------------------------------------------------------------
71C3             7 314 ; PathFinder_Red_RightLeft: set up Path_Finder routine to calculate RED two-distance from RIGHT to LEFT edge
71C3             7 315 ;
71C3             7 316 ; Input:    -
71C3             7 317 ;
71C3             7 318 ; Output:   A  = -1, if left edge couldn't be reached
71C3             7 319 ;           A  =  0, if there is chain of connected cyan tokens between the two edges
71C3             7 320 ;           A  = last edge position visited (-1), otherwise
71C3             7 321 ;           HL = red queue head address
71C3             7 322 ;
71C3             7 323 ; Uses:     @Queue_Tail (queue pointer in 'PathFinder_Update' routine)
71C3             7 324 ;
71C3             7 325 ; Destroys: BC, DE, IY
71C3             7 326 ; ----------------------------------------------------------------------------------------------------------------------
71C3             7 327 PathFinder_Red_RightLeft:
71C3 21 07 7E    7 328 ld      hl, RED_POSITIONS+7         ; HL points to red positions address (up-right corner)
71C6 11 4F 64    7 329 ld      de, RED_BOARD_RIGHT_LEFT-1  ; DE points to red board right-left addr. (up-right corner)
71C9 CD D1 70    7 330 call    PathFinder_CopyPositions    ; copy from red positions to red board right-left
71CC FD 21 00 FF 7 332 ld      iy, $FF00                   ; IYH = distance to check edge positions
71D0             7 333 ; IYL = last edge position visited
71D0 2A F5 70    7 334 ld      hl, (@Queue_Tail+1)         ; retreive red queue tail
71D3 E5          7 335 push    hl                          ; initialize red queue head
71D4             7 337 ; set up red board (right-left) start positions distances
71D4 EB          7 339 ex      de, hl                      ; take advantage of last "CopyPositions" execution
71D5 2D          7 340 dec     l                           ; move HL to red board right-left address (last position)
71D6 0E 43       7 341 ld      c, VICTORY+$40              ; set start positions distance + friendly flag
71D8 3E 02       7 342 ld      a, FRIEND                   ; set distance to compare with
71DA BE          7 343 cp      (hl)                        ; check 1st start position distance
71DB D4 EA 70    7 344 call    nc, PathFinder_Update       ; if FRIEND >= distance, update distance
71DE 2E 84       7 345 ld      l, (RED_BOARD_RIGHT_LEFT+52)%256
71E0 BE          7 346 cp      (hl)                        ; check 2nd start position distance
71E1 D4 EA 70    7 347 call    nc, PathFinder_Update       ; (repeat for each start position)
71E4 2E 7B       7 348 ld      l, (RED_BOARD_RIGHT_LEFT+43)%256
71E6 BE          7 349 cp      (hl)                        ; check 3rd start position distance
71E7 D4 EA 70    7 350 call    nc, PathFinder_Update
71EA 2E 72       7 351 ld      l, (RED_BOARD_RIGHT_LEFT+34)%256
71EC BE          7 352 cp      (hl)                        ; check 4th start position distance
71ED D4 EA 70    7 353 call    nc, PathFinder_Update
71F0 2E 69       7 354 ld      l, (RED_BOARD_RIGHT_LEFT+25)%256
71F2 BE          7 355 cp      (hl)                        ; check 5th start position distance
71F3 D4 EA 70    7 356 call    nc, PathFinder_Update
71F6 2E 60       7 357 ld      l, (RED_BOARD_RIGHT_LEFT+16)%256
71F8 BE          7 358 cp      (hl)                        ; check 6th start position distance
71F9 D4 EA 70    7 359 call    nc, PathFinder_Update
71FC 2E 57       7 360 ld      l, (RED_BOARD_RIGHT_LEFT+7)%256
71FE C3 33 72    7 361 jp      PathFinder_First            ; calculate red two-distance (right-left)
7201             7 363 ; ----------------------------------------------------------------------------------------------------------------------
7201             7 364 ; PathFinder: calculate two-distance metric for each board position
7201             7 365 ;
7201             7 366 ; The algorithm is implemented running PATHFINDER, starting at the corresponding side of the input board
7201             7 367 ;
7201             7 368 ; Input:    HL  = cyan or red queue area address
7201             7 369 ;           IYH = distance to check edge positions
7201             7 370 ;           IYL = 0
7201             7 371 ;
7201             7 372 ; Output:   A   = -1, if corresponding edge couldn't be reached
7201             7 373 ;           A   =  0, if there is chain of connected (color) tokens between the two edges
7201             7 374 ;           A   = last edge position visited (-1), otherwise
7201             7 375 ;           HL  = cyan or red queue head address
7201             7 376 ;
7201             7 377 ; Uses:     @Queue_Tail (queue pointer in 'PathFinder_Update' routine)
7201             7 378 ;
7201             7 379 ; Destroys: BC, DE, IY
7201             7 380 ; ----------------------------------------------------------------------------------------------------------------------
7201             7 381 PathFinder:
7201 2C          7 382 inc     l                           ; move queue head down
7202 E5          7 383 push    hl                          ; preserve queue head address
7203 6E          7 384 ld      l, (hl)                     ; retrieve next position to be checked
7204 24          7 385 inc     h                           ; move HL to corresponding board address
7205 4E          7 386 ld      c, (hl)                     ; retrieve distance from this position to start
7206 5D          7 387 ld      e, l                        ; store current position
7207             7 389 ; look for adjacent positions
7207 7D          7 391 ld      a, l                        ; get current position
7208 FD 84       7 392 add     a, iyh                      ; add distance to check edge positions
720A 6F          7 393 ld      l, a                        ; move HL to calculated position address
720B CB 7E       7 394 bit     7, (hl)                     ; is it an edge?
720D 20 34       7 395 jr      nz, PathFinder_Adjacent     ; yes, update adjacent positions
720F 3E 02       7 397 ld      a, FRIEND                   ; set distance to compare with
7211             7 398 ; return point from PathFinder_Adjacent
7211             7 399 PathFinder_Neighbors
7211 6B          7 400 ld      l, e                        ; restore current position to be checked
7212 2C          7 401 inc     l                           ; move HL to right neighbor address
7213 BE          7 402 cp      (hl)                        ; check right neighbor distance
7214 D4 EA 70    7 403 call    nc, PathFinder_Update       ; if FRIEND >= distance, update distance
7217 2D          7 404 dec     l                           ; move HL to left neighbor address
7218 2D          7 405 dec     l
7219 BE          7 406 cp      (hl)                        ; check left neighbor distance
721A D4 EA 70    7 407 call    nc, PathFinder_Update       ; (repeat for each neighbor)
721D 11 F8 FF    7 408 ld      de, -WIDTH
7220 19          7 409 add     hl, de
7221 BE          7 410 cp      (hl)                        ; check upper-left neighbor distance
7222 D4 EA 70    7 411 call    nc, PathFinder_Update
7225 2C          7 412 inc     l
7226 BE          7 413 cp      (hl)                        ; check upper-right neighbor distance
7227 D4 EA 70    7 414 call    nc, PathFinder_Update
722A 11 10 00    7 415 ld      de, WIDTH*2
722D 19          7 416 add     hl, de
722E BE          7 417 cp      (hl)                        ; check lower-left neighbor distance
722F D4 EA 70    7 418 call    nc, PathFinder_Update
7232 2C          7 419 inc     l
7233             7 420 PathFinder_First
7233 BE          7 421 cp      (hl)                        ; check lower-right neighbor distance
7234 D4 EA 70    7 422 call    nc, PathFinder_Update
7237 E1          7 423 pop     hl                          ; retreive queue head address
7238 3A F5 70    7 424 ld      a, (@Queue_Tail+1)          ; get queue tail address (low-byte)
723B BD          7 425 cp      l                           ; is queue empty?
723C C2 01 72    7 426 jp      nz, PathFinder              ; no, repeat until queue is empty
723F FD 7D       7 428 ld      a, iyl                      ; get last edge position visited
7241 3D          7 429 dec     a                           ; return A = -1, if the edge couldn't be reached
7242 C9          7 430 ret
7243             7 432 ; ----------------------------------------------------------------------------------------------------------------------
7243             7 433 ; PathFinder_Adjacent: update adjacent positions
7243             7 434 ;
7243             7 435 ; This is an approach to update the two-distance of adjacent positions. As explained in Jack van Rijswijck's thesis:
7243             7 436 ; "two cells are adjacent if they share a common edge on the board."
7243             7 437 ;
7243             7 438 ; Input:    E  = current position
7243             7 439 ;           C  = current distance (with a flag at 6th bit that indicates a friendly position)
7243             7 440 ;           HL = current edge position address (a flag in 7th bit indicates an edge position and the lowest 3 bits the
7243             7 441 ;                edge number)
7243             7 442 ;
7243             7 443 ; Output:   A  = 0 and HL = cyan or red queue head address, if there is a chain of connected tokens of the same color
7243             7 444 ;                between the two edges.
7243             7 445 ;           A  = FRIEND and E = current position, otherwise.
7243             7 446 ;
7243             7 447 ; Destroys: BC, D
7243             7 448 ; ----------------------------------------------------------------------------------------------------------------------
7243             7 449 PathFinder_Adjacent
7243 3E 43       7 450 ld      a, VICTORY+$40              ; set victory distance + friendly flag
7245 B9          7 451 cp      c                           ; is current distance victory and friendly?
7246 28 0E       7 452 jr      z, PathFinder_Abort         ; yes, abort path_finder
7248 FD 6B       7 454 ld      iyl, e                      ; update last edge position visited
724A 54          7 455 ld      d, h                        ; store pointer to current position address in DE
724B 6E          7 456 ld      l, (hl)                     ; get current edge position
724C CB 25       7 457 sla     l                           ; calculate vector table routine index
724E 24          7 458 inc     h                           ; move HL to (cyan or red) vector table routine address
724F 7E          7 459 ld      a, (hl)                     ; get low byte of vector table routine address
7250 2C          7 460 inc     l                           ; move HL to high byte of vector table routine address
7251 66          7 461 ld      h, (hl)                     ; get high byte of vector table routine address
7252 6F          7 462 ld      l, a                        ; HL points to 'PathFinder_[COLOR]_Edge_[n]' routine address
7253 3E 02       7 463 ld      a, FRIEND                   ; set distance to compare with
7255 E9          7 464 jp      (hl)                        ; jump to 'PathFinder_[COLOR]_Edge_[n]' routine
7256             7 465 PathFinder_Abort
7256 E1          7 466 pop     hl                          ; restore queue head address
7257 AF          7 467 xor     a                           ; return A = 0
7258 C9          7 468 ret
7259             7 470 ; ----------------------------------------------------------------------------------------------------------------------
7259             7 471 ;  Update two-distance of RED adjacent positions
7259             7 472 ; ----------------------------------------------------------------------------------------------------------------------
7259             7 473 PathFinder_RED_Edge_0
7259 EB          7 474 ex      de, hl                      ; restore pointer to current position address
725A 11 12 00    7 475 ld      de, 9*2                     ; calculate distance to adjacent #2
725D 19          7 476 add     hl, de                      ; move HL to adjacent #2 address
725E BE          7 477 cp      (hl)                        ; check adjacent #2 distance
725F D4 EA 70    7 478 call    nc, PathFinder_Update       ; if FRIEND >= adjacent #2 distance, update distance
7262 11 09 00    7 479 ld      de, 9                       ; calculate distance to adjacent #3
7265 19          7 480 add     hl, de                      ; move HL to adjacent #3 address
7266 BE          7 481 cp      (hl)                        ; check adjacent #3 distance
7267 D4 EA 70    7 482 call    nc, PathFinder_Update       ; (repeat for each adjacent)
726A 11 09 00    7 483 ld      de, 9
726D 19          7 484 add     hl, de
726E BE          7 485 cp      (hl)                        ; check adjacent #4 distance
726F D4 EA 70    7 486 call    nc, PathFinder_Update
7272 11 09 00    7 487 ld      de, 9
7275 19          7 488 add     hl, de
7276 BE          7 489 cp      (hl)                        ; check adjacent #5 distance
7277 D4 EA 70    7 490 call    nc, PathFinder_Update
727A 11 09 00    7 491 ld      de, 9
727D 19          7 492 add     hl, de
727E BE          7 493 cp      (hl)                        ; check adjacent #6 distance
727F D4 EA 70    7 494 call    nc, PathFinder_Update
7282 FD 5D       7 495 ld      e, iyl                      ; restore current position
7284 C3 11 72    7 496 jp      PathFinder_Neighbors        ; continue processing neighbors
7287             7 498 PathFinder_RED_Edge_1
7287 EB          7 499 ex      de, hl                      ; restore pointer to current position address
7288 11 12 00    7 500 ld      de, 9*2
728B 19          7 501 add     hl, de
728C BE          7 502 cp      (hl)                        ; check adjacent #3 distance
728D D4 EA 70    7 503 call    nc, PathFinder_Update
7290 11 09 00    7 504 ld      de, 9
7293 19          7 505 add     hl, de
7294 BE          7 506 cp      (hl)                        ; check adjacent #4 distance
7295 D4 EA 70    7 507 call    nc, PathFinder_Update
7298 11 09 00    7 508 ld      de, 9
729B 19          7 509 add     hl, de
729C BE          7 510 cp      (hl)                        ; check adjacent #5 distance
729D D4 EA 70    7 511 call    nc, PathFinder_Update
72A0 11 09 00    7 512 ld      de, 9
72A3 19          7 513 add     hl, de
72A4 BE          7 514 cp      (hl)                        ; check adjacent #6 distance
72A5 D4 EA 70    7 515 call    nc, PathFinder_Update
72A8 FD 5D       7 516 ld      e, iyl                      ; restore current position
72AA C3 11 72    7 517 jp      PathFinder_Neighbors        ; continue processing neighbors
72AD             7 519 PathFinder_RED_Edge_2
72AD EB          7 520 ex      de, hl                      ; restore pointer to current position address
72AE 11 12 00    7 521 ld      de, 9*2
72B1 19          7 522 add     hl, de
72B2 BE          7 523 cp      (hl)                        ; check adjacent #4 distance
72B3 D4 EA 70    7 524 call    nc, PathFinder_Update
72B6 11 09 00    7 525 ld      de, 9
72B9 19          7 526 add     hl, de
72BA BE          7 527 cp      (hl)                        ; check adjacent #5 distance
72BB D4 EA 70    7 528 call    nc, PathFinder_Update
72BE 11 09 00    7 529 ld      de, 9
72C1 19          7 530 add     hl, de
72C2 BE          7 531 cp      (hl)                        ; check adjacent #6 distance
72C3 D4 EA 70    7 532 call    nc, PathFinder_Update
72C6 11 CA FF    7 533 ld      de, -9*6
72C9 19          7 534 add     hl, de
72CA BE          7 535 cp      (hl)                        ; check adjacent #0 distance
72CB D4 EA 70    7 536 call    nc, PathFinder_Update
72CE FD 5D       7 537 ld      e, iyl                      ; restore current position
72D0 C3 11 72    7 538 jp      PathFinder_Neighbors        ; continue processing neighbors
72D3             7 540 PathFinder_RED_Edge_3
72D3 EB          7 541 ex      de, hl                      ; restore pointer to current position address
72D4 11 E5 FF    7 542 ld      de, -9*3
72D7 19          7 543 add     hl, de
72D8 BE          7 544 cp      (hl)                        ; check adjacent #0 distance
72D9 D4 EA 70    7 545 call    nc, PathFinder_Update
72DC 11 09 00    7 546 ld      de, 9
72DF 19          7 547 add     hl, de
72E0 BE          7 548 cp      (hl)                        ; check adjacent #1 distance
72E1 D4 EA 70    7 549 call    nc, PathFinder_Update
72E4 11 24 00    7 550 ld      de, 9*4
72E7 19          7 551 add     hl, de
72E8 BE          7 552 cp      (hl)                        ; check adjacent #5 distance
72E9 D4 EA 70    7 553 call    nc, PathFinder_Update
72EC 11 09 00    7 554 ld      de, 9
72EF 19          7 555 add     hl, de
72F0 BE          7 556 cp      (hl)                        ; check adjacent #6 distance
72F1 D4 EA 70    7 557 call    nc, PathFinder_Update
72F4 FD 5D       7 558 ld      e, iyl                      ; restore current position
72F6 C3 11 72    7 559 jp      PathFinder_Neighbors        ; continue processing neighbors
72F9             7 561 PathFinder_RED_Edge_4
72F9 EB          7 562 ex      de, hl                      ; restore pointer to current position address
72FA 11 12 00    7 563 ld      de, 9*2
72FD 19          7 564 add     hl, de
72FE BE          7 565 cp      (hl)                        ; check adjacent #6 distance
72FF D4 EA 70    7 566 call    nc, PathFinder_Update
7302 11 CA FF    7 567 ld      de, -9*6
7305 19          7 568 add     hl, de
7306 BE          7 569 cp      (hl)                        ; check adjacent #0 distance
7307 D4 EA 70    7 570 call    nc, PathFinder_Update
730A 11 09 00    7 571 ld      de, 9
730D 19          7 572 add     hl, de
730E BE          7 573 cp      (hl)                        ; check adjacent #1 distance
730F D4 EA 70    7 574 call    nc, PathFinder_Update
7312 11 09 00    7 575 ld      de, 9
7315 19          7 576 add     hl, de
7316 BE          7 577 cp      (hl)                        ; check adjacent #2 distance
7317 D4 EA 70    7 578 call    nc, PathFinder_Update
731A FD 5D       7 579 ld      e, iyl                      ; restore current position
731C C3 11 72    7 580 jp      PathFinder_Neighbors        ; continue processing neighbors
731F             7 582 PathFinder_RED_Edge_5
731F EB          7 583 ex      de, hl                      ; restore pointer to current position address
7320 11 D3 FF    7 584 ld      de, -9*5
7323 19          7 585 add     hl, de
7324 BE          7 586 cp      (hl)                        ; check adjacent #0 distance
7325 D4 EA 70    7 587 call    nc, PathFinder_Update
7328 11 09 00    7 588 ld      de, 9
732B 19          7 589 add     hl, de
732C BE          7 590 cp      (hl)                        ; check adjacent #1 distance
732D D4 EA 70    7 591 call    nc, PathFinder_Update
7330 11 09 00    7 592 ld      de, 9
7333 19          7 593 add     hl, de
7334 BE          7 594 cp      (hl)                        ; check adjacent #2 distance
7335 D4 EA 70    7 595 call    nc, PathFinder_Update
7338 11 09 00    7 596 ld      de, 9
733B 19          7 597 add     hl, de
733C BE          7 598 cp      (hl)                        ; check adjacent #3 distance
733D D4 EA 70    7 599 call    nc, PathFinder_Update
7340 FD 5D       7 600 ld      e, iyl                      ; restore current position
7342 C3 11 72    7 601 jp      PathFinder_Neighbors        ; continue processing neighbors
7345             7 603 PathFinder_RED_Edge_6
7345 EB          7 604 ex      de, hl                      ; restore pointer to current position address
7346 11 CA FF    7 605 ld      de, -9*6
7349 19          7 606 add     hl, de
734A BE          7 607 cp      (hl)                        ; check adjacent #0 distance
734B D4 EA 70    7 608 call    nc, PathFinder_Update
734E 11 09 00    7 609 ld      de, 9
7351 19          7 610 add     hl, de
7352 BE          7 611 cp      (hl)                        ; check adjacent #1 distance
7353 D4 EA 70    7 612 call    nc, PathFinder_Update
7356 11 09 00    7 613 ld      de, 9
7359 19          7 614 add     hl, de
735A BE          7 615 cp      (hl)                        ; check adjacent #2 distance
735B D4 EA 70    7 616 call    nc, PathFinder_Update
735E 11 09 00    7 617 ld      de, 9
7361 19          7 618 add     hl, de
7362 BE          7 619 cp      (hl)                        ; check adjacent #3 distance
7363 D4 EA 70    7 620 call    nc, PathFinder_Update
7366 11 09 00    7 621 ld      de, 9
7369 19          7 622 add     hl, de
736A BE          7 623 cp      (hl)                        ; check adjacent #4 distance
736B D4 EA 70    7 624 call    nc, PathFinder_Update
736E FD 5D       7 625 ld      e, iyl                      ; restore current position
7370 C3 11 72    7 626 jp      PathFinder_Neighbors        ; continue processing neighbors
7373             7 628 ; ----------------------------------------------------------------------------------------------------------------------
7373             7 629 ;  Update two-distance of CYAN adjacent positions
7373             7 630 ; ----------------------------------------------------------------------------------------------------------------------
7373             7 631 PathFinder_CYAN_Edge_0
7373 EB          7 632 ex      de, hl                      ; restore pointer to current position address
7374 2C          7 633 inc     l
7375 2C          7 634 inc     l
7376 BE          7 635 cp      (hl)                        ; check adjacent #2 distance
7377 D4 EA 70    7 636 call    nc, PathFinder_Update
737A 2C          7 637 inc     l
737B BE          7 638 cp      (hl)                        ; check adjacent #3 distance
737C D4 EA 70    7 639 call    nc, PathFinder_Update
737F 2C          7 640 inc     l
7380 BE          7 641 cp      (hl)                        ; check adjacent #4 distance
7381 D4 EA 70    7 642 call    nc, PathFinder_Update
7384 2C          7 643 inc     l
7385 BE          7 644 cp      (hl)                        ; check adjacent of edge number 5
7386 D4 EA 70    7 645 call    nc, PathFinder_Update
7389 2C          7 646 inc     l
738A BE          7 647 cp      (hl)                        ; check adjacent of edge number 6
738B D4 EA 70    7 648 call    nc, PathFinder_Update
738E FD 5D       7 649 ld      e, iyl                      ; restore current position
7390 C3 11 72    7 650 jp      PathFinder_Neighbors        ; continue processing neighbors
7393             7 652 PathFinder_CYAN_Edge_1
7393 EB          7 653 ex      de, hl                      ; restore pointer to current position address
7394 2C          7 654 inc     l
7395 2C          7 655 inc     l
7396 BE          7 656 cp      (hl)                        ; check adjacent #3 distance
7397 D4 EA 70    7 657 call    nc, PathFinder_Update
739A 2C          7 658 inc     l
739B BE          7 659 cp      (hl)                        ; check adjacent #4 distance
739C D4 EA 70    7 660 call    nc, PathFinder_Update
739F 2C          7 661 inc     l
73A0 BE          7 662 cp      (hl)                        ; check adjacent #5 distance
73A1 D4 EA 70    7 663 call    nc, PathFinder_Update
73A4 2C          7 664 inc     l
73A5 BE          7 665 cp      (hl)                        ; check adjacent #6 distance
73A6 D4 EA 70    7 666 call    nc, PathFinder_Update
73A9 FD 5D       7 667 ld      e, iyl                      ; restore current position
73AB C3 11 72    7 668 jp      PathFinder_Neighbors        ; continue processing neighbors
73AE             7 670 PathFinder_CYAN_Edge_2
73AE EB          7 671 ex      de, hl                      ; restore pointer to current position address
73AF 2D          7 672 dec     l
73B0 2D          7 673 dec     l
73B1 BE          7 674 cp      (hl)                        ; check adjacent #0 distance
73B2 D4 EA 70    7 675 call    nc, PathFinder_Update
73B5 2C          7 676 inc     l
73B6 2C          7 677 inc     l
73B7 2C          7 678 inc     l
73B8 2C          7 679 inc     l
73B9 BE          7 680 cp      (hl)                        ; check adjacent #4 distance
73BA D4 EA 70    7 681 call    nc, PathFinder_Update
73BD 2C          7 682 inc     l
73BE BE          7 683 cp      (hl)                        ; check adjacent #5 distance
73BF D4 EA 70    7 684 call    nc, PathFinder_Update
73C2 2C          7 685 inc     l
73C3 BE          7 686 cp      (hl)                        ; check adjacent #6 distance
73C4 D4 EA 70    7 687 call    nc, PathFinder_Update
73C7 FD 5D       7 688 ld      e, iyl                      ; restore current position
73C9 C3 11 72    7 689 jp      PathFinder_Neighbors        ; continue processing neighbors
73CC             7 691 PathFinder_CYAN_Edge_3
73CC EB          7 692 ex      de, hl                      ; restore pointer to current position address
73CD 2D          7 693 dec     l
73CE 2D          7 694 dec     l
73CF 2D          7 695 dec     l
73D0 BE          7 696 cp      (hl)                        ; check adjacent #0 distance
73D1 D4 EA 70    7 697 call    nc, PathFinder_Update
73D4 2C          7 698 inc     l
73D5 BE          7 699 cp      (hl)                        ; check adjacent #1 distance
73D6 D4 EA 70    7 700 call    nc, PathFinder_Update
73D9 2C          7 701 inc     l
73DA 2C          7 702 inc     l
73DB 2C          7 703 inc     l
73DC 2C          7 704 inc     l
73DD BE          7 705 cp      (hl)                        ; check adjacent #5 distance
73DE D4 EA 70    7 706 call    nc, PathFinder_Update
73E1 2C          7 707 inc     l
73E2 BE          7 708 cp      (hl)                        ; check adjacent #6 distance
73E3 D4 EA 70    7 709 call    nc, PathFinder_Update
73E6 FD 5D       7 710 ld      e, iyl                      ; restore current position
73E8 C3 11 72    7 711 jp      PathFinder_Neighbors        ; continue processing neighbors
73EB             7 713 PathFinder_CYAN_Edge_4
73EB EB          7 714 ex      de, hl                      ; restore pointer to current position address
73EC 2C          7 715 inc     l
73ED 2C          7 716 inc     l
73EE BE          7 717 cp      (hl)                        ; check adjacent #6 distance
73EF D4 EA 70    7 718 call    nc, PathFinder_Update
73F2 2D          7 719 dec     l
73F3 2D          7 720 dec     l
73F4 2D          7 721 dec     l
73F5 2D          7 722 dec     l
73F6 BE          7 723 cp      (hl)                        ; check adjacent #2 distance
73F7 D4 EA 70    7 724 call    nc, PathFinder_Update
73FA 2D          7 725 dec     l
73FB BE          7 726 cp      (hl)                        ; check adjacent #1 distance
73FC D4 EA 70    7 727 call    nc, PathFinder_Update
73FF 2D          7 728 dec     l
7400 BE          7 729 cp      (hl)                        ; check adjacent #0 distance
7401 D4 EA 70    7 730 call    nc, PathFinder_Update
7404 FD 5D       7 731 ld      e, iyl                      ; restore current position
7406 C3 11 72    7 732 jp      PathFinder_Neighbors        ; continue processing neighbors
7409             7 734 PathFinder_CYAN_Edge_5
7409 EB          7 735 ex      de, hl                      ; restore pointer to current position address
740A 2D          7 736 dec     l
740B 2D          7 737 dec     l
740C BE          7 738 cp      (hl)                        ; check adjacent #3 distance
740D D4 EA 70    7 739 call    nc, PathFinder_Update
7410 2D          7 740 dec     l
7411 BE          7 741 cp      (hl)                        ; check adjacent #2 distance
7412 D4 EA 70    7 742 call    nc, PathFinder_Update
7415 2D          7 743 dec     l
7416 BE          7 744 cp      (hl)                        ; check adjacent #1 distance
7417 D4 EA 70    7 745 call    nc, PathFinder_Update
741A 2D          7 746 dec     l
741B BE          7 747 cp      (hl)                        ; check adjacent #0 distance
741C D4 EA 70    7 748 call    nc, PathFinder_Update
741F FD 5D       7 749 ld      e, iyl                      ; restore current position
7421 C3 11 72    7 750 jp      PathFinder_Neighbors        ; continue processing neighbors
7424             7 752 PathFinder_CYAN_Edge_6
7424 EB          7 753 ex      de, hl                      ; restore pointer to current position address
7425 2D          7 754 dec     l
7426 2D          7 755 dec     l
7427 BE          7 756 cp      (hl)                        ; check adjacent #4 distance
7428 D4 EA 70    7 757 call    nc, PathFinder_Update
742B 2D          7 758 dec     l
742C BE          7 759 cp      (hl)                        ; check adjacent #3 distance
742D D4 EA 70    7 760 call    nc, PathFinder_Update
7430 2D          7 761 dec     l
7431 BE          7 762 cp      (hl)                        ; check adjacent #2 distance
7432 D4 EA 70    7 763 call    nc, PathFinder_Update
7435 2D          7 764 dec     l
7436 BE          7 765 cp      (hl)                        ; check adjacent #1 distance
7437 D4 EA 70    7 766 call    nc, PathFinder_Update
743A 2D          7 767 dec     l
743B BE          7 768 cp      (hl)                        ; check adjacent #0 distance
743C D4 EA 70    7 769 call    nc, PathFinder_Update
743F FD 5D       7 770 ld      e, iyl                      ; restore current position
7441 C3 11 72    7 771 jp      PathFinder_Neighbors        ; continue processing neighbors
7444             7 773 ; ----------------------------------------------------------------------------------------------------------------------
7444             7 774 ; PathFinder_Score: calculate board score depending on speccy color
7444             7 775 ;
7444             7 776 ; Input:    P/V = flag unset if speccy side is FRIEND, flag set if speccy side is ENEMY
7444             7 777 ;
7444             7 778 ; Output:   A = -1, if speccy can't reach his opposite edge
7444             7 779 ;           A =  0, if speccy has a chain of connected tokens between the two edges or if player cant reach his edge
7444             7 780 ;           A = speccy heuristic evaluation, otherwise
7444             7 781 ;
7444             7 782 ; Uses:     -
7444             7 783 ;
7444             7 784 ; Destroys: A', BC, DE, HL, IY
7444             7 785 ; ----------------------------------------------------------------------------------------------------------------------
7444             7 786 PathFinder_Score:
7444 E2 78 74    7 787 jp      po, PathFinder_CyanScore    ; if speccy side is FRIEND, calculate CYAN score
7447             7 789 ; ----------------------------------------------------------------------------------------------------------------------
7447             7 790 ; PathFinder_RedScore: calculate red score
7447             7 791 ;
7447             7 792 ; Input:    -
7447             7 793 ;
7447             7 794 ; Output:   A = -1, if red can't reach his opposite edge
7447             7 795 ;           A =  0, if there a chain of connected red tokens between the two edges or if cyan can't reach his edge
7447             7 796 ;           A = red heuristic evaluation, otherwise
7447             7 797 ;
7447             7 798 ; Uses:     POTENTIALS (board potential and attack mobility)
7447             7 799 ;
7447             7 800 ; Destroys: A', BC, DE, HL, IY
7447             7 801 ; ----------------------------------------------------------------------------------------------------------------------
7447             7 802 PathFinder_RedScore
7447 CD 82 71    7 803 call    PathFinder_Red_LeftRight    ; calculate RED two-distance from LEFT to RIGHT edge
744A C8          7 804 ret     z                           ; if red has a chain of connected tokens, return A = 0
744B 08          7 805 ex      af, af'                     ; save first result
744C CD C3 71    7 806 call    PathFinder_Red_RightLeft    ; calculate RED two-distance from RIGHT to LEFT edge
744F 47          7 807 ld      b, a                        ; save second result
7450 08          7 808 ex      af, af'                     ; restore first result
7451 90          7 809 sub     b                           ; subtract both results
7452 78          7 810 ld      a, b                        ; restore second result
7453 C8          7 811 ret     z                           ; if red can't reach his opposite edge, return A = -1
7454 CD 0F 71    7 813 call    PathFinder_Cyan_UpDown      ; calculate CYAN two-distance from UP to DOWN edge
7457 08          7 814 ex      af, af'                     ; save result
7458 CD 4A 71    7 815 call    PathFinder_Cyan_DownUp      ; calculate CYAN two-distance from DOWN to UP edge
745B 47          7 816 ld      b, a                        ; save second result
745C 08          7 817 ex      af, af'                     ; restore first result
745D 90          7 818 sub     b                           ; subtract both results
745E C8          7 819 ret     z                           ; if cyan can't reach his opposite edge, return A = 0
745F 21 09 64    7 821 ld      hl, RED_BOARD_LEFT_RIGHT+9  ; HL points to red board left-right address (1st position)
7462 11 51 64    7 822 ld      de, RED_BOARD_RIGHT_LEFT+1  ; DE points to red board right-left address (1st position)
7465 CD B6 74    7 823 call    PathFinder_Potentials       ; calculate RED potentials
7468 ED 43 97 61 7 824 ld      (POTENTIALS), bc            ; store RED potentials
746C 21 09 61    7 826 ld      hl, CYAN_BOARD_UP_DOWN+9    ; HL points to cyan board up-down address (1st position)
746F 11 51 61    7 827 ld      de, CYAN_BOARD_DOWN_UP+1    ; DE points to cyan board down-up address (1st position)
7472 CD B6 74    7 828 call    PathFinder_Potentials       ; calculate cyan potentials
7475 C3 A6 74    7 829 jp      PathFinder_Evaluation       ; calculate heuristic evaluation
7478             7 831 ; ----------------------------------------------------------------------------------------------------------------------
7478             7 832 ; PathFinder_CyanScore: calculate cyan score
7478             7 833 ;
7478             7 834 ; Input:    -
7478             7 835 ;
7478             7 836 ; Output:   A = -1, if cyan can't reach his opposite edge
7478             7 837 ;           A =  0, if there a chain of connected cyan tokens between the two edges or if red can't reach his edge
7478             7 838 ;           A = cyan heuristic evaluation, otherwise
7478             7 839 ;
7478             7 840 ; Uses:     POTENTIALS (board potential and attack mobility)
7478             7 841 ;
7478             7 842 ; Destroys: A', BC, DE, HL
7478             7 843 ; ----------------------------------------------------------------------------------------------------------------------
7478             7 844 PathFinder_CyanScore
7478 CD 0F 71    7 845 call    PathFinder_Cyan_UpDown      ; calculate CYAN two-distance from UP to DOWN edge
747B C8          7 846 ret     z                           ; if cyan has a chain of connected tokens, return A = 0
747C 08          7 847 ex      af, af'                     ; save result
747D CD 4A 71    7 848 call    PathFinder_Cyan_DownUp      ; calculate CYAN two-distance from DOWN to UP edge
7480 47          7 849 ld      b, a                        ; save second result
7481 08          7 850 ex      af, af'                     ; restore first result
7482 90          7 851 sub     b                           ; subtract both results
7483 78          7 852 ld      a, b                        ; restore second result
7484 C8          7 853 ret     z                           ; if cyan can't reach his opposite edge, return A = -1
7485 CD 82 71    7 855 call    PathFinder_Red_LeftRight    ; calculate RED two-distance from LEFT to RIGHT edge
7488 08          7 856 ex      af, af'                     ; save result
7489 CD C3 71    7 857 call    PathFinder_Red_RightLeft    ; calculate RED two-distance from RIGHT to LEFT edge
748C 47          7 858 ld      b, a                        ; save second result
748D 08          7 859 ex      af, af'                     ; restore first result
748E 90          7 860 sub     b                           ; subtract both results
748F C8          7 861 ret     z                           ; if red can't reach his opposite edge, return A = 0
7490 21 09 61    7 863 ld      hl, CYAN_BOARD_UP_DOWN+9    ; HL points to cyan board up-down address (1st position)
7493 11 51 61    7 864 ld      de, CYAN_BOARD_DOWN_UP+1    ; DE points to cyan board down-up address (1st position)
7496 CD B6 74    7 865 call    PathFinder_Potentials       ; calculate cyan potentials
7499 ED 43 97 61 7 866 ld      (POTENTIALS), bc            ; save cyan potentials
749D 21 09 64    7 868 ld      hl, RED_BOARD_LEFT_RIGHT+9  ; HL points to red board left-right address (1st position)
74A0 11 51 64    7 869 ld      de, RED_BOARD_RIGHT_LEFT+1  ; DE points to red board right-left address (1st position)
74A3 CD B6 74    7 870 call    PathFinder_Potentials       ; calculate red potentials
74A6             7 871 ; ----------------------------------------------------------------------------------------------------------------------
74A6             7 872 ; PathFinder_Evaluation: calculate heuristic evaluation.
74A6             7 873 ; The original evaluation function (from cyan perspective) is described in Jack van Rijswijck's thesis as:
74A6             7 874 ;
74A6             7 875 ;                                       e = M (pC - pR) - (aC - aR)
74A6             7 876 ; where:
74A6             7 877 ;   pC = cyan board potential
74A6             7 878 ;   pR = red board potential
74A6             7 879 ;   aC = cyan attack mobility
74A6             7 880 ;   aR = red attack mobility
74A6             7 881 ;    M = a large number
74A6             7 882 ;
74A6             7 883 ; This adaptation uses an "invert" result to better fit BRAINIAC process.
74A6             7 884 ;
74A6             7 885 ; Input:    B = opponent attack mobility
74A6             7 886 ;           C = opponent board potential
74A6             7 887 ;
74A6             7 888 ; Output:   A = heuristic evaluation
74A6             7 889 ;
74A6             7 890 ; Destroys: E, HL
74A6             7 891 ; ----------------------------------------------------------------------------------------------------------------------
74A6             7 892 PathFinder_Evaluation:
74A6 21 98 61    7 893 ld      hl, POTENTIALS+1            ; HL points to color attack mobility address
74A9 78          7 894 ld      a, b                        ; get opponent's attack mobility
74AA 96          7 895 sub     (hl)                        ; subtract attack mobilities -> (aC - aR)
74AB 5F          7 896 ld      e, a                        ; save the result in E
74AC 2D          7 897 dec     l                           ; move HL to player's board potential address
74AD 79          7 898 ld      a, c                        ; get opponent's board potential
74AE 96          7 899 sub     (hl)                        ; subtract potentials -> (pC - pR)
74AF 87          7 900 add     a, a                        ; multiply by 8 -> M (pC - pR)
74B0 87          7 901 add     a, a
74B1 87          7 902 add     a, a
74B2 93          7 903 sub     e                           ; subtract result of attack mobilities subtraction
74B3             7 904 ; -> M (pC - pR) - (aC - aR)
74B3 EE 80       7 905 xor     $80                         ; invert sign for easier further comparative
74B5 C9          7 906 ret                                 ; return A = -1 * (M (pC - pR) - (aC - aR))
74B6             7 908 ; ----------------------------------------------------------------------------------------------------------------------
74B6             7 909 ; PathFinder_Potentials: calculate board potential and attack mobility
74B6             7 910 ;
74B6             7 911 ; * A cell's Cyan potential is defined as the sum of its Cyan two-distance to both cyan edges; its Red potential is the
74B6             7 912 ;   sum of its Red two-distance to both red edges. The board potential is defined as the lowest potential that occurs on
74B6             7 913 ;   the board.
74B6             7 914 ; * The attack mobility is defined for each player as the number of cells that realize that player's board potential.
74B6             7 915 ;
74B6             7 916 ; Input:    HL = cyan board or red board address
74B6             7 917 ;           DE = cyan board or red board address
74B6             7 918 ;
74B6             7 919 ; Output:   B = attack mobility
74B6             7 920 ;           C = board potential
74B6             7 921 ;
74B6             7 922 ; Destroys: A, DE, HL, IYL
74B6             7 923 ; ----------------------------------------------------------------------------------------------------------------------
74B6             7 924 PathFinder_Potentials:
74B6 01 FF 00    7 925 ld      bc, $00FF                   ; initialize attack mobility and board potential
74B9 FD 2E 3D    7 926 ld      iyl, 61                     ; number of cells to be checked (loop counter)
74BC             7 927 Potentials_Loop
74BC 7E          7 928 ld      a, (hl)                     ; get cell's two-distance pointed by HL
74BD FE 40       7 929 cp      $40                         ; is cell occupied or border?
74BF 30 14       7 930 jr      nc, Potentials_Next         ; yes, skip to next cell
74C1 FE 04       7 931 cp      $04                         ; cell distance was not updated?
74C3 38 18       7 932 jr      c, Potentials_Infinite      ; yes, set cell potential as infinite and skip
74C5 1A          7 933 ld      a, (de)                     ; get cell's two-distance pointed by DE
74C6 FE 04       7 934 cp      $04                         ; cell distance was not updated?
74C8 38 13       7 935 jr      c, Potentials_Infinite      ; yes, set cell potential as infinite and skip
74CA 86          7 936 add     a, (hl)                     ; sum both two-distances (calculate cell potential)
74CB B9          7 937 cp      c                           ; is the new potential = board potential?
74CC 28 05       7 938 jr      z, Potentials_Increment     ; yes, increment attack mobility
74CE 30 04       7 939 jr      nc, Potentials_Update       ; if (new potential > board potential) update and skip
74D0 4F          7 940 ld      c, a                        ; board potential = new potential
74D1 06 00       7 941 ld      b, 0                        ; restart attack mobility
74D3             7 942 Potentials_Increment
74D3 04          7 943 inc     b                           ; increment attack mobility
74D4             7 944 Potentials_Update
74D4 77          7 945 ld      (hl), a                     ; save potential in the cell pointed by HL
74D5             7 946 Potentials_Next
74D5 1C          7 947 inc     e                           ; move to next cell of each board
74D6 2C          7 948 inc     l
74D7 FD 2D       7 949 dec     iyl                         ; decrement loop counter
74D9 C2 BC 74    7 950 jp      nz, Potentials_Loop         ; repeat until end of boards
74DC C9          7 951 ret
74DD             7 952 Potentials_Infinite
74DD 1F          7 953 rra                                 ; as carry flag is set, the 7th bit of A is set
74DE 77          7 954 ld      (hl), a                     ; save potential as infinite in the cell pointed by HL
74DF 1C          7 955 inc     e                           ; move to next cell of each board
74E0 2C          7 956 inc     l
74E1 FD 2D       7 957 dec     iyl                         ; decrement loop counter
74E3 C2 BC 74    7 958 jp      nz, Potentials_Loop         ; repeat until end of boards
74E6 C9          7 959 ret
74E7             7 961 ; ----------------------------------------------------------------------------------------------------------------------
74E7             7 962 ; PathFinder_Candidates: search candidates based on score result and boards potentials
74E7             7 963 ;
74E7             7 964 ; Input:    A  = -1, 0 or heuristic result
74E7             7 965 ;           IX = candidates area address
74E7             7 966 ;
74E7             7 967 ; Output:   IX = first candidate address
74E7             7 968 ;
74E7             7 969 ; Uses:     AI_PLAYER (speccy side)
74E7             7 970 ;
74E7             7 971 ; Destroys: A, A', BC, DE, HL
74E7             7 972 ; ----------------------------------------------------------------------------------------------------------------------
74E7             7 973 PathFinder_Candidates:
74E7 DD 36 00 00 7 974 ld      (ix+0), 0                   ; set candidates endmarker
74EB B7          7 976 or      a                           ; is speccy the winner?
74EC 28 3D       7 977 jr      z, Candidates_Winner        ; yes, fill candidates for winner color
74EE 3C          7 978 inc     a                           ; is speccy defeated?
74EF 28 4E       7 979 jr      z, Candidates_Defeat        ; yes, fill candidates for defeated color
74F1             7 981 ; if score is not -1 nor 0, fill candidates from total potentials
74F1 21 09 61    7 983 ld      hl, CYAN_BOARD_UP_DOWN+9    ; HL points to cyan board up-down address (1st position)
74F4 11 09 64    7 984 ld      de, RED_BOARD_LEFT_RIGHT+9  ; DE points to red board left-right address (1st position)
74F7 CD B6 74    7 985 call    PathFinder_Potentials       ; process candidates from total potentials
74FA 79          7 987 ld      a, c                        ; set board potential in A
74FB 08          7 988 ex      af, af'                     ; save board potential
74FC 50          7 989 ld      d, b                        ; store attack mobility
74FD DD 5D       7 990 ld      e, ixl                      ; store candidates position
74FF             7 992 ; insert the second best board potentials in candidates area
74FF             7 993 Candidates_2ndBest
74FF 2E 09       7 994 ld      l, 9                        ; HL points to board potentials address (1st position)
7501 0C          7 995 inc     c                           ; increment board potential
7502 79          7 996 ld      a, c                        ; A = second best potential
7503 FE 20       7 997 cp      $20                         ; is potential >= $20? (2nd best max potential)
7505 30 13       7 998 jr      nc, Candidates_2ndBest_Exit ; yes, stop searching 2nd best potential
7507 06 3D       7 1000 ld      b, 61                       ; number of cells to be checked (loop counter)
7509             7 1001 Candidates_2ndBest_Loop
7509 BE          7 1002 cp      (hl)                        ; is current board potential = 2nd best board potential?
750A C2 12 75    7 1003 jp      nz, Candidates_2ndBest_Next ; no, skip to next potential
750D DD 2C       7 1004 inc     ixl                         ; yes, insert candidate
750F DD 75 00    7 1005 ld      (ix+0), l
7512             7 1006 Candidates_2ndBest_Next
7512 2C          7 1007 inc     l                           ; move HL to next board potential address
7513 10 F4       7 1008 djnz    Candidates_2ndBest_Loop     ; repeat for each cell
7515 DD 7D       7 1009 ld      a, ixl                      ; A = current candidates position
7517 BB          7 1010 cp      e                           ; new candidates inserted?
7518 28 E5       7 1011 jr      z, Candidates_2ndBest       ; no, repeat until new candidates inserted
751A             7 1013 Candidates_2ndBest_Exit
751A 42          7 1014 ld      b, d                        ; restore attack mobility
751B 08          7 1015 ex      af, af'                     ; restore board potential
751C             7 1017 ; insert the best board potentials in candidates area
751C             7 1018 Candidates_Best
751C 2E 08       7 1019 ld      l, 8                        ; HL points to board potential address (1st position -1)
751E             7 1020 Candidates_Best_Loop
751E 2C          7 1021 inc     l                           ; move HL to next board potential address
751F BE          7 1022 cp      (hl)                        ; is current board potential equal to best board potential?
7520 C2 1E 75    7 1023 jp      nz, Candidates_Best_Loop    ; no, next potential
7523 DD 2C       7 1024 inc     ixl                         ; yes, insert candidate
7525 DD 75 00    7 1025 ld      (ix+0), l
7528 10 F4       7 1026 djnz    Candidates_Best_Loop        ; repeat for each cell
752A C9          7 1027 ret
752B             7 1029 ; ----------------------------------------------------------------------------------------------------------------------
752B             7 1030 ; Fill candidates for winner color
752B             7 1031 ; ----------------------------------------------------------------------------------------------------------------------
752B             7 1032 Candidates_Winner
752B 3A 99 61    7 1033 ld      a, (AI_PLAYER)              ; check speccy side
752E B7          7 1034 or      a                           ; is it FRIEND?
752F E2 4C 75    7 1035 jp      po, Candidates_Winner_Cyan  ; yes, fill candidates from cyan potentials
7532 21 09 64    7 1037 ld      hl, RED_BOARD_LEFT_RIGHT+9  ; HL points to red board left-right address (1st pos.)
7535 11 51 64    7 1038 ld      de, RED_BOARD_RIGHT_LEFT+1  ; DE points to red board right-left address (1st position)
7538 CD B6 74    7 1039 call    PathFinder_Potentials       ; calculate red potentials
753B 79          7 1040 ld      a, c                        ; set board potential in A
753C C3 1C 75    7 1041 jp      Candidates_Best             ; fill only the best candidates
753F             7 1043 ; ----------------------------------------------------------------------------------------------------------------------
753F             7 1044 ; Fill candidates for defeated color
753F             7 1045 ; ----------------------------------------------------------------------------------------------------------------------
753F             7 1046 Candidates_Defeat
753F 3A 99 61    7 1047 ld      a, (AI_PLAYER)              ; check speccy side
7542 B7          7 1048 or      a                           ; is it FRIEND?
7543 E2 59 75    7 1049 jp      po, Candidates_Defeat_Red   ; yes, fill candidates from red potentials
7546             7 1051 ; if RED is defeated, candidates are chosen from cyan board potentials
7546 CD 0F 71    7 1053 call    PathFinder_Cyan_UpDown      ; calculate cyan two-distance from UP to DOWN edge
7549 CD 4A 71    7 1054 call    PathFinder_Cyan_DownUp      ; calculate cyan two-distance from DOWN to UP edge
754C             7 1055 Candidates_Winner_Cyan
754C 21 09 61    7 1056 ld      hl, CYAN_BOARD_UP_DOWN+9    ; HL points to cyan board up-down address (1st position)
754F 11 51 61    7 1057 ld      de, CYAN_BOARD_DOWN_UP+1    ; DE points to cyan board down-up address (1st position)
7552 CD B6 74    7 1058 call    PathFinder_Potentials       ; calculate cyan potentials
7555 79          7 1059 ld      a, c                        ; set board potential in A
7556 C3 1C 75    7 1060 jp      Candidates_Best             ; fill only the best candidates
7559             7 1062 ; if CYAN is defeated, candidates are chosen from red board potentials
7559             7 1063 Candidates_Defeat_Red
7559 CD 82 71    7 1064 call    PathFinder_Red_LeftRight    ; calculate red two-distance from LEFT to RIGHT edge
755C CD C3 71    7 1065 call    PathFinder_Red_RightLeft    ; calculate red two-distance from RIGHT to LEFT edge
755F 21 09 64    7 1066 ld      hl, RED_BOARD_LEFT_RIGHT+9  ; HL points to red board left-right address (1st pos.)
7562 11 51 64    7 1067 ld      de, RED_BOARD_RIGHT_LEFT+1  ; DE points to red board right-left address (1st position)
7565 CD B6 74    7 1068 call    PathFinder_Potentials       ; calculate red potentials
7568 79          7 1069 ld      a, c                        ; set board potential in A
7569 C3 1C 75    7 1070 jp      Candidates_Best             ; fill only the best candidates
756C             7 1072 ; ----------------------------------------------------------------------------------------------------------------------
756C             7 1073 ; PathFinder_VictoryPath: calculate current player victory path
756C             7 1074 ;
756C             7 1075 ; Input:    -
756C             7 1076 ;
756C             7 1077 ; Output:   A   = -1, if there isn't a victory path
756C             7 1078 ;           A   = start position (-1) of the victory path, otherwise
756C             7 1079 ;           HL  = cyan or red queue head address
756C             7 1080 ;
756C             7 1081 ; Uses:     TOKEN_COLOR (current token color)
756C             7 1082 ;
756C             7 1083 ; Destroys: BC, DE, HL, IY
756C             7 1084 ; ----------------------------------------------------------------------------------------------------------------------
756C             7 1085 PathFinder_VictoryPath:
756C 3A 9E 61    7 1086 ld      a, (TOKEN_COLOR)            ; get current token color
756F FE 05       7 1087 cp      CYAN_COLOR                  ; if it is cyan, check victory path for cyan player
7571 28 0C       7 1088 jr      z, PathFinder_VictoryPath_Cyan
7573 CD 82 71    7 1090 call    PathFinder_Red_LeftRight    ; execute Path_Finder RED two-distance from LEFT to RIGHT
7576 21 45 64    7 1091 ld      hl, RED_BOARD_LEFT_RIGHT+69 ; HL points to red board left-right address (last position)
7579 CD 8B 75    7 1092 call    PathFinder_PrepareBoard     ; prepare board to calculate victory path
757C C3 8B 71    7 1093 jp      PathFinder_Red_CheckPath    ; calculate RED victory path
757F             7 1095 PathFinder_VictoryPath_Cyan
757F CD 0F 71    7 1096 call    PathFinder_Cyan_UpDown      ; execute Path_Finder CYAN two-distance from UP to DOWN
7582 21 45 61    7 1097 ld      hl, CYAN_BOARD_UP_DOWN+69   ; HL points to cyan board up-down address (last position)
7585 CD 8B 75    7 1098 call    PathFinder_PrepareBoard     ; prepare board to calculate victory path
7588 C3 18 71    7 1099 jp      PathFinder_Cyan_CheckPath   ; calculate CYAN victory path
758B             7 1101 ; ----------------------------------------------------------------------------------------------------------------------
758B             7 1102 ; PathFinder_PrepareBoard: update '[color]_BOARD_XX_YY', changing VICTORY+$40 to 1, everything else to ENEMY.
758B             7 1103 ; Immediately after 'Path_Finder_[color]' returned VICTORY, you can execute this routine, then execute 'Path_Finder_
758B             7 1104 ; [color]' again to find a victory path.
758B             7 1105 ;
758B             7 1106 ; Coded by Einar Saukas
758B             7 1107 ;
758B             7 1108 ; Input:    HL = pointer to last position of [color]_BOARD
758B             7 1109 ;
758B             7 1110 ; Output:   -
758B             7 1111 ;
758B             7 1112 ; Destroys: A, BC, HL
758B             7 1113 ; ----------------------------------------------------------------------------------------------------------------------
758B             7 1114 PathFinder_PrepareBoard:
758B 3E 43       7 1115 ld      a, VICTORY+$40              ; set victory distance + friendly flag
758D 0E 07       7 1116 ld      c, 7                        ; 7 rows
758F             7 1117 PrepareBoard_Row
758F 06 07       7 1118 ld      b, 7                        ; 7 columns
7591             7 1119 PrepareBoard_Column
7591 BE          7 1120 cp      (hl)                        ; check win condition
7592 36 01       7 1121 ld      (hl), 1                     ; save 1 by default
7594 28 02       7 1122 jr      z, PrepareBoard_Next        ; if win condition, skip to position
7596 36 7E       7 1123 ld      (hl), ENEMY                 ; else, save ENEMY
7598             7 1124 PrepareBoard_Next
7598 2D          7 1125 dec     l                           ; HL points to next board position
7599 10 F6       7 1126 djnz    PrepareBoard_Column         ; repeat for each column
759B 2D          7 1128 dec     l                           ; skip borders
759C 2D          7 1129 dec     l
759D 0D          7 1130 dec     c                           ; decrement rows
759E C2 8F 75    7 1131 jp      nz, PrepareBoard_Row        ; repeat for each row
75A1 C9          7 1132 ret
75A2             7 1134 ; ----------------------------------------------------------------------------------------------------------------------
75A2             7 1135 ; PathFinder_BrightPath: animate and highlight the hexagons included in shortest path when match ends
75A2             7 1136 ;
75A2             7 1137 ; Input:    A  = start position of the victory path
75A2             7 1138 ;           HL = cyan or red queue head address
75A2             7 1139 ;
75A2             7 1140 ; Output:   -
75A2             7 1141 ;
75A2             7 1142 ; Uses:     TOKEN_COLOR (current token color)
75A2             7 1143 ;
75A2             7 1144 ; Destroys: A, BC, DE, HL, IX
75A2             7 1145 ; ----------------------------------------------------------------------------------------------------------------------
75A2             7 1146 PathFinder_BrightPath:
75A2 6F          7 1147 ld      l, a                        ; move HL to the start position of the victory path
75A3 24          7 1148 inc     h
75A4 4E          7 1149 ld      c, (hl)                     ; set current victory path length in C
75A5 06 03       7 1150 ld      b, VICTORY                  ; set victory length in B
75A7 3A 9E 61    7 1152 ld      a, (TOKEN_COLOR)            ; get current token color
75AA C6 40       7 1153 add     a, $40                      ; switch on bright attribute
75AC 32 9E 61    7 1154 ld      (TOKEN_COLOR), a
75AF 3E 04       7 1155 ld      a, 4                        ; set delay duration for animate hexagons
75B1 32 94 6D    7 1156 ld      (@Token_Delay+1), a
75B4 C3 D3 75    7 1158 jp      BrightPath_Position         ; animate and highlight the hexagon position
75B7             7 1159 BrightPath_Neighbor
75B7 2C          7 1160 inc     l                           ; move HL to left neighbor address
75B8 BE          7 1161 cp      (hl)                        ; is it the same as current victory path length?
75B9 28 18       7 1162 jr      z, BrightPath_Position      ; yes, animate and highlight the hexagon position
75BB 2D          7 1163 dec     l                           ; move HL to right neighbor address
75BC 2D          7 1164 dec     l
75BD BE          7 1165 cp      (hl)                        ; is it the same as current victory path length?
75BE 28 13       7 1166 jr      z, BrightPath_Position      ; yes, animate and highlight the hexagon position
75C0 11 F8 FF    7 1167 ld      de, -WIDTH                  ; move HL to upper-right neighbor address
75C3 19          7 1168 add     hl, de
75C4 BE          7 1169 cp      (hl)                        ; is it the same as current victory path length?
75C5 28 0C       7 1170 jr      z, BrightPath_Position      ; yes, animate and highlight the hexagon position
75C7 2C          7 1171 inc     l                           ; move HL to upper-left neighbor address
75C8 BE          7 1172 cp      (hl)                        ; is it the same as current victory path length?
75C9 28 08       7 1173 jr      z, BrightPath_Position      ; yes, animate and highlight the hexagon position
75CB 11 10 00    7 1174 ld      de, WIDTH*2                 ; move HL to lower-right neighbor address
75CE 19          7 1175 add     hl, de
75CF BE          7 1176 cp      (hl)                        ; is it the same as current victory path length?
75D0 28 01       7 1177 jr      z, BrightPath_Position      ; yes, animate and highlight the hexagon position
75D2 2C          7 1178 inc     l                           ; move HL to lower-left neighbor address
75D3             7 1179 BrightPath_Position
75D3 C5          7 1180 push    bc                          ; store current victory path length
75D4 E5          7 1181 push    hl                          ; store current position pointer
75D5 CD 43 6D    7 1182 call    Main_Board2Indexes          ; convert a board position into a board indexes
75D8 CD 80 6D    7 1183 call    Draw_Token                  ; animate hexagon sprite on the screen
75DB DD 21 E7 64 7 1184 ld      ix, TOKEN_FX                ; IX points to token tone parameters address
75DF CD 9A 76    7 1185 call    Sound_FX                    ; play sound effect
75E2 E1          7 1186 pop     hl                          ; restore current position pointer
75E3 C1          7 1187 pop     bc                          ; restore current victory path length
75E4 0D          7 1188 dec     c                           ; decrement current victory path length
75E5 79          7 1189 ld      a, c                        ; set current victory path length in A
75E6 B8          7 1190 cp      b                           ; has reached victory length?
75E7 C2 B7 75    7 1191 jp      nz, BrightPath_Neighbor     ; repeat for each neighbor until reach victory length
75EA 21 9E 61    7 1193 ld      hl, TOKEN_COLOR             ; get current token color address
75ED CB B6       7 1194 res     6, (hl)                     ; switch off bright attribute
75EF C9          7 1195 ret

; File #8: C:\Users\Antonio\source\repos\Hex\Z80CodeFiles\Timer.z80asm

75F0             8 1 ; ----------------------------------------------------------------------------------------------------------------------
75F0             8 2 ; Timer.z80asm
75F0             8 3 ; Coded by Antonio Luque
75F0             8 4 ;
75F0             8 5 ; Based on disassembly of "Chess" (c) 1982 Psion
75F0             8 6 ; ----------------------------------------------------------------------------------------------------------------------
75F0             8 8 ; ----------------------------------------------------------------------------------------------------------------------
75F0             8 9 ; Timer_Interrupt: interrupt routine to manage players' timers
75F0             8 10 ;
75F0             8 11 ; Input:    -
75F0             8 12 ;
75F0             8 13 ; Output:   -
75F0             8 14 ;
75F0             8 15 ; Uses:     TIMER_FLAG (0 = timer stopped, 1 = cyan timer on, 2 = red timer on)
75F0             8 16 ;
75F0             8 17 ; Destroys: BC', DE', HL'
75F0             8 18 ; ----------------------------------------------------------------------------------------------------------------------
75F0             8 19 Timer_Interrupt:
75F0 F5          8 20 push    af                          ; store AF register
75F1 D9          8 21 exx                                 ; store BC, DE and HL registers
75F2 3A E8 62    8 23 ld      a, (TIMER_FLAG)             ; check timer flag
75F5 B7          8 24 or      a                           ; is timer stopped?
75F6 CA 1F 76    8 25 jp      z, Timer_Exit               ; yes, exit routine
75F9 21 EC 62    8 27 ld      hl, RED_TIMER               ; HL points to red's interrupt counter address
75FC 3D          8 28 dec     a                           ; is red timer on?
75FD C2 03 76    8 29 jp      nz, Timer_Counters          ; yes, check interrupt counter 
7600 21 E9 62    8 30 ld      hl, CYAN_TIMER              ; HL points to cyan's interrupt counter address
7603             8 31 Timer_Counters
7603 35          8 32 dec     (hl)                        ; decrement interrupt counter
7604 C2 1F 76    8 33 jp      nz, Timer_Exit              ; if not 0, exit routine
7607 36 32       8 35 ld      (hl), 50                    ; restart interrupt counter
7609 23          8 36 inc     hl                          ; move HL to seconds counter address
760A 3E 01       8 37 ld      a, 1                        ; increment seconds counter
760C 86          8 38 add     a, (hl)
760D 27          8 39 daa                                 ; convert to BCD (Binary-Coded-Decimal)
760E 77          8 40 ld      (hl), a                     ; store seconds
760F FE 60       8 41 cp      $60                         ; 60 seconds reached?
7611 C2 1C 76    8 42 jp      nz, Timer_Show              ; no, show timer
7614 36 00       8 43 ld      (hl), 0                     ; restart seconds counter
7616 23          8 44 inc     hl                          ; move HL to minutes counter address
7617 3E 01       8 45 ld      a, 1                        ; increment minutes counter
7619 86          8 46 add     a, (hl)
761A 27          8 47 daa                                 ; convert to BCD (Binary-Coded-Decimal)
761B 77          8 48 ld      (hl), a                     ; store minutes
761C             8 49 Timer_Show
761C CD 23 76    8 50 call    Timer_Display               ; display timer on the screen
761F             8 51 Timer_Exit
761F D9          8 52 exx                                 ; restore BC, DE and HL registers
7620 F1          8 53 pop     af                          ; restore AF register
7621 FB          8 55 ei                                  ; enable interrupts
7622 C9          8 56 ret
7623             8 58 ; ----------------------------------------------------------------------------------------------------------------------
7623             8 59 ; Timer_Display: display a timer on the screen
7623             8 60 ;
7623             8 61 ; Input:    -
7623             8 62 ;
7623             8 63 ; Output:   -
7623             8 64 ;
7623             8 65 ; Uses:     TIMER_FLAG (0 = timer stopped, 1 = cyan timer on, 2 = red timer on)
7623             8 66 ;
7623             8 67 ; Destroys: A, BC, DE, HL
7623             8 68 ; ----------------------------------------------------------------------------------------------------------------------
7623             8 69 Timer_Display:
7623 01 EE 62    8 70 ld      bc, RED_TIMER+2             ; BC points to red's minutes counter address
7626 11 E2 48    8 71 ld      de, $48E2                   ; DE points to red's minutes screen address
7629 3A E8 62    8 72 ld      a, (TIMER_FLAG)             ; check timer flag
762C 3D          8 73 dec     a                           ; is cyan timer on?
762D C2 36 76    8 74 jp      nz, Timer_Display_Min       ; no, jump to display minutes counter
7630 01 EB 62    8 75 ld      bc, CYAN_TIMER+2            ; BC points to cyan's minutes counter address
7633 11 78 40    8 76 ld      de, $4078                   ; DE points to cyan's minutes screen address
7636             8 77 Timer_Display_Min
7636 CD 3B 76    8 78 call    Timer_Display_MinSec        ; display minutes counter on screen
7639 0B          8 79 dec     bc                          ; BC points to seconds counter address
763A 1C          8 80 inc     e                           ; DE points to seconds screen address
763B             8 81 Timer_Display_MinSec:
763B 0A          8 82 ld      a, (bc)                     ; set min/sec counter in A
763C 1F          8 83 rra                                 ; move tens digit to the first 4th bits of A
763D 1F          8 84 rra
763E 1F          8 85 rra
763F 1F          8 86 rra
7640 CD 44 76    8 87 call    Timer_Display_Digit         ; display tens digit on screen
7643 0A          8 88 ld      a, (bc)                     ; set min/sec counter in A 
7644             8 89 Timer_Display_Digit:
7644 E6 0F       8 90 and     %00001111                   ; discard the last 4th bits of the digit
7646 D5          8 91 push    de                          ; store digit screen address
7647 21 97 64    8 93 ld      hl, TIMER_DIGITS            ; HL points to timer digits (graphics) address
764A 87          8 94 add     a, a                        ; a digit is 8 bytes long
764B 87          8 95 add     a, a
764C 87          8 96 add     a, a
764D 85          8 97 add     a, l                        ; set digit index in HL
764E 6F          8 98 ld      l, a
764F 7E          8 100 ld      a, (hl)                     ; get digit tile
7650 12          8 101 ld      (de), a                     ; put it on screen address
7651 14          8 102 inc     d                           ; move DE to next pixel-line address
7652 2C          8 103 inc     l                           ; move HL to next digit tile address
7653 7E          8 104 ld      a, (hl)                     ; (repeat 7 more times)
7654 12          8 105 ld      (de), a
7655 14          8 106 inc     d
7656 2C          8 107 inc     l
7657 7E          8 108 ld      a, (hl)
7658 12          8 109 ld      (de), a
7659 14          8 110 inc     d
765A 2C          8 111 inc     l
765B 7E          8 112 ld      a, (hl)
765C 12          8 113 ld      (de), a
765D 14          8 114 inc     d
765E 2C          8 115 inc     l
765F 7E          8 116 ld      a, (hl)
7660 12          8 117 ld      (de), a
7661 14          8 118 inc     d
7662 2C          8 119 inc     l
7663 7E          8 120 ld      a, (hl)
7664 12          8 121 ld      (de), a
7665 14          8 122 inc     d
7666 2C          8 123 inc     l
7667 7E          8 124 ld      a, (hl)
7668 12          8 125 ld      (de), a
7669 14          8 126 inc     d
766A 2C          8 127 inc     l
766B 7E          8 128 ld      a, (hl)
766C 12          8 129 ld      (de), a
766D D1          8 131 pop     de                          ; restore digit screen address
766E 1C          8 132 inc     e                           ; move screen address to next column
766F C9          8 133 ret
7670             8 135 ; ----------------------------------------------------------------------------------------------------------------------
7670             8 136 ; Timer_Display_All: display cyan and red timers
7670             8 137 ;
7670             8 138 ; Input:    -
7670             8 139 ;
7670             8 140 ; Output:   -
7670             8 141 ;
7670             8 142 ; Uses:     TIMER_FLAG (0 = timer stopped, 1 = cyan timer on, 2 = red timer on)
7670             8 143 ;
7670             8 144 ; Destroys: BC, DE, HL
7670             8 145 ; ----------------------------------------------------------------------------------------------------------------------
7670             8 146 Timer_Display_All:
7670 3E 01       8 147 ld      a, 1                        ; set cyan timer on
7672 32 E8 62    8 148 ld      (TIMER_FLAG), a
7675 CD 23 76    8 149 call    Timer_Display               ; display cyan timer
7678 3E 02       8 151 ld      a, 2                        ; set red timer on
767A 32 E8 62    8 152 ld      (TIMER_FLAG), a
767D CD 23 76    8 153 call    Timer_Display               ; display red timer
7680 AF          8 155 xor     a                           ; stop timers
7681 32 E8 62    8 156 ld      (TIMER_FLAG), a
7684 C9          8 157 ret
7685             8 159 ; ----------------------------------------------------------------------------------------------------------------------
7685             8 160 ; Timer_Reset: initialize cyan and red timers
7685             8 161 ;
7685             8 162 ; Input:    -
7685             8 163 ;
7685             8 164 ; Output:   -
7685             8 165 ;
7685             8 166 ; Destroys: HL
7685             8 167 ; ----------------------------------------------------------------------------------------------------------------------
7685             8 168 Timer_Reset:
7685 21 E9 62    8 169 ld      hl, CYAN_TIMER              ; HL points to cyan timer address
7688 36 32       8 171 ld      (hl), 50                    ; set interrupt counter (1/50 seconds)
768A 23          8 172 inc     hl                          ; move HL to cyan's seconds counter address
768B 36 00       8 173 ld      (hl), 0                     ; reset seconds counter
768D 23          8 174 inc     hl                          ; move HL to cyan's minutes counter address
768E 36 00       8 175 ld      (hl), 0                     ; reset minutes counter
7690 23          8 176 inc     hl                          ; move HL to red's interrupt counter
7691 36 32       8 178 ld      (hl), 50                    ; set interrupt counter (1/50 seconds)
7693 23          8 179 inc     hl                          ; move HL to red's seconds counter address
7694 36 00       8 180 ld      (hl), 0                     ; reset seconds counter
7696 23          8 181 inc     hl                          ; move HL to red's minutes counter address
7697 36 00       8 182 ld      (hl), 0                     ; reset minutes counter
7699 C9          8 183 ret

; File #9: C:\Users\Antonio\source\repos\Hex\Z80CodeFiles\Sound.z80asm

769A             9 1 ; ----------------------------------------------------------------------------------------------------------------------
769A             9 2 ; Sound.z80asm
769A             9 3 ; Coded with BeepFX player tool by Shiru: https://shiru.untergrund.net/software.shtml
769A             9 4 ;
769A             9 5 ; Adapted for Hex game by Antonio Luque
769A             9 6 ; ----------------------------------------------------------------------------------------------------------------------
769A             9 8 ; ----------------------------------------------------------------------------------------------------------------------
769A             9 9 ; Sound_FX: play a sound effect (tone) defined by many parameters
769A             9 10 ; 
769A             9 11 ; Input:    IX = tone parameters address
769A             9 12 ;
769A             9 13 ; Output:   -
769A             9 14 ;
769A             9 15 ; Destroys: A, BC, DE, HL, IY
769A             9 16 ; ----------------------------------------------------------------------------------------------------------------------
769A             9 17 Sound_FX:
769A F3          9 18 di                                  ; disable interrupts
769B DD 4E 00    9 20 ld      c, (ix+0)                   ; BC = frames
769E DD 46 01    9 21 ld      b, (ix+1)
76A1 DD 5E 02    9 22 ld      e, (ix+2)                   ; DE = frame length
76A4 DD 56 03    9 23 ld      d, (ix+3)
76A7 D5          9 24 push    de                          ; store frame length in IY
76A8 FD E1       9 25 pop     iy
76AA DD 5E 04    9 26 ld      e, (ix+4)                   ; DE = pitch
76AD DD 56 05    9 27 ld      d, (ix+5)
76B0 21 00 00    9 28 ld      hl, 0                       ; reset HL
76B3             9 30 Sound_FX_Frames
76B3 C5          9 31 push    bc                          ; store frames
76B4 FD E5       9 32 push    iy                          ; restore frame length in BC
76B6 C1          9 33 pop     bc
76B7             9 34 Sound_FX_FrameLength
76B7 19          9 35 add     hl, de                      ; HL = incremented pitch
76B8 7C          9 36 ld      a, h                        ; compares with fixed duty cycle ($80 for 50% square wave)
76B9 FE 80       9 37 cp      $80                         ; if (incremented pitch < duty cycle)
76BB 9F          9 38 sbc     a, a                        ;    { A = %11111111 } else { A = %00000000 }
76BC E6 10       9 39 and     %00010000                   ; toggling bit 4 controls the internal speaker
76BE F6 00       9 40 or      0                           ; keep border unchanged, dummy (7t)
76C0 D3 FE       9 41 out     ($FE), a                    ; send bit to internal speaker
76C2 3A 00 00    9 42 ld      a, (0)                      ; dummy (13t)
76C5 0B          9 43 dec     bc                          ; decrement frame length
76C6 78          9 44 ld      a, b                        ; check frame length
76C7 B1          9 45 or      c                           ; frame length = 0?
76C8 C2 B7 76    9 46 jp      nz, Sound_FX_FrameLength    ; no, repeat "frame length" times (loop = 88t)
76CB DD 4E 06    9 48 ld      c, (ix+6)                   ; BC = pitch slide
76CE DD 46 07    9 49 ld      b, (ix+7)
76D1 EB          9 50 ex      de, hl                      ; HL = current pitch
76D2 09          9 51 add     hl, bc                      ; increment pitch with pitch slide
76D3 EB          9 52 ex      de, hl                      ; DE = new pitch
76D4 C1          9 54 pop     bc                          ; restore frames
76D5 0B          9 55 dec     bc                          ; decrement frames
76D6 78          9 56 ld      a, b                        ; check frames
76D7 B1          9 57 or      c                           ; frames = 0?
76D8 20 D9       9 58 jr      nz, Sound_FX_Frames         ; no, repeat "frames" times
76DA FB          9 60 ei                                  ; enable interrupts
76DB C9          9 61 ret

; File #10: C:\Users\Antonio\source\repos\Hex\Z80CodeFiles\Screen.z80asm

76DC             10 1 ; ----------------------------------------------------------------------------------------------------------------------
76DC             10 2 ; Screen.z80asm
76DC             10 3 ; Coded by Antonio Luque
76DC             10 4 ; ----------------------------------------------------------------------------------------------------------------------
76DC             10 6 BLUE_INK                EQU     %00000001                   ; attributes: flash 0, bright 0, paper 0, ink 1
76DC             10 7 BLUE_PAPER              EQU     %00001000                   ; attributes: flash 0, bright 0, paper 1, ink 0
76DC             10 8 WHITE_PAPER             EQU     %00111000                   ; attributes: flash 0, bright 0, paper 7, ink 0
76DC             10 9 WHITE                   EQU     %00000111                   ; attributes: flash 0, bright 0, paper 0, ink 7
76DC             10 10 BRIGHT                  EQU     %01000000                   ; mask to apply bright to attributes
76DC             10 11 FLASH                   EQU     %10000000                   ; mask to apply flash to attributes
76DC             10 12 WHITE_FLASH0            EQU     WHITE+BRIGHT                ; attributes: flash 0, bright 1, paper 0, ink 7
76DC             10 13 WHITE_FLASH1            EQU     WHITE+BRIGHT+FLASH          ; attributes: flash 1, bright 1, paper 0, ink 7
76DC             10 15 ; ----------------------------------------------------------------------------------------------------------------------
76DC             10 16 ; Screen_Clear: fill in black the whole screen area and attributes area
76DC             10 17 ;
76DC             10 18 ; Input:    -
76DC             10 19 ;
76DC             10 20 ; Output:   -
76DC             10 21 ;
76DC             10 22 ; Destroys: BC, DE, HL
76DC             10 23 ; ----------------------------------------------------------------------------------------------------------------------
76DC             10 24 Screen_Clear:
76DC 21 00 40    10 25 ld      hl, $4000                   ; HL points to start of the screen address
76DF 11 01 40    10 26 ld      de, $4001                   ; DE points to next byte of the screen address
76E2 75          10 27 ld      (hl), l                     ; set first pixel-byte in black
76E3 01 FF 1A    10 28 ld      bc, 6144-1+768              ; length of screen area (-1 already set) + attributes area 
76E6 ED B0       10 29 ldir                                ; fill the rest of screen area and attributes area in black
76E8 C9          10 30 ret
76E9             10 32 ; ----------------------------------------------------------------------------------------------------------------------
76E9             10 33 ; Screen_Letters: draw the two rows of letters on the screen (a..g)
76E9             10 34 ;
76E9             10 35 ; Input:    -
76E9             10 36 ;
76E9             10 37 ; Output:   -
76E9             10 38 ;
76E9             10 39 ; Destroys: A, BC, DE, HL, IX
76E9             10 40 ; ----------------------------------------------------------------------------------------------------------------------
76E9             10 41 Screen_Letters:
76E9 21 66 45    10 42 ld      hl, $4566                   ; HL points to first letter screen address (top row)
76EC DD 21 66 58 10 43 ld      ix, $5866                   ; IX points to first letter attribute address (top row)
76F0 CD FA 76    10 44 call    Screen_Letters_Row          ; draw top row of letters
76F3 21 6D 51    10 45 ld      hl, $516D                   ; HL points to first letter screen address (bottom row)
76F6 DD 21 6D 5A 10 46 ld      ix, $5A6D                   ; IX points to first letter attribute address (bottom row)
76FA             10 47 Screen_Letters_Row:
76FA 11 5E 66    10 48 ld      de, LETTER_SPRITES          ; DE points to letter sprites address
76FD 06 07       10 49 ld      b, 7                        ; number of letters (loop counter)
76FF             10 50 Screen_Letter_Loop
76FF E5          10 51 push    hl                          ; store letter screen address
7700 CD B8 6D    10 52 call    Draw_Sprite_LetterNum       ; draw letter at screen address
7703 E1          10 53 pop     hl                          ; restore letter screen address
7704 2C          10 54 inc     l                           ; move HL to next screen address
7705 2C          10 55 inc     l
7706 DD 36 00 05 10 56 ld      (ix+0), CYAN_COLOR          ; set letter color (2 bytes)
770A DD 36 20 05 10 57 ld      (ix+32), CYAN_COLOR
770E DD 2C       10 58 inc     ixl                         ; move IX to next attribute address
7710 DD 2C       10 59 inc     ixl
7712 10 EB       10 60 djnz    Screen_Letter_Loop          ; repeat for each letter
7714 C9          10 61 ret
7715             10 63 ; ----------------------------------------------------------------------------------------------------------------------
7715             10 64 ; Screen_Numbers: draw the two columns of numbers on the screen (1-7)
7715             10 65 ;
7715             10 66 ; Input:    -
7715             10 67 ;
7715             10 68 ; Output:   -
7715             10 69 ;
7715             10 70 ; Destroys: A, BC, DE, HL, IX, IY
7715             10 71 ; ----------------------------------------------------------------------------------------------------------------------
7715             10 72 Screen_Numbers:
7715 11 A4 66    10 73 ld      de, NUMBER_SPRITES          ; DE points to numbers sprites
7718 FD 21 EF 62 10 74 ld      iy, NUMBER_SCREEN           ; IY points to numbers screen addresses
771C DD 21 A5 58 10 75 ld      ix, $58A5                   ; IX points to first number attribute address
7720 06 07       10 76 ld      b, 7                        ; number of numbers (loop counter)
7722             10 77 Screen_Number_Loop
7722 FD 6E 00    10 78 ld      l, (iy+0)                   ; HL points to number screen address
7725 FD 66 01    10 79 ld      h, (iy+1)
7728 E5          10 80 push    hl                          ; store pointer to number screen address
7729 D5          10 81 push    de                          ; store pointer to sprite address
772A CD B8 6D    10 82 call    Draw_Sprite_LetterNum       ; draw number at screen address
772D D1          10 83 pop     de                          ; restore pointer to sprite address
772E E1          10 84 pop     hl                          ; restore pointer to number screen address
772F DD 36 00 02 10 85 ld      (ix+0), RED_COLOR           ; set number color (2 bytes)
7733 DD 36 20 02 10 86 ld      (ix+32), RED_COLOR
7737 7D          10 87 ld      a, l                        ; move HL to screen address of the 2nd column
7738 C6 0F       10 88 add     a, 15
773A 6F          10 89 ld      l, a
773B CD B8 6D    10 90 call    Draw_Sprite_LetterNum       ; draw number at screen address
773E DD 36 0F 02 10 91 ld      (ix+15), RED_COLOR          ; set number color (2 bytes)
7742 DD 36 2F 02 10 92 ld      (ix+47), RED_COLOR
7746 78          10 93 ld      a, b                        ; save loop counter
7747 01 41 00    10 94 ld      bc, 65                      ; displacement of next attribute address
774A DD 09       10 95 add     ix, bc                      ; move IX to next attribute address
774C FD 23       10 96 inc     iy                          ; move IY to next number screen address
774E FD 23       10 97 inc     iy
7750 47          10 98 ld      b, a                        ; restore loop counter
7751 10 CF       10 99 djnz    Screen_Number_Loop          ; repeat for each number
7753 C9          10 100 ret
7754             10 102 ; ----------------------------------------------------------------------------------------------------------------------
7754             10 103 ; Screen_Frame: draw the screen frame on the screen
7754             10 104 ;
7754             10 105 ; Input:    -
7754             10 106 ;
7754             10 107 ; Output:   -
7754             10 108 ;
7754             10 109 ; Destroys: A, BC, DE, HL, IX
7754             10 110 ; ----------------------------------------------------------------------------------------------------------------------
7754             10 111 Screen_Frame:
7754 11 28 62    10 112 ld      de, STR_LEVELTEXT           ; DE points to "Level" string address
7757 21 09 40    10 113 ld      hl, $4009                   ; HL points to screen address of the string
775A CD 21 6F    10 114 call    Print_String                ; print "Level"
775D CD 99 77    10 115 call    Screen_Vertical_Bars        ; draw the vertical bars of frame
7760 01 8D 62    10 117 ld      bc, FRAME_MAP               ; BC points to the frame tiles indexes
7763 21 00 40    10 118 ld      hl, $4000                   ; HL points to the screen address of the up-border
7766 CD 6C 77    10 119 call    Screen_Frame_Border         ; draw up-border
7769 21 E0 50    10 120 ld      hl, $50E0                   ; HL points to the screen address of the bottom-border
776C             10 121 Screen_Frame_Border:
776C DD 2E 20    10 122 ld      ixl, 32                     ; border width in bytes (loop counter)
776F             10 123 Screen_Frame_Loop
776F 0A          10 124 ld      a, (bc)                     ; get tile index
7770 FE FF       10 125 cp      -1                          ; is it -1?
7772 28 06       10 126 jr      z, Screen_Frame_Next        ; yes, there is no tile to print
7774 11 0E 65    10 127 ld      de, FRAME_TILES             ; DE points to tiles array
7777 CD 31 6F    10 128 call    Print_Tile                  ; print frame tile
777A             10 129 Screen_Frame_Next
777A 2C          10 130 inc     l                           ; HL points to the next screen address (next column)
777B 03          10 131 inc     bc                          ; BC points to the next tile index
777C DD 2D       10 132 dec     ixl                         ; decrement loop counter
777E 20 EF       10 133 jr      nz, Screen_Frame_Loop       ; repeat for each tile
7780 DD 21 07 58 10 135 ld      ix, $5807                   ; IX points to the "concave left" tile screen position
7784 DD 36 00 08 10 136 ld      (ix+0), BLUE_PAPER          ; color tile
7788 DD 36 0A 08 10 137 ld      (ix+10), BLUE_PAPER         ; color "concave right" tile
778C DD 21 F1 5A 10 138 ld      ix, $5AF1                   ; IX points to the "convex left" tile screen position
7790 DD 36 00 01 10 139 ld      (ix+0), BLUE_INK            ; color tile
7794 DD 36 04 01 10 140 ld      (ix+4), BLUE_INK            ; color "convex right" tile
7798 C9          10 141 ret
7799             10 143 ; ----------------------------------------------------------------------------------------------------------------------
7799             10 144 ; Screen_Vertical_Bars: draw the vertical bars of the frame on the screen
7799             10 145 ;
7799             10 146 ; Input:    -
7799             10 147 ;
7799             10 148 ; Output:   -
7799             10 149 ;
7799             10 150 ; Destroys: A, BC, HL
7799             10 151 ; ----------------------------------------------------------------------------------------------------------------------
7799             10 152 Screen_Vertical_Bars:
7799 21 20 40    10 153 ld      hl, $4020                   ; HL points to left bar screen address
779C CD A2 77    10 154 call    Screen_Vertical_Bar         ; draw left bar
779F 21 3F 40    10 155 ld      hl, $403F                   ; HL points to right bar screen address
77A2             10 156 Screen_Vertical_Bar:
77A2 06 B0       10 157 ld      b, 176                      ; number of pixel lines (loop counter)
77A4             10 158 Screen_Vertical_Loop
77A4 36 3C       10 159 ld      (hl), %00111100             ; draw pixel byte of bar
77A6 CD C4 6D    10 160 call    Draw_Down_PixelLine         ; move HL to the next pixel-line address
77A9 10 F9       10 161 djnz    Screen_Vertical_Loop        ; repeat for each pixel line
77AB C9          10 162 ret
77AC             10 164 ; ----------------------------------------------------------------------------------------------------------------------
77AC             10 165 ; Screen_Tokens: draw the fixed tokens on the screen
77AC             10 166 ;
77AC             10 167 ; Input:    -
77AC             10 168 ;
77AC             10 169 ; Output:   -
77AC             10 170 ;
77AC             10 171 ; Uses:     TOKEN_COLOR (current token color)
77AC             10 172 ;
77AC             10 173 ; Destroys: A, BC, DE, HL, IX
77AC             10 174 ; ----------------------------------------------------------------------------------------------------------------------
77AC             10 175 Screen_Tokens:
77AC 3E 05       10 176 ld      a, CYAN_COLOR               ; set token color
77AE 21 BA 44    10 177 ld      hl, $44BA                   ; HL points to the fixed cyan token screen address
77B1 CD B9 77    10 178 call    Screen_Tokens_Draw          ; draw cyan fixed token
77B4 3E 02       10 180 ld      a, RED_COLOR                ; set token color
77B6 21 24 54    10 181 ld      hl, $5424                   ; HL points to the fixed red token screen address 
77B9             10 182 Screen_Tokens_Draw:
77B9 32 9E 61    10 183 ld      (TOKEN_COLOR), a            ; save token color
77BC CD D3 6D    10 184 call    Draw_Hexagon_Color          ; color fixed token area
77BF DD 77 40    10 185 ld      (ix+64), a                  ; the fixed tokens are 3 bytes (attributes) high, so we have
77C2 DD 77 41    10 186 ld      (ix+65), a                  ; to color the remaining 2 bytes that have not been colored
77C5 11 3E 66    10 187 ld      de, HEXAGON_TOKEN           ; DE points to token sprite address
77C8 C3 A5 6D    10 188 jp      Draw_Sprite_Hexagon         ; draw fixed token
77CB             10 190 ; ----------------------------------------------------------------------------------------------------------------------
77CB             10 191 ; Screen_Timer_Quotes: draw the timer quotes ('  '') on the screen
77CB             10 192 ;
77CB             10 193 ; Input:    -
77CB             10 194 ;
77CB             10 195 ; Output:   -
77CB             10 196 ;
77CB             10 197 ; Destroys: IX
77CB             10 198 ; ----------------------------------------------------------------------------------------------------------------------
77CB             10 199 Screen_Timer_Quotes:
77CB DD 21 7A 40 10 200 ld      ix, $407A                   ; IX points to the screen address of the cyan timer quotes 
77CF DD 36 00 08 10 201 ld      (ix+0), %00001000           ; draw 1st half of simple quote (')
77D3 DD 36 03 0A 10 202 ld      (ix+3), %00001010           ; draw 1st half of double quotes (")
77D7 DD 24       10 203 inc     ixh                         ; move IX to the next screen pixel-line
77D9 DD 36 00 08 10 204 ld      (ix+0), %00001000           ; draw 2nd half of simple quote (')
77DD DD 36 03 0A 10 205 ld      (ix+3), %00001010           ; draw 2nd half of double quotes (")
77E1 DD 26 58    10 206 ld      ixh, $58                    ; move IX to the attribute address
77E4 DD 36 00 07 10 207 ld      (ix+0), WHITE               ; color simple quote
77E8 DD 36 03 07 10 208 ld      (ix+3), WHITE               ; color double quotes
77EC DD 21 E4 48 10 210 ld      ix, $48E4                   ; IX points to the screen address of the red timer quotes
77F0 DD 36 00 08 10 211 ld      (ix+0), %00001000           ; draw 1st half of simple quote (')
77F4 DD 36 03 0A 10 212 ld      (ix+3), %00001010           ; draw 1st half of double quotes (")
77F8 DD 24       10 213 inc     ixh                         ; move IX to the next screen pixel-line
77FA DD 36 00 08 10 214 ld      (ix+0), %00001000           ; draw 2nd half of simple quote (')
77FE DD 36 03 0A 10 215 ld      (ix+3), %00001010           ; draw 2nd half of double quotes (")
7802 DD 26 59    10 216 ld      ixh, $59                    ; move IX to the attribute address
7805 DD 36 00 07 10 217 ld      (ix+0), WHITE               ; color simple quote
7809 DD 36 03 07 10 218 ld      (ix+3), WHITE               ; color double quotes
780D C9          10 219 ret
780E             10 221 ; ----------------------------------------------------------------------------------------------------------------------
780E             10 222 ; Screen_Color_Statics: apply color to some statics items of the screen
780E             10 223 ;
780E             10 224 ; Input:    -
780E             10 225 ;
780E             10 226 ; Output:   -
780E             10 227 ;
780E             10 228 ; Destroys: BC, IX
780E             10 229 ; ----------------------------------------------------------------------------------------------------------------------
780E             10 230 Screen_Color_Statics:
780E DD 21 78 58 10 231 ld      ix, $5878                   ; IX points to the attr. address of the cyan player timer
7812 0E 07       10 232 ld      c, WHITE                    ; set color in C
7814 CD 3E 78    10 233 call    Screen_Apply_Color_6        ; apply color
7817 DD 2E 98    10 234 ld      ixl, $98                    ; IX points to the attr. address of the cyan player name
781A 0E 05       10 235 ld      c, CYAN_COLOR               ; set color in C
781C CD 3E 78    10 236 call    Screen_Apply_Color_6        ; apply color
781F DD 21 18 59 10 237 ld      ix, $5918                   ; IX points to the attr. address of the cyan player messages
7823 0E 47       10 238 ld      c, WHITE+BRIGHT             ; set color in C
7825 CD 3E 78    10 239 call    Screen_Apply_Color_6        ; apply color
7828 DD 2E E2    10 240 ld      ixl, $E2                    ; IX points to the attr. address of the red player timer
782B 0E 07       10 241 ld      c, WHITE                    ; set color in C
782D CD 3E 78    10 242 call    Screen_Apply_Color_6        ; apply color
7830 DD 21 02 5A 10 243 ld      ix, $5A02                   ; IX points to the attr. address of the red player name
7834 0E 02       10 244 ld      c, RED_COLOR                ; set color in C
7836 CD 3E 78    10 245 call    Screen_Apply_Color_6        ; apply color
7839 DD 2E 82    10 246 ld      ixl, $82                    ; IX points to the attr. address of the red player messages
783C 0E 47       10 247 ld      c, WHITE+BRIGHT             ; set color in C
783E             10 248 Screen_Apply_Color_6:
783E 06 06       10 249 ld      b, 6                        ; number of bytes to be colored (loop counter)
7840             10 250 ; ----------------------------------------------------------------------------------------------------------------------
7840             10 251 ; Screen_Apply_Color: apply color to a screen area
7840             10 252 ;
7840             10 253 ; Input:    B  = area length
7840             10 254 ;           C  = color attribute to apply
7840             10 255 ;           IX = attribute's area address
7840             10 256 ;
7840             10 257 ; Output:   -
7840             10 258 ;
7840             10 259 ; Destroys: B, IX
7840             10 260 ; ----------------------------------------------------------------------------------------------------------------------
7840             10 261 Screen_Apply_Color:
7840 DD 71 00    10 262 ld      (ix+0), c                   ; apply color
7843 DD 2C       10 263 inc     ixl                         ; move IX to the next attribute address
7845 10 F9       10 264 djnz    Screen_Apply_Color          ; repeat for each byte
7847 C9          10 265 ret
7848             10 267 ; ----------------------------------------------------------------------------------------------------------------------
7848             10 268 ; Screen_Last_Level: show last level screen and input game level
7848             10 269 ;
7848             10 270 ; Input:    -
7848             10 271 ;
7848             10 272 ; Output:   -
7848             10 273 ;
7848             10 274 ; Uses:     GAME_LEVEL (current game level)
7848             10 275 ;
7848             10 276 ; Destroys: A, BC, DE, HL, IX, IY
7848             10 277 ; ----------------------------------------------------------------------------------------------------------------------
7848             10 278 Screen_Last_Level:
7848 11 FF 67    10 279 ld      de, STR_PRESSKEY            ; DE points to "Press any key" string address
784B 21 AD 50    10 280 ld      hl, $50AD                   ; HL points to string screen address
784E CD 21 6F    10 281 call    Print_String                ; print "Press any key"
7851 DD 21 AD 5A 10 282 ld      ix, $5AAD                   ; IX points to string attributes address
7855 01 38 0D    10 283 ld      bc, 13*256+WHITE_PAPER      ; B = string length (loop counter), C = color attributes
7858 CD 40 78    10 284 call    Screen_Apply_Color          ; apply color to string area
785B CD 88 6E    10 285 call    Input_Key_Scan              ; wait for a key pressed
785E CD DC 76    10 287 call    Screen_Clear                ; fill in black the whole screen area and attributes area
7861 CD 20 7C    10 288 call    Screen_Hexagons             ; draw menu hexagons ("HEX 2")
7864 DD 21 C7 59 10 289 ld      ix, $59C7                   ; IX points to "CONGRATULATIONS" string attributes address
7868 01 C7 11    10 290 ld      bc, 17*256+WHITE_FLASH1     ; B = string length (loop counter), C = color attributes
786B CD 40 78    10 291 call    Screen_Apply_Color          ; apply color to string area
786E 11 77 68    10 292 ld      de, STR_CONGRATS            ; DE points to string address
7871 21 C7 48    10 293 ld      hl, $48C7                   ; HL points to string screen address
7874 CD 21 6F    10 294 call    Print_String                ; print "CONGRATULATIONS"
7877 DD 21 EF 64 10 295 ld      ix, WINNER_FX               ; IX points to winner tone parameters address
787B CD 9A 76    10 296 call    Sound_FX                    ; play sound fx
787E F3          10 298 di                                  ; disable interrupts
787F DD 21 42 5A 10 299 ld      ix, $5A42                   ; IX points to "Well done!..." string attributes address
7883 01 07 1C    10 300 ld      bc, 28*256+WHITE            ; B = string length (loop counter), C = color attributes
7886 CD 40 78    10 301 call    Screen_Apply_Color          ; apply color to string area
7889 11 89 68    10 302 ld      de, STR_LAST_LEVEL          ; DE points to string address
788C 21 42 50    10 303 ld      hl, $5042                   ; HL points to string screen address
788F CD 21 6F    10 304 call    Print_String                ; print "Well done!..."
7892 DD 2E 82    10 305 ld      ixl, $82                    ; IX points to "Choose..." string attributes address
7895 06 18       10 306 ld      b, 24                       ; string length-4 (loop counter)
7897 CD 40 78    10 307 call    Screen_Apply_Color          ; apply color to string area
789A DD 36 01 78 10 308 ld      (ix+1), WHITE_PAPER+BRIGHT  ; set color for last characters ("1-4")
789E DD 36 02 78 10 309 ld      (ix+2), WHITE_PAPER+BRIGHT
78A2 DD 36 03 78 10 310 ld      (ix+3), WHITE_PAPER+BRIGHT
78A6 13          10 311 inc     de                          ; move DE to next string address
78A7 2E 82       10 312 ld      l, $82                      ; HL points to string screen address
78A9 CD 21 6F    10 313 call    Print_String                ; print "Choose..."
78AC             10 314 Screen_Choose_Level
78AC CD 88 6E    10 315 call    Input_Key_Scan              ; wait for a key pressed
78AF FE 31       10 316 cp      '1'                         ; is it < '1' ?
78B1 38 F9       10 317 jr      c, Screen_Choose_Level      ; yes, wait for a key pressed
78B3 FE 35       10 318 cp      '5'                         ; is it >= '5' ?
78B5 30 F5       10 319 jr      nc, Screen_Choose_Level     ; yes, wait for a key pressed
78B7 D6 31       10 320 sub     $31                         ; convert ASCII into level number (-1)
78B9 21 9D 61    10 321 ld      hl, GAME_LEVEL              ; HL points to game level address
78BC 77          10 322 ld      (hl), a                     ; save chosen game level (-1)
78BD C9          10 323 ret
78BE             10 325 ; ----------------------------------------------------------------------------------------------------------------------
78BE             10 326 ; Screen_ThreeRow: color the three-in-a-row marks according to the current three row counter
78BE             10 327 ;
78BE             10 328 ; Input:    HL = three-in-a-row counter address
78BE             10 329 ;
78BE             10 330 ; Output:   -
78BE             10 331 ;
78BE             10 332 ; Uses:     LEVEL_COLOR (current level color for frame border)
78BE             10 333 ;
78BE             10 334 ; Destroys: A, C, IX
78BE             10 335 ; ----------------------------------------------------------------------------------------------------------------------
78BE             10 336 Screen_ThreeRow:
78BE CD DA 78    10 337 call    Screen_Clear_ThreeRow       ; clear all three-in-a-row marks
78C1 7E          10 338 ld      a, (hl)                     ; A = three-in-a-row counter
78C2 B7          10 339 or      a                           ; is it 0?
78C3 C8          10 340 ret     z                           ; yes, return
78C4 E5          10 342 push    hl                          ; store three-in-a-row counter address
78C5 21 9C 61    10 344 ld      hl, LEVEL_COLOR             ; HL points to level color address
78C8 4E          10 345 ld      c, (hl)                     ; save level color in C
78C9 3D          10 346 dec     a                           ; is it 1?
78CA 28 09       10 347 jr      z, Screen_ThreeRow_1        ; yes, color first mark
78CC 3D          10 348 dec     a                           ; is it 2?
78CD 28 03       10 349 jr      z, Screen_ThreeRow_2        ; yes color 2nd and 1st marks
78CF DD 71 00    10 350 ld      (ix+0), c                   ; color 3rd mark
78D2             10 351 Screen_ThreeRow_2
78D2 DD 71 01    10 352 ld      (ix+1), c                   ; color 2nd mark
78D5             10 353 Screen_ThreeRow_1
78D5 DD 71 02    10 354 ld      (ix+2), c                   ; color 1st mark
78D8 E1          10 356 pop     hl
78D9 C9          10 357 ret
78DA             10 359 ; ----------------------------------------------------------------------------------------------------------------------
78DA             10 360 ; Screen_Clear_ThreeRow: clear all three-in-a-row marks
78DA             10 361 ;
78DA             10 362 ; Input:    -
78DA             10 363 ;
78DA             10 364 ; Output:   IX = three-in-a-row marks attribute address
78DA             10 365 ;
78DA             10 366 ; Destroys: -
78DA             10 367 ; ----------------------------------------------------------------------------------------------------------------------
78DA             10 368 Screen_Clear_ThreeRow:
78DA DD 21 F2 5A 10 369 ld      ix, $5AF2                   ; IX points to attribute address of three-in-a-row marks
78DE DD 36 00 01 10 370 ld      (ix+0), BLUE_INK            ; clear all three-in-a-row marks
78E2 DD 36 01 01 10 371 ld      (ix+1), BLUE_INK
78E6 DD 36 02 01 10 372 ld      (ix+2), BLUE_INK
78EA C9          10 373 ret
78EB             10 375 ; ----------------------------------------------------------------------------------------------------------------------
78EB             10 376 ; Screen_Frame_Color: set up frame color and print level number depending on current level
78EB             10 377 ;
78EB             10 378 ; Input:    HL = game level address
78EB             10 379 ;
78EB             10 380 ; Output:   -
78EB             10 381 ;
78EB             10 382 ; Uses:     LEVEL_COLOR (current level color for frame border)
78EB             10 383 ;
78EB             10 384 ; Destroys: A, BC, DE, HL
78EB             10 385 ; ----------------------------------------------------------------------------------------------------------------------
78EB             10 386 Screen_Frame_Color:
78EB 06 00       10 387 ld      b, 0                        ; set game level in BC
78ED 4E          10 388 ld      c, (hl)
78EE 3E 30       10 389 ld      a, $30                      ; convert game level number to game level character
78F0 81          10 390 add     a, c
78F1 21 0F 40    10 391 ld      hl, $400F                   ; HL points to screen address of game level
78F4 CD 2E 6F    10 392 call    Print_Char                  ; print game level
78F7 21 0E 62    10 393 ld      hl, ROW_COLOR_MAP-1         ; HL points to color map address (adjusted for index 0)
78FA 09          10 394 add     hl, bc                      ; use BC as index for color map address
78FB 7E          10 395 ld      a, (hl)                     ; A = level color
78FC CD 11 79    10 396 call    Screen_Tiles_Color          ; color the frame according to the current level
78FF E6 07       10 397 and     %00000111                   ; mask color
7901 32 9C 61    10 398 ld      (LEVEL_COLOR), a            ; save masked color
7904 17          10 399 rla                                 ; rotate to text level color
7905 17          10 400 rla
7906 17          10 401 rla
7907 21 08 58    10 402 ld      hl, $5808                   ; HL points to attribute address of level text
790A 06 09       10 403 ld      b, 9                        ; length of level text (loop counter)
790C             10 404 Screen_Level_Loop
790C 77          10 405 ld      (hl), a                     ; apply color to level text
790D 2C          10 406 inc     l                           ; HL points to attr address of next character of level text
790E 10 FC       10 407 djnz    Screen_Level_Loop           ; repeat for each character of level text
7910 C9          10 408 ret
7911             10 410 ; ----------------------------------------------------------------------------------------------------------------------
7911             10 411 ; Screen_Tiles_Color: apply color to the frame tiles
7911             10 412 ;
7911             10 413 ; Input:    A = color to apply
7911             10 414 ;
7911             10 415 ; Output:   -
7911             10 416 ;
7911             10 417 ; Destroys: BC, DE, HL
7911             10 418 ; ----------------------------------------------------------------------------------------------------------------------
7911             10 419 Screen_Tiles_Color:
7911             10 420 ; color up row
7911 21 01 58    10 422 ld      hl, $5801                   ; HL points to attribute address of the the frame tile 
7914 06 06       10 423 ld      b, 6                        ; number of tiles (loop counter)
7916             10 424 Screen_Tiles_URow1
7916 77          10 425 ld      (hl), a                     ; apply color
7917 2C          10 426 inc     l                           ; move HL to the next attribute address
7918 10 FC       10 427 djnz    Screen_Tiles_URow1          ; repeat for each tile
791A 2E 12       10 428 ld      l, $12                      ; move HL to the next attribute address
791C 06 0D       10 429 ld      b, 13                       ; number of tiles (loop counter)
791E             10 430 Screen_Tiles_URow2
791E 77          10 431 ld      (hl), a                     ; apply color
791F 2C          10 432 inc     l                           ; move HL to the next attribute address
7920 10 FC       10 433 djnz    Screen_Tiles_URow2          ; repeat for each tile
7922             10 435 ; color vertical bars
7922 2E 00       10 437 ld      l, 0                        ; move HL to the next attribute address
7924 11 1F 00    10 438 ld      de, 31                      ; attribute address displacement (for each bar)
7927 0E 03       10 439 ld      c, 3                        ; number of screen thirds (outer loop counter)
7929             10 440 Screen_Tiles_VBar1
7929 06 08       10 441 ld      b, 8                        ; number of tiles (inner loop counter)
792B             10 442 Screen_Tiles_VBar2
792B 77          10 443 ld      (hl), a                     ; apply color
792C 19          10 444 add     hl, de                      ; move HL to the right column
792D 77          10 445 ld      (hl), a                     ; apply color
792E 2C          10 446 inc     l                           ; move HL to the next attribute address
792F 10 FA       10 447 djnz    Screen_Tiles_VBar2          ; repeat for each tile
7931 24          10 448 inc     h                           ; move HL to the next screen third
7932 0D          10 449 dec     c                           ; decrement number of thirds
7933 20 F4       10 450 jr      nz, Screen_Tiles_VBar1      ; repeat for each third
7935             10 452 ; color bottom row
7935 21 E1 5A    10 454 ld      hl, $5AE1                   ; HL points to attribute address of the the frame tile
7938 06 10       10 455 ld      b, 16                       ; number of tiles (loop counter)
793A             10 456 Screen_Tiles_BRow1
793A 77          10 457 ld      (hl), a                     ; apply color
793B 2C          10 458 inc     l                           ; move HL to the next attribute address
793C 10 FC       10 459 djnz    Screen_Tiles_BRow1          ; repeat for each tile
793E 2E F6       10 460 ld      l, $F6                      ; move HL to the next attribute address
7940 06 09       10 461 ld      b, 9                        ; number of tiles (loop counter)
7942             10 462 Screen_Tiles_BRow2
7942 77          10 463 ld      (hl), a                     ; apply color
7943 2C          10 464 inc     l                           ; move HL to the next attribute address
7944 10 FC       10 465 djnz    Screen_Tiles_BRow2          ; repeat for each tile
7946 C9          10 466 ret
7947             10 468 ; ----------------------------------------------------------------------------------------------------------------------
7947             10 469 ; Screen_Menu: show main menu and wait for an option
7947             10 470 ;
7947             10 471 ; Input:    -
7947             10 472 ;
7947             10 473 ; Output:   -
7947             10 474 ;
7947             10 475 ; Uses:     GAME_LEVEL (current game level)
7947             10 476 ;
7947             10 477 ; Destroys: A, BC, DE, HL, IX, IY
7947             10 478 ; ----------------------------------------------------------------------------------------------------------------------
7947             10 479 Screen_Menu:
7947 CD DC 76    10 480 call    Screen_Clear                ; fill in black the whole screen area and attributes area
794A CD 20 7C    10 481 call    Screen_Hexagons             ; draw menu hexagons ("HEX 2")
794D             10 482 Screen_Menu_Strings
794D DD 21 CA 59 10 483 ld      ix, $59CA                   ; IX points to "Start new game" string attr. address (+1)
7951 DD 36 FF 78 10 484 ld      (ix-1), WHITE_PAPER+BRIGHT  ; set color of first letter
7955 01 47 0D    10 485 ld      bc, 13*256+WHITE_FLASH0     ; B = string length-1 (loop counter), C = color attributes
7958 CD 40 78    10 486 call    Screen_Apply_Color          ; apply color to string area
795B 11 80 67    10 487 ld      de, STR_OPTIONS             ; DE points to string address
795E 21 C9 48    10 488 ld      hl, $48C9                   ; HL points to string screen address
7961 CD 21 6F    10 489 call    Print_String                ; print "Start new game"
7964 DD 21 2A 5A 10 490 ld      ix, $5A2A                   ; IX points to "How to play" string attributes address (+1)
7968 DD 36 FF 78 10 491 ld      (ix-1), WHITE_PAPER+BRIGHT  ; set color of first letter
796C 06 0A       10 492 ld      b, 10                       ; string length-1 (loop counter)
796E CD 40 78    10 493 call    Screen_Apply_Color          ; apply color to string area
7971 13          10 494 inc     de                          ; move DE to "How to play" string address
7972 21 29 50    10 495 ld      hl, $5029                   ; HL points to string screen address
7975 CD 21 6F    10 496 call    Print_String                ; print "How to play"
7978 DD 2E 8A    10 497 ld      ixl, $8A                    ; IX points to "Credits" string attributes address (+1)
797B DD 36 FF 78 10 498 ld      (ix-1), WHITE_PAPER+BRIGHT  ; set color of first letter
797F CD 3E 78    10 499 call    Screen_Apply_Color_6        ; apply color to string area
7982 13          10 500 inc     de                          ; move DE to "Credits" string address
7983 2E 89       10 501 ld      l, $89                      ; HL points to string screen address
7985 CD 21 6F    10 502 call    Print_String                ; print "Credits"
7988             10 503 Screen_Menu_Options
7988 CD 88 6E    10 504 call    Input_Key_Scan              ; wait for a key pressed
798B FE 73       10 505 cp      's'                         ; is it 's'?
798D C8          10 506 ret     z                           ; yes, return
798E FE 63       10 507 cp      'c'                         ; is it 'c'?
7990 CA A4 7B    10 508 jp      z, Screen_Menu_Credits      ; yes, show credits
7993 FE 68       10 509 cp      'h'                         ; is it 'h'?
7995 20 F1       10 510 jr      nz, Screen_Menu_Options     ; no, repeat until key pressed = 's' or 'c' or 'h'
7997             10 512 ; ----------------------------------------------------------------------------------------------------------------------
7997             10 513 ; Show "How to play" pages
7997             10 514 ; ----------------------------------------------------------------------------------------------------------------------
7997             10 515 Screen_Menu_How2Play
7997 CD DC 76    10 516 call    Screen_Clear                ; fill in black the whole screen area and attributes area
799A CD E9 76    10 517 call    Screen_Letters              ; draw the two rows of letters on the screen (a..g)
799D CD 15 77    10 518 call    Screen_Numbers              ; draw the two columns of numbers on the screen (1..7)
79A0 CD 54 77    10 519 call    Screen_Frame                ; draw the screen frame
79A3 21 9D 61    10 521 ld      hl, GAME_LEVEL              ; HL points to game level address (needed for color frame)
79A6 34          10 522 inc     (hl)                        ; increment game level (GAME_LEVEL = 1)
79A7 CD EB 78    10 523 call    Screen_Frame_Color          ; set up frame color depending on current level
79AA CD DA 78    10 524 call    Screen_Clear_ThreeRow       ; clear all three-in-a-row marks
79AD 11 0D 68    10 526 ld      de, STR_BUTTONS             ; DE points to "Next" string address
79B0 21 DB 50    10 527 ld      hl, $50DB                   ; HL points to string screen address
79B3 CD 21 6F    10 528 call    Print_String                ; print "Next"
79B6 13          10 529 inc     de                          ; move DE to "Back" string address
79B7 21 C1 50    10 530 ld      hl, $50C1                   ; HL points to string screen address
79BA CD 21 6F    10 531 call    Print_String                ; print "Back"
79BD             10 533 Screen_How2Play_RED
79BD 21 5E 58    10 534 ld      hl, $5876-24                ; HL points to cyan text area attributes address (-24)
79C0 CD 5A 7C    10 535 call    Screen_Clear_Text           ; clear text area attributes
79C3 CD 65 6D    10 536 call    Draw_Board                  ; draw an empty hexagons board
79C6             10 538 ; text for RED
79C6 DD 21 01 5A 10 540 ld      ix, $5A01                   ; IX points to "Connect" string attributes address
79CA 01 07 07    10 541 ld      bc, 7*256+WHITE             ; B = string length (loop counter), C = color attributes
79CD CD 40 78    10 542 call    Screen_Apply_Color          ; apply color to string area
79D0 11 20 68    10 543 ld      de, STR_HELP1               ; DE points to string address
79D3 21 01 50    10 544 ld      hl, $5001                   ; HL points to string screen address
79D6 CD 21 6F    10 545 call    Print_String                ; print "Connect"
79D9 DD 2E 21    10 546 ld      ixl, $21                    ; IX points to "left and" string attributes address
79DC 06 08       10 547 ld      b, 8                        ; string length (loop counter)
79DE CD 40 78    10 548 call    Screen_Apply_Color          ; apply color to string area
79E1 13          10 549 inc     de                          ; move DE to "left and" string address
79E2 2E 21       10 550 ld      l, $21                      ; HL points to string screen address
79E4 CD 21 6F    10 551 call    Print_String                ; print "left and"
79E7 DD 2E 41    10 552 ld      ixl, $41                    ; IX points to "right" string attributes address
79EA 06 05       10 553 ld      b, 5                        ; set string length (loop counter)
79EC CD 40 78    10 554 call    Screen_Apply_Color          ; apply color to string area
79EF 11 38 68    10 555 ld      de, STR_HELP3_RED           ; DE points to "right" string address
79F2 2E 41       10 556 ld      l, $41                      ; HL points to string screen address
79F4 CD 21 6F    10 557 call    Print_String                ; print "right"
79F7 DD 2E 61    10 558 ld      ixl, $61                    ; IX points to "borders" string attributes address
79FA 06 07       10 559 ld      b, 7                        ; set string length (loop counter)
79FC CD 40 78    10 560 call    Screen_Apply_Color          ; apply color to string area
79FF 11 43 68    10 561 ld      de, STR_HELP4               ; DE points to "borders" string address
7A02 2E 61       10 562 ld      l, $61                      ; HL points to string screen address
7A04 CD 21 6F    10 563 call    Print_String                ; print "borders"
7A07 DD 2E 81    10 564 ld      ixl, $81                    ; IX points to "to win" string attributes address
7A0A CD 3E 78    10 565 call    Screen_Apply_Color_6        ; apply color to string area
7A0D 13          10 566 inc     de                          ; move DE to "to win" string address
7A0E 2E 81       10 567 ld      l, $81                      ; HL points to string screen address
7A10 CD 21 6F    10 568 call    Print_String                ; print "to win"
7A13 DD 21 E3 59 10 569 ld      ix, $59E3                   ; IX points to "RED" string attributes address
7A17 01 42 03    10 570 ld      bc, 3*256+RED_COLOR+BRIGHT  ; B = string length (loop counter), C = color attributes
7A1A CD 40 78    10 571 call    Screen_Apply_Color          ; apply color to string area
7A1D 11 17 68    10 572 ld      de, STR_RED                 ; DE points to "RED" string address
7A20 21 E3 48    10 573 ld      hl, $48E3                   ; HL points to string screen address
7A23 CD 21 6F    10 574 call    Print_String                ; print "RED"
7A26             10 576 ; draw RED sample board
7A26 FD 21 3A 67 10 578 ld      iy, SAMPLE_BOARD_RED        ; IY points to sample board (red) screen addresses
7A2A 11 3E 66    10 579 ld      de, HEXAGON_TOKEN           ; DE points to token sprite address
7A2D 06 07       10 580 ld      b, 7                        ; number of red+bright tokens (loop counter)
7A2F 3E 42       10 581 ld      a, RED_COLOR+BRIGHT         ; set token color
7A31 32 9E 61    10 582 ld      (TOKEN_COLOR), a            ; save token color
7A34 CD 45 7C    10 583 call    Screen_Hexagons_Loop        ; draw tokens
7A37 06 02       10 584 ld      b, 2                        ; number of red tokens (loop counter)
7A39 3E 02       10 585 ld      a, RED_COLOR                ; set token color
7A3B 32 9E 61    10 586 ld      (TOKEN_COLOR), a            ; save token color
7A3E CD 45 7C    10 587 call    Screen_Hexagons_Loop        ; draw tokens
7A41 06 09       10 588 ld      b, 9                        ; number of cyan tokens (loop counter)
7A43 3E 05       10 589 ld      a, CYAN_COLOR               ; set token color
7A45 32 9E 61    10 590 ld      (TOKEN_COLOR), a            ; save token color
7A48 CD 45 7C    10 591 call    Screen_Hexagons_Loop        ; draw tokens
7A4B             10 593 ; wait for "Next" option pressed
7A4B DD 21 C1 5A 10 595 ld      ix, $5AC1                   ; IX points to "Back" string attribute address
7A4F 01 00 04    10 596 ld      bc, $0400                   ; B = string length (loop counter), C = attributes (black)
7A52 CD 40 78    10 597 call    Screen_Apply_Color          ; hide "Back" string
7A55 DD 2E DC    10 598 ld      ixl, $DC                    ; IX points to "Next" string attribute address (+1)
7A58 DD 36 FF 78 10 599 ld      (ix-1), WHITE_PAPER+BRIGHT  ; set color of first letter
7A5C 01 47 03    10 600 ld      bc, 3*256+WHITE_FLASH0      ; B = string length-1 (loop counter), C = color attributes
7A5F CD 40 78    10 601 call    Screen_Apply_Color          ; apply color to string area
7A62             10 602 Screen_How2PlayRED_End
7A62 CD 88 6E    10 603 call    Input_Key_Scan              ; wait for a key pressed
7A65 FE 6E       10 604 cp      'n'                         ; is it 'n'?
7A67 20 F9       10 605 jr      nz, Screen_How2PlayRED_End  ; no, repeat until key pressed = 'n'
7A69             10 607 Screen_How2Play_CYAN
7A69 21 0F 58    10 608 ld      hl, $580F                   ; HL points to level number attribute address
7A6C CB BE       10 609 res     7, (hl)                     ; reset flash attribute
7A6E 26 40       10 610 ld      h, $40                      ; HL points to level number screen address
7A70 3E 31       10 611 ld      a, '1'                      ; set level number (char)
7A72 CD 2E 6F    10 612 call    Print_Char                  ; print '1'
7A75 CD DA 78    10 613 call    Screen_Clear_ThreeRow       ; clear all three-in-a-row marks
7A78 21 C9 59    10 615 ld      hl, $59E1-24                ; HL points to red text area attributes address (-24)
7A7B CD 5A 7C    10 616 call    Screen_Clear_Text           ; clear text area attributes
7A7E CD 65 6D    10 617 call    Draw_Board                  ; draw an empty hexagons board
7A81             10 619 ; text for CYAN
7A81 DD 21 98 58 10 621 ld      ix, $5898                   ; IX points to "Connect" string attributes address
7A85 01 07 07    10 622 ld      bc, 7*256+WHITE             ; B = string length (loop counter), C = color attributes
7A88 CD 40 78    10 623 call    Screen_Apply_Color          ; apply color to string area
7A8B 11 20 68    10 624 ld      de, STR_HELP1               ; DE points to "Connect" string address
7A8E 21 98 40    10 625 ld      hl, $4098                   ; HL points to string screen address
7A91 CD 21 6F    10 626 call    Print_String                ; print "Connect"
7A94 DD 2E B9    10 627 ld      ixl, $B9                    ; IX points to "up and" string attributes address
7A97 CD 3E 78    10 628 call    Screen_Apply_Color_6        ; apply color to string area
7A9A 11 31 68    10 629 ld      de, STR_HELP2_CYAN          ; DE points to "up and" string address
7A9D 2E B9       10 630 ld      l, $B9                      ; HL points to string screen address
7A9F CD 21 6F    10 631 call    Print_String                ; print "up and"
7AA2 DD 2E DB    10 632 ld      ixl, $DB                    ; IX points to "down" string attributes address
7AA5 06 04       10 633 ld      b, 4                        ; string length (loop counter)
7AA7 CD 40 78    10 634 call    Screen_Apply_Color          ; apply color to string area
7AAA 11 3E 68    10 635 ld      de, STR_HELP3_CYAN          ; DE points to "down" string address
7AAD 2E DB       10 636 ld      l, $DB                      ; HL points to string screen address
7AAF CD 21 6F    10 637 call    Print_String                ; print "down"
7AB2 DD 2E F8    10 638 ld      ixl, $F8                    ; IX points to "borders" string attributes address
7AB5 06 07       10 639 ld      b, 7                        ; string length (loop counter)
7AB7 CD 40 78    10 640 call    Screen_Apply_Color          ; apply color to string area
7ABA 13          10 641 inc     de                          ; move DE to "borders" string address
7ABB 2E F8       10 642 ld      l, $F8                      ; HL points to string screen address
7ABD CD 21 6F    10 643 call    Print_String                ; print "borders"
7AC0 DD 21 19 59 10 644 ld      ix, $5919                   ; IX points to "to win" string attributes address
7AC4 CD 3E 78    10 645 call    Screen_Apply_Color_6        ; apply color to string area
7AC7 13          10 646 inc     de                          ; move DE to "to win" string address
7AC8 21 19 48    10 647 ld      hl, $4819                   ; HL points to string screen address
7ACB CD 21 6F    10 648 call    Print_String                ; print "to win"
7ACE DD 21 7A 58 10 649 ld      ix, $587A                   ; IX points to "CYAN" string attributes address
7AD2 01 45 04    10 650 ld      bc, $0445                   ; B = string length (loop counter)
7AD5             10 651 ; C = color attributes (cyan+bright)
7AD5 CD 40 78    10 652 call    Screen_Apply_Color          ; apply color to string area
7AD8 11 1B 68    10 653 ld      de, STR_CYAN                ; DE points to "CYAN" string address
7ADB 21 7A 40    10 654 ld      hl, $407A                   ; HL points to string screen address
7ADE CD 21 6F    10 655 call    Print_String                ; print "CYAN"
7AE1             10 657 ; draw CYAN sample board
7AE1 FD 21 5E 67 10 659 ld      iy, SAMPLE_BOARD_CYAN       ; IY points to sample board (cyan) screen addresses
7AE5 11 3E 66    10 660 ld      de, HEXAGON_TOKEN           ; DE points to token sprite address
7AE8 06 07       10 661 ld      b, 7                        ; number of cyan+bright tokens (loop counter)
7AEA 3E 45       10 662 ld      a, CYAN_COLOR+BRIGHT        ; set token color
7AEC 32 9E 61    10 663 ld      (TOKEN_COLOR), a            ; save token color
7AEF CD 45 7C    10 664 call    Screen_Hexagons_Loop        ; draw tokens
7AF2 06 02       10 665 ld      b, 2                        ; number of cyan tokens (loop counter)
7AF4 3E 05       10 666 ld      a, CYAN_COLOR               ; set token color
7AF6 32 9E 61    10 667 ld      (TOKEN_COLOR), a            ; save token color
7AF9 CD 45 7C    10 668 call    Screen_Hexagons_Loop        ; draw tokens
7AFC 06 08       10 669 ld      b, 8                        ; number of red tokens (loop counter)
7AFE 3E 02       10 670 ld      a, RED_COLOR                ; set token color
7B00 32 9E 61    10 671 ld      (TOKEN_COLOR), a            ; save token color
7B03 CD 45 7C    10 672 call    Screen_Hexagons_Loop        ; draw tokens
7B06             10 674 ; wait for "Next" or "Back" options pressed
7B06 DD 21 C2 5A 10 676 ld      ix, $5AC2                   ; IX points to "Back" string attributes address (+1)
7B0A DD 36 FF 78 10 677 ld      (ix-1), WHITE_PAPER+BRIGHT  ; set color of first letter
7B0E 01 47 03    10 678 ld      bc, 3*256+WHITE_FLASH0      ; B = string length (-1), C = color attributes
7B11 CD 40 78    10 679 call    Screen_Apply_Color          ; apply color to string area
7B14             10 680 Screen_How2PlayCYAN_End
7B14 CD 88 6E    10 681 call    Input_Key_Scan              ; wait for a key pressed
7B17 FE 62       10 682 cp      'b'                         ; is it 'b'?
7B19 CA BD 79    10 683 jp      z, Screen_How2Play_RED      ; yes, show RED page
7B1C FE 6E       10 684 cp      'n'                         ; is it 'n'?
7B1E 20 F4       10 685 jr      nz, Screen_How2PlayCYAN_End ; no, repeat until key pressed = 'n' or 'b'
7B20             10 687 Screen_How2Play_LevelUp
7B20 21 5E 58    10 688 ld      hl, $5876-24                ; HL points to cyan text area attributes address (-24)
7B23 CD 5A 7C    10 689 call    Screen_Clear_Text           ; clear text area attributes
7B26             10 691 ; text for Level Up
7B26 DD 21 21 5A 10 693 ld      ix, $5A21                   ; IX points to "Win three" string attributes address
7B2A 01 07 09    10 694 ld      bc, 9*256+WHITE             ; B = string length (loop counter), C = color attributes
7B2D CD 40 78    10 695 call    Screen_Apply_Color          ; apply color to string area
7B30 11 52 68    10 696 ld      de, STR_HELP                ; DE points to "Win three" string address
7B33 21 21 50    10 697 ld      hl, $5021                   ; HL points to string screen address
7B36 CD 21 6F    10 698 call    Print_String                ; print "Win three"
7B39 DD 2E 41    10 699 ld      ixl, $41                    ; IX points to "times in" string attributes address
7B3C 06 08       10 700 ld      b, 8                        ; string length (loop counter)
7B3E CD 40 78    10 701 call    Screen_Apply_Color          ; apply color to string area
7B41 13          10 702 inc     de                          ; move DE to "times in" string address
7B42 2E 41       10 703 ld      l, $41                      ; HL points to string screen address
7B44 CD 21 6F    10 704 call    Print_String                ; print "times in"
7B47 DD 2E 61    10 705 ld      ixl, $61                    ; IX points to "a row to" string attributes address
7B4A 06 08       10 706 ld      b, 8                        ; string length (loop counter)
7B4C CD 40 78    10 707 call    Screen_Apply_Color          ; apply color to string area
7B4F 13          10 708 inc     de                          ; move DE to "a row to" string address
7B50 2E 61       10 709 ld      l, $61                      ; HL points to string screen address
7B52 CD 21 6F    10 710 call    Print_String                ; print "a row to"
7B55 DD 2E 81    10 711 ld      ixl, $81                    ; IX points to "level up" string attributes address
7B58 06 08       10 712 ld      b, 8                        ; string length (loop counter)
7B5A CD 40 78    10 713 call    Screen_Apply_Color          ; apply color to string area
7B5D 13          10 714 inc     de                          ; move DE to "level up" string address
7B5E 2E 81       10 715 ld      l, $81                      ; HL points to string screen address
7B60 CD 21 6F    10 716 call    Print_String                ; print "level up"
7B63             10 718 ; reset bright of cyan tokens
7B63 FD 21 5E 67 10 720 ld      iy, SAMPLE_BOARD_CYAN       ; IY points to sample board (cyan) screen addresses
7B67 11 3E 66    10 721 ld      de, HEXAGON_TOKEN           ; DE points to token sprite address
7B6A 06 07       10 722 ld      b, 7                        ; number of cyan+bright tokens (loop counter)
7B6C 3E 05       10 723 ld      a, CYAN_COLOR               ; set new token color
7B6E 32 9E 61    10 724 ld      (TOKEN_COLOR), a            ; save color
7B71 CD 45 7C    10 725 call    Screen_Hexagons_Loop        ; draw tokens
7B74             10 727 ; set flash attribute of level number and three-in-a-row marks
7B74 21 0F 58    10 729 ld      hl, $580F                   ; HL points to level number attribute address
7B77 CB FE       10 730 set     7, (hl)                     ; set flash attribute
7B79 21 0F 40    10 731 ld      hl, $400F                   ; HL points to level number screen address
7B7C 3E 32       10 732 ld      a, '2'                      ; set new level
7B7E CD 2E 6F    10 733 call    Print_Char                  ; print new level
7B81 DD 21 F2 5A 10 734 ld      ix, $5AF2                   ; IX points to three-in-a-row attribute address
7B85 DD 36 00 B8 10 735 ld      (ix+0), WHITE_PAPER+FLASH   ; set flash attributes
7B89 DD 36 01 B8 10 736 ld      (ix+1), WHITE_PAPER+FLASH
7B8D DD 36 02 B8 10 737 ld      (ix+2), WHITE_PAPER+FLASH
7B91             10 739 ; wait for "Next" or "Back" options pressed
7B91             10 741 Screen_How2Play_End
7B91 CD 88 6E    10 742 call    Input_Key_Scan              ; wait for a key pressed
7B94 FE 62       10 743 cp      'b'                         ; is it 'b'?
7B96 CA 69 7A    10 744 jp      z, Screen_How2Play_CYAN     ; yes, show CYAN page
7B99 FE 6E       10 745 cp      'n'                         ; is it 'n'?
7B9B 20 F4       10 746 jr      nz, Screen_How2Play_End     ; no, repeat until key pressed = 'b' or 'n'
7B9D 21 9D 61    10 748 ld      hl, GAME_LEVEL              ; HL points to game level address
7BA0 35          10 749 dec     (hl)                        ; decrement game level (GAME_LEVEL = 0)
7BA1 C3 47 79    10 750 jp      Screen_Menu                 ; return to main menu
7BA4             10 752 ; ----------------------------------------------------------------------------------------------------------------------
7BA4             10 753 ; Show credits
7BA4             10 754 ; ----------------------------------------------------------------------------------------------------------------------
7BA4             10 755 Screen_Menu_Credits
7BA4 3E 47       10 756 ld      a, WHITE_FLASH0             ; set attribute color
7BA6 CD 13 7C    10 757 call    Screen_Credits_ATTR         ; apply color to credits area
7BA9 11 A3 67    10 759 ld      de, STR_DESIGN              ; DE points to "Design..." string address
7BAC 21 84 48    10 760 ld      hl, $4884                   ; HL points to string screen address
7BAF CD 21 6F    10 761 call    Print_String                ; print "Design..."
7BB2 11 F1 67    10 762 ld      de, STR_ANTONIO             ; move DE to "Antonio Luque" string 
7BB5 CD 21 6F    10 763 call    Print_String                ; print "Antonio Luque"
7BB8 11 B0 67    10 764 ld      de, STR_CODE                ; move DE to "Code..." string address
7BBB 2E C4       10 765 ld      l, $C4                      ; HL points to string screen address
7BBD CD 21 6F    10 766 call    Print_String                ; print "Code..."
7BC0 11 F1 67    10 767 ld      de, STR_ANTONIO             ; move DE to "Antonio Luque" string 
7BC3 CD 21 6F    10 768 call    Print_String                ; print "Antonio Luque"
7BC6 11 E4 67    10 769 ld      de, STR_EMPTY12             ; move DE to Empty12 string
7BC9 2E E4       10 770 ld      l, $E4                      ; HL points to string screen address
7BCB CD 21 6F    10 771 call    Print_String                ; print Empty12 string
7BCE 11 D7 67    10 772 ld      de, STR_EINAR               ; move DE to "Einar Saukas" string address
7BD1 CD 21 6F    10 773 call    Print_String                ; print "Einar Saukas"
7BD4 11 BD 67    10 774 ld      de, STR_FONT                ; move DE to "Font..." string address
7BD7 21 24 50    10 775 ld      hl, $5024                   ; HL points to string screen address
7BDA CD 21 6F    10 776 call    Print_String                ; print "Font..."
7BDD 11 D7 67    10 777 ld      de, STR_EINAR               ; move DE to "Einar Saukas" string address
7BE0 CD 21 6F    10 778 call    Print_String                ; print "Einar Saukas"
7BE3 11 CA 67    10 779 ld      de, STR_GRAPHICS            ; move DE to "Graphics..." string address
7BE6 2E 64       10 780 ld      l, $64                      ; HL points to string screen address
7BE8 CD 21 6F    10 781 call    Print_String                ; print "Graphics..."
7BEB 13          10 782 inc     de                          ; move DE to "Einar Saukas" string address
7BEC CD 21 6F    10 783 call    Print_String                ; print "Einar Saukas"
7BEF 13          10 784 inc     de                          ; move DE to Empty12 string
7BF0 2E 84       10 785 ld      l, $84                      ; HL points to string screen address
7BF2 CD 21 6F    10 786 call    Print_String                ; print Empty12 string
7BF5 13          10 787 inc     de                          ; move DE to "Antonio Luque" string 
7BF6 CD 21 6F    10 788 call    Print_String                ; print "Antonio Luque"
7BF9 DD 21 E9 5A 10 789 ld      ix, $5AE9                   ; IX points to "Press any key" string attributes address
7BFD 01 38 0D    10 790 ld      bc, 13*256+WHITE_PAPER      ; B = string length (loop counter), C = color attributes
7C00 CD 40 78    10 791 call    Screen_Apply_Color          ; apply color to string area
7C03 13          10 792 inc     de                          ; move DE to "Press any key" string address
7C04 2E E9       10 793 ld      l, $E9                      ; HL points to string screen address
7C06 CD 21 6F    10 794 call    Print_String                ; print "Press any key"
7C09 CD 88 6E    10 795 call    Input_Key_Scan              ; wait for a key pressed
7C0C AF          10 797 xor     a                           ; set attribute color (black)
7C0D CD 13 7C    10 798 call    Screen_Credits_ATTR         ; apply color to credits area
7C10 C3 4D 79    10 799 jp      Screen_Menu_Strings         ; return to main menu
7C13             10 801 ; ----------------------------------------------------------------------------------------------------------------------
7C13             10 802 ; Screen_Credits_ATTR: apply an attribute color to credits area
7C13             10 803 ;
7C13             10 804 ; Input:    A = attribute color to apply
7C13             10 805 ;
7C13             10 806 ; Output:   -
7C13             10 807 ;
7C13             10 808 ; Destroys: BC, DE, HL
7C13             10 809 ; ----------------------------------------------------------------------------------------------------------------------
7C13             10 810 Screen_Credits_ATTR:
7C13 21 80 59    10 811 ld      hl, $5980                   ; HL points to start of credits area attributes address
7C16 11 81 59    10 812 ld      de, $5981                   ; DE points to next byte of credits area attributes address
7C19 77          10 813 ld      (hl), a                     ; set first byte of attribute color
7C1A 01 7F 01    10 814 ld      bc, 32*12-1                 ; length of attributes area (-1 already set)
7C1D ED B0       10 815 ldir                                ; fill the rest of attributes color of credits area
7C1F C9          10 816 ret
7C20             10 818 ; ----------------------------------------------------------------------------------------------------------------------
7C20             10 819 ; Screen_Menu_Hexagons: draw menu hexagons on screen
7C20             10 820 ;
7C20             10 821 ; Input:    -
7C20             10 822 ;
7C20             10 823 ; Output:   -
7C20             10 824 ;
7C20             10 825 ; Uses:     TOKEN_COLOR (current token color)
7C20             10 826 ;
7C20             10 827 ; Destroys: A, BC, DE, HL, IX, IY
7C20             10 828 ; ----------------------------------------------------------------------------------------------------------------------
7C20             10 829 Screen_Hexagons:
7C20 FD 21 EA 66 10 830 ld      iy, MENU_HEXAGONS           ; IY points to menu hexagons screen addresses
7C24 3E 07       10 831 ld      a, WHITE                    ; set hexagon color
7C26 32 9E 61    10 832 ld      (TOKEN_COLOR), a            ; save hexagon color
7C29 11 7E 65    10 833 ld      de, HEXAGON_EMPTY           ; DE points to empty hexagon sprite address
7C2C 06 1C       10 834 ld      b, 28                       ; number of empty hexagons (loop counter)
7C2E CD 45 7C    10 835 call    Screen_Hexagons_Loop        ; draw empty hexagons
7C31 3E 05       10 836 ld      a, CYAN_COLOR               ; set token color
7C33 32 9E 61    10 837 ld      (TOKEN_COLOR), a            ; save hexagon color
7C36 11 3E 66    10 838 ld      de, HEXAGON_TOKEN           ; DE points to token sprite address
7C39 06 06       10 839 ld      b, 6                        ; number of cyan tokens (loop counter)
7C3B CD 45 7C    10 840 call    Screen_Hexagons_Loop        ; draw cyan tokens
7C3E 3E 02       10 841 ld      a, RED_COLOR                ; set token color
7C40 32 9E 61    10 842 ld      (TOKEN_COLOR), a            ; save hexagon color
7C43 06 06       10 843 ld      b, 6                        ; number of red tokens (loop counter)
7C45             10 844 Screen_Hexagons_Loop:
7C45 FD 6E 00    10 845 ld      l, (iy+0)                   ; HL points to hexagon/token screen address
7C48 FD 66 01    10 846 ld      h, (iy+1)
7C4B CD D3 6D    10 847 call    Draw_Hexagon_Color          ; apply color to hexagon/token area
7C4E D5          10 848 push    de                          ; store hexagon/token sprite address
7C4F CD A5 6D    10 849 call    Draw_Sprite_Hexagon         ; draw hexagon sprite
7C52 D1          10 850 pop     de                          ; restore hexagon/token sprite address
7C53 FD 23       10 851 inc     iy                          ; move IY to next hexagon/token screen address
7C55 FD 23       10 852 inc     iy
7C57 10 EC       10 853 djnz    Screen_Hexagons_Loop        ; repeat for each hexagon/token
7C59 C9          10 854 ret
7C5A             10 856 ; ----------------------------------------------------------------------------------------------------------------------
7C5A             10 857 ; Screen_Clear_Text: clean a text attributes area
7C5A             10 858 ;
7C5A             10 859 ; Input:    HL = text area attributes address
7C5A             10 860 ;
7C5A             10 861 ; Output:   -
7C5A             10 862 ;
7C5A             10 863 ; Destroys: BC, DE, HL
7C5A             10 864 ; ----------------------------------------------------------------------------------------------------------------------
7C5A             10 865 Screen_Clear_Text:
7C5A 01 30 00    10 866 ld      bc, 8*6                     ; length of attributes area: width x height (in bytes)
7C5D             10 867 Screen_ClearText_Loop
7C5D 11 18 00    10 868 ld      de, 24                      ; displacement for each text row
7C60 19          10 869 add     hl, de                      ; add displacement to text area attributes address
7C61 54          10 870 ld      d, h                        ; DE points to text area attributes address
7C62 5D          10 871 ld      e, l
7C63 36 00       10 872 ld      (hl), 0                     ; set attributes color (black) for 1st byte of current row
7C65 13          10 873 inc     de                          ; move DE to next byte attribute address
7C66 ED A0       10 874 ldi                                 ; set attributes color for the rest of bytes of current row
7C68 ED A0       10 875 ldi
7C6A ED A0       10 876 ldi
7C6C ED A0       10 877 ldi
7C6E ED A0       10 878 ldi
7C70 ED A0       10 879 ldi
7C72 ED A0       10 880 ldi
7C74 ED A0       10 881 ldi
7C76 EA 5D 7C    10 882 jp      pe, Screen_ClearText_Loop   ; repeat for each row
7C79 C9          10 883 ret

; File #0: C:\Users\Antonio\source\repos\Hex\Z80CodeFiles\Hex2.z80asm

7C7A             0 19 ; ----------------------------------------------------------------------------------------------------------------------
7C7A             0 20 ; Credits and acknowledgements:
7C7A             0 21 ;
7C7A             0 22 ; - Einar Saukas and his amazing BRAINIAC: https://spectrumcomputing.co.uk/entry/31171/ZX-Spectrum/BRAINIAC,
7C7A             0 23 ;   PATHFINDER adaptation: https://spectrumcomputing.co.uk/entry/28178/ZX-Spectrum/PATHFINDER, loading screen,
7C7A             0 24 ;   "King+" font and TOKEN graphics.
7C7A             0 25 ; - Greg Surma article: https://gsurma.medium.com/hex-creating-intelligent-opponents-with-minimax-driven-ai-part-1-%CE%B
7C7A             0 26 ;   1-%CE%B2-pruning-cc1df850e5bd
7C7A             0 27 ; - Jack van Rijswijck's thesis: https://webdocs.cs.ualberta.ca/~hayward/theses/jackmsc.pdf
7C7A             0 28 ; - ChibiAkumas lessons: https://www.chibiakumas.com/z80/simplesamples.php#LessonS2
7C7A             0 29 ; - Santiago Romero assembler course: https://wiki.speccy.org/cursos/ensamblador/indice
7C7A             0 30 ;
7C7A             0 31 ; - Special thanks to my wife Sonia.
7C7A             0 32 ; ----------------------------------------------------------------------------------------------------------------------
